
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007068  08007068  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007070  08007070  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  2000007c  080070f4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  080070f4  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e9a  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003308  00000000  00000000  00038f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029caa  00000000  00000000  0003e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001872d  00000000  00000000  00068492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100a2a  00000000  00000000  00080bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001815e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  0018163c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000007c 	.word	0x2000007c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006e94 	.word	0x08006e94

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000080 	.word	0x20000080
 8000234:	08006e94 	.word	0x08006e94

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_CAN1_Init+0x6c>)
 8000544:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000548:	2210      	movs	r2, #16
 800054a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_CAN1_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000558:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_CAN1_Init+0x68>)
 800055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000560:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000564:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000568:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CAN1_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000590:	f001 fc08 	bl	8001da4 <HAL_CAN_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800059a:	f001 f837 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000098 	.word	0x20000098
 80005a8:	40006400 	.word	0x40006400

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_CAN_MspInit+0x8c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d12f      	bne.n	800062e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fe:	2303      	movs	r3, #3
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800060e:	2309      	movs	r3, #9
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_CAN_MspInit+0x94>)
 800061a:	f002 fbd5 	bl	8002dc8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2014      	movs	r0, #20
 8000624:	f002 fb07 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000628:	2014      	movs	r0, #20
 800062a:	f002 fb20 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020c00 	.word	0x40020c00

08000644 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b6c      	ldr	r3, [pc, #432]	; (800080c <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a6b      	ldr	r2, [pc, #428]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b69      	ldr	r3, [pc, #420]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b66      	ldr	r3, [pc, #408]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a65      	ldr	r2, [pc, #404]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b63      	ldr	r3, [pc, #396]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b60      	ldr	r3, [pc, #384]	; (800080c <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a5f      	ldr	r2, [pc, #380]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b5d      	ldr	r3, [pc, #372]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b5a      	ldr	r3, [pc, #360]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a59      	ldr	r2, [pc, #356]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b57      	ldr	r3, [pc, #348]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b54      	ldr	r3, [pc, #336]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a53      	ldr	r2, [pc, #332]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b51      	ldr	r3, [pc, #324]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d2:	4b4e      	ldr	r3, [pc, #312]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a4d      	ldr	r2, [pc, #308]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80006f0:	4847      	ldr	r0, [pc, #284]	; (8000810 <MX_GPIO_Init+0x1cc>)
 80006f2:	f002 fd15 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	4846      	ldr	r0, [pc, #280]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80006fc:	f002 fd10 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4840      	ldr	r0, [pc, #256]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000718:	f002 fb56 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800071c:	2332      	movs	r3, #50	; 0x32
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072c:	230b      	movs	r3, #11
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4838      	ldr	r0, [pc, #224]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000738:	f002 fb46 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800073c:	2386      	movs	r3, #134	; 0x86
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4831      	ldr	r0, [pc, #196]	; (800081c <MX_GPIO_Init+0x1d8>)
 8000758:	f002 fb36 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800075c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4826      	ldr	r0, [pc, #152]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000776:	f002 fb27 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	481e      	ldr	r0, [pc, #120]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000798:	f002 fb16 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007b4:	f002 fb08 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007cc:	f002 fafc 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007ee:	f002 faeb 	bl	8002dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f002 fa1d 	bl	8002c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f002 fa36 	bl	8002c6e <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400
 8000814:	40021800 	.word	0x40021800
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000

08000820 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <fnLEDsErrorState+0x28>)
 800082a:	f002 fc79 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <fnLEDsErrorState+0x28>)
 8000834:	f002 fc74 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <fnLEDsErrorState+0x28>)
 8000840:	f002 fc6e 	bl	8003120 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020400 	.word	0x40020400

0800084c <fnInit>:


//INIT FUNCTION
void fnInit(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000850:	4bc6      	ldr	r3, [pc, #792]	; (8000b6c <fnInit+0x320>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b50      	cmp	r3, #80	; 0x50
 8000856:	f200 82d6 	bhi.w	8000e06 <fnInit+0x5ba>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <fnInit+0x14>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080009a5 	.word	0x080009a5
 8000864:	08000e07 	.word	0x08000e07
 8000868:	08000e07 	.word	0x08000e07
 800086c:	08000e07 	.word	0x08000e07
 8000870:	08000e07 	.word	0x08000e07
 8000874:	080009ed 	.word	0x080009ed
 8000878:	08000e07 	.word	0x08000e07
 800087c:	08000e07 	.word	0x08000e07
 8000880:	08000e07 	.word	0x08000e07
 8000884:	08000e07 	.word	0x08000e07
 8000888:	08000a35 	.word	0x08000a35
 800088c:	08000e07 	.word	0x08000e07
 8000890:	08000e07 	.word	0x08000e07
 8000894:	08000e07 	.word	0x08000e07
 8000898:	08000e07 	.word	0x08000e07
 800089c:	08000e07 	.word	0x08000e07
 80008a0:	08000e07 	.word	0x08000e07
 80008a4:	08000e07 	.word	0x08000e07
 80008a8:	08000e07 	.word	0x08000e07
 80008ac:	08000e07 	.word	0x08000e07
 80008b0:	08000aa3 	.word	0x08000aa3
 80008b4:	08000e07 	.word	0x08000e07
 80008b8:	08000e07 	.word	0x08000e07
 80008bc:	08000e07 	.word	0x08000e07
 80008c0:	08000e07 	.word	0x08000e07
 80008c4:	08000b11 	.word	0x08000b11
 80008c8:	08000e07 	.word	0x08000e07
 80008cc:	08000e07 	.word	0x08000e07
 80008d0:	08000e07 	.word	0x08000e07
 80008d4:	08000e07 	.word	0x08000e07
 80008d8:	08000ba9 	.word	0x08000ba9
 80008dc:	08000e07 	.word	0x08000e07
 80008e0:	08000e07 	.word	0x08000e07
 80008e4:	08000e07 	.word	0x08000e07
 80008e8:	08000e07 	.word	0x08000e07
 80008ec:	08000e07 	.word	0x08000e07
 80008f0:	08000e07 	.word	0x08000e07
 80008f4:	08000e07 	.word	0x08000e07
 80008f8:	08000e07 	.word	0x08000e07
 80008fc:	08000e07 	.word	0x08000e07
 8000900:	08000c17 	.word	0x08000c17
 8000904:	08000e07 	.word	0x08000e07
 8000908:	08000e07 	.word	0x08000e07
 800090c:	08000e07 	.word	0x08000e07
 8000910:	08000e07 	.word	0x08000e07
 8000914:	08000e07 	.word	0x08000e07
 8000918:	08000e07 	.word	0x08000e07
 800091c:	08000e07 	.word	0x08000e07
 8000920:	08000e07 	.word	0x08000e07
 8000924:	08000e07 	.word	0x08000e07
 8000928:	08000c85 	.word	0x08000c85
 800092c:	08000e07 	.word	0x08000e07
 8000930:	08000e07 	.word	0x08000e07
 8000934:	08000e07 	.word	0x08000e07
 8000938:	08000e07 	.word	0x08000e07
 800093c:	08000e07 	.word	0x08000e07
 8000940:	08000e07 	.word	0x08000e07
 8000944:	08000e07 	.word	0x08000e07
 8000948:	08000e07 	.word	0x08000e07
 800094c:	08000e07 	.word	0x08000e07
 8000950:	08000cf3 	.word	0x08000cf3
 8000954:	08000e07 	.word	0x08000e07
 8000958:	08000e07 	.word	0x08000e07
 800095c:	08000e07 	.word	0x08000e07
 8000960:	08000e07 	.word	0x08000e07
 8000964:	08000e07 	.word	0x08000e07
 8000968:	08000e07 	.word	0x08000e07
 800096c:	08000e07 	.word	0x08000e07
 8000970:	08000e07 	.word	0x08000e07
 8000974:	08000e07 	.word	0x08000e07
 8000978:	08000d61 	.word	0x08000d61
 800097c:	08000e07 	.word	0x08000e07
 8000980:	08000e07 	.word	0x08000e07
 8000984:	08000e07 	.word	0x08000e07
 8000988:	08000e07 	.word	0x08000e07
 800098c:	08000e07 	.word	0x08000e07
 8000990:	08000e07 	.word	0x08000e07
 8000994:	08000e07 	.word	0x08000e07
 8000998:	08000e07 	.word	0x08000e07
 800099c:	08000e07 	.word	0x08000e07
 80009a0:	08000dcf 	.word	0x08000dcf

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 80009a4:	4b72      	ldr	r3, [pc, #456]	; (8000b70 <fnInit+0x324>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009aa:	4b71      	ldr	r3, [pc, #452]	; (8000b70 <fnInit+0x324>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 80009b0:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <fnInit+0x328>)
 80009b2:	2282      	movs	r2, #130	; 0x82
 80009b4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <fnInit+0x328>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009bc:	4b6e      	ldr	r3, [pc, #440]	; (8000b78 <fnInit+0x32c>)
 80009be:	4a6d      	ldr	r2, [pc, #436]	; (8000b74 <fnInit+0x328>)
 80009c0:	496b      	ldr	r1, [pc, #428]	; (8000b70 <fnInit+0x324>)
 80009c2:	486e      	ldr	r0, [pc, #440]	; (8000b7c <fnInit+0x330>)
 80009c4:	f001 fc1a 	bl	80021fc <HAL_CAN_AddTxMessage>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d004      	beq.n	80009d8 <fnInit+0x18c>
			fnLEDsErrorState();
 80009ce:	f7ff ff27 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 80009d2:	f000 fe1b 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 80009d6:	e216      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 5;
 80009d8:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <fnInit+0x320>)
 80009da:	2205      	movs	r2, #5
 80009dc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2204      	movs	r2, #4
 80009e2:	4967      	ldr	r1, [pc, #412]	; (8000b80 <fnInit+0x334>)
 80009e4:	4867      	ldr	r0, [pc, #412]	; (8000b84 <fnInit+0x338>)
 80009e6:	f004 fbc7 	bl	8005178 <HAL_UART_Transmit>
		break;
 80009ea:	e20c      	b.n	8000e06 <fnInit+0x5ba>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 80009ec:	4b60      	ldr	r3, [pc, #384]	; (8000b70 <fnInit+0x324>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009f2:	4b5f      	ldr	r3, [pc, #380]	; (8000b70 <fnInit+0x324>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 80009f8:	4b5e      	ldr	r3, [pc, #376]	; (8000b74 <fnInit+0x328>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <fnInit+0x328>)
 8000a00:	220a      	movs	r2, #10
 8000a02:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a04:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <fnInit+0x32c>)
 8000a06:	4a5b      	ldr	r2, [pc, #364]	; (8000b74 <fnInit+0x328>)
 8000a08:	4959      	ldr	r1, [pc, #356]	; (8000b70 <fnInit+0x324>)
 8000a0a:	485c      	ldr	r0, [pc, #368]	; (8000b7c <fnInit+0x330>)
 8000a0c:	f001 fbf6 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d004      	beq.n	8000a20 <fnInit+0x1d4>
			fnLEDsErrorState();
 8000a16:	f7ff ff03 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000a1a:	f000 fdf7 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000a1e:	e1f2      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 10;
 8000a20:	4b52      	ldr	r3, [pc, #328]	; (8000b6c <fnInit+0x320>)
 8000a22:	220a      	movs	r2, #10
 8000a24:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4957      	ldr	r1, [pc, #348]	; (8000b88 <fnInit+0x33c>)
 8000a2c:	4855      	ldr	r0, [pc, #340]	; (8000b84 <fnInit+0x338>)
 8000a2e:	f004 fba3 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000a32:	e1e8      	b.n	8000e06 <fnInit+0x5ba>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000a34:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <fnInit+0x324>)
 8000a36:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a3a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <fnInit+0x324>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <fnInit+0x328>)
 8000a44:	2222      	movs	r2, #34	; 0x22
 8000a46:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <fnInit+0x328>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <fnInit+0x328>)
 8000a50:	2260      	movs	r2, #96	; 0x60
 8000a52:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <fnInit+0x328>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <fnInit+0x328>)
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <fnInit+0x328>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <fnInit+0x328>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <fnInit+0x328>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a72:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <fnInit+0x32c>)
 8000a74:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <fnInit+0x328>)
 8000a76:	493e      	ldr	r1, [pc, #248]	; (8000b70 <fnInit+0x324>)
 8000a78:	4840      	ldr	r0, [pc, #256]	; (8000b7c <fnInit+0x330>)
 8000a7a:	f001 fbbf 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <fnInit+0x242>
			fnLEDsErrorState();
 8000a84:	f7ff fecc 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000a88:	f000 fdc0 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000a8c:	e1bb      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 20;
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <fnInit+0x320>)
 8000a90:	2214      	movs	r2, #20
 8000a92:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2204      	movs	r2, #4
 8000a98:	493c      	ldr	r1, [pc, #240]	; (8000b8c <fnInit+0x340>)
 8000a9a:	483a      	ldr	r0, [pc, #232]	; (8000b84 <fnInit+0x338>)
 8000a9c:	f004 fb6c 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000aa0:	e1b1      	b.n	8000e06 <fnInit+0x5ba>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <fnInit+0x324>)
 8000aa4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000aa8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <fnInit+0x324>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <fnInit+0x328>)
 8000ab2:	2222      	movs	r2, #34	; 0x22
 8000ab4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <fnInit+0x328>)
 8000ab8:	2240      	movs	r2, #64	; 0x40
 8000aba:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <fnInit+0x328>)
 8000abe:	2260      	movs	r2, #96	; 0x60
 8000ac0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <fnInit+0x328>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <fnInit+0x328>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <fnInit+0x328>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <fnInit+0x328>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <fnInit+0x328>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <fnInit+0x32c>)
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <fnInit+0x328>)
 8000ae4:	4922      	ldr	r1, [pc, #136]	; (8000b70 <fnInit+0x324>)
 8000ae6:	4825      	ldr	r0, [pc, #148]	; (8000b7c <fnInit+0x330>)
 8000ae8:	f001 fb88 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <fnInit+0x2b0>
			fnLEDsErrorState();
 8000af2:	f7ff fe95 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000af6:	f000 fd89 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000afa:	e184      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 25;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <fnInit+0x320>)
 8000afe:	2219      	movs	r2, #25
 8000b00:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2204      	movs	r2, #4
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <fnInit+0x344>)
 8000b08:	481e      	ldr	r0, [pc, #120]	; (8000b84 <fnInit+0x338>)
 8000b0a:	f004 fb35 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000b0e:	e17a      	b.n	8000e06 <fnInit+0x5ba>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <fnInit+0x324>)
 8000b12:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b16:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <fnInit+0x324>)
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <fnInit+0x328>)
 8000b20:	2222      	movs	r2, #34	; 0x22
 8000b22:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <fnInit+0x328>)
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <fnInit+0x328>)
 8000b2c:	2260      	movs	r2, #96	; 0x60
 8000b2e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <fnInit+0x328>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <fnInit+0x328>)
 8000b38:	220f      	movs	r2, #15
 8000b3a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <fnInit+0x328>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <fnInit+0x328>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <fnInit+0x328>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <fnInit+0x32c>)
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <fnInit+0x328>)
 8000b52:	4907      	ldr	r1, [pc, #28]	; (8000b70 <fnInit+0x324>)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <fnInit+0x330>)
 8000b56:	f001 fb51 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d019      	beq.n	8000b94 <fnInit+0x348>
			fnLEDsErrorState();
 8000b60:	f7ff fe5e 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000b64:	f000 fd52 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000b68:	e14d      	b.n	8000e06 <fnInit+0x5ba>
 8000b6a:	bf00      	nop
 8000b6c:	20000002 	.word	0x20000002
 8000b70:	200000c4 	.word	0x200000c4
 8000b74:	200000dc 	.word	0x200000dc
 8000b78:	200000e4 	.word	0x200000e4
 8000b7c:	20000098 	.word	0x20000098
 8000b80:	08006eac 	.word	0x08006eac
 8000b84:	20000228 	.word	0x20000228
 8000b88:	08006eb4 	.word	0x08006eb4
 8000b8c:	08006ebc 	.word	0x08006ebc
 8000b90:	08006ec4 	.word	0x08006ec4
			iMachineStatus = 30;
 8000b94:	4b9d      	ldr	r3, [pc, #628]	; (8000e0c <fnInit+0x5c0>)
 8000b96:	221e      	movs	r2, #30
 8000b98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	499c      	ldr	r1, [pc, #624]	; (8000e10 <fnInit+0x5c4>)
 8000ba0:	489c      	ldr	r0, [pc, #624]	; (8000e14 <fnInit+0x5c8>)
 8000ba2:	f004 fae9 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000ba6:	e12e      	b.n	8000e06 <fnInit+0x5ba>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000ba8:	4b9b      	ldr	r3, [pc, #620]	; (8000e18 <fnInit+0x5cc>)
 8000baa:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bae:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bb0:	4b99      	ldr	r3, [pc, #612]	; (8000e18 <fnInit+0x5cc>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bb6:	4b99      	ldr	r3, [pc, #612]	; (8000e1c <fnInit+0x5d0>)
 8000bb8:	2222      	movs	r2, #34	; 0x22
 8000bba:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000bbc:	4b97      	ldr	r3, [pc, #604]	; (8000e1c <fnInit+0x5d0>)
 8000bbe:	2260      	movs	r2, #96	; 0x60
 8000bc0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bc2:	4b96      	ldr	r3, [pc, #600]	; (8000e1c <fnInit+0x5d0>)
 8000bc4:	2260      	movs	r2, #96	; 0x60
 8000bc6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bc8:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <fnInit+0x5d0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000bce:	4b93      	ldr	r3, [pc, #588]	; (8000e1c <fnInit+0x5d0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bd4:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <fnInit+0x5d0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bda:	4b90      	ldr	r3, [pc, #576]	; (8000e1c <fnInit+0x5d0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000be0:	4b8e      	ldr	r3, [pc, #568]	; (8000e1c <fnInit+0x5d0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000be6:	4b8e      	ldr	r3, [pc, #568]	; (8000e20 <fnInit+0x5d4>)
 8000be8:	4a8c      	ldr	r2, [pc, #560]	; (8000e1c <fnInit+0x5d0>)
 8000bea:	498b      	ldr	r1, [pc, #556]	; (8000e18 <fnInit+0x5cc>)
 8000bec:	488d      	ldr	r0, [pc, #564]	; (8000e24 <fnInit+0x5d8>)
 8000bee:	f001 fb05 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <fnInit+0x3b6>
			fnLEDsErrorState();
 8000bf8:	f7ff fe12 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000bfc:	f000 fd06 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000c00:	e101      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 40;
 8000c02:	4b82      	ldr	r3, [pc, #520]	; (8000e0c <fnInit+0x5c0>)
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4986      	ldr	r1, [pc, #536]	; (8000e28 <fnInit+0x5dc>)
 8000c0e:	4881      	ldr	r0, [pc, #516]	; (8000e14 <fnInit+0x5c8>)
 8000c10:	f004 fab2 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000c14:	e0f7      	b.n	8000e06 <fnInit+0x5ba>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000c16:	4b80      	ldr	r3, [pc, #512]	; (8000e18 <fnInit+0x5cc>)
 8000c18:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c1c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c1e:	4b7e      	ldr	r3, [pc, #504]	; (8000e18 <fnInit+0x5cc>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000c24:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <fnInit+0x5d0>)
 8000c26:	2222      	movs	r2, #34	; 0x22
 8000c28:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000c2a:	4b7c      	ldr	r3, [pc, #496]	; (8000e1c <fnInit+0x5d0>)
 8000c2c:	227a      	movs	r2, #122	; 0x7a
 8000c2e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c30:	4b7a      	ldr	r3, [pc, #488]	; (8000e1c <fnInit+0x5d0>)
 8000c32:	2260      	movs	r2, #96	; 0x60
 8000c34:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c36:	4b79      	ldr	r3, [pc, #484]	; (8000e1c <fnInit+0x5d0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000c3c:	4b77      	ldr	r3, [pc, #476]	; (8000e1c <fnInit+0x5d0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c42:	4b76      	ldr	r3, [pc, #472]	; (8000e1c <fnInit+0x5d0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c48:	4b74      	ldr	r3, [pc, #464]	; (8000e1c <fnInit+0x5d0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c4e:	4b73      	ldr	r3, [pc, #460]	; (8000e1c <fnInit+0x5d0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c54:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <fnInit+0x5d4>)
 8000c56:	4a71      	ldr	r2, [pc, #452]	; (8000e1c <fnInit+0x5d0>)
 8000c58:	496f      	ldr	r1, [pc, #444]	; (8000e18 <fnInit+0x5cc>)
 8000c5a:	4872      	ldr	r0, [pc, #456]	; (8000e24 <fnInit+0x5d8>)
 8000c5c:	f001 face 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <fnInit+0x424>
			fnLEDsErrorState();
 8000c66:	f7ff fddb 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000c6a:	f000 fccf 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000c6e:	e0ca      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 50;
 8000c70:	4b66      	ldr	r3, [pc, #408]	; (8000e0c <fnInit+0x5c0>)
 8000c72:	2232      	movs	r2, #50	; 0x32
 8000c74:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	2204      	movs	r2, #4
 8000c7a:	496c      	ldr	r1, [pc, #432]	; (8000e2c <fnInit+0x5e0>)
 8000c7c:	4865      	ldr	r0, [pc, #404]	; (8000e14 <fnInit+0x5c8>)
 8000c7e:	f004 fa7b 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000c82:	e0c0      	b.n	8000e06 <fnInit+0x5ba>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000c84:	4b64      	ldr	r3, [pc, #400]	; (8000e18 <fnInit+0x5cc>)
 8000c86:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c8a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c8c:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <fnInit+0x5cc>)
 8000c8e:	2208      	movs	r2, #8
 8000c90:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c92:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <fnInit+0x5d0>)
 8000c94:	2222      	movs	r2, #34	; 0x22
 8000c96:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c98:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <fnInit+0x5d0>)
 8000c9a:	2240      	movs	r2, #64	; 0x40
 8000c9c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <fnInit+0x5d0>)
 8000ca0:	2260      	movs	r2, #96	; 0x60
 8000ca2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ca4:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <fnInit+0x5d0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000caa:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <fnInit+0x5d0>)
 8000cac:	221f      	movs	r2, #31
 8000cae:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <fnInit+0x5d0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000cb6:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <fnInit+0x5d0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cbc:	4b57      	ldr	r3, [pc, #348]	; (8000e1c <fnInit+0x5d0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cc2:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <fnInit+0x5d4>)
 8000cc4:	4a55      	ldr	r2, [pc, #340]	; (8000e1c <fnInit+0x5d0>)
 8000cc6:	4954      	ldr	r1, [pc, #336]	; (8000e18 <fnInit+0x5cc>)
 8000cc8:	4856      	ldr	r0, [pc, #344]	; (8000e24 <fnInit+0x5d8>)
 8000cca:	f001 fa97 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <fnInit+0x492>
			fnLEDsErrorState();
 8000cd4:	f7ff fda4 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000cd8:	f000 fc98 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000cdc:	e093      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 60;
 8000cde:	4b4b      	ldr	r3, [pc, #300]	; (8000e0c <fnInit+0x5c0>)
 8000ce0:	223c      	movs	r2, #60	; 0x3c
 8000ce2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000ce4:	2364      	movs	r3, #100	; 0x64
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4951      	ldr	r1, [pc, #324]	; (8000e30 <fnInit+0x5e4>)
 8000cea:	484a      	ldr	r0, [pc, #296]	; (8000e14 <fnInit+0x5c8>)
 8000cec:	f004 fa44 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000cf0:	e089      	b.n	8000e06 <fnInit+0x5ba>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <fnInit+0x5cc>)
 8000cf4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cf8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cfa:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <fnInit+0x5cc>)
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d00:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <fnInit+0x5d0>)
 8000d02:	2222      	movs	r2, #34	; 0x22
 8000d04:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d06:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <fnInit+0x5d0>)
 8000d08:	2240      	movs	r2, #64	; 0x40
 8000d0a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <fnInit+0x5d0>)
 8000d0e:	2260      	movs	r2, #96	; 0x60
 8000d10:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d12:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <fnInit+0x5d0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000d18:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <fnInit+0x5d0>)
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <fnInit+0x5d0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d24:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <fnInit+0x5d0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <fnInit+0x5d0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <fnInit+0x5d4>)
 8000d32:	4a3a      	ldr	r2, [pc, #232]	; (8000e1c <fnInit+0x5d0>)
 8000d34:	4938      	ldr	r1, [pc, #224]	; (8000e18 <fnInit+0x5cc>)
 8000d36:	483b      	ldr	r0, [pc, #236]	; (8000e24 <fnInit+0x5d8>)
 8000d38:	f001 fa60 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <fnInit+0x500>
			fnLEDsErrorState();
 8000d42:	f7ff fd6d 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000d46:	f000 fc61 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000d4a:	e05c      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 70;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <fnInit+0x5c0>)
 8000d4e:	2246      	movs	r2, #70	; 0x46
 8000d50:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	2204      	movs	r2, #4
 8000d56:	4937      	ldr	r1, [pc, #220]	; (8000e34 <fnInit+0x5e8>)
 8000d58:	482e      	ldr	r0, [pc, #184]	; (8000e14 <fnInit+0x5c8>)
 8000d5a:	f004 fa0d 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000d5e:	e052      	b.n	8000e06 <fnInit+0x5ba>

	case 70://SEND STATUS CHECK
		TxHeader.StdId = 0x60A;
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <fnInit+0x5cc>)
 8000d62:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d66:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <fnInit+0x5cc>)
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <fnInit+0x5d0>)
 8000d70:	2240      	movs	r2, #64	; 0x40
 8000d72:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <fnInit+0x5d0>)
 8000d76:	2241      	movs	r2, #65	; 0x41
 8000d78:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <fnInit+0x5d0>)
 8000d7c:	2260      	movs	r2, #96	; 0x60
 8000d7e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <fnInit+0x5d0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <fnInit+0x5d0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <fnInit+0x5d0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <fnInit+0x5d0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <fnInit+0x5d0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <fnInit+0x5d4>)
 8000da0:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <fnInit+0x5d0>)
 8000da2:	491d      	ldr	r1, [pc, #116]	; (8000e18 <fnInit+0x5cc>)
 8000da4:	481f      	ldr	r0, [pc, #124]	; (8000e24 <fnInit+0x5d8>)
 8000da6:	f001 fa29 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <fnInit+0x56e>
			fnLEDsErrorState();
 8000db0:	f7ff fd36 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000db4:	f000 fc2a 	bl	800160c <Error_Handler>
		}
		else{
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000db8:	e025      	b.n	8000e06 <fnInit+0x5ba>
			iMachineStatus = 80;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <fnInit+0x5c0>)
 8000dbc:	2250      	movs	r2, #80	; 0x50
 8000dbe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	491c      	ldr	r1, [pc, #112]	; (8000e38 <fnInit+0x5ec>)
 8000dc6:	4813      	ldr	r0, [pc, #76]	; (8000e14 <fnInit+0x5c8>)
 8000dc8:	f004 f9d6 	bl	8005178 <HAL_UART_Transmit>
		break;
 8000dcc:	e01b      	b.n	8000e06 <fnInit+0x5ba>

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <fnInit+0x5f0>)
 8000dd0:	791b      	ldrb	r3, [r3, #4]
 8000dd2:	2b27      	cmp	r3, #39	; 0x27
 8000dd4:	d112      	bne.n	8000dfc <fnInit+0x5b0>
			iMachineStatus = 1;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <fnInit+0x5c0>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <fnInit+0x5f4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000de2:	213c      	movs	r1, #60	; 0x3c
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <fnInit+0x5f8>)
 8000de6:	f003 fe31 	bl	8004a4c <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000dea:	f000 f883 	bl	8000ef4 <fnEncCalibration>

			HAL_UART_Transmit(&huart3, "C080", 4, 100);
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	2204      	movs	r2, #4
 8000df2:	4915      	ldr	r1, [pc, #84]	; (8000e48 <fnInit+0x5fc>)
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <fnInit+0x5c8>)
 8000df6:	f004 f9bf 	bl	8005178 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000dfa:	e003      	b.n	8000e04 <fnInit+0x5b8>
			fnLEDsErrorState();
 8000dfc:	f7ff fd10 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000e00:	f000 fc04 	bl	800160c <Error_Handler>
		break;
 8000e04:	bf00      	nop
	}
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000002 	.word	0x20000002
 8000e10:	08006ecc 	.word	0x08006ecc
 8000e14:	20000228 	.word	0x20000228
 8000e18:	200000c4 	.word	0x200000c4
 8000e1c:	200000dc 	.word	0x200000dc
 8000e20:	200000e4 	.word	0x200000e4
 8000e24:	20000098 	.word	0x20000098
 8000e28:	08006ed4 	.word	0x08006ed4
 8000e2c:	08006edc 	.word	0x08006edc
 8000e30:	08006ee4 	.word	0x08006ee4
 8000e34:	08006eec 	.word	0x08006eec
 8000e38:	08006ef4 	.word	0x08006ef4
 8000e3c:	20000104 	.word	0x20000104
 8000e40:	20000003 	.word	0x20000003
 8000e44:	20000144 	.word	0x20000144
 8000e48:	08006efc 	.word	0x08006efc

08000e4c <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <fnEncCounts2Angle+0x3c>)
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <fnEncCounts2Angle+0x40>)
 8000e6c:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <fnEncCounts2Angle+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	ee07 3a90 	vmov	s15, r3
}
 8000e78:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	2000013c 	.word	0x2000013c

08000e90 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <fnEncReadCount+0x54>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <fnEncReadCount+0x58>)
 8000e9e:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	085b      	lsrs	r3, r3, #1
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <fnEncReadCount+0x58>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d208      	bcs.n	8000ec2 <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8000eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <fnEncReadCount+0x58>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <fnEncReadCount+0x5c>)
 8000ebe:	801a      	strh	r2, [r3, #0]
 8000ec0:	e003      	b.n	8000eca <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <fnEncReadCount+0x58>)
 8000ec4:	881a      	ldrh	r2, [r3, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <fnEncReadCount+0x5c>)
 8000ec8:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount);
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <fnEncReadCount+0x5c>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffbc 	bl	8000e4c <fnEncCounts2Angle>
 8000ed4:	eef0 7a40 	vmov.f32	s15, s0
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <fnEncReadCount+0x60>)
 8000eda:	edc3 7a00 	vstr	s15, [r3]
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000144 	.word	0x20000144
 8000ee8:	20000134 	.word	0x20000134
 8000eec:	20000136 	.word	0x20000136
 8000ef0:	20000138 	.word	0x20000138

08000ef4 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <fnEncCalibration+0x14>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 8000efe:	f7ff ffc7 	bl	8000e90 <fnEncReadCount>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40000400 	.word	0x40000400

08000f0c <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	if (iNumber > 90) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b5a      	cmp	r3, #90	; 0x5a
 8000f18:	d901      	bls.n	8000f1e <fnMoveAbsolute+0x12>
		iNumber = 90;
 8000f1a:	235a      	movs	r3, #90	; 0x5a
 8000f1c:	607b      	str	r3, [r7, #4]
	}
	else if (iNumber < 0) {
		iNumber = 0;
	}

	iNumber = iNumber * 1000;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	607b      	str	r3, [r7, #4]

	TxHeader.StdId = 0x60A;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <fnMoveAbsolute+0x8c>)
 8000f2c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000f30:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <fnMoveAbsolute+0x8c>)
 8000f34:	2208      	movs	r2, #8
 8000f36:	611a      	str	r2, [r3, #16]
	TxData[0] = 0x22;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f3a:	2222      	movs	r2, #34	; 0x22
 8000f3c:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x7A;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f40:	227a      	movs	r2, #122	; 0x7a
 8000f42:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0x60;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f46:	2260      	movs	r2, #96	; 0x60
 8000f48:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0x00;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t) iNumber;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f56:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t)(iNumber >> 8);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f60:	715a      	strb	r2, [r3, #5]
	TxData[6] = (uint8_t)(iNumber >> 16);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f6a:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t)(iNumber >> 24);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	0e1b      	lsrs	r3, r3, #24
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f74:	71da      	strb	r2, [r3, #7]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <fnMoveAbsolute+0x94>)
 8000f78:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <fnMoveAbsolute+0x90>)
 8000f7a:	4907      	ldr	r1, [pc, #28]	; (8000f98 <fnMoveAbsolute+0x8c>)
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <fnMoveAbsolute+0x98>)
 8000f7e:	f001 f93d 	bl	80021fc <HAL_CAN_AddTxMessage>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <fnMoveAbsolute+0x84>
		fnLEDsErrorState();
 8000f88:	f7ff fc4a 	bl	8000820 <fnLEDsErrorState>
		Error_Handler();
 8000f8c:	f000 fb3e 	bl	800160c <Error_Handler>
	}

}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000c4 	.word	0x200000c4
 8000f9c:	200000dc 	.word	0x200000dc
 8000fa0:	200000e4 	.word	0x200000e4
 8000fa4:	20000098 	.word	0x20000098

08000fa8 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	switch (iSingleMachineStatus){
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <fnSingleMotionAction+0xfc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b1e      	cmp	r3, #30
 8000fb2:	d040      	beq.n	8001036 <fnSingleMotionAction+0x8e>
 8000fb4:	2b1e      	cmp	r3, #30
 8000fb6:	dc72      	bgt.n	800109e <fnSingleMotionAction+0xf6>
 8000fb8:	2b0a      	cmp	r3, #10
 8000fba:	d002      	beq.n	8000fc2 <fnSingleMotionAction+0x1a>
 8000fbc:	2b14      	cmp	r3, #20
 8000fbe:	d031      	beq.n	8001024 <fnSingleMotionAction+0x7c>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
		}
		break;
	}
}
 8000fc0:	e06d      	b.n	800109e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <fnSingleMotionAction+0x100>)
 8000fc4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fc8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <fnSingleMotionAction+0x100>)
 8000fcc:	2208      	movs	r2, #8
 8000fce:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <fnSingleMotionAction+0x104>)
 8000fd2:	2222      	movs	r2, #34	; 0x22
 8000fd4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <fnSingleMotionAction+0x104>)
 8000fd8:	2240      	movs	r2, #64	; 0x40
 8000fda:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <fnSingleMotionAction+0x104>)
 8000fde:	2260      	movs	r2, #96	; 0x60
 8000fe0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <fnSingleMotionAction+0x104>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <fnSingleMotionAction+0x104>)
 8000fea:	221f      	movs	r2, #31
 8000fec:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <fnSingleMotionAction+0x104>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <fnSingleMotionAction+0x104>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <fnSingleMotionAction+0x104>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <fnSingleMotionAction+0x108>)
 8001002:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <fnSingleMotionAction+0x104>)
 8001004:	4928      	ldr	r1, [pc, #160]	; (80010a8 <fnSingleMotionAction+0x100>)
 8001006:	482b      	ldr	r0, [pc, #172]	; (80010b4 <fnSingleMotionAction+0x10c>)
 8001008:	f001 f8f8 	bl	80021fc <HAL_CAN_AddTxMessage>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <fnSingleMotionAction+0x74>
			fnLEDsErrorState();
 8001012:	f7ff fc05 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8001016:	f000 faf9 	bl	800160c <Error_Handler>
		break;
 800101a:	e040      	b.n	800109e <fnSingleMotionAction+0xf6>
			iSingleMachineStatus = 20;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <fnSingleMotionAction+0xfc>)
 800101e:	2214      	movs	r2, #20
 8001020:	701a      	strb	r2, [r3, #0]
		break;
 8001022:	e03c      	b.n	800109e <fnSingleMotionAction+0xf6>
		fnMoveAbsolute(iPosition);
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <fnSingleMotionAction+0x110>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff6f 	bl	8000f0c <fnMoveAbsolute>
		iSingleMachineStatus = 30;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <fnSingleMotionAction+0xfc>)
 8001030:	221e      	movs	r2, #30
 8001032:	701a      	strb	r2, [r3, #0]
		break;
 8001034:	e033      	b.n	800109e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <fnSingleMotionAction+0x100>)
 8001038:	f240 620a 	movw	r2, #1546	; 0x60a
 800103c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <fnSingleMotionAction+0x100>)
 8001040:	2208      	movs	r2, #8
 8001042:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <fnSingleMotionAction+0x104>)
 8001046:	2222      	movs	r2, #34	; 0x22
 8001048:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <fnSingleMotionAction+0x104>)
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <fnSingleMotionAction+0x104>)
 8001052:	2260      	movs	r2, #96	; 0x60
 8001054:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <fnSingleMotionAction+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <fnSingleMotionAction+0x104>)
 800105e:	220f      	movs	r2, #15
 8001060:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <fnSingleMotionAction+0x104>)
 8001064:	2200      	movs	r2, #0
 8001066:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <fnSingleMotionAction+0x104>)
 800106a:	2200      	movs	r2, #0
 800106c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <fnSingleMotionAction+0x104>)
 8001070:	2200      	movs	r2, #0
 8001072:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <fnSingleMotionAction+0x108>)
 8001076:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <fnSingleMotionAction+0x104>)
 8001078:	490b      	ldr	r1, [pc, #44]	; (80010a8 <fnSingleMotionAction+0x100>)
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <fnSingleMotionAction+0x10c>)
 800107c:	f001 f8be 	bl	80021fc <HAL_CAN_AddTxMessage>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <fnSingleMotionAction+0xe8>
			fnLEDsErrorState();
 8001086:	f7ff fbcb 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 800108a:	f000 fabf 	bl	800160c <Error_Handler>
		break;
 800108e:	e005      	b.n	800109c <fnSingleMotionAction+0xf4>
			iSingleMachineStatus = 100;
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <fnSingleMotionAction+0xfc>)
 8001092:	2264      	movs	r2, #100	; 0x64
 8001094:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <fnSingleMotionAction+0x114>)
 8001098:	f003 fc02 	bl	80048a0 <HAL_TIM_Base_Stop_IT>
		break;
 800109c:	bf00      	nop
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000004 	.word	0x20000004
 80010a8:	200000c4 	.word	0x200000c4
 80010ac:	200000dc 	.word	0x200000dc
 80010b0:	200000e4 	.word	0x200000e4
 80010b4:	20000098 	.word	0x20000098
 80010b8:	20000140 	.word	0x20000140
 80010bc:	200001dc 	.word	0x200001dc

080010c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d116      	bne.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x40>
		if (iHomingStatus != 1) {
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d006      	beq.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 80010da:	f7ff fbb7 	bl	800084c <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80010de:	2101      	movs	r1, #1
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010e2:	f002 f836 	bl	8003152 <HAL_GPIO_TogglePin>
	}
	else if(htim -> Instance == TIM7){
		fnSingleMotionAction();
	}

}
 80010e6:	e012      	b.n	800110e <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80010ec:	f003 fcae 	bl	8004a4c <HAL_TIM_Encoder_Start>
			fnEncReadCount();
 80010f0:	f7ff fece 	bl	8000e90 <fnEncReadCount>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2101      	movs	r1, #1
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80010fa:	f002 f811 	bl	8003120 <HAL_GPIO_WritePin>
}
 80010fe:	e006      	b.n	800110e <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim -> Instance == TIM7){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x4e>
		fnSingleMotionAction();
 800110a:	f7ff ff4d 	bl	8000fa8 <fnSingleMotionAction>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40001000 	.word	0x40001000
 800111c:	20000003 	.word	0x20000003
 8001120:	40020400 	.word	0x40020400
 8001124:	20000144 	.word	0x20000144
 8001128:	40001400 	.word	0x40001400

0800112c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800113c:	d129      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_GPIO_EXTI_Callback+0x70>)
 8001140:	f240 620a 	movw	r2, #1546	; 0x60a
 8001144:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_GPIO_EXTI_Callback+0x70>)
 8001148:	2208      	movs	r2, #8
 800114a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 800114e:	2240      	movs	r2, #64	; 0x40
 8001150:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001154:	2241      	movs	r2, #65	; 0x41
 8001156:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 800115a:	2260      	movs	r2, #96	; 0x60
 800115c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x78>)
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001180:	4906      	ldr	r1, [pc, #24]	; (800119c <HAL_GPIO_EXTI_Callback+0x70>)
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001184:	f001 f83a 	bl	80021fc <HAL_CAN_AddTxMessage>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 800118e:	f000 fa3d 	bl	800160c <Error_Handler>

		//// ENCODER CALIBRATION - BASE
		//		fnEncCalibration();

	}
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200000c4 	.word	0x200000c4
 80011a0:	200000dc 	.word	0x200000dc
 80011a4:	200000e4 	.word	0x200000e4
 80011a8:	20000098 	.word	0x20000098

080011ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011b0:	f000 fd6e 	bl	8001c90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011b4:	f000 f85c 	bl	8001270 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011b8:	f7ff fa44 	bl	8000644 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80011bc:	f000 fc38 	bl	8001a30 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80011c0:	f000 fcb2 	bl	8001b28 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 80011c4:	f7ff f9ba 	bl	800053c <MX_CAN1_Init>
	MX_TIM6_Init();
 80011c8:	f000 fb16 	bl	80017f8 <MX_TIM6_Init>
	MX_TIM3_Init();
 80011cc:	f000 fabe 	bl	800174c <MX_TIM3_Init>
	MX_TIM7_Init();
 80011d0:	f000 fb4a 	bl	8001868 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 80011d4:	2204      	movs	r2, #4
 80011d6:	4921      	ldr	r1, [pc, #132]	; (800125c <main+0xb0>)
 80011d8:	4821      	ldr	r0, [pc, #132]	; (8001260 <main+0xb4>)
 80011da:	f004 f860 	bl	800529e <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 80011de:	4821      	ldr	r0, [pc, #132]	; (8001264 <main+0xb8>)
 80011e0:	f000 ffc8 	bl	8002174 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <main+0xbc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <main+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <main+0xbc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <main+0xbc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <main+0xbc>)
 80011fe:	2202      	movs	r2, #2
 8001200:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <main+0xbc>)
 8001204:	2200      	movs	r2, #0
 8001206:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <main+0xc0>)
 800120a:	2201      	movs	r2, #1
 800120c:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <main+0xc0>)
 8001210:	2212      	movs	r2, #18
 8001212:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <main+0xc0>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <main+0xc0>)
 800121c:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001220:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <main+0xc0>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <main+0xc0>)
 800122a:	f24b 1240 	movw	r2, #45376	; 0xb140
 800122e:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <main+0xc0>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <main+0xc0>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <main+0xc0>)
 800123e:	2201      	movs	r2, #1
 8001240:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <main+0xc0>)
 8001244:	2214      	movs	r2, #20
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001248:	4908      	ldr	r1, [pc, #32]	; (800126c <main+0xc0>)
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <main+0xb8>)
 800124c:	f000 fea6 	bl	8001f9c <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001250:	2102      	movs	r1, #2
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <main+0xb8>)
 8001254:	f001 f9bf 	bl	80025d6 <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001258:	e7fe      	b.n	8001258 <main+0xac>
 800125a:	bf00      	nop
 800125c:	200000c0 	.word	0x200000c0
 8001260:	20000228 	.word	0x20000228
 8001264:	20000098 	.word	0x20000098
 8001268:	200000c4 	.word	0x200000c4
 800126c:	2000010c 	.word	0x2000010c

08001270 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0b8      	sub	sp, #224	; 0xe0
 8001274:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800127a:	2234      	movs	r2, #52	; 0x34
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fd60 	bl	8006d44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2290      	movs	r2, #144	; 0x90
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f005 fd51 	bl	8006d44 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80012a2:	f002 f8d1 	bl	8003448 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <SystemClock_Config+0x128>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a3b      	ldr	r2, [pc, #236]	; (8001398 <SystemClock_Config+0x128>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <SystemClock_Config+0x128>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <SystemClock_Config+0x12c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c6:	4a35      	ldr	r2, [pc, #212]	; (800139c <SystemClock_Config+0x12c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <SystemClock_Config+0x12c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012da:	2301      	movs	r3, #1
 80012dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 80012fc:	2360      	movs	r3, #96	; 0x60
 80012fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001318:	4618      	mov	r0, r3
 800131a:	f002 f8f5 	bl	8003508 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001324:	f000 f972 	bl	800160c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001328:	f002 f89e 	bl	8003468 <HAL_PWREx_EnableOverDrive>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001332:	f000 f96b 	bl	800160c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001356:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800135a:	2103      	movs	r1, #3
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fb81 	bl	8003a64 <HAL_RCC_ClockConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001368:	f000 f950 	bl	800160c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <SystemClock_Config+0x130>)
 800136e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001370:	2300      	movs	r3, #0
 8001372:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fd96 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x11e>
	{
		Error_Handler();
 800138a:	f000 f93f 	bl	800160c <Error_Handler>
	}
}
 800138e:	bf00      	nop
 8001390:	37e0      	adds	r7, #224	; 0xe0
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000
 80013a0:	00200100 	.word	0x00200100

080013a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a72      	ldr	r2, [pc, #456]	; (800157c <HAL_UART_RxCpltCallback+0x1d8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	f040 80d3 	bne.w	800155e <HAL_UART_RxCpltCallback+0x1ba>

		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 80013b8:	2204      	movs	r2, #4
 80013ba:	4971      	ldr	r1, [pc, #452]	; (8001580 <HAL_UART_RxCpltCallback+0x1dc>)
 80013bc:	4871      	ldr	r0, [pc, #452]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 80013be:	f005 fcc9 	bl	8006d54 <strncmp>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 80013c8:	4b6f      	ldr	r3, [pc, #444]	; (8001588 <HAL_UART_RxCpltCallback+0x1e4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <HAL_UART_RxCpltCallback+0x1e8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 80013d4:	486e      	ldr	r0, [pc, #440]	; (8001590 <HAL_UART_RxCpltCallback+0x1ec>)
 80013d6:	f003 f9eb 	bl	80047b0 <HAL_TIM_Base_Start_IT>
 80013da:	e0c6      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
		}
		//MODE SELECTION
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 80013dc:	2204      	movs	r2, #4
 80013de:	496d      	ldr	r1, [pc, #436]	; (8001594 <HAL_UART_RxCpltCallback+0x1f0>)
 80013e0:	4868      	ldr	r0, [pc, #416]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 80013e2:	f005 fcb7 	bl	8006d54 <strncmp>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d107      	bne.n	80013fc <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <HAL_UART_RxCpltCallback+0x1f4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80013f2:	2101      	movs	r1, #1
 80013f4:	4869      	ldr	r0, [pc, #420]	; (800159c <HAL_UART_RxCpltCallback+0x1f8>)
 80013f6:	f001 feac 	bl	8003152 <HAL_GPIO_TogglePin>
 80013fa:	e0b6      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 80013fc:	2204      	movs	r2, #4
 80013fe:	4968      	ldr	r1, [pc, #416]	; (80015a0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001400:	4860      	ldr	r0, [pc, #384]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 8001402:	f005 fca7 	bl	8006d54 <strncmp>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_UART_RxCpltCallback+0x1f4>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	4861      	ldr	r0, [pc, #388]	; (800159c <HAL_UART_RxCpltCallback+0x1f8>)
 8001416:	f001 fe9c 	bl	8003152 <HAL_GPIO_TogglePin>
 800141a:	e0a6      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
		}

		//LEG SELECTION
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 800141c:	2204      	movs	r2, #4
 800141e:	4961      	ldr	r1, [pc, #388]	; (80015a4 <HAL_UART_RxCpltCallback+0x200>)
 8001420:	4858      	ldr	r0, [pc, #352]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 8001422:	f005 fc97 	bl	8006d54 <strncmp>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_UART_RxCpltCallback+0x98>
			iSelected_leg = 0;
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_UART_RxCpltCallback+0x204>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001432:	2101      	movs	r1, #1
 8001434:	4859      	ldr	r0, [pc, #356]	; (800159c <HAL_UART_RxCpltCallback+0x1f8>)
 8001436:	f001 fe8c 	bl	8003152 <HAL_GPIO_TogglePin>
 800143a:	e096      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 800143c:	2204      	movs	r2, #4
 800143e:	495b      	ldr	r1, [pc, #364]	; (80015ac <HAL_UART_RxCpltCallback+0x208>)
 8001440:	4850      	ldr	r0, [pc, #320]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 8001442:	f005 fc87 	bl	8006d54 <strncmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <HAL_UART_RxCpltCallback+0xb8>
			iSelected_leg = 1;
 800144c:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <HAL_UART_RxCpltCallback+0x204>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	4851      	ldr	r0, [pc, #324]	; (800159c <HAL_UART_RxCpltCallback+0x1f8>)
 8001456:	f001 fe7c 	bl	8003152 <HAL_GPIO_TogglePin>
 800145a:	e086      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
		}
		else if (strncmp(sUserMessage, sMoveCommand,4) == 0) {
 800145c:	2204      	movs	r2, #4
 800145e:	4954      	ldr	r1, [pc, #336]	; (80015b0 <HAL_UART_RxCpltCallback+0x20c>)
 8001460:	4848      	ldr	r0, [pc, #288]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 8001462:	f005 fc77 	bl	8006d54 <strncmp>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d12c      	bne.n	80014c6 <HAL_UART_RxCpltCallback+0x122>
			TxHeader.StdId = 0x60A;
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_UART_RxCpltCallback+0x210>)
 800146e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001472:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <HAL_UART_RxCpltCallback+0x210>)
 8001476:	2208      	movs	r2, #8
 8001478:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 800147a:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 800147c:	2222      	movs	r2, #34	; 0x22
 800147e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001480:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 8001488:	2260      	movs	r2, #96	; 0x60
 800148a:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800148c:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 800148e:	2200      	movs	r2, #0
 8001490:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x1F;
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 8001494:	221f      	movs	r2, #31
 8001496:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 800149a:	2200      	movs	r2, #0
 800149c:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <HAL_UART_RxCpltCallback+0x218>)
 80014ac:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014ae:	4941      	ldr	r1, [pc, #260]	; (80015b4 <HAL_UART_RxCpltCallback+0x210>)
 80014b0:	4843      	ldr	r0, [pc, #268]	; (80015c0 <HAL_UART_RxCpltCallback+0x21c>)
 80014b2:	f000 fea3 	bl	80021fc <HAL_CAN_AddTxMessage>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d056      	beq.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
				fnLEDsErrorState();
 80014bc:	f7ff f9b0 	bl	8000820 <fnLEDsErrorState>
				Error_Handler();
 80014c0:	f000 f8a4 	bl	800160c <Error_Handler>
 80014c4:	e051      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
			}
		}
		else if (strncmp(sUserMessage, sStopCommand,4) == 0) {
 80014c6:	2204      	movs	r2, #4
 80014c8:	493e      	ldr	r1, [pc, #248]	; (80015c4 <HAL_UART_RxCpltCallback+0x220>)
 80014ca:	482e      	ldr	r0, [pc, #184]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 80014cc:	f005 fc42 	bl	8006d54 <strncmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d12c      	bne.n	8001530 <HAL_UART_RxCpltCallback+0x18c>
			TxHeader.StdId = 0x60A;
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_UART_RxCpltCallback+0x210>)
 80014d8:	f240 620a 	movw	r2, #1546	; 0x60a
 80014dc:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <HAL_UART_RxCpltCallback+0x210>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014e6:	2222      	movs	r2, #34	; 0x22
 80014e8:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014f2:	2260      	movs	r2, #96	; 0x60
 80014f4:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 80014fe:	220f      	movs	r2, #15
 8001500:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 8001504:	2200      	movs	r2, #0
 8001506:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 800150a:	2200      	movs	r2, #0
 800150c:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 8001510:	2200      	movs	r2, #0
 8001512:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_UART_RxCpltCallback+0x218>)
 8001516:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_UART_RxCpltCallback+0x214>)
 8001518:	4926      	ldr	r1, [pc, #152]	; (80015b4 <HAL_UART_RxCpltCallback+0x210>)
 800151a:	4829      	ldr	r0, [pc, #164]	; (80015c0 <HAL_UART_RxCpltCallback+0x21c>)
 800151c:	f000 fe6e 	bl	80021fc <HAL_CAN_AddTxMessage>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d021      	beq.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
				fnLEDsErrorState();
 8001526:	f7ff f97b 	bl	8000820 <fnLEDsErrorState>
				Error_Handler();
 800152a:	f000 f86f 	bl	800160c <Error_Handler>
 800152e:	e01c      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
			}
		}
		else if(sUserMessage[3] == 'P'){
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 8001532:	78db      	ldrb	r3, [r3, #3]
 8001534:	2b50      	cmp	r3, #80	; 0x50
 8001536:	d118      	bne.n	800156a <HAL_UART_RxCpltCallback+0x1c6>

			if(iMode == 0){
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_UART_RxCpltCallback+0x1f4>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d113      	bne.n	800156a <HAL_UART_RxCpltCallback+0x1c6>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001542:	4810      	ldr	r0, [pc, #64]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 8001544:	f005 fbd0 	bl	8006ce8 <atoi>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_UART_RxCpltCallback+0x224>)
 800154e:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_UART_RxCpltCallback+0x228>)
 8001552:	220a      	movs	r2, #10
 8001554:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <HAL_UART_RxCpltCallback+0x22c>)
 8001558:	f003 f92a 	bl	80047b0 <HAL_TIM_Base_Start_IT>
 800155c:	e005      	b.n	800156a <HAL_UART_RxCpltCallback+0x1c6>

			}
		}
	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 800155e:	2364      	movs	r3, #100	; 0x64
 8001560:	220c      	movs	r2, #12
 8001562:	491c      	ldr	r1, [pc, #112]	; (80015d4 <HAL_UART_RxCpltCallback+0x230>)
 8001564:	481c      	ldr	r0, [pc, #112]	; (80015d8 <HAL_UART_RxCpltCallback+0x234>)
 8001566:	f003 fe07 	bl	8005178 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 800156a:	2204      	movs	r2, #4
 800156c:	4905      	ldr	r1, [pc, #20]	; (8001584 <HAL_UART_RxCpltCallback+0x1e0>)
 800156e:	481a      	ldr	r0, [pc, #104]	; (80015d8 <HAL_UART_RxCpltCallback+0x234>)
 8001570:	f003 fe95 	bl	800529e <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40004800 	.word	0x40004800
 8001580:	08006f04 	.word	0x08006f04
 8001584:	200000c0 	.word	0x200000c0
 8001588:	20000002 	.word	0x20000002
 800158c:	20000003 	.word	0x20000003
 8001590:	20000190 	.word	0x20000190
 8001594:	08006f2c 	.word	0x08006f2c
 8001598:	20000000 	.word	0x20000000
 800159c:	40020400 	.word	0x40020400
 80015a0:	08006f34 	.word	0x08006f34
 80015a4:	08006f44 	.word	0x08006f44
 80015a8:	20000001 	.word	0x20000001
 80015ac:	08006f3c 	.word	0x08006f3c
 80015b0:	08006f1c 	.word	0x08006f1c
 80015b4:	200000c4 	.word	0x200000c4
 80015b8:	200000dc 	.word	0x200000dc
 80015bc:	200000e4 	.word	0x200000e4
 80015c0:	20000098 	.word	0x20000098
 80015c4:	08006f24 	.word	0x08006f24
 80015c8:	20000140 	.word	0x20000140
 80015cc:	20000004 	.word	0x20000004
 80015d0:	200001dc 	.word	0x200001dc
 80015d4:	08006f0c 	.word	0x08006f0c
 80015d8:	20000228 	.word	0x20000228

080015dc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80015e8:	2100      	movs	r1, #0
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fee1 	bl	80023b2 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80015f4:	f001 fdad 	bl	8003152 <HAL_GPIO_TogglePin>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000104 	.word	0x20000104
 8001604:	200000e8 	.word	0x200000e8
 8001608:	40020400 	.word	0x40020400

0800160c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001614:	e7fe      	b.n	8001614 <Error_Handler+0x8>
	...

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x44>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_MspInit+0x44>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_MspInit+0x44>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_MspInit+0x44>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_MspInit+0x44>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_MspInit+0x44>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 fb36 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <CAN1_RX0_IRQHandler+0x10>)
 80016ba:	f000 ffb2 	bl	8002622 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000098 	.word	0x20000098

080016c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM3_IRQHandler+0x10>)
 80016ce:	f003 fa4b 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000144 	.word	0x20000144

080016dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USART3_IRQHandler+0x10>)
 80016e2:	f003 fe2b 	bl	800533c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000228 	.word	0x20000228

080016f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016f8:	f001 fd46 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM6_DAC_IRQHandler+0x10>)
 8001706:	f003 fa2f 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000190 	.word	0x20000190

08001714 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM7_IRQHandler+0x10>)
 800171a:	f003 fa25 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001dc 	.word	0x200001dc

08001728 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2224      	movs	r2, #36	; 0x24
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f005 faf2 	bl	8006d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_TIM3_Init+0xa4>)
 800176c:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <MX_TIM3_Init+0xa8>)
 800176e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_TIM3_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_TIM3_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_TIM3_Init+0xa4>)
 800177e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_TIM3_Init+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_TIM3_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001790:	2301      	movs	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001798:	2301      	movs	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a8:	2301      	movs	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_TIM3_Init+0xa4>)
 80017bc:	f003 f8a0 	bl	8004900 <HAL_TIM_Encoder_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017c6:	f7ff ff21 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <MX_TIM3_Init+0xa4>)
 80017d8:	f003 fbd4 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017e2:	f7ff ff13 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000144 	.word	0x20000144
 80017f4:	40000400 	.word	0x40000400

080017f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_TIM6_Init+0x68>)
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <MX_TIM6_Init+0x6c>)
 800180c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_TIM6_Init+0x68>)
 8001810:	f242 527f 	movw	r2, #9599	; 0x257f
 8001814:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_TIM6_Init+0x68>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_TIM6_Init+0x68>)
 800181e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001822:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_TIM6_Init+0x68>)
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_TIM6_Init+0x68>)
 800182c:	f002 ff68 	bl	8004700 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001836:	f7ff fee9 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_TIM6_Init+0x68>)
 8001848:	f003 fb9c 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001852:	f7ff fedb 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000190 	.word	0x20000190
 8001864:	40001000 	.word	0x40001000

08001868 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_TIM7_Init+0x68>)
 800187a:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <MX_TIM7_Init+0x6c>)
 800187c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_TIM7_Init+0x68>)
 8001880:	f242 527f 	movw	r2, #9599	; 0x257f
 8001884:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_TIM7_Init+0x68>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_TIM7_Init+0x68>)
 800188e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001892:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_TIM7_Init+0x68>)
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_TIM7_Init+0x68>)
 800189c:	f002 ff30 	bl	8004700 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80018a6:	f7ff feb1 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_TIM7_Init+0x68>)
 80018b8:	f003 fb64 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80018c2:	f7ff fea3 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200001dc 	.word	0x200001dc
 80018d4:	40001400 	.word	0x40001400

080018d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_TIM_Encoder_MspInit+0xc4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d14b      	bne.n	8001992 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001952:	2302      	movs	r3, #2
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4811      	ldr	r0, [pc, #68]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800195e:	f001 fa33 	bl	8002dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001972:	2302      	movs	r3, #2
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480a      	ldr	r0, [pc, #40]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xd0>)
 800197e:	f001 fa23 	bl	8002dc8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	201d      	movs	r0, #29
 8001988:	f001 f955 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800198c:	201d      	movs	r0, #29
 800198e:	f001 f96e 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40000400 	.word	0x40000400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020800 	.word	0x40020800

080019ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_TIM_Base_MspInit+0x78>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d114      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_TIM_Base_MspInit+0x7c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_TIM_Base_MspInit+0x7c>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_TIM_Base_MspInit+0x7c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2036      	movs	r0, #54	; 0x36
 80019dc:	f001 f92b 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019e0:	2036      	movs	r0, #54	; 0x36
 80019e2:	f001 f944 	bl	8002c6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80019e6:	e018      	b.n	8001a1a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_TIM_Base_MspInit+0x80>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d113      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_TIM_Base_MspInit+0x7c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x7c>)
 80019f8:	f043 0320 	orr.w	r3, r3, #32
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_TIM_Base_MspInit+0x7c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2037      	movs	r0, #55	; 0x37
 8001a10:	f001 f911 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a14:	2037      	movs	r0, #55	; 0x37
 8001a16:	f001 f92a 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40001000 	.word	0x40001000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40001400 	.word	0x40001400

08001a30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_USART3_UART_Init+0x5c>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_USART3_UART_Init+0x58>)
 8001a74:	f003 fb32 	bl	80050dc <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a7e:	f7ff fdc5 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000228 	.word	0x20000228
 8001a8c:	40004800 	.word	0x40004800

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x8c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d130      	bne.n	8001b14 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_UART_MspInit+0x90>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001af4:	2307      	movs	r3, #7
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <HAL_UART_MspInit+0x94>)
 8001b00:	f001 f962 	bl	8002dc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2027      	movs	r0, #39	; 0x27
 8001b0a:	f001 f894 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b0e:	2027      	movs	r0, #39	; 0x27
 8001b10:	f001 f8ad 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40004800 	.word	0x40004800
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020c00 	.word	0x40020c00

08001b28 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b36:	2206      	movs	r2, #6
 8001b38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b6c:	f001 fb24 	bl	80031b8 <HAL_PCD_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b76:	f7ff fd49 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200002ac 	.word	0x200002ac

08001b84 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba4:	d141      	bne.n	8001c2a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001bbe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4817      	ldr	r0, [pc, #92]	; (8001c38 <HAL_PCD_MspInit+0xb4>)
 8001bdc:	f001 f8f4 	bl	8002dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4810      	ldr	r0, [pc, #64]	; (8001c38 <HAL_PCD_MspInit+0xb4>)
 8001bf6:	f001 f8e7 	bl	8002dc8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c04:	6353      	str	r3, [r2, #52]	; 0x34
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_PCD_MspInit+0xb0>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000

08001c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c42:	490e      	ldr	r1, [pc, #56]	; (8001c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c58:	4c0b      	ldr	r4, [pc, #44]	; (8001c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c66:	f7ff fd5f 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f005 f847 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6e:	f7ff fa9d 	bl	80011ac <main>
  bx  lr    
 8001c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c80:	08007078 	.word	0x08007078
  ldr r2, =_sbss
 8001c84:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c88:	200006b4 	.word	0x200006b4

08001c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_Init+0x28>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_Init+0x28>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 ffbd 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f808 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fcb4 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023c00 	.word	0x40023c00

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 ffd5 	bl	8002c8a <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 ff9d 	bl	8002c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	20000014 	.word	0x20000014
 8001d18:	20000010 	.word	0x20000010

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000014 	.word	0x20000014
 8001d40:	200006b0 	.word	0x200006b0

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200006b0 	.word	0x200006b0

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000014 	.word	0x20000014

08001da4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0ed      	b.n	8001f92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fbf2 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd8:	f7ff ffb4 	bl	8001d44 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dde:	e012      	b.n	8001e06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001de0:	f7ff ffb0 	bl	8001d44 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d90b      	bls.n	8001e06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2205      	movs	r2, #5
 8001dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0c5      	b.n	8001f92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0e5      	beq.n	8001de0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0202 	bic.w	r2, r2, #2
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e24:	f7ff ff8e 	bl	8001d44 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e2a:	e012      	b.n	8001e52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e2c:	f7ff ff8a 	bl	8001d44 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b0a      	cmp	r3, #10
 8001e38:	d90b      	bls.n	8001e52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2205      	movs	r2, #5
 8001e4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e09f      	b.n	8001f92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e5      	bne.n	8001e2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d108      	bne.n	8001e7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e007      	b.n	8001e8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7e5b      	ldrb	r3, [r3, #25]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d108      	bne.n	8001ea4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e007      	b.n	8001eb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7e9b      	ldrb	r3, [r3, #26]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e007      	b.n	8001ede <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0220 	bic.w	r2, r2, #32
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7edb      	ldrb	r3, [r3, #27]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0210 	bic.w	r2, r2, #16
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e007      	b.n	8001f08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0210 	orr.w	r2, r2, #16
 8001f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7f1b      	ldrb	r3, [r3, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e007      	b.n	8001f32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0208 	bic.w	r2, r2, #8
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7f5b      	ldrb	r3, [r3, #29]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0204 	orr.w	r2, r2, #4
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e007      	b.n	8001f5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	ea42 0103 	orr.w	r1, r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d003      	beq.n	8001fc2 <HAL_CAN_ConfigFilter+0x26>
 8001fba:	7cfb      	ldrb	r3, [r7, #19]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	f040 80c7 	bne.w	8002150 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a69      	ldr	r2, [pc, #420]	; (800216c <HAL_CAN_ConfigFilter+0x1d0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d001      	beq.n	8001fd0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_CAN_ConfigFilter+0x1d4>)
 8001fce:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_CAN_ConfigFilter+0x1d4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2201      	movs	r2, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d123      	bne.n	800207e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002058:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3248      	adds	r2, #72	; 0x48
 800205e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002072:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	3348      	adds	r3, #72	; 0x48
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d122      	bne.n	80020cc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	431a      	orrs	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3248      	adds	r2, #72	; 0x48
 80020ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020c2:	6979      	ldr	r1, [r7, #20]
 80020c4:	3348      	adds	r3, #72	; 0x48
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020e6:	e007      	b.n	80020f8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002112:	e007      	b.n	8002124 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	431a      	orrs	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002142:	f023 0201 	bic.w	r2, r3, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e006      	b.n	800215e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40003400 	.word	0x40003400
 8002170:	40006400 	.word	0x40006400

08002174 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d12e      	bne.n	80021e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff fdd0 	bl	8001d44 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021a6:	e012      	b.n	80021ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a8:	f7ff fdcc 	bl	8001d44 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b0a      	cmp	r3, #10
 80021b4:	d90b      	bls.n	80021ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2205      	movs	r2, #5
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e012      	b.n	80021f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e5      	bne.n	80021a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e006      	b.n	80021f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d003      	beq.n	8002228 <HAL_CAN_AddTxMessage+0x2c>
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	2b02      	cmp	r3, #2
 8002224:	f040 80b8 	bne.w	8002398 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10a      	bne.n	8002248 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80a0 	beq.w	8002388 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	0e1b      	lsrs	r3, r3, #24
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d907      	bls.n	8002268 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e09e      	b.n	80023a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002268:	2201      	movs	r2, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	409a      	lsls	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	431a      	orrs	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3318      	adds	r3, #24
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	440b      	add	r3, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e00f      	b.n	80022b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3318      	adds	r3, #24
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	440b      	add	r3, r1
 80022b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3318      	adds	r3, #24
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	440b      	add	r3, r1
 80022c6:	3304      	adds	r3, #4
 80022c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	7d1b      	ldrb	r3, [r3, #20]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d111      	bne.n	80022f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3318      	adds	r3, #24
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6811      	ldr	r1, [r2, #0]
 80022e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3318      	adds	r3, #24
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	440b      	add	r3, r1
 80022f2:	3304      	adds	r3, #4
 80022f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3307      	adds	r3, #7
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	061a      	lsls	r2, r3, #24
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3306      	adds	r3, #6
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3305      	adds	r3, #5
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	4313      	orrs	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	3204      	adds	r2, #4
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	4610      	mov	r0, r2
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	6811      	ldr	r1, [r2, #0]
 800231e:	ea43 0200 	orr.w	r2, r3, r0
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	440b      	add	r3, r1
 8002328:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800232c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3303      	adds	r3, #3
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	061a      	lsls	r2, r3, #24
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3302      	adds	r3, #2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3301      	adds	r3, #1
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	4313      	orrs	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	7812      	ldrb	r2, [r2, #0]
 800234e:	4610      	mov	r0, r2
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	6811      	ldr	r1, [r2, #0]
 8002354:	ea43 0200 	orr.w	r2, r3, r0
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	440b      	add	r3, r1
 800235e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002362:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3318      	adds	r3, #24
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	4413      	add	r3, r2
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6811      	ldr	r1, [r2, #0]
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3318      	adds	r3, #24
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e00e      	b.n	80023a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e006      	b.n	80023a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023b2:	b480      	push	{r7}
 80023b4:	b087      	sub	sp, #28
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d003      	beq.n	80023d6 <HAL_CAN_GetRxMessage+0x24>
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f040 80f3 	bne.w	80025bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10e      	bne.n	80023fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0e7      	b.n	80025ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0d8      	b.n	80025ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	331b      	adds	r3, #27
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0204 	and.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	331b      	adds	r3, #27
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4413      	add	r3, r2
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e00b      	b.n	8002468 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	331b      	adds	r3, #27
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	331b      	adds	r3, #27
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0202 	and.w	r2, r3, #2
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	331b      	adds	r3, #27
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4413      	add	r3, r2
 800248a:	3304      	adds	r3, #4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	331b      	adds	r3, #27
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	331b      	adds	r3, #27
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	3304      	adds	r3, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0a1a      	lsrs	r2, r3, #8
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0c1a      	lsrs	r2, r3, #16
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3302      	adds	r3, #2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4413      	add	r3, r2
 800251a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e1a      	lsrs	r2, r3, #24
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3303      	adds	r3, #3
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	4413      	add	r3, r2
 8002534:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3304      	adds	r3, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0a1a      	lsrs	r2, r3, #8
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3305      	adds	r3, #5
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4413      	add	r3, r2
 8002566:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0c1a      	lsrs	r2, r3, #16
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3306      	adds	r3, #6
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4413      	add	r3, r2
 8002580:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e1a      	lsrs	r2, r3, #24
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3307      	adds	r3, #7
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0220 	orr.w	r2, r2, #32
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	e007      	b.n	80025b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e006      	b.n	80025ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d002      	beq.n	80025f4 <HAL_CAN_ActivateNotification+0x1e>
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d109      	bne.n	8002608 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6959      	ldr	r1, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e006      	b.n	8002616 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b08a      	sub	sp, #40	; 0x28
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d07c      	beq.n	8002762 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d023      	beq.n	80026ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f983 	bl	8002990 <HAL_CAN_TxMailbox0CompleteCallback>
 800268a:	e016      	b.n	80026ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	e00c      	b.n	80026ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
 80026b2:	e002      	b.n	80026ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f989 	bl	80029cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d024      	beq.n	800270e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f963 	bl	80029a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80026de:	e016      	b.n	800270e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e00c      	b.n	800270e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	e002      	b.n	800270e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f969 	bl	80029e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d024      	beq.n	8002762 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002720:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f943 	bl	80029b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002732:	e016      	b.n	8002762 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	e00c      	b.n	8002762 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e002      	b.n	8002762 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f949 	bl	80029f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2208      	movs	r2, #8
 80027a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f930 	bl	8002a08 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe ff0b 	bl	80015dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00c      	beq.n	80027ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2210      	movs	r2, #16
 80027e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2208      	movs	r2, #8
 8002804:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f912 	bl	8002a30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f8f9 	bl	8002a1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2210      	movs	r2, #16
 8002844:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8fc 	bl	8002a44 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2208      	movs	r2, #8
 8002866:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f8f5 	bl	8002a58 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d07b      	beq.n	8002970 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d072      	beq.n	8002968 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d043      	beq.n	8002968 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03e      	beq.n	8002968 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028f0:	2b60      	cmp	r3, #96	; 0x60
 80028f2:	d02b      	beq.n	800294c <HAL_CAN_IRQHandler+0x32a>
 80028f4:	2b60      	cmp	r3, #96	; 0x60
 80028f6:	d82e      	bhi.n	8002956 <HAL_CAN_IRQHandler+0x334>
 80028f8:	2b50      	cmp	r3, #80	; 0x50
 80028fa:	d022      	beq.n	8002942 <HAL_CAN_IRQHandler+0x320>
 80028fc:	2b50      	cmp	r3, #80	; 0x50
 80028fe:	d82a      	bhi.n	8002956 <HAL_CAN_IRQHandler+0x334>
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d019      	beq.n	8002938 <HAL_CAN_IRQHandler+0x316>
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d826      	bhi.n	8002956 <HAL_CAN_IRQHandler+0x334>
 8002908:	2b30      	cmp	r3, #48	; 0x30
 800290a:	d010      	beq.n	800292e <HAL_CAN_IRQHandler+0x30c>
 800290c:	2b30      	cmp	r3, #48	; 0x30
 800290e:	d822      	bhi.n	8002956 <HAL_CAN_IRQHandler+0x334>
 8002910:	2b10      	cmp	r3, #16
 8002912:	d002      	beq.n	800291a <HAL_CAN_IRQHandler+0x2f8>
 8002914:	2b20      	cmp	r3, #32
 8002916:	d005      	beq.n	8002924 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002918:	e01d      	b.n	8002956 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002922:	e019      	b.n	8002958 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f043 0310 	orr.w	r3, r3, #16
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800292c:	e014      	b.n	8002958 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	f043 0320 	orr.w	r3, r3, #32
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002936:	e00f      	b.n	8002958 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002940:	e00a      	b.n	8002958 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800294a:	e005      	b.n	8002958 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002954:	e000      	b.n	8002958 <HAL_CAN_IRQHandler+0x336>
            break;
 8002956:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002966:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2204      	movs	r2, #4
 800296e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f872 	bl	8002a6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002988:	bf00      	nop
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00
 8002ac4:	05fa0000 	.word	0x05fa0000

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4907      	ldr	r1, [pc, #28]	; (8002b1c <__NVIC_EnableIRQ+0x38>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff8e 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff29 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff3e 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff8e 	bl	8002b74 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5d 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff31 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7ff f848 	bl	8001d44 <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d008      	beq.n	8002cd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e052      	b.n	8002d7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0216 	bic.w	r2, r2, #22
 8002ce2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <HAL_DMA_Abort+0x62>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0208 	bic.w	r2, r2, #8
 8002d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d24:	e013      	b.n	8002d4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d26:	f7ff f80d 	bl	8001d44 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d90c      	bls.n	8002d4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e015      	b.n	8002d7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e4      	bne.n	8002d26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	223f      	movs	r2, #63	; 0x3f
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e00c      	b.n	8002dba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2205      	movs	r2, #5
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e175      	b.n	80030d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f040 8164 	bne.w	80030ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d005      	beq.n	8002e1e <HAL_GPIO_Init+0x56>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d130      	bne.n	8002e80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 0201 	and.w	r2, r3, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d017      	beq.n	8002ebc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d123      	bne.n	8002f10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3208      	adds	r2, #8
 8002ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	08da      	lsrs	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3208      	adds	r2, #8
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0203 	and.w	r2, r3, #3
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80be 	beq.w	80030ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_GPIO_Init+0x324>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_GPIO_Init+0x324>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_GPIO_Init+0x324>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f6a:	4a61      	ldr	r2, [pc, #388]	; (80030f0 <HAL_GPIO_Init+0x328>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_GPIO_Init+0x32c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d037      	beq.n	8003006 <HAL_GPIO_Init+0x23e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_GPIO_Init+0x330>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <HAL_GPIO_Init+0x23a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a56      	ldr	r2, [pc, #344]	; (80030fc <HAL_GPIO_Init+0x334>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d02b      	beq.n	8002ffe <HAL_GPIO_Init+0x236>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a55      	ldr	r2, [pc, #340]	; (8003100 <HAL_GPIO_Init+0x338>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d025      	beq.n	8002ffa <HAL_GPIO_Init+0x232>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a54      	ldr	r2, [pc, #336]	; (8003104 <HAL_GPIO_Init+0x33c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01f      	beq.n	8002ff6 <HAL_GPIO_Init+0x22e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a53      	ldr	r2, [pc, #332]	; (8003108 <HAL_GPIO_Init+0x340>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d019      	beq.n	8002ff2 <HAL_GPIO_Init+0x22a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_GPIO_Init+0x344>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_GPIO_Init+0x226>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_GPIO_Init+0x348>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00d      	beq.n	8002fea <HAL_GPIO_Init+0x222>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a50      	ldr	r2, [pc, #320]	; (8003114 <HAL_GPIO_Init+0x34c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <HAL_GPIO_Init+0x21e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_GPIO_Init+0x350>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_GPIO_Init+0x21a>
 8002fde:	2309      	movs	r3, #9
 8002fe0:	e012      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fe2:	230a      	movs	r3, #10
 8002fe4:	e010      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	e00e      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fea:	2307      	movs	r3, #7
 8002fec:	e00c      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fee:	2306      	movs	r3, #6
 8002ff0:	e00a      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	e008      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	e006      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e004      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e002      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8003006:	2300      	movs	r3, #0
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	f002 0203 	and.w	r2, r2, #3
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	4093      	lsls	r3, r2
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003018:	4935      	ldr	r1, [pc, #212]	; (80030f0 <HAL_GPIO_Init+0x328>)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	3302      	adds	r3, #2
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_GPIO_Init+0x354>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800304a:	4a34      	ldr	r2, [pc, #208]	; (800311c <HAL_GPIO_Init+0x354>)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_GPIO_Init+0x354>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003074:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_GPIO_Init+0x354>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_GPIO_Init+0x354>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <HAL_GPIO_Init+0x354>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_GPIO_Init+0x354>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_GPIO_Init+0x354>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3301      	adds	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b0f      	cmp	r3, #15
 80030d8:	f67f ae86 	bls.w	8002de8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40013800 	.word	0x40013800
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40020400 	.word	0x40020400
 80030fc:	40020800 	.word	0x40020800
 8003100:	40020c00 	.word	0x40020c00
 8003104:	40021000 	.word	0x40021000
 8003108:	40021400 	.word	0x40021400
 800310c:	40021800 	.word	0x40021800
 8003110:	40021c00 	.word	0x40021c00
 8003114:	40022000 	.word	0x40022000
 8003118:	40022400 	.word	0x40022400
 800311c:	40013c00 	.word	0x40013c00

08003120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
 800312c:	4613      	mov	r3, r2
 800312e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003130:	787b      	ldrb	r3, [r7, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800313c:	e003      	b.n	8003146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003164:	887a      	ldrh	r2, [r7, #2]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	041a      	lsls	r2, r3, #16
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43d9      	mvns	r1, r3
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	400b      	ands	r3, r1
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	619a      	str	r2, [r3, #24]
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ffc0 	bl	800112c <HAL_GPIO_EXTI_Callback>
  }
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40013c00 	.word	0x40013c00

080031b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	b08f      	sub	sp, #60	; 0x3c
 80031bc:	af0a      	add	r7, sp, #40	; 0x28
 80031be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e116      	b.n	80033f8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe fccd 	bl	8001b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fad7 	bl	80067bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	687e      	ldr	r6, [r7, #4]
 8003216:	466d      	mov	r5, sp
 8003218:	f106 0410 	add.w	r4, r6, #16
 800321c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003224:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003228:	e885 0003 	stmia.w	r5, {r0, r1}
 800322c:	1d33      	adds	r3, r6, #4
 800322e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	f003 fa6b 	bl	800670c <USB_CoreInit>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0d7      	b.n	80033f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fac5 	bl	80067de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	e04a      	b.n	80032f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	333d      	adds	r3, #61	; 0x3d
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	333c      	adds	r3, #60	; 0x3c
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	b298      	uxth	r0, r3
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3342      	adds	r3, #66	; 0x42
 8003296:	4602      	mov	r2, r0
 8003298:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	333f      	adds	r3, #63	; 0x3f
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3344      	adds	r3, #68	; 0x44
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3348      	adds	r3, #72	; 0x48
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3350      	adds	r3, #80	; 0x50
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d3af      	bcc.n	800325a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e044      	b.n	800338a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	3301      	adds	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d3b5      	bcc.n	8003300 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	687e      	ldr	r6, [r7, #4]
 800339c:	466d      	mov	r5, sp
 800339e:	f106 0410 	add.w	r4, r6, #16
 80033a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b2:	1d33      	adds	r3, r6, #4
 80033b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b6:	6838      	ldr	r0, [r7, #0]
 80033b8:	f003 fa5e 	bl	8006878 <USB_DevInit>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e014      	b.n	80033f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f80a 	bl	8003400 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fc18 	bl	8006c26 <USB_DevDisconnect>

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003400 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_PCDEx_ActivateLPM+0x44>)
 8003430:	4313      	orrs	r3, r2
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	10000003 	.word	0x10000003

08003448 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40007000 	.word	0x40007000

08003468 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <HAL_PWREx_EnableOverDrive+0x98>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a22      	ldr	r2, [pc, #136]	; (8003500 <HAL_PWREx_EnableOverDrive+0x98>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_PWREx_EnableOverDrive+0x98>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <HAL_PWREx_EnableOverDrive+0x9c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003496:	f7fe fc55 	bl	8001d44 <HAL_GetTick>
 800349a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800349c:	e009      	b.n	80034b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800349e:	f7fe fc51 	bl	8001d44 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ac:	d901      	bls.n	80034b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e022      	b.n	80034f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d1ee      	bne.n	800349e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034cc:	f7fe fc3a 	bl	8001d44 <HAL_GetTick>
 80034d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034d2:	e009      	b.n	80034e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034d4:	f7fe fc36 	bl	8001d44 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e2:	d901      	bls.n	80034e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e007      	b.n	80034f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f4:	d1ee      	bne.n	80034d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000

08003508 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e29b      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8087 	beq.w	800363a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800352c:	4b96      	ldr	r3, [pc, #600]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b04      	cmp	r3, #4
 8003536:	d00c      	beq.n	8003552 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003538:	4b93      	ldr	r3, [pc, #588]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b08      	cmp	r3, #8
 8003542:	d112      	bne.n	800356a <HAL_RCC_OscConfig+0x62>
 8003544:	4b90      	ldr	r3, [pc, #576]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003550:	d10b      	bne.n	800356a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003552:	4b8d      	ldr	r3, [pc, #564]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d06c      	beq.n	8003638 <HAL_RCC_OscConfig+0x130>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d168      	bne.n	8003638 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e275      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x7a>
 8003574:	4b84      	ldr	r3, [pc, #528]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a83      	ldr	r2, [pc, #524]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	e02e      	b.n	80035e0 <HAL_RCC_OscConfig+0xd8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x9c>
 800358a:	4b7f      	ldr	r3, [pc, #508]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a7e      	ldr	r2, [pc, #504]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b7c      	ldr	r3, [pc, #496]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7b      	ldr	r2, [pc, #492]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 800359c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e01d      	b.n	80035e0 <HAL_RCC_OscConfig+0xd8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0xc0>
 80035ae:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b73      	ldr	r3, [pc, #460]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a72      	ldr	r2, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xd8>
 80035c8:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6e      	ldr	r2, [pc, #440]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6b      	ldr	r2, [pc, #428]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fbac 	bl	8001d44 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fba8 	bl	8001d44 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e229      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b61      	ldr	r3, [pc, #388]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xe8>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe fb98 	bl	8001d44 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe fb94 	bl	8001d44 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e215      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	4b57      	ldr	r3, [pc, #348]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x110>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d069      	beq.n	800371a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003646:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b4d      	ldr	r3, [pc, #308]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x190>
 800365e:	4b4a      	ldr	r3, [pc, #296]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x17a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e1e9      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	493d      	ldr	r1, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e040      	b.n	800371a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d023      	beq.n	80036e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a38      	ldr	r2, [pc, #224]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe fb4a 	bl	8001d44 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe fb46 	bl	8001d44 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1c7      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	4b30      	ldr	r3, [pc, #192]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4929      	ldr	r1, [pc, #164]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
 80036e6:	e018      	b.n	800371a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe fb26 	bl	8001d44 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fc:	f7fe fb22 	bl	8001d44 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e1a3      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d038      	beq.n	8003798 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d019      	beq.n	8003762 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fb03 	bl	8001d44 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003742:	f7fe faff 	bl	8001d44 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e180      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x23a>
 8003760:	e01a      	b.n	8003798 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_RCC_OscConfig+0x280>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe fae9 	bl	8001d44 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003776:	f7fe fae5 	bl	8001d44 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d903      	bls.n	800378c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e166      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
 8003788:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ee      	bne.n	8003776 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a4 	beq.w	80038ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a6:	4b8c      	ldr	r3, [pc, #560]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10d      	bne.n	80037ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a88      	ldr	r2, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b86      	ldr	r3, [pc, #536]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ce:	4b83      	ldr	r3, [pc, #524]	; (80039dc <HAL_RCC_OscConfig+0x4d4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037da:	4b80      	ldr	r3, [pc, #512]	; (80039dc <HAL_RCC_OscConfig+0x4d4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7f      	ldr	r2, [pc, #508]	; (80039dc <HAL_RCC_OscConfig+0x4d4>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fe faad 	bl	8001d44 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7fe faa9 	bl	8001d44 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	; 0x64
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e12a      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003800:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_RCC_OscConfig+0x4d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x31a>
 8003814:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a6f      	ldr	r2, [pc, #444]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	e02d      	b.n	800387e <HAL_RCC_OscConfig+0x376>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x33c>
 800382a:	4b6b      	ldr	r3, [pc, #428]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a6a      	ldr	r2, [pc, #424]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	4b68      	ldr	r3, [pc, #416]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a67      	ldr	r2, [pc, #412]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	e01c      	b.n	800387e <HAL_RCC_OscConfig+0x376>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b05      	cmp	r3, #5
 800384a:	d10c      	bne.n	8003866 <HAL_RCC_OscConfig+0x35e>
 800384c:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a61      	ldr	r2, [pc, #388]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
 8003858:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a5e      	ldr	r2, [pc, #376]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
 8003864:	e00b      	b.n	800387e <HAL_RCC_OscConfig+0x376>
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a5b      	ldr	r2, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d015      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fe fa5d 	bl	8001d44 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe fa59 	bl	8001d44 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0d8      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ee      	beq.n	800388e <HAL_RCC_OscConfig+0x386>
 80038b0:	e014      	b.n	80038dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fe fa47 	bl	8001d44 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fe fa43 	bl	8001d44 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0c2      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ee      	bne.n	80038ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80ae 	beq.w	8003a54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d06d      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d14b      	bne.n	80039a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe fa14 	bl	8001d44 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe fa10 	bl	8001d44 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e091      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	491b      	ldr	r1, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe f9e2 	bl	8001d44 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe f9de 	bl	8001d44 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e05f      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x47c>
 80039a2:	e057      	b.n	8003a54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80039aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe f9c8 	bl	8001d44 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe f9c4 	bl	8001d44 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e045      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4b0>
 80039d6:	e03d      	b.n	8003a54 <HAL_RCC_OscConfig+0x54c>
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039e0:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <HAL_RCC_OscConfig+0x558>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d030      	beq.n	8003a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d129      	bne.n	8003a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d122      	bne.n	8003a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d119      	bne.n	8003a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d10f      	bne.n	8003a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800

08003a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0d0      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d910      	bls.n	8003aac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	4965      	ldr	r1, [pc, #404]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d040      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d115      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e073      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b36:	4b3d      	ldr	r3, [pc, #244]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e06b      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4936      	ldr	r1, [pc, #216]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b58:	f7fe f8f4 	bl	8001d44 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fe f8f0 	bl	8001d44 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e053      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b88:	4b27      	ldr	r3, [pc, #156]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d210      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 020f 	bic.w	r2, r3, #15
 8003b9e:	4922      	ldr	r1, [pc, #136]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x1cc>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1d0>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe f850 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08006f4c 	.word	0x08006f4c
 8003c34:	2000000c 	.word	0x2000000c
 8003c38:	20000010 	.word	0x20000010

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b094      	sub	sp, #80	; 0x50
 8003c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
 8003c48:	2300      	movs	r3, #0
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c54:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f200 80e1 	bhi.w	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6e:	e0db      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b73      	ldr	r3, [pc, #460]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c74:	e0db      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4b73      	ldr	r3, [pc, #460]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7a:	e0d8      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c86:	4b6d      	ldr	r3, [pc, #436]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc0:	0150      	lsls	r0, r2, #5
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	1a51      	subs	r1, r2, r1
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	4629      	mov	r1, r5
 8003cce:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cea:	4651      	mov	r1, sl
 8003cec:	018a      	lsls	r2, r1, #6
 8003cee:	4651      	mov	r1, sl
 8003cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	eb49 0303 	adc.w	r3, r9, r3
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	024b      	lsls	r3, r1, #9
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d38:	4621      	mov	r1, r4
 8003d3a:	024a      	lsls	r2, r1, #9
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4c:	f7fc fa74 	bl	8000238 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d58:	e058      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	2200      	movs	r2, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	4611      	mov	r1, r2
 8003d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	f04f 0000 	mov.w	r0, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	0159      	lsls	r1, r3, #5
 8003d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d86:	0150      	lsls	r0, r2, #5
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d92:	4649      	mov	r1, r9
 8003d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dac:	ebb2 040a 	subs.w	r4, r2, sl
 8003db0:	eb63 050b 	sbc.w	r5, r3, fp
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	00eb      	lsls	r3, r5, #3
 8003dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc2:	00e2      	lsls	r2, r4, #3
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	18e3      	adds	r3, r4, r3
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	464b      	mov	r3, r9
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003de2:	4629      	mov	r1, r5
 8003de4:	028b      	lsls	r3, r1, #10
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dec:	4621      	mov	r1, r4
 8003dee:	028a      	lsls	r2, r1, #10
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df6:	2200      	movs	r2, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	61fa      	str	r2, [r7, #28]
 8003dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e00:	f7fc fa1a 	bl	8000238 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3750      	adds	r7, #80	; 0x50
 8003e34:	46bd      	mov	sp, r7
 8003e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	007a1200 	.word	0x007a1200

08003e48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	2000000c 	.word	0x2000000c

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e64:	f7ff fff0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	08006f5c 	.word	0x08006f5c

08003e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e8c:	f7ff ffdc 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0b5b      	lsrs	r3, r3, #13
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	; (8003eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	08006f5c 	.word	0x08006f5c

08003eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ed8:	4b69      	ldr	r3, [pc, #420]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4a68      	ldr	r2, [pc, #416]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ee2:	6093      	str	r3, [r2, #8]
 8003ee4:	4b66      	ldr	r3, [pc, #408]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	4964      	ldr	r1, [pc, #400]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d017      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f0a:	4b5d      	ldr	r3, [pc, #372]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	4959      	ldr	r1, [pc, #356]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f28:	d101      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f46:	4b4e      	ldr	r3, [pc, #312]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	494a      	ldr	r1, [pc, #296]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 808b 	beq.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f94:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	4a39      	ldr	r2, [pc, #228]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa0:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a34      	ldr	r2, [pc, #208]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fec4 	bl	8001d44 <HAL_GetTick>
 8003fbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fd fec0 	bl	8001d44 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e38f      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fde:	4b28      	ldr	r3, [pc, #160]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d035      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d02e      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ffc:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a1a      	ldr	r2, [pc, #104]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004024:	4b16      	ldr	r3, [pc, #88]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d114      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fe88 	bl	8001d44 <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004036:	e00a      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7fd fe84 	bl	8001d44 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e351      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ee      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004066:	d111      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004076:	400b      	ands	r3, r1
 8004078:	4901      	ldr	r1, [pc, #4]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
 800407e:	e00b      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004080:	40023800 	.word	0x40023800
 8004084:	40007000 	.word	0x40007000
 8004088:	0ffffcff 	.word	0x0ffffcff
 800408c:	4bac      	ldr	r3, [pc, #688]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4aab      	ldr	r2, [pc, #684]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004092:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	4ba9      	ldr	r3, [pc, #676]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	49a6      	ldr	r1, [pc, #664]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d010      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040b6:	4ba2      	ldr	r3, [pc, #648]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040bc:	4aa0      	ldr	r2, [pc, #640]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040c6:	4b9e      	ldr	r3, [pc, #632]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	499b      	ldr	r1, [pc, #620]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e4:	4b96      	ldr	r3, [pc, #600]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f2:	4993      	ldr	r1, [pc, #588]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004106:	4b8e      	ldr	r3, [pc, #568]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004114:	498a      	ldr	r1, [pc, #552]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004128:	4b85      	ldr	r3, [pc, #532]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004136:	4982      	ldr	r1, [pc, #520]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800414a:	4b7d      	ldr	r3, [pc, #500]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4979      	ldr	r1, [pc, #484]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800416c:	4b74      	ldr	r3, [pc, #464]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	4971      	ldr	r1, [pc, #452]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800418e:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	f023 020c 	bic.w	r2, r3, #12
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419c:	4968      	ldr	r1, [pc, #416]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041b0:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	4960      	ldr	r1, [pc, #384]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041d2:	4b5b      	ldr	r3, [pc, #364]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e0:	4957      	ldr	r1, [pc, #348]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041f4:	4b52      	ldr	r3, [pc, #328]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	494f      	ldr	r1, [pc, #316]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004216:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	4946      	ldr	r1, [pc, #280]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004238:	4b41      	ldr	r3, [pc, #260]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	493e      	ldr	r1, [pc, #248]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800425a:	4b39      	ldr	r3, [pc, #228]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	4935      	ldr	r1, [pc, #212]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800427c:	4b30      	ldr	r3, [pc, #192]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428a:	492d      	ldr	r1, [pc, #180]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d011      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800429e:	4b28      	ldr	r3, [pc, #160]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ac:	4924      	ldr	r1, [pc, #144]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042bc:	d101      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042be:	2301      	movs	r3, #1
 80042c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ec:	4914      	ldr	r1, [pc, #80]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004310:	490b      	ldr	r1, [pc, #44]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00f      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004334:	4902      	ldr	r1, [pc, #8]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800433c:	e002      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00b      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004350:	4b8a      	ldr	r3, [pc, #552]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004356:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	4986      	ldr	r1, [pc, #536]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004374:	4b81      	ldr	r3, [pc, #516]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004384:	497d      	ldr	r1, [pc, #500]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d006      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80d6 	beq.w	800454c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043a0:	4b76      	ldr	r3, [pc, #472]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a75      	ldr	r2, [pc, #468]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ac:	f7fd fcca 	bl	8001d44 <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043b4:	f7fd fcc6 	bl	8001d44 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	; 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e195      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d021      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11d      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043e6:	4b65      	ldr	r3, [pc, #404]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043f4:	4b61      	ldr	r3, [pc, #388]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fa:	0e1b      	lsrs	r3, r3, #24
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	019a      	lsls	r2, r3, #6
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	061b      	lsls	r3, r3, #24
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	4958      	ldr	r1, [pc, #352]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004440:	2b00      	cmp	r3, #0
 8004442:	d02e      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d129      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800444e:	4b4b      	ldr	r3, [pc, #300]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800445c:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004462:	0f1b      	lsrs	r3, r3, #28
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	019a      	lsls	r2, r3, #6
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	061b      	lsls	r3, r3, #24
 800447c:	431a      	orrs	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	071b      	lsls	r3, r3, #28
 8004482:	493e      	ldr	r1, [pc, #248]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800448a:	4b3c      	ldr	r3, [pc, #240]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004490:	f023 021f 	bic.w	r2, r3, #31
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	3b01      	subs	r3, #1
 800449a:	4938      	ldr	r1, [pc, #224]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01d      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ae:	4b33      	ldr	r3, [pc, #204]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044bc:	4b2f      	ldr	r3, [pc, #188]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c2:	0f1b      	lsrs	r3, r3, #28
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	019a      	lsls	r2, r3, #6
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	431a      	orrs	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	061b      	lsls	r3, r3, #24
 80044dc:	431a      	orrs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	4926      	ldr	r1, [pc, #152]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d011      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	019a      	lsls	r2, r3, #6
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	071b      	lsls	r3, r3, #28
 8004512:	491a      	ldr	r1, [pc, #104]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004520:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004526:	f7fd fc0d 	bl	8001d44 <HAL_GetTick>
 800452a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800452e:	f7fd fc09 	bl	8001d44 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b64      	cmp	r3, #100	; 0x64
 800453a:	d901      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0d8      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b01      	cmp	r3, #1
 8004550:	f040 80ce 	bne.w	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004554:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004560:	f7fd fbf0 	bl	8001d44 <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004566:	e00b      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004568:	f7fd fbec 	bl	8001d44 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d904      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0bb      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004580:	4b5e      	ldr	r3, [pc, #376]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458c:	d0ec      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d02e      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d12a      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045b6:	4b51      	ldr	r3, [pc, #324]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045c4:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	0f1b      	lsrs	r3, r3, #28
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	019a      	lsls	r2, r3, #6
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	041b      	lsls	r3, r3, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	071b      	lsls	r3, r3, #28
 80045ea:	4944      	ldr	r1, [pc, #272]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045f2:	4b42      	ldr	r3, [pc, #264]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	493d      	ldr	r1, [pc, #244]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d022      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004620:	d11d      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004622:	4b36      	ldr	r3, [pc, #216]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	0e1b      	lsrs	r3, r3, #24
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004630:	4b32      	ldr	r3, [pc, #200]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	0f1b      	lsrs	r3, r3, #28
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	019a      	lsls	r2, r3, #6
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	061b      	lsls	r3, r3, #24
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	4929      	ldr	r1, [pc, #164]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d028      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	019a      	lsls	r2, r3, #6
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	431a      	orrs	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	4917      	ldr	r1, [pc, #92]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4911      	ldr	r1, [pc, #68]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fd fb3c 	bl	8001d44 <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046d0:	f7fd fb38 	bl	8001d44 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	; 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e007      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ee:	d1ef      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800

08004700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e049      	b.n	80047a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd f940 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f000 fb5a 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d001      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e054      	b.n	8004872 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a26      	ldr	r2, [pc, #152]	; (8004880 <HAL_TIM_Base_Start_IT+0xd0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d022      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d01d      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <HAL_TIM_Base_Start_IT+0xd4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a21      	ldr	r2, [pc, #132]	; (8004888 <HAL_TIM_Base_Start_IT+0xd8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_TIM_Base_Start_IT+0xdc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_TIM_Base_Start_IT+0xe0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_TIM_Base_Start_IT+0xe4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x80>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <HAL_TIM_Base_Start_IT+0xe8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d115      	bne.n	800485c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_TIM_Base_Start_IT+0xec>)
 8004838:	4013      	ands	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d015      	beq.n	800486e <HAL_TIM_Base_Start_IT+0xbe>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004848:	d011      	beq.n	800486e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	e008      	b.n	800486e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e000      	b.n	8004870 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40010400 	.word	0x40010400
 8004894:	40014000 	.word	0x40014000
 8004898:	40001800 	.word	0x40001800
 800489c:	00010007 	.word	0x00010007

080048a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	f241 1311 	movw	r3, #4369	; 0x1111
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <HAL_TIM_Base_Stop_IT+0x48>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f240 4344 	movw	r3, #1092	; 0x444
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_Base_Stop_IT+0x48>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e08f      	b.n	8004a34 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7fc ffd5 	bl	80018d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_TIM_Encoder_Init+0x13c>)
 8004942:	400b      	ands	r3, r1
 8004944:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f000 fa51 	bl	8004df8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <HAL_TIM_Encoder_Init+0x140>)
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	4313      	orrs	r3, r2
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_TIM_Encoder_Init+0x144>)
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <HAL_TIM_Encoder_Init+0x148>)
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	4313      	orrs	r3, r2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	011a      	lsls	r2, r3, #4
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	031b      	lsls	r3, r3, #12
 80049c0:	4313      	orrs	r3, r2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4313      	orrs	r3, r2
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	fffebff8 	.word	0xfffebff8
 8004a40:	fffffcfc 	.word	0xfffffcfc
 8004a44:	fffff3f3 	.word	0xfffff3f3
 8004a48:	ffff0f0f 	.word	0xffff0f0f

08004a4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d110      	bne.n	8004a9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a82:	7b7b      	ldrb	r3, [r7, #13]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e069      	b.n	8004b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9c:	e031      	b.n	8004b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d110      	bne.n	8004ac6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aa4:	7bbb      	ldrb	r3, [r7, #14]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d102      	bne.n	8004ab0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aaa:	7b3b      	ldrb	r3, [r7, #12]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d001      	beq.n	8004ab4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e055      	b.n	8004b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac4:	e01d      	b.n	8004b02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004acc:	7bbb      	ldrb	r3, [r7, #14]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d105      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad2:	7b7b      	ldrb	r3, [r7, #13]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d102      	bne.n	8004ade <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ad8:	7b3b      	ldrb	r3, [r7, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e03e      	b.n	8004b60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_TIM_Encoder_Start+0xc4>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d008      	beq.n	8004b20 <HAL_TIM_Encoder_Start+0xd4>
 8004b0e:	e00f      	b.n	8004b30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2201      	movs	r2, #1
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fa0d 	bl	8004f38 <TIM_CCxChannelCmd>
      break;
 8004b1e:	e016      	b.n	8004b4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2201      	movs	r2, #1
 8004b26:	2104      	movs	r1, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fa05 	bl	8004f38 <TIM_CCxChannelCmd>
      break;
 8004b2e:	e00e      	b.n	8004b4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f9fd 	bl	8004f38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	2104      	movs	r1, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f9f6 	bl	8004f38 <TIM_CCxChannelCmd>
      break;
 8004b4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0202 	mvn.w	r2, #2
 8004b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f905 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8f7 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f908 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0204 	mvn.w	r2, #4
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8db 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8cd 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8de 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0208 	mvn.w	r2, #8
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8b1 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8a3 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f8b4 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0210 	mvn.w	r2, #16
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2208      	movs	r2, #8
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f887 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f879 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f88a 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0201 	mvn.w	r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc f9ea 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9ce 	bl	80050b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d26:	d10e      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d107      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f9c1 	bl	80050c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d10e      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f838 	bl	8004de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d10e      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f06f 0220 	mvn.w	r2, #32
 8004d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f981 	bl	80050a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d00f      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3a      	ldr	r2, [pc, #232]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d027      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d023      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d017      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <TIM_Base_SetConfig+0x128>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <TIM_Base_SetConfig+0x12c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <TIM_Base_SetConfig+0x134>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <TIM_Base_SetConfig+0x138>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <TIM_Base_SetConfig+0x13c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0xf8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	40001c00 	.word	0x40001c00
 8004f34:	40002000 	.word	0x40002000

08004f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1a      	ldr	r2, [r3, #32]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e06d      	b.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a20      	ldr	r2, [pc, #128]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d01d      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a15      	ldr	r2, [pc, #84]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10c      	bne.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40014000 	.word	0x40014000
 800509c:	40001800 	.word	0x40001800

080050a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e040      	b.n	8005170 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc fcc6 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2224      	movs	r2, #36	; 0x24
 8005108:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fc18 	bl	8005950 <UART_SetConfig>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e022      	b.n	8005170 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fe70 	bl	8005e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fef7 	bl	8005f5c <UART_CheckIdleState>
 800516e:	4603      	mov	r3, r0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518c:	2b20      	cmp	r3, #32
 800518e:	f040 8081 	bne.w	8005294 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_UART_Transmit+0x26>
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e079      	b.n	8005296 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Transmit+0x38>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e072      	b.n	8005296 <HAL_UART_Transmit+0x11e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2221      	movs	r2, #33	; 0x21
 80051c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c6:	f7fc fdbd 	bl	8001d44 <HAL_GetTick>
 80051ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d108      	bne.n	80051f8 <HAL_UART_Transmit+0x80>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e003      	b.n	8005200 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005208:	e02c      	b.n	8005264 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 feea 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e038      	b.n	8005296 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005238:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	3302      	adds	r3, #2
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	e007      	b.n	8005252 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1cc      	bne.n	800520a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	2140      	movs	r1, #64	; 0x40
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 feb7 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e005      	b.n	8005296 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e000      	b.n	8005296 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005294:	2302      	movs	r3, #2
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b08a      	sub	sp, #40	; 0x28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	4613      	mov	r3, r2
 80052aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d13d      	bne.n	8005330 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_UART_Receive_IT+0x22>
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e036      	b.n	8005332 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Receive_IT+0x34>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e02f      	b.n	8005332 <HAL_UART_Receive_IT+0x94>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	61bb      	str	r3, [r7, #24]
   return(result);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e6      	bne.n	80052ee <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	461a      	mov	r2, r3
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 ff26 	bl	8006178 <UART_Start_Receive_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	e000      	b.n	8005332 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b0ba      	sub	sp, #232	; 0xe8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005366:	f640 030f 	movw	r3, #2063	; 0x80f
 800536a:	4013      	ands	r3, r2
 800536c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d115      	bne.n	80053a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00f      	beq.n	80053a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 82a4 	beq.w	80058e2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
      }
      return;
 80053a2:	e29e      	b.n	80058e2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8117 	beq.w	80055dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053be:	4b85      	ldr	r3, [pc, #532]	; (80055d4 <HAL_UART_IRQHandler+0x298>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 810a 	beq.w	80055dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d011      	beq.n	80053f8 <HAL_UART_IRQHandler+0xbc>
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d011      	beq.n	8005428 <HAL_UART_IRQHandler+0xec>
 8005404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2202      	movs	r2, #2
 8005416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541e:	f043 0204 	orr.w	r2, r3, #4
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d011      	beq.n	8005458 <HAL_UART_IRQHandler+0x11c>
 8005434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2204      	movs	r2, #4
 8005446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800544e:	f043 0202 	orr.w	r2, r3, #2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005474:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548a:	f043 0208 	orr.w	r2, r3, #8
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549c:	2b00      	cmp	r3, #0
 800549e:	d012      	beq.n	80054c6 <HAL_UART_IRQHandler+0x18a>
 80054a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 820a 	beq.w	80058e6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005516:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800551a:	2b00      	cmp	r3, #0
 800551c:	d04f      	beq.n	80055be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fef4 	bl	800630c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d141      	bne.n	80055b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800555e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800556a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1d9      	bne.n	8005532 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <HAL_UART_IRQHandler+0x29c>)
 800558c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4618      	mov	r0, r3
 8005594:	f7fd fbf5 	bl	8002d82 <HAL_DMA_Abort_IT>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	e00f      	b.n	80055ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f9ae 	bl	8005910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	e00b      	b.n	80055ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9aa 	bl	8005910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e007      	b.n	80055ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9a6 	bl	8005910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80055cc:	e18b      	b.n	80058e6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ce:	bf00      	nop
    return;
 80055d0:	e189      	b.n	80058e6 <HAL_UART_IRQHandler+0x5aa>
 80055d2:	bf00      	nop
 80055d4:	04000120 	.word	0x04000120
 80055d8:	080063d3 	.word	0x080063d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 8144 	bne.w	800586e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 813d 	beq.w	800586e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8136 	beq.w	800586e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2210      	movs	r2, #16
 8005608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	f040 80b2 	bne.w	800577e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005626:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 815d 	beq.w	80058ea <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800563a:	429a      	cmp	r2, r3
 800563c:	f080 8155 	bcs.w	80058ea <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005646:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005654:	f000 8085 	beq.w	8005762 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800566c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005686:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800568e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800569a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1da      	bne.n	8005658 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e1      	bne.n	80056a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005744:	65bb      	str	r3, [r7, #88]	; 0x58
 8005746:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800574a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e4      	bne.n	8005722 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd faa0 	bl	8002ca2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800576e:	b29b      	uxth	r3, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8d4 	bl	8005924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800577c:	e0b5      	b.n	80058ea <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800578a:	b29b      	uxth	r3, r3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80a7 	beq.w	80058ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80057a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a2 	beq.w	80058ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
 80057ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e4      	bne.n	80057aa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	623b      	str	r3, [r7, #32]
   return(result);
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3308      	adds	r3, #8
 8005800:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005804:	633a      	str	r2, [r7, #48]	; 0x30
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e3      	bne.n	80057e0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60fb      	str	r3, [r7, #12]
   return(result);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	617b      	str	r3, [r7, #20]
   return(result);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e4      	bne.n	800582a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f85c 	bl	8005924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800586c:	e03f      	b.n	80058ee <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800586e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00e      	beq.n	8005898 <HAL_UART_IRQHandler+0x55c>
 800587a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800587e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800588e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f853 	bl	800593c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005896:	e02d      	b.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00e      	beq.n	80058c2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01c      	beq.n	80058f2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
    }
    return;
 80058c0:	e017      	b.n	80058f2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fd8f 	bl	80063fe <UART_EndTransmit_IT>
    return;
 80058e0:	e008      	b.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80058e2:	bf00      	nop
 80058e4:	e006      	b.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80058e6:	bf00      	nop
 80058e8:	e004      	b.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80058f2:	bf00      	nop
  }

}
 80058f4:	37e8      	adds	r7, #232	; 0xe8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4ba6      	ldr	r3, [pc, #664]	; (8005c14 <UART_SetConfig+0x2c4>)
 800597c:	4013      	ands	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	430b      	orrs	r3, r1
 8005986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a94      	ldr	r2, [pc, #592]	; (8005c18 <UART_SetConfig+0x2c8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d120      	bne.n	8005a0e <UART_SetConfig+0xbe>
 80059cc:	4b93      	ldr	r3, [pc, #588]	; (8005c1c <UART_SetConfig+0x2cc>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d816      	bhi.n	8005a08 <UART_SetConfig+0xb8>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x90>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	080059fd 	.word	0x080059fd
 80059e8:	080059f7 	.word	0x080059f7
 80059ec:	08005a03 	.word	0x08005a03
 80059f0:	2301      	movs	r3, #1
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e150      	b.n	8005c98 <UART_SetConfig+0x348>
 80059f6:	2302      	movs	r3, #2
 80059f8:	77fb      	strb	r3, [r7, #31]
 80059fa:	e14d      	b.n	8005c98 <UART_SetConfig+0x348>
 80059fc:	2304      	movs	r3, #4
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e14a      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a02:	2308      	movs	r3, #8
 8005a04:	77fb      	strb	r3, [r7, #31]
 8005a06:	e147      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e144      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a83      	ldr	r2, [pc, #524]	; (8005c20 <UART_SetConfig+0x2d0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d132      	bne.n	8005a7e <UART_SetConfig+0x12e>
 8005a18:	4b80      	ldr	r3, [pc, #512]	; (8005c1c <UART_SetConfig+0x2cc>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d828      	bhi.n	8005a78 <UART_SetConfig+0x128>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0xdc>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a61 	.word	0x08005a61
 8005a30:	08005a79 	.word	0x08005a79
 8005a34:	08005a79 	.word	0x08005a79
 8005a38:	08005a79 	.word	0x08005a79
 8005a3c:	08005a6d 	.word	0x08005a6d
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a79 	.word	0x08005a79
 8005a48:	08005a79 	.word	0x08005a79
 8005a4c:	08005a67 	.word	0x08005a67
 8005a50:	08005a79 	.word	0x08005a79
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a79 	.word	0x08005a79
 8005a5c:	08005a73 	.word	0x08005a73
 8005a60:	2300      	movs	r3, #0
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e118      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a66:	2302      	movs	r3, #2
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e115      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e112      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a72:	2308      	movs	r3, #8
 8005a74:	77fb      	strb	r3, [r7, #31]
 8005a76:	e10f      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e10c      	b.n	8005c98 <UART_SetConfig+0x348>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a68      	ldr	r2, [pc, #416]	; (8005c24 <UART_SetConfig+0x2d4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d120      	bne.n	8005aca <UART_SetConfig+0x17a>
 8005a88:	4b64      	ldr	r3, [pc, #400]	; (8005c1c <UART_SetConfig+0x2cc>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a92:	2b30      	cmp	r3, #48	; 0x30
 8005a94:	d013      	beq.n	8005abe <UART_SetConfig+0x16e>
 8005a96:	2b30      	cmp	r3, #48	; 0x30
 8005a98:	d814      	bhi.n	8005ac4 <UART_SetConfig+0x174>
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d009      	beq.n	8005ab2 <UART_SetConfig+0x162>
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d810      	bhi.n	8005ac4 <UART_SetConfig+0x174>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <UART_SetConfig+0x15c>
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d006      	beq.n	8005ab8 <UART_SetConfig+0x168>
 8005aaa:	e00b      	b.n	8005ac4 <UART_SetConfig+0x174>
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e0f2      	b.n	8005c98 <UART_SetConfig+0x348>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e0ef      	b.n	8005c98 <UART_SetConfig+0x348>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e0ec      	b.n	8005c98 <UART_SetConfig+0x348>
 8005abe:	2308      	movs	r3, #8
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e0e9      	b.n	8005c98 <UART_SetConfig+0x348>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e0e6      	b.n	8005c98 <UART_SetConfig+0x348>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a56      	ldr	r2, [pc, #344]	; (8005c28 <UART_SetConfig+0x2d8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d120      	bne.n	8005b16 <UART_SetConfig+0x1c6>
 8005ad4:	4b51      	ldr	r3, [pc, #324]	; (8005c1c <UART_SetConfig+0x2cc>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ade:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae0:	d013      	beq.n	8005b0a <UART_SetConfig+0x1ba>
 8005ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae4:	d814      	bhi.n	8005b10 <UART_SetConfig+0x1c0>
 8005ae6:	2b80      	cmp	r3, #128	; 0x80
 8005ae8:	d009      	beq.n	8005afe <UART_SetConfig+0x1ae>
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d810      	bhi.n	8005b10 <UART_SetConfig+0x1c0>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <UART_SetConfig+0x1a8>
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d006      	beq.n	8005b04 <UART_SetConfig+0x1b4>
 8005af6:	e00b      	b.n	8005b10 <UART_SetConfig+0x1c0>
 8005af8:	2300      	movs	r3, #0
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e0cc      	b.n	8005c98 <UART_SetConfig+0x348>
 8005afe:	2302      	movs	r3, #2
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e0c9      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b04:	2304      	movs	r3, #4
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e0c6      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e0c3      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b10:	2310      	movs	r3, #16
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e0c0      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a44      	ldr	r2, [pc, #272]	; (8005c2c <UART_SetConfig+0x2dc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d125      	bne.n	8005b6c <UART_SetConfig+0x21c>
 8005b20:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <UART_SetConfig+0x2cc>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b2e:	d017      	beq.n	8005b60 <UART_SetConfig+0x210>
 8005b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b34:	d817      	bhi.n	8005b66 <UART_SetConfig+0x216>
 8005b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3a:	d00b      	beq.n	8005b54 <UART_SetConfig+0x204>
 8005b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b40:	d811      	bhi.n	8005b66 <UART_SetConfig+0x216>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <UART_SetConfig+0x1fe>
 8005b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4a:	d006      	beq.n	8005b5a <UART_SetConfig+0x20a>
 8005b4c:	e00b      	b.n	8005b66 <UART_SetConfig+0x216>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e0a1      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b54:	2302      	movs	r3, #2
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e09e      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e09b      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b60:	2308      	movs	r3, #8
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e098      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b66:	2310      	movs	r3, #16
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e095      	b.n	8005c98 <UART_SetConfig+0x348>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a2f      	ldr	r2, [pc, #188]	; (8005c30 <UART_SetConfig+0x2e0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d125      	bne.n	8005bc2 <UART_SetConfig+0x272>
 8005b76:	4b29      	ldr	r3, [pc, #164]	; (8005c1c <UART_SetConfig+0x2cc>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b84:	d017      	beq.n	8005bb6 <UART_SetConfig+0x266>
 8005b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b8a:	d817      	bhi.n	8005bbc <UART_SetConfig+0x26c>
 8005b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b90:	d00b      	beq.n	8005baa <UART_SetConfig+0x25a>
 8005b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b96:	d811      	bhi.n	8005bbc <UART_SetConfig+0x26c>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <UART_SetConfig+0x254>
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba0:	d006      	beq.n	8005bb0 <UART_SetConfig+0x260>
 8005ba2:	e00b      	b.n	8005bbc <UART_SetConfig+0x26c>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e076      	b.n	8005c98 <UART_SetConfig+0x348>
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e073      	b.n	8005c98 <UART_SetConfig+0x348>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e070      	b.n	8005c98 <UART_SetConfig+0x348>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e06d      	b.n	8005c98 <UART_SetConfig+0x348>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e06a      	b.n	8005c98 <UART_SetConfig+0x348>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1b      	ldr	r2, [pc, #108]	; (8005c34 <UART_SetConfig+0x2e4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d138      	bne.n	8005c3e <UART_SetConfig+0x2ee>
 8005bcc:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <UART_SetConfig+0x2cc>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bda:	d017      	beq.n	8005c0c <UART_SetConfig+0x2bc>
 8005bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be0:	d82a      	bhi.n	8005c38 <UART_SetConfig+0x2e8>
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be6:	d00b      	beq.n	8005c00 <UART_SetConfig+0x2b0>
 8005be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bec:	d824      	bhi.n	8005c38 <UART_SetConfig+0x2e8>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <UART_SetConfig+0x2aa>
 8005bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf6:	d006      	beq.n	8005c06 <UART_SetConfig+0x2b6>
 8005bf8:	e01e      	b.n	8005c38 <UART_SetConfig+0x2e8>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e04b      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c00:	2302      	movs	r3, #2
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e048      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c06:	2304      	movs	r3, #4
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e045      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e042      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c12:	bf00      	nop
 8005c14:	efff69f3 	.word	0xefff69f3
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40004400 	.word	0x40004400
 8005c24:	40004800 	.word	0x40004800
 8005c28:	40004c00 	.word	0x40004c00
 8005c2c:	40005000 	.word	0x40005000
 8005c30:	40011400 	.word	0x40011400
 8005c34:	40007800 	.word	0x40007800
 8005c38:	2310      	movs	r3, #16
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e02c      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a72      	ldr	r2, [pc, #456]	; (8005e0c <UART_SetConfig+0x4bc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d125      	bne.n	8005c94 <UART_SetConfig+0x344>
 8005c48:	4b71      	ldr	r3, [pc, #452]	; (8005e10 <UART_SetConfig+0x4c0>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c56:	d017      	beq.n	8005c88 <UART_SetConfig+0x338>
 8005c58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c5c:	d817      	bhi.n	8005c8e <UART_SetConfig+0x33e>
 8005c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c62:	d00b      	beq.n	8005c7c <UART_SetConfig+0x32c>
 8005c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c68:	d811      	bhi.n	8005c8e <UART_SetConfig+0x33e>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <UART_SetConfig+0x326>
 8005c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c72:	d006      	beq.n	8005c82 <UART_SetConfig+0x332>
 8005c74:	e00b      	b.n	8005c8e <UART_SetConfig+0x33e>
 8005c76:	2300      	movs	r3, #0
 8005c78:	77fb      	strb	r3, [r7, #31]
 8005c7a:	e00d      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e00a      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c82:	2304      	movs	r3, #4
 8005c84:	77fb      	strb	r3, [r7, #31]
 8005c86:	e007      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	77fb      	strb	r3, [r7, #31]
 8005c8c:	e004      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c8e:	2310      	movs	r3, #16
 8005c90:	77fb      	strb	r3, [r7, #31]
 8005c92:	e001      	b.n	8005c98 <UART_SetConfig+0x348>
 8005c94:	2310      	movs	r3, #16
 8005c96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca0:	d15b      	bne.n	8005d5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d828      	bhi.n	8005cfa <UART_SetConfig+0x3aa>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0x360>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005cfb 	.word	0x08005cfb
 8005cc0:	08005ceb 	.word	0x08005ceb
 8005cc4:	08005cfb 	.word	0x08005cfb
 8005cc8:	08005cfb 	.word	0x08005cfb
 8005ccc:	08005cfb 	.word	0x08005cfb
 8005cd0:	08005cf3 	.word	0x08005cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd4:	f7fe f8c4 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8005cd8:	61b8      	str	r0, [r7, #24]
        break;
 8005cda:	e013      	b.n	8005d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fe f8d4 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	61b8      	str	r0, [r7, #24]
        break;
 8005ce2:	e00f      	b.n	8005d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce4:	4b4b      	ldr	r3, [pc, #300]	; (8005e14 <UART_SetConfig+0x4c4>)
 8005ce6:	61bb      	str	r3, [r7, #24]
        break;
 8005ce8:	e00c      	b.n	8005d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cea:	f7fd ffa7 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8005cee:	61b8      	str	r0, [r7, #24]
        break;
 8005cf0:	e008      	b.n	8005d04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf6:	61bb      	str	r3, [r7, #24]
        break;
 8005cf8:	e004      	b.n	8005d04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	77bb      	strb	r3, [r7, #30]
        break;
 8005d02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d074      	beq.n	8005df4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	005a      	lsls	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b0f      	cmp	r3, #15
 8005d24:	d916      	bls.n	8005d54 <UART_SetConfig+0x404>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d212      	bcs.n	8005d54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f023 030f 	bic.w	r3, r3, #15
 8005d36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	89fb      	ldrh	r3, [r7, #14]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	89fa      	ldrh	r2, [r7, #14]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	e04f      	b.n	8005df4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	77bb      	strb	r3, [r7, #30]
 8005d58:	e04c      	b.n	8005df4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d828      	bhi.n	8005db2 <UART_SetConfig+0x462>
 8005d60:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <UART_SetConfig+0x418>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d9d 	.word	0x08005d9d
 8005d74:	08005db3 	.word	0x08005db3
 8005d78:	08005da3 	.word	0x08005da3
 8005d7c:	08005db3 	.word	0x08005db3
 8005d80:	08005db3 	.word	0x08005db3
 8005d84:	08005db3 	.word	0x08005db3
 8005d88:	08005dab 	.word	0x08005dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d8c:	f7fe f868 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8005d90:	61b8      	str	r0, [r7, #24]
        break;
 8005d92:	e013      	b.n	8005dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d94:	f7fe f878 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 8005d98:	61b8      	str	r0, [r7, #24]
        break;
 8005d9a:	e00f      	b.n	8005dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d9c:	4b1d      	ldr	r3, [pc, #116]	; (8005e14 <UART_SetConfig+0x4c4>)
 8005d9e:	61bb      	str	r3, [r7, #24]
        break;
 8005da0:	e00c      	b.n	8005dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da2:	f7fd ff4b 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8005da6:	61b8      	str	r0, [r7, #24]
        break;
 8005da8:	e008      	b.n	8005dbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	61bb      	str	r3, [r7, #24]
        break;
 8005db0:	e004      	b.n	8005dbc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dba:	bf00      	nop
    }

    if (pclk != 0U)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d018      	beq.n	8005df4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	085a      	lsrs	r2, r3, #1
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	441a      	add	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b0f      	cmp	r3, #15
 8005dda:	d909      	bls.n	8005df0 <UART_SetConfig+0x4a0>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de2:	d205      	bcs.n	8005df0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	e001      	b.n	8005df4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e00:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40007c00 	.word	0x40007c00
 8005e10:	40023800 	.word	0x40023800
 8005e14:	00f42400 	.word	0x00f42400

08005e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01a      	beq.n	8005f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f16:	d10a      	bne.n	8005f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f6c:	f7fb feea 	bl	8001d44 <HAL_GetTick>
 8005f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d10e      	bne.n	8005f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f82d 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e023      	b.n	8005fe6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d10e      	bne.n	8005fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f817 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e00d      	b.n	8005fe6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b09c      	sub	sp, #112	; 0x70
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffe:	e0a5      	b.n	800614c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	f000 80a1 	beq.w	800614c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600a:	f7fb fe9b 	bl	8001d44 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <UART_WaitOnFlagUntilTimeout+0x32>
 800601a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800601c:	2b00      	cmp	r3, #0
 800601e:	d13e      	bne.n	800609e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800602e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006034:	667b      	str	r3, [r7, #100]	; 0x64
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006040:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800604c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e6      	bne.n	8006020 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	663b      	str	r3, [r7, #96]	; 0x60
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006072:	64ba      	str	r2, [r7, #72]	; 0x48
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e5      	bne.n	8006052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e067      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d04f      	beq.n	800614c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ba:	d147      	bne.n	800614c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
 80060e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e6      	bne.n	80060c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3308      	adds	r3, #8
 80060fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	613b      	str	r3, [r7, #16]
   return(result);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 0301 	bic.w	r3, r3, #1
 800610e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006118:	623a      	str	r2, [r7, #32]
 800611a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	69f9      	ldr	r1, [r7, #28]
 800611e:	6a3a      	ldr	r2, [r7, #32]
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	61bb      	str	r3, [r7, #24]
   return(result);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e5      	bne.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e010      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69da      	ldr	r2, [r3, #28]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	429a      	cmp	r2, r3
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	429a      	cmp	r2, r3
 8006168:	f43f af4a 	beq.w	8006000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3770      	adds	r7, #112	; 0x70
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006178:	b480      	push	{r7}
 800617a:	b097      	sub	sp, #92	; 0x5c
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061aa:	d10e      	bne.n	80061ca <UART_Start_Receive_IT+0x52>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <UART_Start_Receive_IT+0x48>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061be:	e02d      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	22ff      	movs	r2, #255	; 0xff
 80061c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061c8:	e028      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10d      	bne.n	80061ee <UART_Start_Receive_IT+0x76>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <UART_Start_Receive_IT+0x6c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061e2:	e01b      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	227f      	movs	r2, #127	; 0x7f
 80061e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061ec:	e016      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061f6:	d10d      	bne.n	8006214 <UART_Start_Receive_IT+0x9c>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <UART_Start_Receive_IT+0x92>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	227f      	movs	r2, #127	; 0x7f
 8006204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006208:	e008      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	223f      	movs	r2, #63	; 0x3f
 800620e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006212:	e003      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2222      	movs	r2, #34	; 0x22
 8006228:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	657b      	str	r3, [r7, #84]	; 0x54
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800624a:	64ba      	str	r2, [r7, #72]	; 0x48
 800624c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006266:	d107      	bne.n	8006278 <UART_Start_Receive_IT+0x100>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d103      	bne.n	8006278 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a24      	ldr	r2, [pc, #144]	; (8006304 <UART_Start_Receive_IT+0x18c>)
 8006274:	665a      	str	r2, [r3, #100]	; 0x64
 8006276:	e002      	b.n	800627e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a23      	ldr	r2, [pc, #140]	; (8006308 <UART_Start_Receive_IT+0x190>)
 800627c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d019      	beq.n	80062c2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
 80062ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e6      	bne.n	800628e <UART_Start_Receive_IT+0x116>
 80062c0:	e018      	b.n	80062f4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	613b      	str	r3, [r7, #16]
   return(result);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f043 0320 	orr.w	r3, r3, #32
 80062d6:	653b      	str	r3, [r7, #80]	; 0x50
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e0:	623b      	str	r3, [r7, #32]
 80062e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	69f9      	ldr	r1, [r7, #28]
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e6      	bne.n	80062c2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	375c      	adds	r7, #92	; 0x5c
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	080065af 	.word	0x080065af
 8006308:	08006453 	.word	0x08006453

0800630c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b095      	sub	sp, #84	; 0x54
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006332:	643b      	str	r3, [r7, #64]	; 0x40
 8006334:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e6      	bne.n	8006314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	61fb      	str	r3, [r7, #28]
   return(result);
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	64bb      	str	r3, [r7, #72]	; 0x48
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e5      	bne.n	8006346 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637e:	2b01      	cmp	r3, #1
 8006380:	d118      	bne.n	80063b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	647b      	str	r3, [r7, #68]	; 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	613b      	str	r3, [r7, #16]
   return(result);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e6      	bne.n	8006382 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063c6:	bf00      	nop
 80063c8:	3754      	adds	r7, #84	; 0x54
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff fa8d 	bl	8005910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b088      	sub	sp, #32
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	60bb      	str	r3, [r7, #8]
   return(result);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6979      	ldr	r1, [r7, #20]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	613b      	str	r3, [r7, #16]
   return(result);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fa59 	bl	80058fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800644a:	bf00      	nop
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b096      	sub	sp, #88	; 0x58
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006460:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006468:	2b22      	cmp	r3, #34	; 0x22
 800646a:	f040 8094 	bne.w	8006596 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006478:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800647c:	b2d9      	uxtb	r1, r3
 800647e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006482:	b2da      	uxtb	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006488:	400a      	ands	r2, r1
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d177      	bne.n	80065a6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
 80064d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e6      	bne.n	80064b6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	623b      	str	r3, [r7, #32]
   return(result);
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006508:	633a      	str	r2, [r7, #48]	; 0x30
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800650e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e5      	bne.n	80064e8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652c:	2b01      	cmp	r3, #1
 800652e:	d12e      	bne.n	800658e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	60fb      	str	r3, [r7, #12]
   return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	64bb      	str	r3, [r7, #72]	; 0x48
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	69b9      	ldr	r1, [r7, #24]
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	617b      	str	r3, [r7, #20]
   return(result);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e6      	bne.n	8006536 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d103      	bne.n	800657e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2210      	movs	r2, #16
 800657c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff f9cc 	bl	8005924 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800658c:	e00b      	b.n	80065a6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fa ff08 	bl	80013a4 <HAL_UART_RxCpltCallback>
}
 8006594:	e007      	b.n	80065a6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0208 	orr.w	r2, r2, #8
 80065a4:	619a      	str	r2, [r3, #24]
}
 80065a6:	bf00      	nop
 80065a8:	3758      	adds	r7, #88	; 0x58
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b096      	sub	sp, #88	; 0x58
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c4:	2b22      	cmp	r3, #34	; 0x22
 80065c6:	f040 8094 	bne.w	80066f2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80065da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80065de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065e2:	4013      	ands	r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	1c9a      	adds	r2, r3, #2
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d177      	bne.n	8006702 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
 8006632:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e6      	bne.n	8006612 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	61fb      	str	r3, [r7, #28]
   return(result);
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	64bb      	str	r3, [r7, #72]	; 0x48
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006664:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800666a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e5      	bne.n	8006644 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006688:	2b01      	cmp	r3, #1
 800668a:	d12e      	bne.n	80066ea <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	647b      	str	r3, [r7, #68]	; 0x44
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6979      	ldr	r1, [r7, #20]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	613b      	str	r3, [r7, #16]
   return(result);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e6      	bne.n	8006692 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d103      	bne.n	80066da <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2210      	movs	r2, #16
 80066d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff f91e 	bl	8005924 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066e8:	e00b      	b.n	8006702 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fa fe5a 	bl	80013a4 <HAL_UART_RxCpltCallback>
}
 80066f0:	e007      	b.n	8006702 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0208 	orr.w	r2, r2, #8
 8006700:	619a      	str	r2, [r3, #24]
}
 8006702:	bf00      	nop
 8006704:	3758      	adds	r7, #88	; 0x58
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800670c:	b084      	sub	sp, #16
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	f107 001c 	add.w	r0, r7, #28
 800671a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	2b01      	cmp	r3, #1
 8006722:	d120      	bne.n	8006766 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <USB_CoreInit+0xac>)
 8006736:	4013      	ands	r3, r2
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa92 	bl	8006c84 <USB_CoreReset>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e010      	b.n	8006788 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa86 	bl	8006c84 <USB_CoreReset>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	2b01      	cmp	r3, #1
 800678c:	d10b      	bne.n	80067a6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f043 0206 	orr.w	r2, r3, #6
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b2:	b004      	add	sp, #16
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	ffbdffbf 	.word	0xffbdffbf

080067bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f023 0201 	bic.w	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d115      	bne.n	800682c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800680c:	2001      	movs	r0, #1
 800680e:	f7fb faa5 	bl	8001d5c <HAL_Delay>
      ms++;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3301      	adds	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fa25 	bl	8006c68 <USB_GetMode>
 800681e:	4603      	mov	r3, r0
 8006820:	2b01      	cmp	r3, #1
 8006822:	d01e      	beq.n	8006862 <USB_SetCurrentMode+0x84>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b31      	cmp	r3, #49	; 0x31
 8006828:	d9f0      	bls.n	800680c <USB_SetCurrentMode+0x2e>
 800682a:	e01a      	b.n	8006862 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d115      	bne.n	800685e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800683e:	2001      	movs	r0, #1
 8006840:	f7fb fa8c 	bl	8001d5c <HAL_Delay>
      ms++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa0c 	bl	8006c68 <USB_GetMode>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <USB_SetCurrentMode+0x84>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b31      	cmp	r3, #49	; 0x31
 800685a:	d9f0      	bls.n	800683e <USB_SetCurrentMode+0x60>
 800685c:	e001      	b.n	8006862 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e005      	b.n	800686e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b32      	cmp	r3, #50	; 0x32
 8006866:	d101      	bne.n	800686c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006878:	b084      	sub	sp, #16
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	e009      	b.n	80068ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3340      	adds	r3, #64	; 0x40
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3301      	adds	r3, #1
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b0e      	cmp	r3, #14
 80068b0:	d9f2      	bls.n	8006898 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11c      	bne.n	80068f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c6:	f043 0302 	orr.w	r3, r3, #2
 80068ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	e005      	b.n	80068fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006904:	461a      	mov	r2, r3
 8006906:	2300      	movs	r3, #0
 8006908:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006910:	4619      	mov	r1, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006918:	461a      	mov	r2, r3
 800691a:	680b      	ldr	r3, [r1, #0]
 800691c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b01      	cmp	r3, #1
 8006922:	d10c      	bne.n	800693e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800692a:	2100      	movs	r1, #0
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f961 	bl	8006bf4 <USB_SetDevSpeed>
 8006932:	e008      	b.n	8006946 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006934:	2101      	movs	r1, #1
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f95c 	bl	8006bf4 <USB_SetDevSpeed>
 800693c:	e003      	b.n	8006946 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800693e:	2103      	movs	r1, #3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f957 	bl	8006bf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006946:	2110      	movs	r1, #16
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8f3 	bl	8006b34 <USB_FlushTxFifo>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f91d 	bl	8006b98 <USB_FlushRxFifo>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	461a      	mov	r2, r3
 8006970:	2300      	movs	r3, #0
 8006972:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006986:	461a      	mov	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800698c:	2300      	movs	r3, #0
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e043      	b.n	8006a1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a8:	d118      	bne.n	80069dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	461a      	mov	r2, r3
 80069be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e013      	b.n	80069ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	461a      	mov	r2, r3
 80069d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e008      	b.n	80069ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	461a      	mov	r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3301      	adds	r3, #1
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d3b7      	bcc.n	8006992 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	e043      	b.n	8006ab0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a3e:	d118      	bne.n	8006a72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	461a      	mov	r2, r3
 8006a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e013      	b.n	8006a84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e008      	b.n	8006a84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2300      	movs	r3, #0
 8006a82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d3b7      	bcc.n	8006a28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ad8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d105      	bne.n	8006aec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	f043 0210 	orr.w	r2, r3, #16
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <USB_DevInit+0x2b4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f043 0208 	orr.w	r2, r3, #8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d105      	bne.n	8006b1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <USB_DevInit+0x2b8>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b28:	b004      	add	sp, #16
 8006b2a:	4770      	bx	lr
 8006b2c:	803c3800 	.word	0x803c3800
 8006b30:	40000004 	.word	0x40000004

08006b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <USB_FlushTxFifo+0x60>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e01a      	b.n	8006b88 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	daf3      	bge.n	8006b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	019b      	lsls	r3, r3, #6
 8006b62:	f043 0220 	orr.w	r2, r3, #32
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <USB_FlushTxFifo+0x60>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e006      	b.n	8006b88 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d0f1      	beq.n	8006b6a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	00030d40 	.word	0x00030d40

08006b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	4a11      	ldr	r2, [pc, #68]	; (8006bf0 <USB_FlushRxFifo+0x58>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e017      	b.n	8006be4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	daf3      	bge.n	8006ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	4a08      	ldr	r2, [pc, #32]	; (8006bf0 <USB_FlushRxFifo+0x58>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e006      	b.n	8006be4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0310 	and.w	r3, r3, #16
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d0f1      	beq.n	8006bc6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	00030d40 	.word	0x00030d40

08006bf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c14:	4313      	orrs	r3, r2
 8006c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c40:	f023 0303 	bic.w	r3, r3, #3
 8006c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c54:	f043 0302 	orr.w	r3, r3, #2
 8006c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0301 	and.w	r3, r3, #1
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3301      	adds	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	4a13      	ldr	r2, [pc, #76]	; (8006ce4 <USB_CoreReset+0x60>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d901      	bls.n	8006ca0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e01a      	b.n	8006cd6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	daf3      	bge.n	8006c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f043 0201 	orr.w	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <USB_CoreReset+0x60>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e006      	b.n	8006cd6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d0f1      	beq.n	8006cb8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	00030d40 	.word	0x00030d40

08006ce8 <atoi>:
 8006ce8:	220a      	movs	r2, #10
 8006cea:	2100      	movs	r1, #0
 8006cec:	f000 b8c8 	b.w	8006e80 <strtol>

08006cf0 <__errno>:
 8006cf0:	4b01      	ldr	r3, [pc, #4]	; (8006cf8 <__errno+0x8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20000018 	.word	0x20000018

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4d0d      	ldr	r5, [pc, #52]	; (8006d34 <__libc_init_array+0x38>)
 8006d00:	4c0d      	ldr	r4, [pc, #52]	; (8006d38 <__libc_init_array+0x3c>)
 8006d02:	1b64      	subs	r4, r4, r5
 8006d04:	10a4      	asrs	r4, r4, #2
 8006d06:	2600      	movs	r6, #0
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	4d0b      	ldr	r5, [pc, #44]	; (8006d3c <__libc_init_array+0x40>)
 8006d0e:	4c0c      	ldr	r4, [pc, #48]	; (8006d40 <__libc_init_array+0x44>)
 8006d10:	f000 f8c0 	bl	8006e94 <_init>
 8006d14:	1b64      	subs	r4, r4, r5
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	2600      	movs	r6, #0
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	08007070 	.word	0x08007070
 8006d38:	08007070 	.word	0x08007070
 8006d3c:	08007070 	.word	0x08007070
 8006d40:	08007074 	.word	0x08007074

08006d44 <memset>:
 8006d44:	4402      	add	r2, r0
 8006d46:	4603      	mov	r3, r0
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d100      	bne.n	8006d4e <memset+0xa>
 8006d4c:	4770      	bx	lr
 8006d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d52:	e7f9      	b.n	8006d48 <memset+0x4>

08006d54 <strncmp>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	b17a      	cbz	r2, 8006d78 <strncmp+0x24>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	3901      	subs	r1, #1
 8006d5c:	1884      	adds	r4, r0, r2
 8006d5e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006d66:	4290      	cmp	r0, r2
 8006d68:	d101      	bne.n	8006d6e <strncmp+0x1a>
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	d101      	bne.n	8006d72 <strncmp+0x1e>
 8006d6e:	1a80      	subs	r0, r0, r2
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1f3      	bne.n	8006d5e <strncmp+0xa>
 8006d76:	e7fa      	b.n	8006d6e <strncmp+0x1a>
 8006d78:	4610      	mov	r0, r2
 8006d7a:	e7f9      	b.n	8006d70 <strncmp+0x1c>

08006d7c <_strtol_l.constprop.0>:
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d82:	d001      	beq.n	8006d88 <_strtol_l.constprop.0+0xc>
 8006d84:	2b24      	cmp	r3, #36	; 0x24
 8006d86:	d906      	bls.n	8006d96 <_strtol_l.constprop.0+0x1a>
 8006d88:	f7ff ffb2 	bl	8006cf0 <__errno>
 8006d8c:	2316      	movs	r3, #22
 8006d8e:	6003      	str	r3, [r0, #0]
 8006d90:	2000      	movs	r0, #0
 8006d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e7c <_strtol_l.constprop.0+0x100>
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	462e      	mov	r6, r5
 8006d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006da2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006da6:	f017 0708 	ands.w	r7, r7, #8
 8006daa:	d1f7      	bne.n	8006d9c <_strtol_l.constprop.0+0x20>
 8006dac:	2c2d      	cmp	r4, #45	; 0x2d
 8006dae:	d132      	bne.n	8006e16 <_strtol_l.constprop.0+0x9a>
 8006db0:	782c      	ldrb	r4, [r5, #0]
 8006db2:	2701      	movs	r7, #1
 8006db4:	1cb5      	adds	r5, r6, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d05b      	beq.n	8006e72 <_strtol_l.constprop.0+0xf6>
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d109      	bne.n	8006dd2 <_strtol_l.constprop.0+0x56>
 8006dbe:	2c30      	cmp	r4, #48	; 0x30
 8006dc0:	d107      	bne.n	8006dd2 <_strtol_l.constprop.0+0x56>
 8006dc2:	782c      	ldrb	r4, [r5, #0]
 8006dc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dc8:	2c58      	cmp	r4, #88	; 0x58
 8006dca:	d14d      	bne.n	8006e68 <_strtol_l.constprop.0+0xec>
 8006dcc:	786c      	ldrb	r4, [r5, #1]
 8006dce:	2310      	movs	r3, #16
 8006dd0:	3502      	adds	r5, #2
 8006dd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dda:	f04f 0c00 	mov.w	ip, #0
 8006dde:	fbb8 f9f3 	udiv	r9, r8, r3
 8006de2:	4666      	mov	r6, ip
 8006de4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006de8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006dec:	f1be 0f09 	cmp.w	lr, #9
 8006df0:	d816      	bhi.n	8006e20 <_strtol_l.constprop.0+0xa4>
 8006df2:	4674      	mov	r4, lr
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	dd24      	ble.n	8006e42 <_strtol_l.constprop.0+0xc6>
 8006df8:	f1bc 0f00 	cmp.w	ip, #0
 8006dfc:	db1e      	blt.n	8006e3c <_strtol_l.constprop.0+0xc0>
 8006dfe:	45b1      	cmp	r9, r6
 8006e00:	d31c      	bcc.n	8006e3c <_strtol_l.constprop.0+0xc0>
 8006e02:	d101      	bne.n	8006e08 <_strtol_l.constprop.0+0x8c>
 8006e04:	45a2      	cmp	sl, r4
 8006e06:	db19      	blt.n	8006e3c <_strtol_l.constprop.0+0xc0>
 8006e08:	fb06 4603 	mla	r6, r6, r3, r4
 8006e0c:	f04f 0c01 	mov.w	ip, #1
 8006e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e14:	e7e8      	b.n	8006de8 <_strtol_l.constprop.0+0x6c>
 8006e16:	2c2b      	cmp	r4, #43	; 0x2b
 8006e18:	bf04      	itt	eq
 8006e1a:	782c      	ldrbeq	r4, [r5, #0]
 8006e1c:	1cb5      	addeq	r5, r6, #2
 8006e1e:	e7ca      	b.n	8006db6 <_strtol_l.constprop.0+0x3a>
 8006e20:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006e24:	f1be 0f19 	cmp.w	lr, #25
 8006e28:	d801      	bhi.n	8006e2e <_strtol_l.constprop.0+0xb2>
 8006e2a:	3c37      	subs	r4, #55	; 0x37
 8006e2c:	e7e2      	b.n	8006df4 <_strtol_l.constprop.0+0x78>
 8006e2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006e32:	f1be 0f19 	cmp.w	lr, #25
 8006e36:	d804      	bhi.n	8006e42 <_strtol_l.constprop.0+0xc6>
 8006e38:	3c57      	subs	r4, #87	; 0x57
 8006e3a:	e7db      	b.n	8006df4 <_strtol_l.constprop.0+0x78>
 8006e3c:	f04f 3cff 	mov.w	ip, #4294967295
 8006e40:	e7e6      	b.n	8006e10 <_strtol_l.constprop.0+0x94>
 8006e42:	f1bc 0f00 	cmp.w	ip, #0
 8006e46:	da05      	bge.n	8006e54 <_strtol_l.constprop.0+0xd8>
 8006e48:	2322      	movs	r3, #34	; 0x22
 8006e4a:	6003      	str	r3, [r0, #0]
 8006e4c:	4646      	mov	r6, r8
 8006e4e:	b942      	cbnz	r2, 8006e62 <_strtol_l.constprop.0+0xe6>
 8006e50:	4630      	mov	r0, r6
 8006e52:	e79e      	b.n	8006d92 <_strtol_l.constprop.0+0x16>
 8006e54:	b107      	cbz	r7, 8006e58 <_strtol_l.constprop.0+0xdc>
 8006e56:	4276      	negs	r6, r6
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	d0f9      	beq.n	8006e50 <_strtol_l.constprop.0+0xd4>
 8006e5c:	f1bc 0f00 	cmp.w	ip, #0
 8006e60:	d000      	beq.n	8006e64 <_strtol_l.constprop.0+0xe8>
 8006e62:	1e69      	subs	r1, r5, #1
 8006e64:	6011      	str	r1, [r2, #0]
 8006e66:	e7f3      	b.n	8006e50 <_strtol_l.constprop.0+0xd4>
 8006e68:	2430      	movs	r4, #48	; 0x30
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1b1      	bne.n	8006dd2 <_strtol_l.constprop.0+0x56>
 8006e6e:	2308      	movs	r3, #8
 8006e70:	e7af      	b.n	8006dd2 <_strtol_l.constprop.0+0x56>
 8006e72:	2c30      	cmp	r4, #48	; 0x30
 8006e74:	d0a5      	beq.n	8006dc2 <_strtol_l.constprop.0+0x46>
 8006e76:	230a      	movs	r3, #10
 8006e78:	e7ab      	b.n	8006dd2 <_strtol_l.constprop.0+0x56>
 8006e7a:	bf00      	nop
 8006e7c:	08006f65 	.word	0x08006f65

08006e80 <strtol>:
 8006e80:	4613      	mov	r3, r2
 8006e82:	460a      	mov	r2, r1
 8006e84:	4601      	mov	r1, r0
 8006e86:	4802      	ldr	r0, [pc, #8]	; (8006e90 <strtol+0x10>)
 8006e88:	6800      	ldr	r0, [r0, #0]
 8006e8a:	f7ff bf77 	b.w	8006d7c <_strtol_l.constprop.0>
 8006e8e:	bf00      	nop
 8006e90:	20000018 	.word	0x20000018

08006e94 <_init>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr

08006ea0 <_fini>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	bf00      	nop
 8006ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea6:	bc08      	pop	{r3}
 8006ea8:	469e      	mov	lr, r3
 8006eaa:	4770      	bx	lr
