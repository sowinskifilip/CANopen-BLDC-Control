
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006010  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006280  08006280  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006280  08006280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006288  08006288  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000010  080062a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  080062a0  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b45  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003229  00000000  00000000  00039b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cba  00000000  00000000  0003f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c1c  00000000  00000000  00068f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100c6d  00000000  00000000  00081b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001827cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  00182820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080061f0 	.word	0x080061f0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080061f0 	.word	0x080061f0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_CAN1_Init+0x68>)
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <MX_CAN1_Init+0x6c>)
 8000538:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_CAN1_Init+0x68>)
 800053c:	2210      	movs	r2, #16
 800053e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_CAN1_Init+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_CAN1_Init+0x68>)
 8000548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800054c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_CAN1_Init+0x68>)
 8000550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000554:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_CAN1_Init+0x68>)
 8000558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800055c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_CAN1_Init+0x68>)
 8000560:	2200      	movs	r2, #0
 8000562:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_CAN1_Init+0x68>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CAN1_Init+0x68>)
 8000584:	f001 f804 	bl	8001590 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f000 fd65 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c
 800059c:	40006400 	.word	0x40006400

080005a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_CAN_MspInit+0x8c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12f      	bne.n	8000622 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	2303      	movs	r3, #3
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000602:	2309      	movs	r3, #9
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_CAN_MspInit+0x94>)
 800060e:	f001 ffd1 	bl	80025b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2014      	movs	r0, #20
 8000618:	f001 ff03 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061c:	2014      	movs	r0, #20
 800061e:	f001 ff1c 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40006400 	.word	0x40006400
 8000630:	40023800 	.word	0x40023800
 8000634:	40020c00 	.word	0x40020c00

08000638 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a6b      	ldr	r2, [pc, #428]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b69      	ldr	r3, [pc, #420]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a65      	ldr	r2, [pc, #404]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a5f      	ldr	r2, [pc, #380]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a53      	ldr	r2, [pc, #332]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e4:	4847      	ldr	r0, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1cc>)
 80006e6:	f002 f911 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80006f0:	f002 f90c 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d4>)
 800070c:	f001 ff52 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <MX_GPIO_Init+0x1d4>)
 800072c:	f001 ff42 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000730:	2386      	movs	r3, #134	; 0x86
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x1d8>)
 800074c:	f001 ff32 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000750:	f244 0381 	movw	r3, #16513	; 0x4081
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800076a:	f001 ff23 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800078c:	f001 ff12 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007a8:	f001 ff04 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007c0:	f001 fef8 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007e2:	f001 fee7 	bl	80025b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f001 fe19 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f001 fe32 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <Init>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//INIT FUNCTION
void Init(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000818:	4bba      	ldr	r3, [pc, #744]	; (8000b04 <Init+0x2f0>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b3c      	cmp	r3, #60	; 0x3c
 800081e:	f200 825d 	bhi.w	8000cdc <Init+0x4c8>
 8000822:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <Init+0x14>)
 8000824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000828:	0800091d 	.word	0x0800091d
 800082c:	08000cdd 	.word	0x08000cdd
 8000830:	08000cdd 	.word	0x08000cdd
 8000834:	08000cdd 	.word	0x08000cdd
 8000838:	08000cdd 	.word	0x08000cdd
 800083c:	08000981 	.word	0x08000981
 8000840:	08000cdd 	.word	0x08000cdd
 8000844:	08000cdd 	.word	0x08000cdd
 8000848:	08000cdd 	.word	0x08000cdd
 800084c:	08000cdd 	.word	0x08000cdd
 8000850:	080009c5 	.word	0x080009c5
 8000854:	08000cdd 	.word	0x08000cdd
 8000858:	08000cdd 	.word	0x08000cdd
 800085c:	08000cdd 	.word	0x08000cdd
 8000860:	08000cdd 	.word	0x08000cdd
 8000864:	08000cdd 	.word	0x08000cdd
 8000868:	08000cdd 	.word	0x08000cdd
 800086c:	08000cdd 	.word	0x08000cdd
 8000870:	08000cdd 	.word	0x08000cdd
 8000874:	08000cdd 	.word	0x08000cdd
 8000878:	08000a2f 	.word	0x08000a2f
 800087c:	08000cdd 	.word	0x08000cdd
 8000880:	08000cdd 	.word	0x08000cdd
 8000884:	08000cdd 	.word	0x08000cdd
 8000888:	08000cdd 	.word	0x08000cdd
 800088c:	08000a99 	.word	0x08000a99
 8000890:	08000cdd 	.word	0x08000cdd
 8000894:	08000cdd 	.word	0x08000cdd
 8000898:	08000cdd 	.word	0x08000cdd
 800089c:	08000cdd 	.word	0x08000cdd
 80008a0:	08000b35 	.word	0x08000b35
 80008a4:	08000cdd 	.word	0x08000cdd
 80008a8:	08000cdd 	.word	0x08000cdd
 80008ac:	08000cdd 	.word	0x08000cdd
 80008b0:	08000cdd 	.word	0x08000cdd
 80008b4:	08000cdd 	.word	0x08000cdd
 80008b8:	08000cdd 	.word	0x08000cdd
 80008bc:	08000cdd 	.word	0x08000cdd
 80008c0:	08000cdd 	.word	0x08000cdd
 80008c4:	08000cdd 	.word	0x08000cdd
 80008c8:	08000b9f 	.word	0x08000b9f
 80008cc:	08000cdd 	.word	0x08000cdd
 80008d0:	08000cdd 	.word	0x08000cdd
 80008d4:	08000cdd 	.word	0x08000cdd
 80008d8:	08000cdd 	.word	0x08000cdd
 80008dc:	08000cdd 	.word	0x08000cdd
 80008e0:	08000cdd 	.word	0x08000cdd
 80008e4:	08000cdd 	.word	0x08000cdd
 80008e8:	08000cdd 	.word	0x08000cdd
 80008ec:	08000cdd 	.word	0x08000cdd
 80008f0:	08000c09 	.word	0x08000c09
 80008f4:	08000cdd 	.word	0x08000cdd
 80008f8:	08000cdd 	.word	0x08000cdd
 80008fc:	08000cdd 	.word	0x08000cdd
 8000900:	08000cdd 	.word	0x08000cdd
 8000904:	08000cdd 	.word	0x08000cdd
 8000908:	08000cdd 	.word	0x08000cdd
 800090c:	08000cdd 	.word	0x08000cdd
 8000910:	08000cdd 	.word	0x08000cdd
 8000914:	08000cdd 	.word	0x08000cdd
 8000918:	08000c73 	.word	0x08000c73
	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 800091c:	4b7a      	ldr	r3, [pc, #488]	; (8000b08 <Init+0x2f4>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000922:	4b79      	ldr	r3, [pc, #484]	; (8000b08 <Init+0x2f4>)
 8000924:	2202      	movs	r2, #2
 8000926:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 8000928:	4b78      	ldr	r3, [pc, #480]	; (8000b0c <Init+0x2f8>)
 800092a:	2282      	movs	r2, #130	; 0x82
 800092c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 800092e:	4b77      	ldr	r3, [pc, #476]	; (8000b0c <Init+0x2f8>)
 8000930:	220a      	movs	r2, #10
 8000932:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000934:	4b76      	ldr	r3, [pc, #472]	; (8000b10 <Init+0x2fc>)
 8000936:	4a75      	ldr	r2, [pc, #468]	; (8000b0c <Init+0x2f8>)
 8000938:	4973      	ldr	r1, [pc, #460]	; (8000b08 <Init+0x2f4>)
 800093a:	4876      	ldr	r0, [pc, #472]	; (8000b14 <Init+0x300>)
 800093c:	f001 f854 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d012      	beq.n	800096c <Init+0x158>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2101      	movs	r1, #1
 800094a:	4873      	ldr	r0, [pc, #460]	; (8000b18 <Init+0x304>)
 800094c:	f001 ffde 	bl	800290c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4870      	ldr	r0, [pc, #448]	; (8000b18 <Init+0x304>)
 8000956:	f001 ffd9 	bl	800290c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000960:	486d      	ldr	r0, [pc, #436]	; (8000b18 <Init+0x304>)
 8000962:	f001 ffd3 	bl	800290c <HAL_GPIO_WritePin>
			Error_Handler();
 8000966:	f000 fb79 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 800096a:	e1b7      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 5;
 800096c:	4b65      	ldr	r3, [pc, #404]	; (8000b04 <Init+0x2f0>)
 800096e:	2205      	movs	r2, #5
 8000970:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	2204      	movs	r2, #4
 8000976:	4969      	ldr	r1, [pc, #420]	; (8000b1c <Init+0x308>)
 8000978:	4869      	ldr	r0, [pc, #420]	; (8000b20 <Init+0x30c>)
 800097a:	f003 fe45 	bl	8004608 <HAL_UART_Transmit>
		break;
 800097e:	e1ad      	b.n	8000cdc <Init+0x4c8>
	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 8000980:	4b61      	ldr	r3, [pc, #388]	; (8000b08 <Init+0x2f4>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000986:	4b60      	ldr	r3, [pc, #384]	; (8000b08 <Init+0x2f4>)
 8000988:	2202      	movs	r2, #2
 800098a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 800098c:	4b5f      	ldr	r3, [pc, #380]	; (8000b0c <Init+0x2f8>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000992:	4b5e      	ldr	r3, [pc, #376]	; (8000b0c <Init+0x2f8>)
 8000994:	220a      	movs	r2, #10
 8000996:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000998:	4b5d      	ldr	r3, [pc, #372]	; (8000b10 <Init+0x2fc>)
 800099a:	4a5c      	ldr	r2, [pc, #368]	; (8000b0c <Init+0x2f8>)
 800099c:	495a      	ldr	r1, [pc, #360]	; (8000b08 <Init+0x2f4>)
 800099e:	485d      	ldr	r0, [pc, #372]	; (8000b14 <Init+0x300>)
 80009a0:	f001 f822 	bl	80019e8 <HAL_CAN_AddTxMessage>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <Init+0x19c>
			Error_Handler();
 80009aa:	f000 fb57 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 80009ae:	e195      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 10;
 80009b0:	4b54      	ldr	r3, [pc, #336]	; (8000b04 <Init+0x2f0>)
 80009b2:	220a      	movs	r2, #10
 80009b4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	2204      	movs	r2, #4
 80009ba:	495a      	ldr	r1, [pc, #360]	; (8000b24 <Init+0x310>)
 80009bc:	4858      	ldr	r0, [pc, #352]	; (8000b20 <Init+0x30c>)
 80009be:	f003 fe23 	bl	8004608 <HAL_UART_Transmit>
		break;
 80009c2:	e18b      	b.n	8000cdc <Init+0x4c8>
	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 80009c4:	4b50      	ldr	r3, [pc, #320]	; (8000b08 <Init+0x2f4>)
 80009c6:	f240 620a 	movw	r2, #1546	; 0x60a
 80009ca:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80009cc:	4b4e      	ldr	r3, [pc, #312]	; (8000b08 <Init+0x2f4>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80009d2:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <Init+0x2f8>)
 80009d4:	2222      	movs	r2, #34	; 0x22
 80009d6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <Init+0x2f8>)
 80009da:	2240      	movs	r2, #64	; 0x40
 80009dc:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80009de:	4b4b      	ldr	r3, [pc, #300]	; (8000b0c <Init+0x2f8>)
 80009e0:	2260      	movs	r2, #96	; 0x60
 80009e2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80009e4:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <Init+0x2f8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 80009ea:	4b48      	ldr	r3, [pc, #288]	; (8000b0c <Init+0x2f8>)
 80009ec:	2206      	movs	r2, #6
 80009ee:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80009f0:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <Init+0x2f8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80009f6:	4b45      	ldr	r3, [pc, #276]	; (8000b0c <Init+0x2f8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80009fc:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <Init+0x2f8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a02:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <Init+0x2fc>)
 8000a04:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <Init+0x2f8>)
 8000a06:	4940      	ldr	r1, [pc, #256]	; (8000b08 <Init+0x2f4>)
 8000a08:	4842      	ldr	r0, [pc, #264]	; (8000b14 <Init+0x300>)
 8000a0a:	f000 ffed 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <Init+0x206>
			Error_Handler();
 8000a14:	f000 fb22 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000a18:	e160      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 20;
 8000a1a:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <Init+0x2f0>)
 8000a1c:	2214      	movs	r2, #20
 8000a1e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	2204      	movs	r2, #4
 8000a24:	4940      	ldr	r1, [pc, #256]	; (8000b28 <Init+0x314>)
 8000a26:	483e      	ldr	r0, [pc, #248]	; (8000b20 <Init+0x30c>)
 8000a28:	f003 fdee 	bl	8004608 <HAL_UART_Transmit>
		break;
 8000a2c:	e156      	b.n	8000cdc <Init+0x4c8>
	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000a2e:	4b36      	ldr	r3, [pc, #216]	; (8000b08 <Init+0x2f4>)
 8000a30:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a34:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <Init+0x2f4>)
 8000a38:	2208      	movs	r2, #8
 8000a3a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <Init+0x2f8>)
 8000a3e:	2222      	movs	r2, #34	; 0x22
 8000a40:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000a42:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <Init+0x2f8>)
 8000a44:	2240      	movs	r2, #64	; 0x40
 8000a46:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <Init+0x2f8>)
 8000a4a:	2260      	movs	r2, #96	; 0x60
 8000a4c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <Init+0x2f8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <Init+0x2f8>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <Init+0x2f8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <Init+0x2f8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <Init+0x2f8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <Init+0x2fc>)
 8000a6e:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <Init+0x2f8>)
 8000a70:	4925      	ldr	r1, [pc, #148]	; (8000b08 <Init+0x2f4>)
 8000a72:	4828      	ldr	r0, [pc, #160]	; (8000b14 <Init+0x300>)
 8000a74:	f000 ffb8 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <Init+0x270>
			Error_Handler();
 8000a7e:	f000 faed 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000a82:	e12b      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 25;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <Init+0x2f0>)
 8000a86:	2219      	movs	r2, #25
 8000a88:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	4927      	ldr	r1, [pc, #156]	; (8000b2c <Init+0x318>)
 8000a90:	4823      	ldr	r0, [pc, #140]	; (8000b20 <Init+0x30c>)
 8000a92:	f003 fdb9 	bl	8004608 <HAL_UART_Transmit>
		break;
 8000a96:	e121      	b.n	8000cdc <Init+0x4c8>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <Init+0x2f4>)
 8000a9a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a9e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <Init+0x2f4>)
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <Init+0x2f8>)
 8000aa8:	2222      	movs	r2, #34	; 0x22
 8000aaa:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <Init+0x2f8>)
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <Init+0x2f8>)
 8000ab4:	2260      	movs	r2, #96	; 0x60
 8000ab6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <Init+0x2f8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <Init+0x2f8>)
 8000ac0:	220f      	movs	r2, #15
 8000ac2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <Init+0x2f8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <Init+0x2f8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <Init+0x2f8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <Init+0x2fc>)
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <Init+0x2f8>)
 8000ada:	490b      	ldr	r1, [pc, #44]	; (8000b08 <Init+0x2f4>)
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <Init+0x300>)
 8000ade:	f000 ff83 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <Init+0x2da>
			Error_Handler();
 8000ae8:	f000 fab8 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000aec:	e0f6      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 30;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <Init+0x2f0>)
 8000af0:	221e      	movs	r2, #30
 8000af2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	2204      	movs	r2, #4
 8000af8:	490d      	ldr	r1, [pc, #52]	; (8000b30 <Init+0x31c>)
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <Init+0x30c>)
 8000afc:	f003 fd84 	bl	8004608 <HAL_UART_Transmit>
		break;
 8000b00:	e0ec      	b.n	8000cdc <Init+0x4c8>
 8000b02:	bf00      	nop
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	20000054 	.word	0x20000054
 8000b10:	2000005c 	.word	0x2000005c
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	08006208 	.word	0x08006208
 8000b20:	20000114 	.word	0x20000114
 8000b24:	08006210 	.word	0x08006210
 8000b28:	08006218 	.word	0x08006218
 8000b2c:	08006220 	.word	0x08006220
 8000b30:	08006228 	.word	0x08006228

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000b34:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <Init+0x4cc>)
 8000b36:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b3a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b3c:	4b68      	ldr	r3, [pc, #416]	; (8000ce0 <Init+0x4cc>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b42:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <Init+0x4d0>)
 8000b44:	2222      	movs	r2, #34	; 0x22
 8000b46:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000b48:	4b66      	ldr	r3, [pc, #408]	; (8000ce4 <Init+0x4d0>)
 8000b4a:	2260      	movs	r2, #96	; 0x60
 8000b4c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b4e:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <Init+0x4d0>)
 8000b50:	2260      	movs	r2, #96	; 0x60
 8000b52:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b54:	4b63      	ldr	r3, [pc, #396]	; (8000ce4 <Init+0x4d0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000b5a:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <Init+0x4d0>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b60:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <Init+0x4d0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b66:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <Init+0x4d0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b6c:	4b5d      	ldr	r3, [pc, #372]	; (8000ce4 <Init+0x4d0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b72:	4b5d      	ldr	r3, [pc, #372]	; (8000ce8 <Init+0x4d4>)
 8000b74:	4a5b      	ldr	r2, [pc, #364]	; (8000ce4 <Init+0x4d0>)
 8000b76:	495a      	ldr	r1, [pc, #360]	; (8000ce0 <Init+0x4cc>)
 8000b78:	485c      	ldr	r0, [pc, #368]	; (8000cec <Init+0x4d8>)
 8000b7a:	f000 ff35 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <Init+0x376>
			Error_Handler();
 8000b84:	f000 fa6a 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000b88:	e0a8      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 40;
 8000b8a:	4b59      	ldr	r3, [pc, #356]	; (8000cf0 <Init+0x4dc>)
 8000b8c:	2228      	movs	r2, #40	; 0x28
 8000b8e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	2204      	movs	r2, #4
 8000b94:	4957      	ldr	r1, [pc, #348]	; (8000cf4 <Init+0x4e0>)
 8000b96:	4858      	ldr	r0, [pc, #352]	; (8000cf8 <Init+0x4e4>)
 8000b98:	f003 fd36 	bl	8004608 <HAL_UART_Transmit>
		break;
 8000b9c:	e09e      	b.n	8000cdc <Init+0x4c8>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <Init+0x4cc>)
 8000ba0:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ba4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ba6:	4b4e      	ldr	r3, [pc, #312]	; (8000ce0 <Init+0x4cc>)
 8000ba8:	2208      	movs	r2, #8
 8000baa:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000bac:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <Init+0x4d0>)
 8000bae:	2222      	movs	r2, #34	; 0x22
 8000bb0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <Init+0x4d0>)
 8000bb4:	227a      	movs	r2, #122	; 0x7a
 8000bb6:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bb8:	4b4a      	ldr	r3, [pc, #296]	; (8000ce4 <Init+0x4d0>)
 8000bba:	2260      	movs	r2, #96	; 0x60
 8000bbc:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <Init+0x4d0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <Init+0x4d0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bca:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <Init+0x4d0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bd0:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <Init+0x4d0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <Init+0x4d0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000bdc:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <Init+0x4d4>)
 8000bde:	4a41      	ldr	r2, [pc, #260]	; (8000ce4 <Init+0x4d0>)
 8000be0:	493f      	ldr	r1, [pc, #252]	; (8000ce0 <Init+0x4cc>)
 8000be2:	4842      	ldr	r0, [pc, #264]	; (8000cec <Init+0x4d8>)
 8000be4:	f000 ff00 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <Init+0x3e0>
			Error_Handler();
 8000bee:	f000 fa35 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000bf2:	e073      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 50;
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <Init+0x4dc>)
 8000bf6:	2232      	movs	r2, #50	; 0x32
 8000bf8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	493f      	ldr	r1, [pc, #252]	; (8000cfc <Init+0x4e8>)
 8000c00:	483d      	ldr	r0, [pc, #244]	; (8000cf8 <Init+0x4e4>)
 8000c02:	f003 fd01 	bl	8004608 <HAL_UART_Transmit>
		break;
 8000c06:	e069      	b.n	8000cdc <Init+0x4c8>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <Init+0x4cc>)
 8000c0a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c0e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <Init+0x4cc>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c16:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <Init+0x4d0>)
 8000c18:	2222      	movs	r2, #34	; 0x22
 8000c1a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c1c:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <Init+0x4d0>)
 8000c1e:	2240      	movs	r2, #64	; 0x40
 8000c20:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c22:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <Init+0x4d0>)
 8000c24:	2260      	movs	r2, #96	; 0x60
 8000c26:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <Init+0x4d0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <Init+0x4d0>)
 8000c30:	221f      	movs	r2, #31
 8000c32:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <Init+0x4d0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <Init+0x4d0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <Init+0x4d0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <Init+0x4d4>)
 8000c48:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <Init+0x4d0>)
 8000c4a:	4925      	ldr	r1, [pc, #148]	; (8000ce0 <Init+0x4cc>)
 8000c4c:	4827      	ldr	r0, [pc, #156]	; (8000cec <Init+0x4d8>)
 8000c4e:	f000 fecb 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <Init+0x44a>
			Error_Handler();
 8000c58:	f000 fa00 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000c5c:	e03e      	b.n	8000cdc <Init+0x4c8>
			iMachineStatus = 60;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <Init+0x4dc>)
 8000c60:	223c      	movs	r2, #60	; 0x3c
 8000c62:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2204      	movs	r2, #4
 8000c68:	4925      	ldr	r1, [pc, #148]	; (8000d00 <Init+0x4ec>)
 8000c6a:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <Init+0x4e4>)
 8000c6c:	f003 fccc 	bl	8004608 <HAL_UART_Transmit>
		break;
 8000c70:	e034      	b.n	8000cdc <Init+0x4c8>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <Init+0x4cc>)
 8000c74:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c78:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <Init+0x4cc>)
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <Init+0x4d0>)
 8000c82:	2222      	movs	r2, #34	; 0x22
 8000c84:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <Init+0x4d0>)
 8000c88:	2240      	movs	r2, #64	; 0x40
 8000c8a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <Init+0x4d0>)
 8000c8e:	2260      	movs	r2, #96	; 0x60
 8000c90:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <Init+0x4d0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <Init+0x4d0>)
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <Init+0x4d0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <Init+0x4d0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <Init+0x4d0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <Init+0x4d4>)
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <Init+0x4d0>)
 8000cb4:	490a      	ldr	r1, [pc, #40]	; (8000ce0 <Init+0x4cc>)
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <Init+0x4d8>)
 8000cb8:	f000 fe96 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <Init+0x4b4>
			Error_Handler();
 8000cc2:	f000 f9cb 	bl	800105c <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000cc6:	e008      	b.n	8000cda <Init+0x4c6>
			iMachineStatus = 70;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <Init+0x4dc>)
 8000cca:	2246      	movs	r2, #70	; 0x46
 8000ccc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	490c      	ldr	r1, [pc, #48]	; (8000d04 <Init+0x4f0>)
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <Init+0x4e4>)
 8000cd6:	f003 fc97 	bl	8004608 <HAL_UART_Transmit>
		break;
 8000cda:	bf00      	nop
	}
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000094 	.word	0x20000094
 8000ce4:	20000054 	.word	0x20000054
 8000ce8:	2000005c 	.word	0x2000005c
 8000cec:	2000002c 	.word	0x2000002c
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	08006230 	.word	0x08006230
 8000cf8:	20000114 	.word	0x20000114
 8000cfc:	08006238 	.word	0x08006238
 8000d00:	08006240 	.word	0x08006240
 8000d04:	08006248 	.word	0x08006248

08000d08 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
		Init();
 8000d1a:	f7ff fd7b 	bl	8000814 <Init>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40001000 	.word	0x40001000

08000d2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d3c:	d129      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x70>)
 8000d40:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d44:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x70>)
 8000d48:	2208      	movs	r2, #8
 8000d4a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d54:	2241      	movs	r2, #65	; 0x41
 8000d56:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d5a:	2260      	movs	r2, #96	; 0x60
 8000d5c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x70>)
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d84:	f000 fe30 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8000d8e:	f000 f965 	bl	800105c <Error_Handler>
		}
	}
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000094 	.word	0x20000094
 8000da0:	20000054 	.word	0x20000054
 8000da4:	2000005c 	.word	0x2000005c
 8000da8:	2000002c 	.word	0x2000002c

08000dac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000db0:	f000 fb6d 	bl	800148e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000db4:	f000 f866 	bl	8000e84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000db8:	f7ff fc3e 	bl	8000638 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000dbc:	f000 fa38 	bl	8001230 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000dc0:	f000 fab2 	bl	8001328 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8000dc4:	f7ff fbb4 	bl	8000530 <MX_CAN1_Init>
	MX_TIM6_Init();
 8000dc8:	f000 f9d4 	bl	8001174 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8000dcc:	2204      	movs	r2, #4
 8000dce:	4926      	ldr	r1, [pc, #152]	; (8000e68 <main+0xbc>)
 8000dd0:	4826      	ldr	r0, [pc, #152]	; (8000e6c <main+0xc0>)
 8000dd2:	f003 fcac 	bl	800472e <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8000dd6:	4826      	ldr	r0, [pc, #152]	; (8000e70 <main+0xc4>)
 8000dd8:	f000 fdc2 	bl	8001960 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <main+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <main+0xc8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <main+0xc8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <main+0xc8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <main+0xc8>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <main+0xc8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <main+0xcc>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <main+0xcc>)
 8000e08:	2212      	movs	r2, #18
 8000e0a:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <main+0xcc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <main+0xcc>)
 8000e14:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000e18:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <main+0xcc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <main+0xcc>)
 8000e22:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000e26:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <main+0xcc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <main+0xcc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <main+0xcc>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <main+0xcc>)
 8000e3c:	2214      	movs	r2, #20
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8000e40:	490d      	ldr	r1, [pc, #52]	; (8000e78 <main+0xcc>)
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <main+0xc4>)
 8000e44:	f000 fca0 	bl	8001788 <HAL_CAN_ConfigFilter>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <main+0xc4>)
 8000e4c:	f000 ffb9 	bl	8001dc2 <HAL_CAN_ActivateNotification>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <main+0xd0>)
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <main+0xd4>)
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <main+0xc8>)
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <main+0xc4>)
 8000e58:	f000 fdc6 	bl	80019e8 <HAL_CAN_AddTxMessage>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <main+0xba>
		Error_Handler();
 8000e62:	f000 f8fb 	bl	800105c <Error_Handler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000e66:	e7fe      	b.n	8000e66 <main+0xba>
 8000e68:	20000068 	.word	0x20000068
 8000e6c:	20000114 	.word	0x20000114
 8000e70:	2000002c 	.word	0x2000002c
 8000e74:	20000094 	.word	0x20000094
 8000e78:	2000006c 	.word	0x2000006c
 8000e7c:	2000005c 	.word	0x2000005c
 8000e80:	20000054 	.word	0x20000054

08000e84 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b8      	sub	sp, #224	; 0xe0
 8000e88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e8e:	2234      	movs	r2, #52	; 0x34
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f005 f992 	bl	80061bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2290      	movs	r2, #144	; 0x90
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 f983 	bl	80061bc <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000eb6:	f001 febd 	bl	8002c34 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <SystemClock_Config+0x128>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a3b      	ldr	r2, [pc, #236]	; (8000fac <SystemClock_Config+0x128>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <SystemClock_Config+0x128>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <SystemClock_Config+0x12c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eda:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <SystemClock_Config+0x12c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <SystemClock_Config+0x12c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000f10:	2360      	movs	r3, #96	; 0x60
 8000f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fee1 	bl	8002cf4 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8000f38:	f000 f890 	bl	800105c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f3c:	f001 fe8a 	bl	8002c54 <HAL_PWREx_EnableOverDrive>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000f46:	f000 f889 	bl	800105c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4a:	230f      	movs	r3, #15
 8000f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f6e:	2103      	movs	r1, #3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 f96d 	bl	8003250 <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8000f7c:	f000 f86e 	bl	800105c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <SystemClock_Config+0x130>)
 8000f82:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fb5e 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8000f9e:	f000 f85d 	bl	800105c <Error_Handler>
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	37e0      	adds	r7, #224	; 0xe0
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40007000 	.word	0x40007000
 8000fb4:	00200100 	.word	0x00200100

08000fb8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_UART_RxCpltCallback+0x54>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d111      	bne.n	8000fee <HAL_UART_RxCpltCallback+0x36>

		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4910      	ldr	r1, [pc, #64]	; (8001010 <HAL_UART_RxCpltCallback+0x58>)
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <HAL_UART_RxCpltCallback+0x5c>)
 8000fd0:	f005 f8fc 	bl	80061cc <strncmp>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10f      	bne.n	8000ffa <HAL_UART_RxCpltCallback+0x42>
			iMachineStatus = 0;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_UART_RxCpltCallback+0x60>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_UART_RxCpltCallback+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <HAL_UART_RxCpltCallback+0x68>)
 8000fe8:	f002 ffb4 	bl	8003f54 <HAL_TIM_Base_Start_IT>
 8000fec:	e005      	b.n	8000ffa <HAL_UART_RxCpltCallback+0x42>
		}
		*/

	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	220c      	movs	r2, #12
 8000ff2:	490c      	ldr	r1, [pc, #48]	; (8001024 <HAL_UART_RxCpltCallback+0x6c>)
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <HAL_UART_RxCpltCallback+0x70>)
 8000ff6:	f003 fb07 	bl	8004608 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <HAL_UART_RxCpltCallback+0x5c>)
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <HAL_UART_RxCpltCallback+0x70>)
 8001000:	f003 fb95 	bl	800472e <HAL_UART_Receive_IT>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40004800 	.word	0x40004800
 8001010:	08006250 	.word	0x08006250
 8001014:	20000068 	.word	0x20000068
 8001018:	20000000 	.word	0x20000000
 800101c:	20000001 	.word	0x20000001
 8001020:	200000c8 	.word	0x200000c8
 8001024:	08006258 	.word	0x08006258
 8001028:	20000114 	.word	0x20000114

0800102c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001038:	2100      	movs	r1, #0
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fdaf 	bl	8001b9e <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001040:	2101      	movs	r1, #1
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001044:	f001 fc7b 	bl	800293e <HAL_GPIO_TogglePin>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000060 	.word	0x20000060
 8001054:	200000ac 	.word	0x200000ac
 8001058:	40020400 	.word	0x40020400

0800105c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x44>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x44>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x44>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x44>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x44>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 fa04 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <CAN1_RX0_IRQHandler+0x10>)
 800110a:	f000 fe80 	bl	8001e0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000002c 	.word	0x2000002c

08001118 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART3_IRQHandler+0x10>)
 800111e:	f003 fb55 	bl	80047cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000114 	.word	0x20000114

0800112c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001134:	f001 fc1e 	bl	8002974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TIM6_DAC_IRQHandler+0x10>)
 8001142:	f002 ff7f 	bl	8004044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000c8 	.word	0x200000c8

08001150 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM6_Init+0x68>)
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <MX_TIM6_Init+0x6c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_TIM6_Init+0x68>)
 800118c:	f242 527f 	movw	r2, #9599	; 0x257f
 8001190:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_TIM6_Init+0x68>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_TIM6_Init+0x68>)
 800119a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800119e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_TIM6_Init+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_TIM6_Init+0x68>)
 80011a8:	f002 fe7c 	bl	8003ea4 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011b2:	f7ff ff53 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_TIM6_Init+0x68>)
 80011c4:	f003 f926 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011ce:	f7ff ff45 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000c8 	.word	0x200000c8
 80011e0:	40001000 	.word	0x40001000

080011e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_TIM_Base_MspInit+0x44>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d113      	bne.n	800121e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_TIM_Base_MspInit+0x48>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_TIM_Base_MspInit+0x48>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_TIM_Base_MspInit+0x48>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2036      	movs	r0, #54	; 0x36
 8001214:	f001 f905 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001218:	2036      	movs	r0, #54	; 0x36
 800121a:	f001 f91e 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40001000 	.word	0x40001000
 800122c:	40023800 	.word	0x40023800

08001230 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_USART3_UART_Init+0x58>)
 8001236:	4a15      	ldr	r2, [pc, #84]	; (800128c <MX_USART3_UART_Init+0x5c>)
 8001238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_USART3_UART_Init+0x58>)
 800123c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART3_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_USART3_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART3_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART3_UART_Init+0x58>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART3_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART3_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART3_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART3_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART3_UART_Init+0x58>)
 8001274:	f003 f97a 	bl	800456c <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800127e:	f7ff feed 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000114 	.word	0x20000114
 800128c:	40004800 	.word	0x40004800

08001290 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_UART_MspInit+0x8c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d130      	bne.n	8001314 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f4:	2307      	movs	r3, #7
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_UART_MspInit+0x94>)
 8001300:	f001 f958 	bl	80025b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2027      	movs	r0, #39	; 0x27
 800130a:	f001 f88a 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800130e:	2027      	movs	r0, #39	; 0x27
 8001310:	f001 f8a3 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40004800 	.word	0x40004800
 8001320:	40023800 	.word	0x40023800
 8001324:	40020c00 	.word	0x40020c00

08001328 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001332:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001336:	2206      	movs	r2, #6
 8001338:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133c:	2202      	movs	r2, #2
 800133e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001348:	2202      	movs	r2, #2
 800134a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134e:	2201      	movs	r2, #1
 8001350:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001360:	2201      	movs	r2, #1
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	f001 fb1a 	bl	80029a4 <HAL_PCD_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001376:	f7ff fe71 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000198 	.word	0x20000198

08001384 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a4:	d141      	bne.n	800142a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b23      	ldr	r3, [pc, #140]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d0:	230a      	movs	r3, #10
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <HAL_PCD_MspInit+0xb4>)
 80013dc:	f001 f8ea 	bl	80025b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <HAL_PCD_MspInit+0xb4>)
 80013f6:	f001 f8dd 	bl	80025b4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	6353      	str	r3, [r2, #52]	; 0x34
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_PCD_MspInit+0xb0>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	; 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001466:	f7ff fe73 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f004 fe83 	bl	8006174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff fc9d 	bl	8000dac <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001480:	08006290 	.word	0x08006290
  ldr r2, =_sbss
 8001484:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001488:	200005a0 	.word	0x200005a0

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>

0800148e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001492:	2003      	movs	r0, #3
 8001494:	f000 ffba 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f805 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff fde3 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 ffd5 	bl	8002476 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 ff9d 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000004 	.word	0x20000004
 8001500:	2000000c 	.word	0x2000000c
 8001504:	20000008 	.word	0x20000008

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000000c 	.word	0x2000000c
 800152c:	2000059c 	.word	0x2000059c

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000059c 	.word	0x2000059c

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000000c 	.word	0x2000000c

08001590 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0ed      	b.n	800177e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe fff6 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff ffb4 	bl	8001530 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ca:	e012      	b.n	80015f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015cc:	f7ff ffb0 	bl	8001530 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90b      	bls.n	80015f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0c5      	b.n	800177e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0e5      	beq.n	80015cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0202 	bic.w	r2, r2, #2
 800160e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001610:	f7ff ff8e 	bl	8001530 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001616:	e012      	b.n	800163e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001618:	f7ff ff8a 	bl	8001530 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d90b      	bls.n	800163e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2205      	movs	r2, #5
 8001636:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e09f      	b.n	800177e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e5      	bne.n	8001618 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e1b      	ldrb	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e007      	b.n	8001676 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e5b      	ldrb	r3, [r3, #25]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e007      	b.n	80016a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800169e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e9b      	ldrb	r3, [r3, #26]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0220 	orr.w	r2, r2, #32
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0220 	bic.w	r2, r2, #32
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7edb      	ldrb	r3, [r3, #27]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0210 	bic.w	r2, r2, #16
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0210 	orr.w	r2, r2, #16
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7f1b      	ldrb	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0208 	orr.w	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0208 	bic.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7f5b      	ldrb	r3, [r3, #29]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0204 	orr.w	r2, r2, #4
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e007      	b.n	8001748 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	ea42 0103 	orr.w	r1, r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_ConfigFilter+0x26>
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	f040 80c7 	bne.w	800193c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a69      	ldr	r2, [pc, #420]	; (8001958 <HAL_CAN_ConfigFilter+0x1d0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d001      	beq.n	80017bc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_CAN_ConfigFilter+0x1d4>)
 80017ba:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4a63      	ldr	r2, [pc, #396]	; (800195c <HAL_CAN_ConfigFilter+0x1d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d111      	bne.n	80017f8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	2201      	movs	r2, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d123      	bne.n	800186a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	401a      	ands	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001844:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3248      	adds	r2, #72	; 0x48
 800184a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800185e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001860:	6979      	ldr	r1, [r7, #20]
 8001862:	3348      	adds	r3, #72	; 0x48
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d122      	bne.n	80018b8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	431a      	orrs	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001892:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3248      	adds	r2, #72	; 0x48
 8001898:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ae:	6979      	ldr	r1, [r7, #20]
 80018b0:	3348      	adds	r3, #72	; 0x48
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018fe:	e007      	b.n	8001910 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	431a      	orrs	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d107      	bne.n	8001928 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800192e:	f023 0201 	bic.w	r2, r3, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e006      	b.n	800194a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40003400 	.word	0x40003400
 800195c:	40006400 	.word	0x40006400

08001960 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d12e      	bne.n	80019d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800198c:	f7ff fdd0 	bl	8001530 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001992:	e012      	b.n	80019ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001994:	f7ff fdcc 	bl	8001530 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b0a      	cmp	r3, #10
 80019a0:	d90b      	bls.n	80019ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2205      	movs	r2, #5
 80019b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e012      	b.n	80019e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e5      	bne.n	8001994 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e006      	b.n	80019e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
  }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a06:	7ffb      	ldrb	r3, [r7, #31]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d003      	beq.n	8001a14 <HAL_CAN_AddTxMessage+0x2c>
 8001a0c:	7ffb      	ldrb	r3, [r7, #31]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	f040 80b8 	bne.w	8001b84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10a      	bne.n	8001a34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80a0 	beq.w	8001b74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	0e1b      	lsrs	r3, r3, #24
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d907      	bls.n	8001a54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e09e      	b.n	8001b92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a54:	2201      	movs	r2, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	6809      	ldr	r1, [r1, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e00f      	b.n	8001aa2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3318      	adds	r3, #24
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	440b      	add	r3, r1
 8001aa0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3318      	adds	r3, #24
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	7d1b      	ldrb	r3, [r3, #20]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d111      	bne.n	8001ae2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3318      	adds	r3, #24
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	3304      	adds	r3, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	440b      	add	r3, r1
 8001ade:	3304      	adds	r3, #4
 8001ae0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3306      	adds	r3, #6
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3305      	adds	r3, #5
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	4313      	orrs	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	3204      	adds	r2, #4
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	4610      	mov	r0, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	ea43 0200 	orr.w	r2, r3, r0
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	440b      	add	r3, r1
 8001b14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	061a      	lsls	r2, r3, #24
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3302      	adds	r3, #2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4313      	orrs	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	ea43 0200 	orr.w	r2, r3, r0
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3318      	adds	r3, #24
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	6811      	ldr	r1, [r2, #0]
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3318      	adds	r3, #24
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e00e      	b.n	8001b92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e006      	b.n	8001b92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b087      	sub	sp, #28
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d003      	beq.n	8001bc2 <HAL_CAN_GetRxMessage+0x24>
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	f040 80f3 	bne.w	8001da8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10e      	bne.n	8001be6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0e7      	b.n	8001db6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0d8      	b.n	8001db6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	331b      	adds	r3, #27
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0204 	and.w	r2, r3, #4
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	331b      	adds	r3, #27
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0d5b      	lsrs	r3, r3, #21
 8001c32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	331b      	adds	r3, #27
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	331b      	adds	r3, #27
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0202 	and.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	331b      	adds	r3, #27
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	331b      	adds	r3, #27
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	331b      	adds	r3, #27
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0c1b      	lsrs	r3, r3, #16
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0a1a      	lsrs	r2, r3, #8
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0c1a      	lsrs	r2, r3, #16
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0e1a      	lsrs	r2, r3, #24
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3303      	adds	r3, #3
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0a1a      	lsrs	r2, r3, #8
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	3305      	adds	r3, #5
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0c1a      	lsrs	r2, r3, #16
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	3306      	adds	r3, #6
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0e1a      	lsrs	r2, r3, #24
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	3307      	adds	r3, #7
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	e007      	b.n	8001da4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e006      	b.n	8001db6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d002      	beq.n	8001de0 <HAL_CAN_ActivateNotification+0x1e>
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d109      	bne.n	8001df4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6959      	ldr	r1, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e006      	b.n	8001e02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
  }
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	; 0x28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d07c      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d023      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f983 	bl	800217c <HAL_CAN_TxMailbox0CompleteCallback>
 8001e76:	e016      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e00c      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e002      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f989 	bl	80021b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d024      	beq.n	8001efa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f963 	bl	8002190 <HAL_CAN_TxMailbox1CompleteCallback>
 8001eca:	e016      	b.n	8001efa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	e00c      	b.n	8001efa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e002      	b.n	8001efa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f969 	bl	80021cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d024      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f943 	bl	80021a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f1e:	e016      	b.n	8001f4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	e00c      	b.n	8001f4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e002      	b.n	8001f4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f949 	bl	80021e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00c      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f930 	bl	80021f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff f83d 	bl	800102c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00c      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2208      	movs	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f912 	bl	800221c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8f9 	bl	8002208 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2210      	movs	r2, #16
 8002030:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8fc 	bl	8002230 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8f5 	bl	8002244 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d07b      	beq.n	800215c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d072      	beq.n	8002154 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d043      	beq.n	8002154 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03e      	beq.n	8002154 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020dc:	2b60      	cmp	r3, #96	; 0x60
 80020de:	d02b      	beq.n	8002138 <HAL_CAN_IRQHandler+0x32a>
 80020e0:	2b60      	cmp	r3, #96	; 0x60
 80020e2:	d82e      	bhi.n	8002142 <HAL_CAN_IRQHandler+0x334>
 80020e4:	2b50      	cmp	r3, #80	; 0x50
 80020e6:	d022      	beq.n	800212e <HAL_CAN_IRQHandler+0x320>
 80020e8:	2b50      	cmp	r3, #80	; 0x50
 80020ea:	d82a      	bhi.n	8002142 <HAL_CAN_IRQHandler+0x334>
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	d019      	beq.n	8002124 <HAL_CAN_IRQHandler+0x316>
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d826      	bhi.n	8002142 <HAL_CAN_IRQHandler+0x334>
 80020f4:	2b30      	cmp	r3, #48	; 0x30
 80020f6:	d010      	beq.n	800211a <HAL_CAN_IRQHandler+0x30c>
 80020f8:	2b30      	cmp	r3, #48	; 0x30
 80020fa:	d822      	bhi.n	8002142 <HAL_CAN_IRQHandler+0x334>
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d002      	beq.n	8002106 <HAL_CAN_IRQHandler+0x2f8>
 8002100:	2b20      	cmp	r3, #32
 8002102:	d005      	beq.n	8002110 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002104:	e01d      	b.n	8002142 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800210e:	e019      	b.n	8002144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f043 0310 	orr.w	r3, r3, #16
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002118:	e014      	b.n	8002144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002122:	e00f      	b.n	8002144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212c:	e00a      	b.n	8002144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002136:	e005      	b.n	8002144 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002140:	e000      	b.n	8002144 <HAL_CAN_IRQHandler+0x336>
            break;
 8002142:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002152:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2204      	movs	r2, #4
 800215a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f872 	bl	8002258 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <__NVIC_SetPriorityGrouping+0x40>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	4313      	orrs	r3, r2
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x40>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00
 80022b0:	05fa0000 	.word	0x05fa0000

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff f848 	bl	8001530 <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d008      	beq.n	80024c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e052      	b.n	8002566 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0216 	bic.w	r2, r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <HAL_DMA_Abort+0x62>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0208 	bic.w	r2, r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002510:	e013      	b.n	800253a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002512:	f7ff f80d 	bl	8001530 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b05      	cmp	r3, #5
 800251e:	d90c      	bls.n	800253a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e015      	b.n	8002566 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e4      	bne.n	8002512 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	223f      	movs	r2, #63	; 0x3f
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d004      	beq.n	800258c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e00c      	b.n	80025a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2205      	movs	r2, #5
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e175      	b.n	80028c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f040 8164 	bne.w	80028ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d005      	beq.n	800260a <HAL_GPIO_Init+0x56>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d130      	bne.n	800266c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0201 	and.w	r2, r3, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d017      	beq.n	80026a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d123      	bne.n	80026fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80be 	beq.w	80028ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	4b66      	ldr	r3, [pc, #408]	; (80028d8 <HAL_GPIO_Init+0x324>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a65      	ldr	r2, [pc, #404]	; (80028d8 <HAL_GPIO_Init+0x324>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_GPIO_Init+0x324>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002756:	4a61      	ldr	r2, [pc, #388]	; (80028dc <HAL_GPIO_Init+0x328>)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a58      	ldr	r2, [pc, #352]	; (80028e0 <HAL_GPIO_Init+0x32c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d037      	beq.n	80027f2 <HAL_GPIO_Init+0x23e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a57      	ldr	r2, [pc, #348]	; (80028e4 <HAL_GPIO_Init+0x330>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d031      	beq.n	80027ee <HAL_GPIO_Init+0x23a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_GPIO_Init+0x334>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02b      	beq.n	80027ea <HAL_GPIO_Init+0x236>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a55      	ldr	r2, [pc, #340]	; (80028ec <HAL_GPIO_Init+0x338>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d025      	beq.n	80027e6 <HAL_GPIO_Init+0x232>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_GPIO_Init+0x33c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01f      	beq.n	80027e2 <HAL_GPIO_Init+0x22e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a53      	ldr	r2, [pc, #332]	; (80028f4 <HAL_GPIO_Init+0x340>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d019      	beq.n	80027de <HAL_GPIO_Init+0x22a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_GPIO_Init+0x344>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x226>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a51      	ldr	r2, [pc, #324]	; (80028fc <HAL_GPIO_Init+0x348>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x222>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a50      	ldr	r2, [pc, #320]	; (8002900 <HAL_GPIO_Init+0x34c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x21e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4f      	ldr	r2, [pc, #316]	; (8002904 <HAL_GPIO_Init+0x350>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x21a>
 80027ca:	2309      	movs	r3, #9
 80027cc:	e012      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027ce:	230a      	movs	r3, #10
 80027d0:	e010      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027d2:	2308      	movs	r3, #8
 80027d4:	e00e      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e00c      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027da:	2306      	movs	r3, #6
 80027dc:	e00a      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027de:	2305      	movs	r3, #5
 80027e0:	e008      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027e6:	2303      	movs	r3, #3
 80027e8:	e004      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e002      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_GPIO_Init+0x240>
 80027f2:	2300      	movs	r3, #0
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f002 0203 	and.w	r2, r2, #3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4093      	lsls	r3, r2
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002804:	4935      	ldr	r1, [pc, #212]	; (80028dc <HAL_GPIO_Init+0x328>)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	3302      	adds	r3, #2
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002812:	4b3d      	ldr	r3, [pc, #244]	; (8002908 <HAL_GPIO_Init+0x354>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002836:	4a34      	ldr	r2, [pc, #208]	; (8002908 <HAL_GPIO_Init+0x354>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800283c:	4b32      	ldr	r3, [pc, #200]	; (8002908 <HAL_GPIO_Init+0x354>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <HAL_GPIO_Init+0x354>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_GPIO_Init+0x354>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_GPIO_Init+0x354>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_GPIO_Init+0x354>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_GPIO_Init+0x354>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b0f      	cmp	r3, #15
 80028c4:	f67f ae86 	bls.w	80025d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40013800 	.word	0x40013800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40021400 	.word	0x40021400
 80028f8:	40021800 	.word	0x40021800
 80028fc:	40021c00 	.word	0x40021c00
 8002900:	40022000 	.word	0x40022000
 8002904:	40022400 	.word	0x40022400
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	041a      	lsls	r2, r3, #16
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43d9      	mvns	r1, r3
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	400b      	ands	r3, r1
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe f9ca 	bl	8000d2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40013c00 	.word	0x40013c00

080029a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a6:	b08f      	sub	sp, #60	; 0x3c
 80029a8:	af0a      	add	r7, sp, #40	; 0x28
 80029aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e116      	b.n	8002be4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fe fcd7 	bl	8001384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 f927 	bl	8005c48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	687e      	ldr	r6, [r7, #4]
 8002a02:	466d      	mov	r5, sp
 8002a04:	f106 0410 	add.w	r4, r6, #16
 8002a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a18:	1d33      	adds	r3, r6, #4
 8002a1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a1c:	6838      	ldr	r0, [r7, #0]
 8002a1e:	f003 f8bb 	bl	8005b98 <USB_CoreInit>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0d7      	b.n	8002be4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 f915 	bl	8005c6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e04a      	b.n	8002adc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	333d      	adds	r3, #61	; 0x3d
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	333c      	adds	r3, #60	; 0x3c
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	b298      	uxth	r0, r3
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	3342      	adds	r3, #66	; 0x42
 8002a82:	4602      	mov	r2, r0
 8002a84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	333f      	adds	r3, #63	; 0x3f
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3344      	adds	r3, #68	; 0x44
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3348      	adds	r3, #72	; 0x48
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	3350      	adds	r3, #80	; 0x50
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3af      	bcc.n	8002a46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e044      	b.n	8002b76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	3301      	adds	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3b5      	bcc.n	8002aec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	687e      	ldr	r6, [r7, #4]
 8002b88:	466d      	mov	r5, sp
 8002b8a:	f106 0410 	add.w	r4, r6, #16
 8002b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b9e:	1d33      	adds	r3, r6, #4
 8002ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	f003 f8ae 	bl	8005d04 <USB_DevInit>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e014      	b.n	8002be4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f80a 	bl	8002bec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fa68 	bl	80060b2 <USB_DevDisconnect>

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	10000003 	.word	0x10000003

08002c34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40007000 	.word	0x40007000

08002c54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_PWREx_EnableOverDrive+0x98>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_PWREx_EnableOverDrive+0x98>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_PWREx_EnableOverDrive+0x98>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c82:	f7fe fc55 	bl	8001530 <HAL_GetTick>
 8002c86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c88:	e009      	b.n	8002c9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c8a:	f7fe fc51 	bl	8001530 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c98:	d901      	bls.n	8002c9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e022      	b.n	8002ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002caa:	d1ee      	bne.n	8002c8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb8:	f7fe fc3a 	bl	8001530 <HAL_GetTick>
 8002cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cbe:	e009      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cc0:	f7fe fc36 	bl	8001530 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cce:	d901      	bls.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e007      	b.n	8002ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e29b      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8087 	beq.w	8002e26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d18:	4b96      	ldr	r3, [pc, #600]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d00c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d24:	4b93      	ldr	r3, [pc, #588]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d112      	bne.n	8002d56 <HAL_RCC_OscConfig+0x62>
 8002d30:	4b90      	ldr	r3, [pc, #576]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3c:	d10b      	bne.n	8002d56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3e:	4b8d      	ldr	r3, [pc, #564]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d06c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x130>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d168      	bne.n	8002e24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e275      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x7a>
 8002d60:	4b84      	ldr	r3, [pc, #528]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a83      	ldr	r2, [pc, #524]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e02e      	b.n	8002dcc <HAL_RCC_OscConfig+0xd8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x9c>
 8002d76:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7e      	ldr	r2, [pc, #504]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b7c      	ldr	r3, [pc, #496]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7b      	ldr	r2, [pc, #492]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e01d      	b.n	8002dcc <HAL_RCC_OscConfig+0xd8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0xc0>
 8002d9a:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a75      	ldr	r2, [pc, #468]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xd8>
 8002db4:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6e      	ldr	r2, [pc, #440]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b6c      	ldr	r3, [pc, #432]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6b      	ldr	r2, [pc, #428]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fbac 	bl	8001530 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fba8 	bl	8001530 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e229      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe8>
 8002dfa:	e014      	b.n	8002e26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fb98 	bl	8001530 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe fb94 	bl	8001530 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e215      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x110>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d069      	beq.n	8002f06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e32:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d11c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x190>
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1e9      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	493d      	ldr	r1, [pc, #244]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	e040      	b.n	8002f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d023      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a38      	ldr	r2, [pc, #224]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fb4a 	bl	8001530 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fb46 	bl	8001530 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1c7      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4929      	ldr	r1, [pc, #164]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
 8002ed2:	e018      	b.n	8002f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fb26 	bl	8001530 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fb22 	bl	8001530 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1a3      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d038      	beq.n	8002f84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d019      	beq.n	8002f4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe fb03 	bl	8001530 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7fe faff 	bl	8001530 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e180      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x23a>
 8002f4c:	e01a      	b.n	8002f84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <HAL_RCC_OscConfig+0x280>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fae9 	bl	8001530 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fae5 	bl	8001530 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d903      	bls.n	8002f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e166      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
 8002f74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b92      	ldr	r3, [pc, #584]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80a4 	beq.w	80030da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f92:	4b8c      	ldr	r3, [pc, #560]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10d      	bne.n	8002fba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9e:	4b89      	ldr	r3, [pc, #548]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a88      	ldr	r2, [pc, #544]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b86      	ldr	r3, [pc, #536]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fba:	4b83      	ldr	r3, [pc, #524]	; (80031c8 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fc6:	4b80      	ldr	r3, [pc, #512]	; (80031c8 <HAL_RCC_OscConfig+0x4d4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7f      	ldr	r2, [pc, #508]	; (80031c8 <HAL_RCC_OscConfig+0x4d4>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe faad 	bl	8001530 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe faa9 	bl	8001530 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e12a      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fec:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCC_OscConfig+0x4d4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x31a>
 8003000:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a6f      	ldr	r2, [pc, #444]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	e02d      	b.n	800306a <HAL_RCC_OscConfig+0x376>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x33c>
 8003016:	4b6b      	ldr	r3, [pc, #428]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a6a      	ldr	r2, [pc, #424]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	4b68      	ldr	r3, [pc, #416]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a67      	ldr	r2, [pc, #412]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	e01c      	b.n	800306a <HAL_RCC_OscConfig+0x376>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b05      	cmp	r3, #5
 8003036:	d10c      	bne.n	8003052 <HAL_RCC_OscConfig+0x35e>
 8003038:	4b62      	ldr	r3, [pc, #392]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a61      	ldr	r2, [pc, #388]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	4b5f      	ldr	r3, [pc, #380]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a5e      	ldr	r2, [pc, #376]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	e00b      	b.n	800306a <HAL_RCC_OscConfig+0x376>
 8003052:	4b5c      	ldr	r3, [pc, #368]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a5b      	ldr	r2, [pc, #364]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d015      	beq.n	800309e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe fa5d 	bl	8001530 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe fa59 	bl	8001530 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0d8      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ee      	beq.n	800307a <HAL_RCC_OscConfig+0x386>
 800309c:	e014      	b.n	80030c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7fe fa47 	bl	8001530 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fa43 	bl	8001530 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0c2      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ee      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a3c      	ldr	r2, [pc, #240]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80ae 	beq.w	8003240 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e4:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d06d      	beq.n	80031cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d14b      	bne.n	8003190 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 80030fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe fa14 	bl	8001530 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fa10 	bl	8001530 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e091      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	4b29      	ldr	r3, [pc, #164]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	019b      	lsls	r3, r3, #6
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	3b01      	subs	r3, #1
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	071b      	lsls	r3, r3, #28
 8003156:	491b      	ldr	r1, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe f9e2 	bl	8001530 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe f9de 	bl	8001530 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e05f      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x47c>
 800318e:	e057      	b.n	8003240 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 8003196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe f9c8 	bl	8001530 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe f9c4 	bl	8001530 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e045      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCC_OscConfig+0x4d0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4b0>
 80031c2:	e03d      	b.n	8003240 <HAL_RCC_OscConfig+0x54c>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_RCC_OscConfig+0x558>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d030      	beq.n	800323c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d129      	bne.n	800323c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d122      	bne.n	800323c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003202:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003204:	4293      	cmp	r3, r2
 8003206:	d119      	bne.n	800323c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	3b01      	subs	r3, #1
 8003216:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d10f      	bne.n	800323c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d107      	bne.n	800323c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d0      	b.n	800340a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b6a      	ldr	r3, [pc, #424]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b67      	ldr	r3, [pc, #412]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 020f 	bic.w	r2, r3, #15
 800327e:	4965      	ldr	r1, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80032b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d040      	beq.n	8003374 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d115      	bne.n	8003332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e073      	b.n	800340a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4936      	ldr	r1, [pc, #216]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003344:	f7fe f8f4 	bl	8001530 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fe f8f0 	bl	8001530 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e053      	b.n	800340a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d210      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 020f 	bic.w	r2, r3, #15
 800338a:	4922      	ldr	r1, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1cc>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1d0>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1d4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe f850 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00
 8003418:	40023800 	.word	0x40023800
 800341c:	08006268 	.word	0x08006268
 8003420:	20000004 	.word	0x20000004
 8003424:	20000008 	.word	0x20000008

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	2300      	movs	r3, #0
 800343a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003440:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800344c:	2b08      	cmp	r3, #8
 800344e:	f200 80bd 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800345a:	e0b7      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800345e:	60bb      	str	r3, [r7, #8]
      break;
 8003460:	e0b7      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003464:	60bb      	str	r3, [r7, #8]
      break;
 8003466:	e0b4      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04d      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	461a      	mov	r2, r3
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	ea02 0800 	and.w	r8, r2, r0
 8003496:	ea03 0901 	and.w	r9, r3, r1
 800349a:	4640      	mov	r0, r8
 800349c:	4649      	mov	r1, r9
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	014b      	lsls	r3, r1, #5
 80034a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034ac:	0142      	lsls	r2, r0, #5
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	ebb0 0008 	subs.w	r0, r0, r8
 80034b6:	eb61 0109 	sbc.w	r1, r1, r9
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034c8:	0182      	lsls	r2, r0, #6
 80034ca:	1a12      	subs	r2, r2, r0
 80034cc:	eb63 0301 	sbc.w	r3, r3, r1
 80034d0:	f04f 0000 	mov.w	r0, #0
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	00d9      	lsls	r1, r3, #3
 80034da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034de:	00d0      	lsls	r0, r2, #3
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	eb12 0208 	adds.w	r2, r2, r8
 80034e8:	eb43 0309 	adc.w	r3, r3, r9
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	0259      	lsls	r1, r3, #9
 80034f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034fa:	0250      	lsls	r0, r2, #9
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	461a      	mov	r2, r3
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	f7fc fe94 	bl	8000238 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e04a      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	099b      	lsrs	r3, r3, #6
 8003520:	461a      	mov	r2, r3
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	ea02 0400 	and.w	r4, r2, r0
 8003532:	ea03 0501 	and.w	r5, r3, r1
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	014b      	lsls	r3, r1, #5
 8003544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003548:	0142      	lsls	r2, r0, #5
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	1b00      	subs	r0, r0, r4
 8003550:	eb61 0105 	sbc.w	r1, r1, r5
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	018b      	lsls	r3, r1, #6
 800355e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003562:	0182      	lsls	r2, r0, #6
 8003564:	1a12      	subs	r2, r2, r0
 8003566:	eb63 0301 	sbc.w	r3, r3, r1
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	00d9      	lsls	r1, r3, #3
 8003574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003578:	00d0      	lsls	r0, r2, #3
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	1912      	adds	r2, r2, r4
 8003580:	eb45 0303 	adc.w	r3, r5, r3
 8003584:	f04f 0000 	mov.w	r0, #0
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	0299      	lsls	r1, r3, #10
 800358e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003592:	0290      	lsls	r0, r2, #10
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	f7fc fe48 	bl	8000238 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	60bb      	str	r3, [r7, #8]
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ce:	60bb      	str	r3, [r7, #8]
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	68bb      	ldr	r3, [r7, #8]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	007a1200 	.word	0x007a1200

080035ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08006278 	.word	0x08006278

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08006278 	.word	0x08006278

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d012      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800367c:	4b69      	ldr	r3, [pc, #420]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a68      	ldr	r2, [pc, #416]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003686:	6093      	str	r3, [r2, #8]
 8003688:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003690:	4964      	ldr	r1, [pc, #400]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036bc:	4959      	ldr	r1, [pc, #356]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ea:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	494a      	ldr	r1, [pc, #296]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 808b 	beq.w	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6413      	str	r3, [r2, #64]	; 0x40
 8003744:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a34      	ldr	r2, [pc, #208]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fd fee8 	bl	8001530 <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003764:	f7fd fee4 	bl	8001530 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e38f      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003782:	4b28      	ldr	r3, [pc, #160]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d035      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d02e      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037aa:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d114      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd feac 	bl	8001530 <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fd fea8 	bl	8001530 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e351      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ee      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380a:	d111      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800381a:	400b      	ands	r3, r1
 800381c:	4901      	ldr	r1, [pc, #4]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
 8003822:	e00b      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
 800382c:	0ffffcff 	.word	0x0ffffcff
 8003830:	4bb3      	ldr	r3, [pc, #716]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4ab2      	ldr	r2, [pc, #712]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800383a:	6093      	str	r3, [r2, #8]
 800383c:	4bb0      	ldr	r3, [pc, #704]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	49ad      	ldr	r1, [pc, #692]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	4313      	orrs	r3, r2
 800384c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800385a:	4ba9      	ldr	r3, [pc, #676]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003860:	4aa7      	ldr	r2, [pc, #668]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003866:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800386a:	4ba5      	ldr	r3, [pc, #660]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	49a2      	ldr	r1, [pc, #648]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003888:	4b9d      	ldr	r3, [pc, #628]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003896:	499a      	ldr	r1, [pc, #616]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038aa:	4b95      	ldr	r3, [pc, #596]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b8:	4991      	ldr	r1, [pc, #580]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038cc:	4b8c      	ldr	r3, [pc, #560]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	4989      	ldr	r1, [pc, #548]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ee:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4980      	ldr	r1, [pc, #512]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003910:	4b7b      	ldr	r3, [pc, #492]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4978      	ldr	r1, [pc, #480]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003932:	4b73      	ldr	r3, [pc, #460]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f023 020c 	bic.w	r2, r3, #12
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	496f      	ldr	r1, [pc, #444]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003954:	4b6a      	ldr	r3, [pc, #424]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4967      	ldr	r1, [pc, #412]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	495e      	ldr	r1, [pc, #376]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003998:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	4956      	ldr	r1, [pc, #344]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ba:	4b51      	ldr	r3, [pc, #324]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	494d      	ldr	r1, [pc, #308]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039dc:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	4945      	ldr	r1, [pc, #276]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039fe:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	493c      	ldr	r1, [pc, #240]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	4934      	ldr	r1, [pc, #208]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a50:	492b      	ldr	r1, [pc, #172]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a60:	d101      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a82:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	491b      	ldr	r1, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003aa4:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab4:	4912      	ldr	r1, [pc, #72]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	4909      	ldr	r1, [pc, #36]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00f      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	4986      	ldr	r1, [pc, #536]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b18:	4b81      	ldr	r3, [pc, #516]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b28:	497d      	ldr	r1, [pc, #500]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d006      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80d6 	beq.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b44:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a75      	ldr	r2, [pc, #468]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd fcee 	bl	8001530 <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b58:	f7fd fcea 	bl	8001530 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e195      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d021      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11d      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b8a:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9e:	0e1b      	lsrs	r3, r3, #24
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	019a      	lsls	r2, r3, #6
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	071b      	lsls	r3, r3, #28
 8003bbe:	4958      	ldr	r1, [pc, #352]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf0:	d129      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bf2:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c06:	0f1b      	lsrs	r3, r3, #28
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	019a      	lsls	r2, r3, #6
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	061b      	lsls	r3, r3, #24
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	071b      	lsls	r3, r3, #28
 8003c26:	493e      	ldr	r1, [pc, #248]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c34:	f023 021f 	bic.w	r2, r3, #31
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	4938      	ldr	r1, [pc, #224]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01d      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c52:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c58:	0e1b      	lsrs	r3, r3, #24
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c60:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	019a      	lsls	r2, r3, #6
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	4926      	ldr	r1, [pc, #152]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	019a      	lsls	r2, r3, #6
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	491a      	ldr	r1, [pc, #104]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cca:	f7fd fc31 	bl	8001530 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd2:	f7fd fc2d 	bl	8001530 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	; 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0d8      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	f040 80ce 	bne.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d04:	f7fd fc14 	bl	8001530 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d0c:	f7fd fc10 	bl	8001530 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d904      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0bb      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d24:	4b5e      	ldr	r3, [pc, #376]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d30:	d0ec      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02e      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d12a      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d5a:	4b51      	ldr	r3, [pc, #324]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d68:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	0f1b      	lsrs	r3, r3, #28
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	019a      	lsls	r2, r3, #6
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	071b      	lsls	r3, r3, #28
 8003d8e:	4944      	ldr	r1, [pc, #272]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d96:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	493d      	ldr	r1, [pc, #244]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d022      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc4:	d11d      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	0e1b      	lsrs	r3, r3, #24
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dd4:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	0f1b      	lsrs	r3, r3, #28
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	019a      	lsls	r2, r3, #6
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	431a      	orrs	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	061b      	lsls	r3, r3, #24
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	071b      	lsls	r3, r3, #28
 8003dfa:	4929      	ldr	r1, [pc, #164]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e1c:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	019a      	lsls	r2, r3, #6
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	431a      	orrs	r2, r3
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	4917      	ldr	r1, [pc, #92]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4911      	ldr	r1, [pc, #68]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e60:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fd fb60 	bl	8001530 <HAL_GetTick>
 8003e70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e74:	f7fd fb5c 	bl	8001530 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e007      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e92:	d1ef      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e049      	b.n	8003f4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd f98a 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 f9f6 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d001      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e054      	b.n	8004016 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a26      	ldr	r2, [pc, #152]	; (8004024 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d022      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x80>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f96:	d01d      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x80>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a22      	ldr	r2, [pc, #136]	; (8004028 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x80>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a21      	ldr	r2, [pc, #132]	; (800402c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x80>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x80>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_TIM_Base_Start_IT+0xe0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x80>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x80>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1b      	ldr	r2, [pc, #108]	; (800403c <HAL_TIM_Base_Start_IT+0xe8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d115      	bne.n	8004000 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_TIM_Base_Start_IT+0xec>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d015      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0xbe>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d011      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e008      	b.n	8004012 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e000      	b.n	8004014 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40010400 	.word	0x40010400
 8004038:	40014000 	.word	0x40014000
 800403c:	40001800 	.word	0x40001800
 8004040:	00010007 	.word	0x00010007

08004044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b02      	cmp	r3, #2
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0202 	mvn.w	r2, #2
 8004070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f905 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8f7 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f908 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0204 	mvn.w	r2, #4
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8db 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8cd 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8de 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b08      	cmp	r3, #8
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0208 	mvn.w	r2, #8
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2204      	movs	r2, #4
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8b1 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8a3 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f8b4 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b10      	cmp	r3, #16
 8004154:	d122      	bne.n	800419c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b10      	cmp	r3, #16
 8004162:	d11b      	bne.n	800419c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0210 	mvn.w	r2, #16
 800416c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2208      	movs	r2, #8
 8004172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f887 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8004188:	e005      	b.n	8004196 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f879 	bl	8004282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f88a 	bl	80042aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0201 	mvn.w	r2, #1
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fda0 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b80      	cmp	r3, #128	; 0x80
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9a8 	bl	8004544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004202:	d10e      	bne.n	8004222 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d107      	bne.n	8004222 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800421a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f99b 	bl	8004558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d10e      	bne.n	800424e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d107      	bne.n	800424e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f838 	bl	80042be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b20      	cmp	r3, #32
 800425a:	d10e      	bne.n	800427a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d107      	bne.n	800427a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0220 	mvn.w	r2, #32
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f95b 	bl	8004530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a40      	ldr	r2, [pc, #256]	; (80043e8 <TIM_Base_SetConfig+0x114>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d00f      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a3d      	ldr	r2, [pc, #244]	; (80043ec <TIM_Base_SetConfig+0x118>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3c      	ldr	r2, [pc, #240]	; (80043f0 <TIM_Base_SetConfig+0x11c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3b      	ldr	r2, [pc, #236]	; (80043f4 <TIM_Base_SetConfig+0x120>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3a      	ldr	r2, [pc, #232]	; (80043f8 <TIM_Base_SetConfig+0x124>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2f      	ldr	r2, [pc, #188]	; (80043e8 <TIM_Base_SetConfig+0x114>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d027      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <TIM_Base_SetConfig+0x118>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d023      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2b      	ldr	r2, [pc, #172]	; (80043f0 <TIM_Base_SetConfig+0x11c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01f      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <TIM_Base_SetConfig+0x120>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a29      	ldr	r2, [pc, #164]	; (80043f8 <TIM_Base_SetConfig+0x124>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a28      	ldr	r2, [pc, #160]	; (80043fc <TIM_Base_SetConfig+0x128>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a27      	ldr	r2, [pc, #156]	; (8004400 <TIM_Base_SetConfig+0x12c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00f      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a26      	ldr	r2, [pc, #152]	; (8004404 <TIM_Base_SetConfig+0x130>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00b      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a25      	ldr	r2, [pc, #148]	; (8004408 <TIM_Base_SetConfig+0x134>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a24      	ldr	r2, [pc, #144]	; (800440c <TIM_Base_SetConfig+0x138>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a23      	ldr	r2, [pc, #140]	; (8004410 <TIM_Base_SetConfig+0x13c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <TIM_Base_SetConfig+0x114>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0xf8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0c      	ldr	r2, [pc, #48]	; (80043f8 <TIM_Base_SetConfig+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d103      	bne.n	80043d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	615a      	str	r2, [r3, #20]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	40010400 	.word	0x40010400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800
 8004408:	40001800 	.word	0x40001800
 800440c:	40001c00 	.word	0x40001c00
 8004410:	40002000 	.word	0x40002000

08004414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004428:	2302      	movs	r3, #2
 800442a:	e06d      	b.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a30      	ldr	r2, [pc, #192]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d108      	bne.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a20      	ldr	r2, [pc, #128]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449e:	d01d      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1d      	ldr	r2, [pc, #116]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40010000 	.word	0x40010000
 8004518:	40010400 	.word	0x40010400
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40014000 	.word	0x40014000
 800452c:	40001800 	.word	0x40001800

08004530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e040      	b.n	8004600 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fe7e 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fc18 	bl	8004de0 <UART_SetConfig>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e022      	b.n	8004600 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fe6e 	bl	80052a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fef5 	bl	80053e8 <UART_CheckIdleState>
 80045fe:	4603      	mov	r3, r0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800461c:	2b20      	cmp	r3, #32
 800461e:	f040 8081 	bne.w	8004724 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_Transmit+0x26>
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e079      	b.n	8004726 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_UART_Transmit+0x38>
 800463c:	2302      	movs	r3, #2
 800463e:	e072      	b.n	8004726 <HAL_UART_Transmit+0x11e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2221      	movs	r2, #33	; 0x21
 8004654:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004656:	f7fc ff6b 	bl	8001530 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d108      	bne.n	8004688 <HAL_UART_Transmit+0x80>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e003      	b.n	8004690 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004698:	e02c      	b.n	80046f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fee8 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e038      	b.n	8004726 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3302      	adds	r3, #2
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e007      	b.n	80046e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3301      	adds	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1cc      	bne.n	800469a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2200      	movs	r2, #0
 8004708:	2140      	movs	r1, #64	; 0x40
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 feb5 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e005      	b.n	8004726 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08a      	sub	sp, #40	; 0x28
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004740:	2b20      	cmp	r3, #32
 8004742:	d13d      	bne.n	80047c0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Receive_IT+0x22>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e036      	b.n	80047c2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_UART_Receive_IT+0x34>
 800475e:	2302      	movs	r3, #2
 8004760:	e02f      	b.n	80047c2 <HAL_UART_Receive_IT+0x94>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d018      	beq.n	80047b0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	613b      	str	r3, [r7, #16]
   return(result);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69f9      	ldr	r1, [r7, #28]
 80047a2:	6a3a      	ldr	r2, [r7, #32]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	461a      	mov	r2, r3
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 ff24 	bl	8005604 <UART_Start_Receive_IT>
 80047bc:	4603      	mov	r3, r0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3728      	adds	r7, #40	; 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b0ba      	sub	sp, #232	; 0xe8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80047fa:	4013      	ands	r3, r2
 80047fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d115      	bne.n	8004834 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 82a4 	beq.w	8004d72 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
      }
      return;
 8004832:	e29e      	b.n	8004d72 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8117 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800484a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800484e:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_UART_IRQHandler+0x298>)
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 810a 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d011      	beq.n	8004888 <HAL_UART_IRQHandler+0xbc>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487e:	f043 0201 	orr.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d011      	beq.n	80048b8 <HAL_UART_IRQHandler+0xec>
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2202      	movs	r2, #2
 80048a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ae:	f043 0204 	orr.w	r2, r3, #4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d011      	beq.n	80048e8 <HAL_UART_IRQHandler+0x11c>
 80048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2204      	movs	r2, #4
 80048d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048de:	f043 0202 	orr.w	r2, r3, #2
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d017      	beq.n	8004924 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004904:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800491a:	f043 0208 	orr.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492c:	2b00      	cmp	r3, #0
 800492e:	d012      	beq.n	8004956 <HAL_UART_IRQHandler+0x18a>
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00c      	beq.n	8004956 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 820a 	beq.w	8004d76 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d005      	beq.n	80049ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d04f      	beq.n	8004a4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fef2 	bl	8005798 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d141      	bne.n	8004a46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1d9      	bne.n	80049c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d013      	beq.n	8004a3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <HAL_UART_IRQHandler+0x29c>)
 8004a1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fda3 	bl	800256e <HAL_DMA_Abort_IT>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d017      	beq.n	8004a5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e00f      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9ae 	bl	8004da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	e00b      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9aa 	bl	8004da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e007      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9a6 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a5c:	e18b      	b.n	8004d76 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5e:	bf00      	nop
    return;
 8004a60:	e189      	b.n	8004d76 <HAL_UART_IRQHandler+0x5aa>
 8004a62:	bf00      	nop
 8004a64:	04000120 	.word	0x04000120
 8004a68:	0800585f 	.word	0x0800585f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 8144 	bne.w	8004cfe <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 813d 	beq.w	8004cfe <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8136 	beq.w	8004cfe <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	f040 80b2 	bne.w	8004c0e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ab6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 815d 	beq.w	8004d7a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f080 8155 	bcs.w	8004d7a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae4:	f000 8085 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1da      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e1      	bne.n	8004b32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e3      	bne.n	8004b6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e4      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fc4e 	bl	800248e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8d4 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c0c:	e0b5      	b.n	8004d7a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80a7 	beq.w	8004d7e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a2 	beq.w	8004d7e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e4      	bne.n	8004c3a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c94:	633a      	str	r2, [r7, #48]	; 0x30
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e3      	bne.n	8004c70 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	69b9      	ldr	r1, [r7, #24]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e4      	bne.n	8004cba <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f85c 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cfc:	e03f      	b.n	8004d7e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00e      	beq.n	8004d28 <HAL_UART_IRQHandler+0x55c>
 8004d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f853 	bl	8004dcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d26:	e02d      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
    }
    return;
 8004d50:	e017      	b.n	8004d82 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d012      	beq.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
 8004d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fd8d 	bl	800588a <UART_EndTransmit_IT>
    return;
 8004d70:	e008      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d72:	bf00      	nop
 8004d74:	e006      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d76:	bf00      	nop
 8004d78:	e004      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d82:	bf00      	nop
  }

}
 8004d84:	37e8      	adds	r7, #232	; 0xe8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4ba7      	ldr	r3, [pc, #668]	; (80050a8 <UART_SetConfig+0x2c8>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	6979      	ldr	r1, [r7, #20]
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a95      	ldr	r2, [pc, #596]	; (80050ac <UART_SetConfig+0x2cc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d120      	bne.n	8004e9e <UART_SetConfig+0xbe>
 8004e5c:	4b94      	ldr	r3, [pc, #592]	; (80050b0 <UART_SetConfig+0x2d0>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d816      	bhi.n	8004e98 <UART_SetConfig+0xb8>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <UART_SetConfig+0x90>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004e81 	.word	0x08004e81
 8004e74:	08004e8d 	.word	0x08004e8d
 8004e78:	08004e87 	.word	0x08004e87
 8004e7c:	08004e93 	.word	0x08004e93
 8004e80:	2301      	movs	r3, #1
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e14f      	b.n	8005126 <UART_SetConfig+0x346>
 8004e86:	2302      	movs	r3, #2
 8004e88:	77fb      	strb	r3, [r7, #31]
 8004e8a:	e14c      	b.n	8005126 <UART_SetConfig+0x346>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	e149      	b.n	8005126 <UART_SetConfig+0x346>
 8004e92:	2308      	movs	r3, #8
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e146      	b.n	8005126 <UART_SetConfig+0x346>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e143      	b.n	8005126 <UART_SetConfig+0x346>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a84      	ldr	r2, [pc, #528]	; (80050b4 <UART_SetConfig+0x2d4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d132      	bne.n	8004f0e <UART_SetConfig+0x12e>
 8004ea8:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <UART_SetConfig+0x2d0>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d828      	bhi.n	8004f08 <UART_SetConfig+0x128>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <UART_SetConfig+0xdc>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004f09 	.word	0x08004f09
 8004ec4:	08004f09 	.word	0x08004f09
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004efd 	.word	0x08004efd
 8004ed0:	08004f09 	.word	0x08004f09
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f09 	.word	0x08004f09
 8004edc:	08004ef7 	.word	0x08004ef7
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f09 	.word	0x08004f09
 8004eec:	08004f03 	.word	0x08004f03
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e117      	b.n	8005126 <UART_SetConfig+0x346>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e114      	b.n	8005126 <UART_SetConfig+0x346>
 8004efc:	2304      	movs	r3, #4
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e111      	b.n	8005126 <UART_SetConfig+0x346>
 8004f02:	2308      	movs	r3, #8
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e10e      	b.n	8005126 <UART_SetConfig+0x346>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e10b      	b.n	8005126 <UART_SetConfig+0x346>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a69      	ldr	r2, [pc, #420]	; (80050b8 <UART_SetConfig+0x2d8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d120      	bne.n	8004f5a <UART_SetConfig+0x17a>
 8004f18:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <UART_SetConfig+0x2d0>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f22:	2b30      	cmp	r3, #48	; 0x30
 8004f24:	d013      	beq.n	8004f4e <UART_SetConfig+0x16e>
 8004f26:	2b30      	cmp	r3, #48	; 0x30
 8004f28:	d814      	bhi.n	8004f54 <UART_SetConfig+0x174>
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d009      	beq.n	8004f42 <UART_SetConfig+0x162>
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d810      	bhi.n	8004f54 <UART_SetConfig+0x174>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <UART_SetConfig+0x15c>
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d006      	beq.n	8004f48 <UART_SetConfig+0x168>
 8004f3a:	e00b      	b.n	8004f54 <UART_SetConfig+0x174>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e0f1      	b.n	8005126 <UART_SetConfig+0x346>
 8004f42:	2302      	movs	r3, #2
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e0ee      	b.n	8005126 <UART_SetConfig+0x346>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e0eb      	b.n	8005126 <UART_SetConfig+0x346>
 8004f4e:	2308      	movs	r3, #8
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e0e8      	b.n	8005126 <UART_SetConfig+0x346>
 8004f54:	2310      	movs	r3, #16
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e0e5      	b.n	8005126 <UART_SetConfig+0x346>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a57      	ldr	r2, [pc, #348]	; (80050bc <UART_SetConfig+0x2dc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d120      	bne.n	8004fa6 <UART_SetConfig+0x1c6>
 8004f64:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <UART_SetConfig+0x2d0>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f70:	d013      	beq.n	8004f9a <UART_SetConfig+0x1ba>
 8004f72:	2bc0      	cmp	r3, #192	; 0xc0
 8004f74:	d814      	bhi.n	8004fa0 <UART_SetConfig+0x1c0>
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d009      	beq.n	8004f8e <UART_SetConfig+0x1ae>
 8004f7a:	2b80      	cmp	r3, #128	; 0x80
 8004f7c:	d810      	bhi.n	8004fa0 <UART_SetConfig+0x1c0>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <UART_SetConfig+0x1a8>
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d006      	beq.n	8004f94 <UART_SetConfig+0x1b4>
 8004f86:	e00b      	b.n	8004fa0 <UART_SetConfig+0x1c0>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e0cb      	b.n	8005126 <UART_SetConfig+0x346>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e0c8      	b.n	8005126 <UART_SetConfig+0x346>
 8004f94:	2304      	movs	r3, #4
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e0c5      	b.n	8005126 <UART_SetConfig+0x346>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e0c2      	b.n	8005126 <UART_SetConfig+0x346>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e0bf      	b.n	8005126 <UART_SetConfig+0x346>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a45      	ldr	r2, [pc, #276]	; (80050c0 <UART_SetConfig+0x2e0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d125      	bne.n	8004ffc <UART_SetConfig+0x21c>
 8004fb0:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <UART_SetConfig+0x2d0>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fbe:	d017      	beq.n	8004ff0 <UART_SetConfig+0x210>
 8004fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc4:	d817      	bhi.n	8004ff6 <UART_SetConfig+0x216>
 8004fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fca:	d00b      	beq.n	8004fe4 <UART_SetConfig+0x204>
 8004fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd0:	d811      	bhi.n	8004ff6 <UART_SetConfig+0x216>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <UART_SetConfig+0x1fe>
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fda:	d006      	beq.n	8004fea <UART_SetConfig+0x20a>
 8004fdc:	e00b      	b.n	8004ff6 <UART_SetConfig+0x216>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e0a0      	b.n	8005126 <UART_SetConfig+0x346>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e09d      	b.n	8005126 <UART_SetConfig+0x346>
 8004fea:	2304      	movs	r3, #4
 8004fec:	77fb      	strb	r3, [r7, #31]
 8004fee:	e09a      	b.n	8005126 <UART_SetConfig+0x346>
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e097      	b.n	8005126 <UART_SetConfig+0x346>
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e094      	b.n	8005126 <UART_SetConfig+0x346>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	; (80050c4 <UART_SetConfig+0x2e4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d125      	bne.n	8005052 <UART_SetConfig+0x272>
 8005006:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <UART_SetConfig+0x2d0>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005010:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005014:	d017      	beq.n	8005046 <UART_SetConfig+0x266>
 8005016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800501a:	d817      	bhi.n	800504c <UART_SetConfig+0x26c>
 800501c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005020:	d00b      	beq.n	800503a <UART_SetConfig+0x25a>
 8005022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005026:	d811      	bhi.n	800504c <UART_SetConfig+0x26c>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <UART_SetConfig+0x254>
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005030:	d006      	beq.n	8005040 <UART_SetConfig+0x260>
 8005032:	e00b      	b.n	800504c <UART_SetConfig+0x26c>
 8005034:	2301      	movs	r3, #1
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e075      	b.n	8005126 <UART_SetConfig+0x346>
 800503a:	2302      	movs	r3, #2
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e072      	b.n	8005126 <UART_SetConfig+0x346>
 8005040:	2304      	movs	r3, #4
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e06f      	b.n	8005126 <UART_SetConfig+0x346>
 8005046:	2308      	movs	r3, #8
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e06c      	b.n	8005126 <UART_SetConfig+0x346>
 800504c:	2310      	movs	r3, #16
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e069      	b.n	8005126 <UART_SetConfig+0x346>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <UART_SetConfig+0x2e8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d137      	bne.n	80050cc <UART_SetConfig+0x2ec>
 800505c:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <UART_SetConfig+0x2d0>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800506a:	d017      	beq.n	800509c <UART_SetConfig+0x2bc>
 800506c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005070:	d817      	bhi.n	80050a2 <UART_SetConfig+0x2c2>
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005076:	d00b      	beq.n	8005090 <UART_SetConfig+0x2b0>
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d811      	bhi.n	80050a2 <UART_SetConfig+0x2c2>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <UART_SetConfig+0x2aa>
 8005082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005086:	d006      	beq.n	8005096 <UART_SetConfig+0x2b6>
 8005088:	e00b      	b.n	80050a2 <UART_SetConfig+0x2c2>
 800508a:	2300      	movs	r3, #0
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e04a      	b.n	8005126 <UART_SetConfig+0x346>
 8005090:	2302      	movs	r3, #2
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e047      	b.n	8005126 <UART_SetConfig+0x346>
 8005096:	2304      	movs	r3, #4
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e044      	b.n	8005126 <UART_SetConfig+0x346>
 800509c:	2308      	movs	r3, #8
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e041      	b.n	8005126 <UART_SetConfig+0x346>
 80050a2:	2310      	movs	r3, #16
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e03e      	b.n	8005126 <UART_SetConfig+0x346>
 80050a8:	efff69f3 	.word	0xefff69f3
 80050ac:	40011000 	.word	0x40011000
 80050b0:	40023800 	.word	0x40023800
 80050b4:	40004400 	.word	0x40004400
 80050b8:	40004800 	.word	0x40004800
 80050bc:	40004c00 	.word	0x40004c00
 80050c0:	40005000 	.word	0x40005000
 80050c4:	40011400 	.word	0x40011400
 80050c8:	40007800 	.word	0x40007800
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a71      	ldr	r2, [pc, #452]	; (8005298 <UART_SetConfig+0x4b8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d125      	bne.n	8005122 <UART_SetConfig+0x342>
 80050d6:	4b71      	ldr	r3, [pc, #452]	; (800529c <UART_SetConfig+0x4bc>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050e4:	d017      	beq.n	8005116 <UART_SetConfig+0x336>
 80050e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050ea:	d817      	bhi.n	800511c <UART_SetConfig+0x33c>
 80050ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f0:	d00b      	beq.n	800510a <UART_SetConfig+0x32a>
 80050f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f6:	d811      	bhi.n	800511c <UART_SetConfig+0x33c>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <UART_SetConfig+0x324>
 80050fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005100:	d006      	beq.n	8005110 <UART_SetConfig+0x330>
 8005102:	e00b      	b.n	800511c <UART_SetConfig+0x33c>
 8005104:	2300      	movs	r3, #0
 8005106:	77fb      	strb	r3, [r7, #31]
 8005108:	e00d      	b.n	8005126 <UART_SetConfig+0x346>
 800510a:	2302      	movs	r3, #2
 800510c:	77fb      	strb	r3, [r7, #31]
 800510e:	e00a      	b.n	8005126 <UART_SetConfig+0x346>
 8005110:	2304      	movs	r3, #4
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e007      	b.n	8005126 <UART_SetConfig+0x346>
 8005116:	2308      	movs	r3, #8
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e004      	b.n	8005126 <UART_SetConfig+0x346>
 800511c:	2310      	movs	r3, #16
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e001      	b.n	8005126 <UART_SetConfig+0x346>
 8005122:	2310      	movs	r3, #16
 8005124:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800512e:	d15a      	bne.n	80051e6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005130:	7ffb      	ldrb	r3, [r7, #31]
 8005132:	2b08      	cmp	r3, #8
 8005134:	d827      	bhi.n	8005186 <UART_SetConfig+0x3a6>
 8005136:	a201      	add	r2, pc, #4	; (adr r2, 800513c <UART_SetConfig+0x35c>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	08005161 	.word	0x08005161
 8005140:	08005169 	.word	0x08005169
 8005144:	08005171 	.word	0x08005171
 8005148:	08005187 	.word	0x08005187
 800514c:	08005177 	.word	0x08005177
 8005150:	08005187 	.word	0x08005187
 8005154:	08005187 	.word	0x08005187
 8005158:	08005187 	.word	0x08005187
 800515c:	0800517f 	.word	0x0800517f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005160:	f7fe fa50 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8005164:	61b8      	str	r0, [r7, #24]
        break;
 8005166:	e013      	b.n	8005190 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7fe fa60 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 800516c:	61b8      	str	r0, [r7, #24]
        break;
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005170:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <UART_SetConfig+0x4c0>)
 8005172:	61bb      	str	r3, [r7, #24]
        break;
 8005174:	e00c      	b.n	8005190 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005176:	f7fe f957 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 800517a:	61b8      	str	r0, [r7, #24]
        break;
 800517c:	e008      	b.n	8005190 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005182:	61bb      	str	r3, [r7, #24]
        break;
 8005184:	e004      	b.n	8005190 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	77bb      	strb	r3, [r7, #30]
        break;
 800518e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d074      	beq.n	8005280 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	005a      	lsls	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	441a      	add	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	d916      	bls.n	80051e0 <UART_SetConfig+0x400>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b8:	d212      	bcs.n	80051e0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f023 030f 	bic.w	r3, r3, #15
 80051c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	89fa      	ldrh	r2, [r7, #14]
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	e04f      	b.n	8005280 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	77bb      	strb	r3, [r7, #30]
 80051e4:	e04c      	b.n	8005280 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051e6:	7ffb      	ldrb	r3, [r7, #31]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d828      	bhi.n	800523e <UART_SetConfig+0x45e>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0x414>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005229 	.word	0x08005229
 8005200:	0800523f 	.word	0x0800523f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800523f 	.word	0x0800523f
 8005210:	0800523f 	.word	0x0800523f
 8005214:	08005237 	.word	0x08005237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fe f9f4 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 800521c:	61b8      	str	r0, [r7, #24]
        break;
 800521e:	e013      	b.n	8005248 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7fe fa04 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005224:	61b8      	str	r0, [r7, #24]
        break;
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <UART_SetConfig+0x4c0>)
 800522a:	61bb      	str	r3, [r7, #24]
        break;
 800522c:	e00c      	b.n	8005248 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522e:	f7fe f8fb 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8005232:	61b8      	str	r0, [r7, #24]
        break;
 8005234:	e008      	b.n	8005248 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523a:	61bb      	str	r3, [r7, #24]
        break;
 800523c:	e004      	b.n	8005248 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	77bb      	strb	r3, [r7, #30]
        break;
 8005246:	bf00      	nop
    }

    if (pclk != 0U)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	085a      	lsrs	r2, r3, #1
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	441a      	add	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b0f      	cmp	r3, #15
 8005266:	d909      	bls.n	800527c <UART_SetConfig+0x49c>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526e:	d205      	bcs.n	800527c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	e001      	b.n	8005280 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800528c:	7fbb      	ldrb	r3, [r7, #30]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40007c00 	.word	0x40007c00
 800529c:	40023800 	.word	0x40023800
 80052a0:	00f42400 	.word	0x00f42400

080052a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01a      	beq.n	80053ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a2:	d10a      	bne.n	80053ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f8:	f7fc f89a 	bl	8001530 <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10e      	bne.n	800542a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f82d 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e023      	b.n	8005472 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d10e      	bne.n	8005456 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f817 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e00d      	b.n	8005472 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b09c      	sub	sp, #112	; 0x70
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548a:	e0a5      	b.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	f000 80a1 	beq.w	80055d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fc f84b 	bl	8001530 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <UART_WaitOnFlagUntilTimeout+0x32>
 80054a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d13e      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054c0:	667b      	str	r3, [r7, #100]	; 0x64
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e6      	bne.n	80054ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	663b      	str	r3, [r7, #96]	; 0x60
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e067      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d04f      	beq.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005546:	d147      	bne.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005550:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
 8005572:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	613b      	str	r3, [r7, #16]
   return(result);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	66bb      	str	r3, [r7, #104]	; 0x68
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055a4:	623a      	str	r2, [r7, #32]
 80055a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	69f9      	ldr	r1, [r7, #28]
 80055aa:	6a3a      	ldr	r2, [r7, #32]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e5      	bne.n	8005584 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e010      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	f43f af4a 	beq.w	800548c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3770      	adds	r7, #112	; 0x70
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005604:	b480      	push	{r7}
 8005606:	b097      	sub	sp, #92	; 0x5c
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	d10e      	bne.n	8005656 <UART_Start_Receive_IT+0x52>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <UART_Start_Receive_IT+0x48>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800564a:	e02d      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005654:	e028      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10d      	bne.n	800567a <UART_Start_Receive_IT+0x76>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <UART_Start_Receive_IT+0x6c>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800566e:	e01b      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	227f      	movs	r2, #127	; 0x7f
 8005674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005678:	e016      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005682:	d10d      	bne.n	80056a0 <UART_Start_Receive_IT+0x9c>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <UART_Start_Receive_IT+0x92>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	227f      	movs	r2, #127	; 0x7f
 8005690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005694:	e008      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	223f      	movs	r2, #63	; 0x3f
 800569a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800569e:	e003      	b.n	80056a8 <UART_Start_Receive_IT+0xa4>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2222      	movs	r2, #34	; 0x22
 80056b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3308      	adds	r3, #8
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	657b      	str	r3, [r7, #84]	; 0x54
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80056d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e5      	bne.n	80056b6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d107      	bne.n	8005704 <UART_Start_Receive_IT+0x100>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a24      	ldr	r2, [pc, #144]	; (8005790 <UART_Start_Receive_IT+0x18c>)
 8005700:	665a      	str	r2, [r3, #100]	; 0x64
 8005702:	e002      	b.n	800570a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4a23      	ldr	r2, [pc, #140]	; (8005794 <UART_Start_Receive_IT+0x190>)
 8005708:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d019      	beq.n	800574e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
 800573a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800573e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_Start_Receive_IT+0x116>
 800574c:	e018      	b.n	8005780 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	613b      	str	r3, [r7, #16]
   return(result);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f043 0320 	orr.w	r3, r3, #32
 8005762:	653b      	str	r3, [r7, #80]	; 0x50
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576c:	623b      	str	r3, [r7, #32]
 800576e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	69f9      	ldr	r1, [r7, #28]
 8005772:	6a3a      	ldr	r2, [r7, #32]
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	61bb      	str	r3, [r7, #24]
   return(result);
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	375c      	adds	r7, #92	; 0x5c
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	08005a3b 	.word	0x08005a3b
 8005794:	080058df 	.word	0x080058df

08005798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b095      	sub	sp, #84	; 0x54
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	643b      	str	r3, [r7, #64]	; 0x40
 80057c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580a:	2b01      	cmp	r3, #1
 800580c:	d118      	bne.n	8005840 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	60bb      	str	r3, [r7, #8]
   return(result);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f023 0310 	bic.w	r3, r3, #16
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6979      	ldr	r1, [r7, #20]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	613b      	str	r3, [r7, #16]
   return(result);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e6      	bne.n	800580e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005852:	bf00      	nop
 8005854:	3754      	adds	r7, #84	; 0x54
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff fa8f 	bl	8004da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b088      	sub	sp, #32
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	613b      	str	r3, [r7, #16]
   return(result);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e6      	bne.n	8005892 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fa5b 	bl	8004d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d6:	bf00      	nop
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b096      	sub	sp, #88	; 0x58
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f4:	2b22      	cmp	r3, #34	; 0x22
 80058f6:	f040 8094 	bne.w	8005a22 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005904:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005908:	b2d9      	uxtb	r1, r3
 800590a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800590e:	b2da      	uxtb	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	400a      	ands	r2, r1
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d177      	bne.n	8005a32 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005956:	653b      	str	r3, [r7, #80]	; 0x50
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
 8005962:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800596e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e6      	bne.n	8005942 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	623b      	str	r3, [r7, #32]
   return(result);
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005994:	633a      	str	r2, [r7, #48]	; 0x30
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800599a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e5      	bne.n	8005974 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d12e      	bne.n	8005a1a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	69b9      	ldr	r1, [r7, #24]
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	617b      	str	r3, [r7, #20]
   return(result);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d103      	bne.n	8005a0a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2210      	movs	r2, #16
 8005a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff f9ce 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a18:	e00b      	b.n	8005a32 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fb facc 	bl	8000fb8 <HAL_UART_RxCpltCallback>
}
 8005a20:	e007      	b.n	8005a32 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0208 	orr.w	r2, r2, #8
 8005a30:	619a      	str	r2, [r3, #24]
}
 8005a32:	bf00      	nop
 8005a34:	3758      	adds	r7, #88	; 0x58
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b096      	sub	sp, #88	; 0x58
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a50:	2b22      	cmp	r3, #34	; 0x22
 8005a52:	f040 8094 	bne.w	8005b7e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a66:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005a6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a6e:	4013      	ands	r3, r2
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d177      	bne.n	8005b8e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	643b      	str	r3, [r7, #64]	; 0x40
 8005abe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3308      	adds	r3, #8
 8005aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d12e      	bne.n	8005b76 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d103      	bne.n	8005b66 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff f920 	bl	8004db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b74:	e00b      	b.n	8005b8e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fa1e 	bl	8000fb8 <HAL_UART_RxCpltCallback>
}
 8005b7c:	e007      	b.n	8005b8e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0208 	orr.w	r2, r2, #8
 8005b8c:	619a      	str	r2, [r3, #24]
}
 8005b8e:	bf00      	nop
 8005b90:	3758      	adds	r7, #88	; 0x58
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b98:	b084      	sub	sp, #16
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	f107 001c 	add.w	r0, r7, #28
 8005ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d120      	bne.n	8005bf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <USB_CoreInit+0xac>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa92 	bl	8006110 <USB_CoreReset>
 8005bec:	4603      	mov	r3, r0
 8005bee:	73fb      	strb	r3, [r7, #15]
 8005bf0:	e010      	b.n	8005c14 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa86 	bl	8006110 <USB_CoreReset>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10b      	bne.n	8005c32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f043 0206 	orr.w	r2, r3, #6
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f043 0220 	orr.w	r2, r3, #32
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c3e:	b004      	add	sp, #16
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	ffbdffbf 	.word	0xffbdffbf

08005c48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 0201 	bic.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d115      	bne.n	8005cb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7fb fc55 	bl	8001548 <HAL_Delay>
      ms++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa25 	bl	80060f4 <USB_GetMode>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d01e      	beq.n	8005cee <USB_SetCurrentMode+0x84>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b31      	cmp	r3, #49	; 0x31
 8005cb4:	d9f0      	bls.n	8005c98 <USB_SetCurrentMode+0x2e>
 8005cb6:	e01a      	b.n	8005cee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d115      	bne.n	8005cea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f7fb fc3c 	bl	8001548 <HAL_Delay>
      ms++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa0c 	bl	80060f4 <USB_GetMode>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <USB_SetCurrentMode+0x84>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b31      	cmp	r3, #49	; 0x31
 8005ce6:	d9f0      	bls.n	8005cca <USB_SetCurrentMode+0x60>
 8005ce8:	e001      	b.n	8005cee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e005      	b.n	8005cfa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b32      	cmp	r3, #50	; 0x32
 8005cf2:	d101      	bne.n	8005cf8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d04:	b084      	sub	sp, #16
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	e009      	b.n	8005d38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3340      	adds	r3, #64	; 0x40
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3301      	adds	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b0e      	cmp	r3, #14
 8005d3c:	d9f2      	bls.n	8005d24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11c      	bne.n	8005d7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d52:	f043 0302 	orr.w	r3, r3, #2
 8005d56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e005      	b.n	8005d8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d90:	461a      	mov	r2, r3
 8005d92:	2300      	movs	r3, #0
 8005d94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	461a      	mov	r2, r3
 8005da6:	680b      	ldr	r3, [r1, #0]
 8005da8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10c      	bne.n	8005dca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005db6:	2100      	movs	r1, #0
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f961 	bl	8006080 <USB_SetDevSpeed>
 8005dbe:	e008      	b.n	8005dd2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f95c 	bl	8006080 <USB_SetDevSpeed>
 8005dc8:	e003      	b.n	8005dd2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dca:	2103      	movs	r1, #3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f957 	bl	8006080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dd2:	2110      	movs	r1, #16
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f8f3 	bl	8005fc0 <USB_FlushTxFifo>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f91d 	bl	8006024 <USB_FlushRxFifo>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e06:	461a      	mov	r2, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	e043      	b.n	8005ea6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e34:	d118      	bne.n	8005e68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	e013      	b.n	8005e7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e008      	b.n	8005e7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	461a      	mov	r2, r3
 8005e88:	2300      	movs	r3, #0
 8005e8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3b7      	bcc.n	8005e1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e043      	b.n	8005f3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eca:	d118      	bne.n	8005efe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e013      	b.n	8005f10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e008      	b.n	8005f10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d3b7      	bcc.n	8005eb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f043 0210 	orr.w	r2, r3, #16
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <USB_DevInit+0x2b4>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	f043 0208 	orr.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <USB_DevInit+0x2b8>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fb4:	b004      	add	sp, #16
 8005fb6:	4770      	bx	lr
 8005fb8:	803c3800 	.word	0x803c3800
 8005fbc:	40000004 	.word	0x40000004

08005fc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	4a12      	ldr	r2, [pc, #72]	; (8006020 <USB_FlushTxFifo+0x60>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e01a      	b.n	8006014 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	daf3      	bge.n	8005fce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	019b      	lsls	r3, r3, #6
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	4a08      	ldr	r2, [pc, #32]	; (8006020 <USB_FlushTxFifo+0x60>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e006      	b.n	8006014 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b20      	cmp	r3, #32
 8006010:	d0f1      	beq.n	8005ff6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	00030d40 	.word	0x00030d40

08006024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	4a11      	ldr	r2, [pc, #68]	; (800607c <USB_FlushRxFifo+0x58>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d901      	bls.n	8006040 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e017      	b.n	8006070 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	daf3      	bge.n	8006030 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2210      	movs	r2, #16
 8006050:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	4a08      	ldr	r2, [pc, #32]	; (800607c <USB_FlushRxFifo+0x58>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e006      	b.n	8006070 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b10      	cmp	r3, #16
 800606c:	d0f1      	beq.n	8006052 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	00030d40 	.word	0x00030d40

08006080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b085      	sub	sp, #20
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060cc:	f023 0303 	bic.w	r3, r3, #3
 80060d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f003 0301 	and.w	r3, r3, #1
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3301      	adds	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	4a13      	ldr	r2, [pc, #76]	; (8006170 <USB_CoreReset+0x60>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e01a      	b.n	8006162 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	daf3      	bge.n	800611c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f043 0201 	orr.w	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	4a09      	ldr	r2, [pc, #36]	; (8006170 <USB_CoreReset+0x60>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e006      	b.n	8006162 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b01      	cmp	r3, #1
 800615e:	d0f1      	beq.n	8006144 <USB_CoreReset+0x34>

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	00030d40 	.word	0x00030d40

08006174 <__libc_init_array>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	4d0d      	ldr	r5, [pc, #52]	; (80061ac <__libc_init_array+0x38>)
 8006178:	4c0d      	ldr	r4, [pc, #52]	; (80061b0 <__libc_init_array+0x3c>)
 800617a:	1b64      	subs	r4, r4, r5
 800617c:	10a4      	asrs	r4, r4, #2
 800617e:	2600      	movs	r6, #0
 8006180:	42a6      	cmp	r6, r4
 8006182:	d109      	bne.n	8006198 <__libc_init_array+0x24>
 8006184:	4d0b      	ldr	r5, [pc, #44]	; (80061b4 <__libc_init_array+0x40>)
 8006186:	4c0c      	ldr	r4, [pc, #48]	; (80061b8 <__libc_init_array+0x44>)
 8006188:	f000 f832 	bl	80061f0 <_init>
 800618c:	1b64      	subs	r4, r4, r5
 800618e:	10a4      	asrs	r4, r4, #2
 8006190:	2600      	movs	r6, #0
 8006192:	42a6      	cmp	r6, r4
 8006194:	d105      	bne.n	80061a2 <__libc_init_array+0x2e>
 8006196:	bd70      	pop	{r4, r5, r6, pc}
 8006198:	f855 3b04 	ldr.w	r3, [r5], #4
 800619c:	4798      	blx	r3
 800619e:	3601      	adds	r6, #1
 80061a0:	e7ee      	b.n	8006180 <__libc_init_array+0xc>
 80061a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a6:	4798      	blx	r3
 80061a8:	3601      	adds	r6, #1
 80061aa:	e7f2      	b.n	8006192 <__libc_init_array+0x1e>
 80061ac:	08006288 	.word	0x08006288
 80061b0:	08006288 	.word	0x08006288
 80061b4:	08006288 	.word	0x08006288
 80061b8:	0800628c 	.word	0x0800628c

080061bc <memset>:
 80061bc:	4402      	add	r2, r0
 80061be:	4603      	mov	r3, r0
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d100      	bne.n	80061c6 <memset+0xa>
 80061c4:	4770      	bx	lr
 80061c6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ca:	e7f9      	b.n	80061c0 <memset+0x4>

080061cc <strncmp>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	b16a      	cbz	r2, 80061ec <strncmp+0x20>
 80061d0:	3901      	subs	r1, #1
 80061d2:	1884      	adds	r4, r0, r2
 80061d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80061dc:	4293      	cmp	r3, r2
 80061de:	d103      	bne.n	80061e8 <strncmp+0x1c>
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d001      	beq.n	80061e8 <strncmp+0x1c>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f5      	bne.n	80061d4 <strncmp+0x8>
 80061e8:	1a98      	subs	r0, r3, r2
 80061ea:	bd10      	pop	{r4, pc}
 80061ec:	4610      	mov	r0, r2
 80061ee:	e7fc      	b.n	80061ea <strncmp+0x1e>

080061f0 <_init>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	bf00      	nop
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr

080061fc <_fini>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	bf00      	nop
 8006200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006202:	bc08      	pop	{r3}
 8006204:	469e      	mov	lr, r3
 8006206:	4770      	bx	lr
