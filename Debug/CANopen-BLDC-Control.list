
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b24  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dbc  08005dbc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc4  08005dc4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc4  08005dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000010  08005ddc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08005ddc  00020554  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140ca  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b99  00000000  00000000  00034108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00036ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289a2  00000000  00000000  00038660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001272d  00000000  00000000  00061002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f69af  00000000  00000000  0007372f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  0016a134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d04 	.word	0x08005d04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08005d04 	.word	0x08005d04

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_CAN1_Init+0x68>)
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <MX_CAN1_Init+0x6c>)
 8000538:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_CAN1_Init+0x68>)
 800053c:	2210      	movs	r2, #16
 800053e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_CAN1_Init+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_CAN1_Init+0x68>)
 8000548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800054c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_CAN1_Init+0x68>)
 8000550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000554:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_CAN1_Init+0x68>)
 8000558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800055c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_CAN1_Init+0x68>)
 8000560:	2200      	movs	r2, #0
 8000562:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_CAN1_Init+0x68>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CAN1_Init+0x68>)
 8000584:	f001 f904 	bl	8001790 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f000 fecd 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c
 800059c:	40006400 	.word	0x40006400

080005a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_CAN_MspInit+0x8c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12f      	bne.n	8000622 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	2303      	movs	r3, #3
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000602:	2309      	movs	r3, #9
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_CAN_MspInit+0x94>)
 800060e:	f002 f8d1 	bl	80027b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2014      	movs	r0, #20
 8000618:	f002 f803 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061c:	2014      	movs	r0, #20
 800061e:	f002 f81c 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40006400 	.word	0x40006400
 8000630:	40023800 	.word	0x40023800
 8000634:	40020c00 	.word	0x40020c00

08000638 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a6b      	ldr	r2, [pc, #428]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b69      	ldr	r3, [pc, #420]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a65      	ldr	r2, [pc, #404]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a5f      	ldr	r2, [pc, #380]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a53      	ldr	r2, [pc, #332]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e4:	4847      	ldr	r0, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1cc>)
 80006e6:	f002 fa11 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80006f0:	f002 fa0c 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d4>)
 800070c:	f002 f852 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <MX_GPIO_Init+0x1d4>)
 800072c:	f002 f842 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000730:	2386      	movs	r3, #134	; 0x86
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x1d8>)
 800074c:	f002 f832 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000750:	f244 0381 	movw	r3, #16513	; 0x4081
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800076a:	f002 f823 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800078c:	f002 f812 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007a8:	f002 f804 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007c0:	f001 fff8 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007e2:	f001 ffe7 	bl	80027b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f001 ff19 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f001 ff32 	bl	800265a <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000824:	d129      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_GPIO_EXTI_Callback+0x70>)
 8000828:	f240 620a 	movw	r2, #1546	; 0x60a
 800082c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_GPIO_EXTI_Callback+0x70>)
 8000830:	2208      	movs	r2, #8
 8000832:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000836:	2240      	movs	r2, #64	; 0x40
 8000838:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 800083c:	2241      	movs	r2, #65	; 0x41
 800083e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000842:	2260      	movs	r2, #96	; 0x60
 8000844:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_GPIO_EXTI_Callback+0x78>)
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_GPIO_EXTI_Callback+0x74>)
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <HAL_GPIO_EXTI_Callback+0x70>)
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <HAL_GPIO_EXTI_Callback+0x7c>)
 800086c:	f001 f9bc 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8000876:	f000 fd59 	bl	800132c <Error_Handler>
		}
	}
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000090 	.word	0x20000090
 8000888:	20000054 	.word	0x20000054
 800088c:	2000005c 	.word	0x2000005c
 8000890:	2000002c 	.word	0x2000002c

08000894 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000898:	f000 fef9 	bl	800168e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800089c:	f000 f86a 	bl	8000974 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008a0:	f7ff feca 	bl	8000638 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80008a4:	f000 fdc4 	bl	8001430 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80008a8:	f000 fe3e 	bl	8001528 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 80008ac:	f7ff fe40 	bl	8000530 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, UserMessage, 4);
 80008b0:	2204      	movs	r2, #4
 80008b2:	4929      	ldr	r1, [pc, #164]	; (8000958 <main+0xc4>)
 80008b4:	4829      	ldr	r0, [pc, #164]	; (800095c <main+0xc8>)
 80008b6:	f003 fcd6 	bl	8004266 <HAL_UART_Receive_IT>

	HAL_CAN_Start(&hcan1);
 80008ba:	4829      	ldr	r0, [pc, #164]	; (8000960 <main+0xcc>)
 80008bc:	f001 f950 	bl	8001b60 <HAL_CAN_Start>

	// TxHeader param config
	TxHeader.StdId = 0x000;
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <main+0xd0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <main+0xd0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <main+0xd0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <main+0xd0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <main+0xd0>)
 80008da:	2202      	movs	r2, #2
 80008dc:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <main+0xd0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	751a      	strb	r2, [r3, #20]

	TxData[0] = 0x82;
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <main+0xd4>)
 80008e6:	2282      	movs	r2, #130	; 0x82
 80008e8:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x0A;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <main+0xd4>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	705a      	strb	r2, [r3, #1]



	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <main+0xd8>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <main+0xd8>)
 80008f8:	2212      	movs	r2, #18
 80008fa:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <main+0xd8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <main+0xd8>)
 8000904:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000908:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <main+0xd8>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <main+0xd8>)
 8000912:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000916:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <main+0xd8>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <main+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <main+0xd8>)
 8000926:	2201      	movs	r2, #1
 8000928:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <main+0xd8>)
 800092c:	2214      	movs	r2, #20
 800092e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8000930:	490e      	ldr	r1, [pc, #56]	; (800096c <main+0xd8>)
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <main+0xcc>)
 8000934:	f001 f828 	bl	8001988 <HAL_CAN_ConfigFilter>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000938:	2102      	movs	r1, #2
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <main+0xcc>)
 800093c:	f001 fb41 	bl	8001fc2 <HAL_CAN_ActivateNotification>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <main+0xdc>)
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <main+0xd4>)
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <main+0xd0>)
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <main+0xcc>)
 8000948:	f001 f94e 	bl	8001be8 <HAL_CAN_AddTxMessage>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <main+0xc2>
		Error_Handler();
 8000952:	f000 fceb 	bl	800132c <Error_Handler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000956:	e7fe      	b.n	8000956 <main+0xc2>
 8000958:	200000c4 	.word	0x200000c4
 800095c:	200000c8 	.word	0x200000c8
 8000960:	2000002c 	.word	0x2000002c
 8000964:	20000090 	.word	0x20000090
 8000968:	20000054 	.word	0x20000054
 800096c:	20000068 	.word	0x20000068
 8000970:	2000005c 	.word	0x2000005c

08000974 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0b8      	sub	sp, #224	; 0xe0
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800097e:	2234      	movs	r2, #52	; 0x34
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f005 f9b6 	bl	8005cf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2290      	movs	r2, #144	; 0x90
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 f9a7 	bl	8005cf4 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80009a6:	f002 fa45 	bl	8002e34 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <SystemClock_Config+0x128>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a3b      	ldr	r2, [pc, #236]	; (8000a9c <SystemClock_Config+0x128>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <SystemClock_Config+0x128>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <SystemClock_Config+0x12c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ca:	4a35      	ldr	r2, [pc, #212]	; (8000aa0 <SystemClock_Config+0x12c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <SystemClock_Config+0x12c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000a00:	2360      	movs	r3, #96	; 0x60
 8000a02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fa69 	bl	8002ef4 <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8000a28:	f000 fc80 	bl	800132c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a2c:	f002 fa12 	bl	8002e54 <HAL_PWREx_EnableOverDrive>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000a36:	f000 fc79 	bl	800132c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a5e:	2103      	movs	r1, #3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fcf5 	bl	8003450 <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8000a6c:	f000 fc5e 	bl	800132c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <SystemClock_Config+0x130>)
 8000a72:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fee6 	bl	8003854 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8000a8e:	f000 fc4d 	bl	800132c <Error_Handler>
	}
}
 8000a92:	bf00      	nop
 8000a94:	37e0      	adds	r7, #224	; 0xe0
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000
 8000aa4:	00200100 	.word	0x00200100

08000aa8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4ac7      	ldr	r2, [pc, #796]	; (8000dd4 <HAL_UART_RxCpltCallback+0x32c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	f040 83f6 	bne.w	80012a8 <HAL_UART_RxCpltCallback+0x800>

		switch(iMachineStatus){
 8000abc:	4bc6      	ldr	r3, [pc, #792]	; (8000dd8 <HAL_UART_RxCpltCallback+0x330>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b64      	cmp	r3, #100	; 0x64
 8000ac2:	f300 80c1 	bgt.w	8000c48 <HAL_UART_RxCpltCallback+0x1a0>
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	f2c0 83f4 	blt.w	80012b4 <HAL_UART_RxCpltCallback+0x80c>
 8000acc:	3b0a      	subs	r3, #10
 8000ace:	2b5a      	cmp	r3, #90	; 0x5a
 8000ad0:	f200 83f0 	bhi.w	80012b4 <HAL_UART_RxCpltCallback+0x80c>
 8000ad4:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <HAL_UART_RxCpltCallback+0x34>)
 8000ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ada:	bf00      	nop
 8000adc:	08000c95 	.word	0x08000c95
 8000ae0:	080012b5 	.word	0x080012b5
 8000ae4:	080012b5 	.word	0x080012b5
 8000ae8:	080012b5 	.word	0x080012b5
 8000aec:	080012b5 	.word	0x080012b5
 8000af0:	080012b5 	.word	0x080012b5
 8000af4:	080012b5 	.word	0x080012b5
 8000af8:	080012b5 	.word	0x080012b5
 8000afc:	080012b5 	.word	0x080012b5
 8000b00:	080012b5 	.word	0x080012b5
 8000b04:	08000cff 	.word	0x08000cff
 8000b08:	08000d69 	.word	0x08000d69
 8000b0c:	080012b5 	.word	0x080012b5
 8000b10:	080012b5 	.word	0x080012b5
 8000b14:	080012b5 	.word	0x080012b5
 8000b18:	080012b5 	.word	0x080012b5
 8000b1c:	080012b5 	.word	0x080012b5
 8000b20:	080012b5 	.word	0x080012b5
 8000b24:	080012b5 	.word	0x080012b5
 8000b28:	080012b5 	.word	0x080012b5
 8000b2c:	08000e01 	.word	0x08000e01
 8000b30:	080012b5 	.word	0x080012b5
 8000b34:	080012b5 	.word	0x080012b5
 8000b38:	080012b5 	.word	0x080012b5
 8000b3c:	080012b5 	.word	0x080012b5
 8000b40:	080012b5 	.word	0x080012b5
 8000b44:	080012b5 	.word	0x080012b5
 8000b48:	080012b5 	.word	0x080012b5
 8000b4c:	080012b5 	.word	0x080012b5
 8000b50:	080012b5 	.word	0x080012b5
 8000b54:	08000e6b 	.word	0x08000e6b
 8000b58:	08000ed5 	.word	0x08000ed5
 8000b5c:	08000f3f 	.word	0x08000f3f
 8000b60:	08000fa9 	.word	0x08000fa9
 8000b64:	08001013 	.word	0x08001013
 8000b68:	0800107d 	.word	0x0800107d
 8000b6c:	080012b5 	.word	0x080012b5
 8000b70:	080012b5 	.word	0x080012b5
 8000b74:	080012b5 	.word	0x080012b5
 8000b78:	080012b5 	.word	0x080012b5
 8000b7c:	08001101 	.word	0x08001101
 8000b80:	080012b5 	.word	0x080012b5
 8000b84:	080012b5 	.word	0x080012b5
 8000b88:	080012b5 	.word	0x080012b5
 8000b8c:	080012b5 	.word	0x080012b5
 8000b90:	080012b5 	.word	0x080012b5
 8000b94:	080012b5 	.word	0x080012b5
 8000b98:	080012b5 	.word	0x080012b5
 8000b9c:	080012b5 	.word	0x080012b5
 8000ba0:	080012b5 	.word	0x080012b5
 8000ba4:	0800116b 	.word	0x0800116b
 8000ba8:	080012b5 	.word	0x080012b5
 8000bac:	080012b5 	.word	0x080012b5
 8000bb0:	080012b5 	.word	0x080012b5
 8000bb4:	080012b5 	.word	0x080012b5
 8000bb8:	080012b5 	.word	0x080012b5
 8000bbc:	080012b5 	.word	0x080012b5
 8000bc0:	080012b5 	.word	0x080012b5
 8000bc4:	080012b5 	.word	0x080012b5
 8000bc8:	080012b5 	.word	0x080012b5
 8000bcc:	080011d5 	.word	0x080011d5
 8000bd0:	080012b5 	.word	0x080012b5
 8000bd4:	080012b5 	.word	0x080012b5
 8000bd8:	080012b5 	.word	0x080012b5
 8000bdc:	080012b5 	.word	0x080012b5
 8000be0:	080012b5 	.word	0x080012b5
 8000be4:	080012b5 	.word	0x080012b5
 8000be8:	080012b5 	.word	0x080012b5
 8000bec:	080012b5 	.word	0x080012b5
 8000bf0:	080012b5 	.word	0x080012b5
 8000bf4:	080012b5 	.word	0x080012b5
 8000bf8:	080012b5 	.word	0x080012b5
 8000bfc:	080012b5 	.word	0x080012b5
 8000c00:	080012b5 	.word	0x080012b5
 8000c04:	080012b5 	.word	0x080012b5
 8000c08:	080012b5 	.word	0x080012b5
 8000c0c:	080012b5 	.word	0x080012b5
 8000c10:	080012b5 	.word	0x080012b5
 8000c14:	080012b5 	.word	0x080012b5
 8000c18:	080012b5 	.word	0x080012b5
 8000c1c:	080012b5 	.word	0x080012b5
 8000c20:	080012b5 	.word	0x080012b5
 8000c24:	080012b5 	.word	0x080012b5
 8000c28:	080012b5 	.word	0x080012b5
 8000c2c:	080012b5 	.word	0x080012b5
 8000c30:	080012b5 	.word	0x080012b5
 8000c34:	080012b5 	.word	0x080012b5
 8000c38:	080012b5 	.word	0x080012b5
 8000c3c:	080012b5 	.word	0x080012b5
 8000c40:	080012b5 	.word	0x080012b5
 8000c44:	08000c51 	.word	0x08000c51
 8000c48:	2bc8      	cmp	r3, #200	; 0xc8
 8000c4a:	f000 82f8 	beq.w	800123e <HAL_UART_RxCpltCallback+0x796>
 8000c4e:	e331      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 100: //PDO
			TxHeader.StdId = 0x000;
 8000c50:	4b62      	ldr	r3, [pc, #392]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 2;
 8000c56:	4b61      	ldr	r3, [pc, #388]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x01;
 8000c5c:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x0A;
 8000c62:	4b5f      	ldr	r3, [pc, #380]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000c64:	220a      	movs	r2, #10
 8000c66:	705a      	strb	r2, [r3, #1]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c68:	4b5e      	ldr	r3, [pc, #376]	; (8000de4 <HAL_UART_RxCpltCallback+0x33c>)
 8000c6a:	4a5d      	ldr	r2, [pc, #372]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000c6c:	495b      	ldr	r1, [pc, #364]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000c6e:	485e      	ldr	r0, [pc, #376]	; (8000de8 <HAL_UART_RxCpltCallback+0x340>)
 8000c70:	f000 ffba 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <HAL_UART_RxCpltCallback+0x1d8>
				Error_Handler();
 8000c7a:	f000 fb57 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 10;
				HAL_UART_Transmit(&huart3, "C100", 4, 100);
			}
			break;
 8000c7e:	e319      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 10;
 8000c80:	4b55      	ldr	r3, [pc, #340]	; (8000dd8 <HAL_UART_RxCpltCallback+0x330>)
 8000c82:	220a      	movs	r2, #10
 8000c84:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C100", 4, 100);
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4958      	ldr	r1, [pc, #352]	; (8000dec <HAL_UART_RxCpltCallback+0x344>)
 8000c8c:	4858      	ldr	r0, [pc, #352]	; (8000df0 <HAL_UART_RxCpltCallback+0x348>)
 8000c8e:	f003 fa57 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000c92:	e30f      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 10: //SHUTDOWN
			TxHeader.StdId = 0x60A;
 8000c94:	4b51      	ldr	r3, [pc, #324]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000c96:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c9a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000c9c:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000ca2:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000ca4:	2222      	movs	r2, #34	; 0x22
 8000ca6:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000ca8:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000caa:	2240      	movs	r2, #64	; 0x40
 8000cac:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000cae:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000cb0:	2260      	movs	r2, #96	; 0x60
 8000cb2:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000cb4:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x06;
 8000cba:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000cbc:	2206      	movs	r2, #6
 8000cbe:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000cc0:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000ccc:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cd2:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <HAL_UART_RxCpltCallback+0x33c>)
 8000cd4:	4a42      	ldr	r2, [pc, #264]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000cd6:	4941      	ldr	r1, [pc, #260]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000cd8:	4843      	ldr	r0, [pc, #268]	; (8000de8 <HAL_UART_RxCpltCallback+0x340>)
 8000cda:	f000 ff85 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <HAL_UART_RxCpltCallback+0x242>
				Error_Handler();
 8000ce4:	f000 fb22 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 20;
				HAL_UART_Transmit(&huart3, "C010", 4, 100);
			}
			break;
 8000ce8:	e2e4      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 20;
 8000cea:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <HAL_UART_RxCpltCallback+0x330>)
 8000cec:	2214      	movs	r2, #20
 8000cee:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	493f      	ldr	r1, [pc, #252]	; (8000df4 <HAL_UART_RxCpltCallback+0x34c>)
 8000cf6:	483e      	ldr	r0, [pc, #248]	; (8000df0 <HAL_UART_RxCpltCallback+0x348>)
 8000cf8:	f003 fa22 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000cfc:	e2da      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 20://SWITCH ON
			TxHeader.StdId = 0x60A;
 8000cfe:	4b37      	ldr	r3, [pc, #220]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000d00:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d04:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000d06:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000d08:	2208      	movs	r2, #8
 8000d0a:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d0e:	2222      	movs	r2, #34	; 0x22
 8000d10:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d1a:	2260      	movs	r2, #96	; 0x60
 8000d1c:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x07;
 8000d24:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d26:	2207      	movs	r2, #7
 8000d28:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <HAL_UART_RxCpltCallback+0x33c>)
 8000d3e:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d40:	4926      	ldr	r1, [pc, #152]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000d42:	4829      	ldr	r0, [pc, #164]	; (8000de8 <HAL_UART_RxCpltCallback+0x340>)
 8000d44:	f000 ff50 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <HAL_UART_RxCpltCallback+0x2ac>
				Error_Handler();
 8000d4e:	f000 faed 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 21;
				HAL_UART_Transmit(&huart3, "C020", 4, 100);
			}
			break;
 8000d52:	e2af      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 21;
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_UART_RxCpltCallback+0x330>)
 8000d56:	2215      	movs	r2, #21
 8000d58:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	4926      	ldr	r1, [pc, #152]	; (8000df8 <HAL_UART_RxCpltCallback+0x350>)
 8000d60:	4823      	ldr	r0, [pc, #140]	; (8000df0 <HAL_UART_RxCpltCallback+0x348>)
 8000d62:	f003 f9ed 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000d66:	e2a5      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>



		case 21://ENABLE OPERATION
			TxHeader.StdId = 0x60A;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000d6a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d6e:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000d72:	2208      	movs	r2, #8
 8000d74:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d78:	2222      	movs	r2, #34	; 0x22
 8000d7a:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d7e:	2240      	movs	r2, #64	; 0x40
 8000d80:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d84:	2260      	movs	r2, #96	; 0x60
 8000d86:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d90:	220f      	movs	r2, #15
 8000d92:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_UART_RxCpltCallback+0x33c>)
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_UART_RxCpltCallback+0x338>)
 8000daa:	490c      	ldr	r1, [pc, #48]	; (8000ddc <HAL_UART_RxCpltCallback+0x334>)
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <HAL_UART_RxCpltCallback+0x340>)
 8000dae:	f000 ff1b 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <HAL_UART_RxCpltCallback+0x316>
				Error_Handler();
 8000db8:	f000 fab8 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 30;
				HAL_UART_Transmit(&huart3, "C021", 4, 100);
			}
			break;
 8000dbc:	e27a      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 30;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_UART_RxCpltCallback+0x330>)
 8000dc0:	221e      	movs	r2, #30
 8000dc2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C021", 4, 100);
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <HAL_UART_RxCpltCallback+0x354>)
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_UART_RxCpltCallback+0x348>)
 8000dcc:	f003 f9b8 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000dd0:	e270      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
 8000dd2:	bf00      	nop
 8000dd4:	40004800 	.word	0x40004800
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000090 	.word	0x20000090
 8000de0:	20000054 	.word	0x20000054
 8000de4:	2000005c 	.word	0x2000005c
 8000de8:	2000002c 	.word	0x2000002c
 8000dec:	08005d1c 	.word	0x08005d1c
 8000df0:	200000c8 	.word	0x200000c8
 8000df4:	08005d24 	.word	0x08005d24
 8000df8:	08005d2c 	.word	0x08005d2c
 8000dfc:	08005d34 	.word	0x08005d34
			}
			break;
			*/

		case 30://POSITION MODE
			TxHeader.StdId = 0x60A;
 8000e00:	4bae      	ldr	r3, [pc, #696]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000e02:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e06:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000e08:	4bac      	ldr	r3, [pc, #688]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8000e0e:	4bac      	ldr	r3, [pc, #688]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e10:	2222      	movs	r2, #34	; 0x22
 8000e12:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x60;
 8000e14:	4baa      	ldr	r3, [pc, #680]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e16:	2260      	movs	r2, #96	; 0x60
 8000e18:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000e1a:	4ba9      	ldr	r3, [pc, #676]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e1c:	2260      	movs	r2, #96	; 0x60
 8000e1e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000e20:	4ba7      	ldr	r3, [pc, #668]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x01;
 8000e26:	4ba6      	ldr	r3, [pc, #664]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000e2c:	4ba4      	ldr	r3, [pc, #656]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000e32:	4ba3      	ldr	r3, [pc, #652]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000e38:	4ba1      	ldr	r3, [pc, #644]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e3e:	4ba1      	ldr	r3, [pc, #644]	; (80010c4 <HAL_UART_RxCpltCallback+0x61c>)
 8000e40:	4a9f      	ldr	r2, [pc, #636]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e42:	499e      	ldr	r1, [pc, #632]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000e44:	48a0      	ldr	r0, [pc, #640]	; (80010c8 <HAL_UART_RxCpltCallback+0x620>)
 8000e46:	f000 fecf 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HAL_UART_RxCpltCallback+0x3ae>
				Error_Handler();
 8000e50:	f000 fa6c 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 40;
				HAL_UART_Transmit(&huart3, "C030", 4, 100);
			}
			break;
 8000e54:	e22e      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 40;
 8000e56:	4b9d      	ldr	r3, [pc, #628]	; (80010cc <HAL_UART_RxCpltCallback+0x624>)
 8000e58:	2228      	movs	r2, #40	; 0x28
 8000e5a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	2204      	movs	r2, #4
 8000e60:	499b      	ldr	r1, [pc, #620]	; (80010d0 <HAL_UART_RxCpltCallback+0x628>)
 8000e62:	489c      	ldr	r0, [pc, #624]	; (80010d4 <HAL_UART_RxCpltCallback+0x62c>)
 8000e64:	f003 f96c 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000e68:	e224      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>

		case 40:// POSITION 120
			TxHeader.StdId = 0x60A;
 8000e6a:	4b94      	ldr	r3, [pc, #592]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000e6c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e70:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000e72:	4b92      	ldr	r3, [pc, #584]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000e78:	4b91      	ldr	r3, [pc, #580]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e7a:	2222      	movs	r2, #34	; 0x22
 8000e7c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000e7e:	4b90      	ldr	r3, [pc, #576]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e80:	227a      	movs	r2, #122	; 0x7a
 8000e82:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000e84:	4b8e      	ldr	r3, [pc, #568]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e86:	2260      	movs	r2, #96	; 0x60
 8000e88:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000e8a:	4b8d      	ldr	r3, [pc, #564]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0xC0;
 8000e90:	4b8b      	ldr	r3, [pc, #556]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e92:	22c0      	movs	r2, #192	; 0xc0
 8000e94:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0xD4;
 8000e96:	4b8a      	ldr	r3, [pc, #552]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e98:	22d4      	movs	r2, #212	; 0xd4
 8000e9a:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x01;
 8000e9c:	4b88      	ldr	r3, [pc, #544]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000ea2:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ea8:	4b86      	ldr	r3, [pc, #536]	; (80010c4 <HAL_UART_RxCpltCallback+0x61c>)
 8000eaa:	4a85      	ldr	r2, [pc, #532]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000eac:	4983      	ldr	r1, [pc, #524]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000eae:	4886      	ldr	r0, [pc, #536]	; (80010c8 <HAL_UART_RxCpltCallback+0x620>)
 8000eb0:	f000 fe9a 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <HAL_UART_RxCpltCallback+0x418>
				Error_Handler();
 8000eba:	f000 fa37 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P120", 4, 100);
			}
			break;
 8000ebe:	e1f9      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8000ec0:	4b82      	ldr	r3, [pc, #520]	; (80010cc <HAL_UART_RxCpltCallback+0x624>)
 8000ec2:	2232      	movs	r2, #50	; 0x32
 8000ec4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P120", 4, 100);
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	2204      	movs	r2, #4
 8000eca:	4983      	ldr	r1, [pc, #524]	; (80010d8 <HAL_UART_RxCpltCallback+0x630>)
 8000ecc:	4881      	ldr	r0, [pc, #516]	; (80010d4 <HAL_UART_RxCpltCallback+0x62c>)
 8000ece:	f003 f937 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000ed2:	e1ef      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 41:// POSITION 90
			TxHeader.StdId = 0x60A;
 8000ed4:	4b79      	ldr	r3, [pc, #484]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000ed6:	f240 620a 	movw	r2, #1546	; 0x60a
 8000eda:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000edc:	4b77      	ldr	r3, [pc, #476]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000ee2:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000ee4:	2222      	movs	r2, #34	; 0x22
 8000ee6:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000ee8:	4b75      	ldr	r3, [pc, #468]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000eea:	227a      	movs	r2, #122	; 0x7a
 8000eec:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000eee:	4b74      	ldr	r3, [pc, #464]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000ef0:	2260      	movs	r2, #96	; 0x60
 8000ef2:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000ef4:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x90;
 8000efa:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000efc:	2290      	movs	r2, #144	; 0x90
 8000efe:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x5F;
 8000f00:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f02:	225f      	movs	r2, #95	; 0x5f
 8000f04:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x01;
 8000f06:	4b6e      	ldr	r3, [pc, #440]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000f0c:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f12:	4b6c      	ldr	r3, [pc, #432]	; (80010c4 <HAL_UART_RxCpltCallback+0x61c>)
 8000f14:	4a6a      	ldr	r2, [pc, #424]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f16:	4969      	ldr	r1, [pc, #420]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000f18:	486b      	ldr	r0, [pc, #428]	; (80010c8 <HAL_UART_RxCpltCallback+0x620>)
 8000f1a:	f000 fe65 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <HAL_UART_RxCpltCallback+0x482>
				Error_Handler();
 8000f24:	f000 fa02 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P090", 4, 100);
			}
			break;
 8000f28:	e1c4      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8000f2a:	4b68      	ldr	r3, [pc, #416]	; (80010cc <HAL_UART_RxCpltCallback+0x624>)
 8000f2c:	2232      	movs	r2, #50	; 0x32
 8000f2e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P090", 4, 100);
 8000f30:	2364      	movs	r3, #100	; 0x64
 8000f32:	2204      	movs	r2, #4
 8000f34:	4969      	ldr	r1, [pc, #420]	; (80010dc <HAL_UART_RxCpltCallback+0x634>)
 8000f36:	4867      	ldr	r0, [pc, #412]	; (80010d4 <HAL_UART_RxCpltCallback+0x62c>)
 8000f38:	f003 f902 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000f3c:	e1ba      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 42:// POSITION 0
			TxHeader.StdId = 0x60A;
 8000f3e:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000f40:	f240 620a 	movw	r2, #1546	; 0x60a
 8000f44:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000f46:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000f48:	2208      	movs	r2, #8
 8000f4a:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000f4c:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f4e:	2222      	movs	r2, #34	; 0x22
 8000f50:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f54:	227a      	movs	r2, #122	; 0x7a
 8000f56:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000f58:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f5a:	2260      	movs	r2, #96	; 0x60
 8000f5c:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000f5e:	4b58      	ldr	r3, [pc, #352]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 8000f64:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8000f6a:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8000f70:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000f76:	4b52      	ldr	r3, [pc, #328]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f7c:	4b51      	ldr	r3, [pc, #324]	; (80010c4 <HAL_UART_RxCpltCallback+0x61c>)
 8000f7e:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000f80:	494e      	ldr	r1, [pc, #312]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000f82:	4851      	ldr	r0, [pc, #324]	; (80010c8 <HAL_UART_RxCpltCallback+0x620>)
 8000f84:	f000 fe30 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_UART_RxCpltCallback+0x4ec>
				Error_Handler();
 8000f8e:	f000 f9cd 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P000", 4, 100);
			}
			break;
 8000f92:	e18f      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_UART_RxCpltCallback+0x624>)
 8000f96:	2232      	movs	r2, #50	; 0x32
 8000f98:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	4950      	ldr	r1, [pc, #320]	; (80010e0 <HAL_UART_RxCpltCallback+0x638>)
 8000fa0:	484c      	ldr	r0, [pc, #304]	; (80010d4 <HAL_UART_RxCpltCallback+0x62c>)
 8000fa2:	f003 f8cd 	bl	8004140 <HAL_UART_Transmit>
			break;
 8000fa6:	e185      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 43:// POSITION 180
			TxHeader.StdId = 0x60A;
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000faa:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fae:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8000fb0:	4b42      	ldr	r3, [pc, #264]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8000fb6:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fb8:	2222      	movs	r2, #34	; 0x22
 8000fba:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fbe:	227a      	movs	r2, #122	; 0x7a
 8000fc0:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fc4:	2260      	movs	r2, #96	; 0x60
 8000fc6:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x20;
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0xBF;
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fd6:	22bf      	movs	r2, #191	; 0xbf
 8000fd8:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x02;
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <HAL_UART_RxCpltCallback+0x61c>)
 8000fe8:	4a35      	ldr	r2, [pc, #212]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8000fea:	4934      	ldr	r1, [pc, #208]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8000fec:	4836      	ldr	r0, [pc, #216]	; (80010c8 <HAL_UART_RxCpltCallback+0x620>)
 8000fee:	f000 fdfb 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <HAL_UART_RxCpltCallback+0x556>
				Error_Handler();
 8000ff8:	f000 f998 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P180", 4, 100);
			}
			break;
 8000ffc:	e15a      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <HAL_UART_RxCpltCallback+0x624>)
 8001000:	2232      	movs	r2, #50	; 0x32
 8001002:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P180", 4, 100);
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	2204      	movs	r2, #4
 8001008:	4936      	ldr	r1, [pc, #216]	; (80010e4 <HAL_UART_RxCpltCallback+0x63c>)
 800100a:	4832      	ldr	r0, [pc, #200]	; (80010d4 <HAL_UART_RxCpltCallback+0x62c>)
 800100c:	f003 f898 	bl	8004140 <HAL_UART_Transmit>
			break;
 8001010:	e150      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 44:// POSITION 45
			TxHeader.StdId = 0x60A;
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8001014:	f240 620a 	movw	r2, #1546	; 0x60a
 8001018:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 800101c:	2208      	movs	r2, #8
 800101e:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001022:	2222      	movs	r2, #34	; 0x22
 8001024:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001028:	227a      	movs	r2, #122	; 0x7a
 800102a:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 800102e:	2260      	movs	r2, #96	; 0x60
 8001030:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001034:	2200      	movs	r2, #0
 8001036:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0xC8;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 800103a:	22c8      	movs	r2, #200	; 0xc8
 800103c:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0xAF;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001040:	22af      	movs	r2, #175	; 0xaf
 8001042:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001046:	2200      	movs	r2, #0
 8001048:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 800104c:	2200      	movs	r2, #0
 800104e:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_UART_RxCpltCallback+0x61c>)
 8001052:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001054:	4919      	ldr	r1, [pc, #100]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8001056:	481c      	ldr	r0, [pc, #112]	; (80010c8 <HAL_UART_RxCpltCallback+0x620>)
 8001058:	f000 fdc6 	bl	8001be8 <HAL_CAN_AddTxMessage>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <HAL_UART_RxCpltCallback+0x5c0>
				Error_Handler();
 8001062:	f000 f963 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "P045", 4, 100);
			}
			break;
 8001066:	e125      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 50;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_UART_RxCpltCallback+0x624>)
 800106a:	2232      	movs	r2, #50	; 0x32
 800106c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "P045", 4, 100);
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	2204      	movs	r2, #4
 8001072:	491d      	ldr	r1, [pc, #116]	; (80010e8 <HAL_UART_RxCpltCallback+0x640>)
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <HAL_UART_RxCpltCallback+0x62c>)
 8001076:	f003 f863 	bl	8004140 <HAL_UART_Transmit>
			break;
 800107a:	e11b      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 45:// POSITION XXX
			TxHeader.StdId = 0x60A;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 800107e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001082:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 8001086:	2208      	movs	r2, #8
 8001088:	611a      	str	r2, [r3, #16]

			TxData[0] = 0x22;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 800108c:	2222      	movs	r2, #34	; 0x22
 800108e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x7A;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001092:	227a      	movs	r2, #122	; 0x7a
 8001094:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 8001098:	2260      	movs	r2, #96	; 0x60
 800109a:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 800109e:	2200      	movs	r2, #0
 80010a0:	70da      	strb	r2, [r3, #3]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_UART_RxCpltCallback+0x61c>)
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_UART_RxCpltCallback+0x618>)
 80010a6:	4905      	ldr	r1, [pc, #20]	; (80010bc <HAL_UART_RxCpltCallback+0x614>)
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <HAL_UART_RxCpltCallback+0x620>)
 80010aa:	f000 fd9d 	bl	8001be8 <HAL_CAN_AddTxMessage>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01b      	beq.n	80010ec <HAL_UART_RxCpltCallback+0x644>
				Error_Handler();
 80010b4:	f000 f93a 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 50;
				HAL_UART_Transmit(&huart3, "PXXX", 4, 100);
			}
			break;
 80010b8:	e0fc      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
 80010ba:	bf00      	nop
 80010bc:	20000090 	.word	0x20000090
 80010c0:	20000054 	.word	0x20000054
 80010c4:	2000005c 	.word	0x2000005c
 80010c8:	2000002c 	.word	0x2000002c
 80010cc:	20000000 	.word	0x20000000
 80010d0:	08005d3c 	.word	0x08005d3c
 80010d4:	200000c8 	.word	0x200000c8
 80010d8:	08005d44 	.word	0x08005d44
 80010dc:	08005d4c 	.word	0x08005d4c
 80010e0:	08005d54 	.word	0x08005d54
 80010e4:	08005d5c 	.word	0x08005d5c
 80010e8:	08005d64 	.word	0x08005d64
				iMachineStatus = 50;
 80010ec:	4b76      	ldr	r3, [pc, #472]	; (80012c8 <HAL_UART_RxCpltCallback+0x820>)
 80010ee:	2232      	movs	r2, #50	; 0x32
 80010f0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "PXXX", 4, 100);
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	2204      	movs	r2, #4
 80010f6:	4975      	ldr	r1, [pc, #468]	; (80012cc <HAL_UART_RxCpltCallback+0x824>)
 80010f8:	4875      	ldr	r0, [pc, #468]	; (80012d0 <HAL_UART_RxCpltCallback+0x828>)
 80010fa:	f003 f821 	bl	8004140 <HAL_UART_Transmit>
			break;
 80010fe:	e0d9      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 50://START SUPPLY
			TxHeader.StdId = 0x60A;
 8001100:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 8001102:	f240 620a 	movw	r2, #1546	; 0x60a
 8001106:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001108:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 800110a:	2208      	movs	r2, #8
 800110c:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 800110e:	4b72      	ldr	r3, [pc, #456]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001110:	2222      	movs	r2, #34	; 0x22
 8001112:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 800111a:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800111c:	2260      	movs	r2, #96	; 0x60
 800111e:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001120:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001122:	2200      	movs	r2, #0
 8001124:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x1F;
 8001126:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001128:	221f      	movs	r2, #31
 800112a:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 800112c:	4b6a      	ldr	r3, [pc, #424]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800112e:	2200      	movs	r2, #0
 8001130:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001132:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001134:	2200      	movs	r2, #0
 8001136:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001138:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800113a:	2200      	movs	r2, #0
 800113c:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800113e:	4b67      	ldr	r3, [pc, #412]	; (80012dc <HAL_UART_RxCpltCallback+0x834>)
 8001140:	4a65      	ldr	r2, [pc, #404]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001142:	4964      	ldr	r1, [pc, #400]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 8001144:	4866      	ldr	r0, [pc, #408]	; (80012e0 <HAL_UART_RxCpltCallback+0x838>)
 8001146:	f000 fd4f 	bl	8001be8 <HAL_CAN_AddTxMessage>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_UART_RxCpltCallback+0x6ae>
				Error_Handler();
 8001150:	f000 f8ec 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 60;
				HAL_UART_Transmit(&huart3, "C050", 4, 100);
			}
			break;
 8001154:	e0ae      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 60;
 8001156:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <HAL_UART_RxCpltCallback+0x820>)
 8001158:	223c      	movs	r2, #60	; 0x3c
 800115a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C050", 4, 100);
 800115c:	2364      	movs	r3, #100	; 0x64
 800115e:	2204      	movs	r2, #4
 8001160:	4960      	ldr	r1, [pc, #384]	; (80012e4 <HAL_UART_RxCpltCallback+0x83c>)
 8001162:	485b      	ldr	r0, [pc, #364]	; (80012d0 <HAL_UART_RxCpltCallback+0x828>)
 8001164:	f002 ffec 	bl	8004140 <HAL_UART_Transmit>
			break;
 8001168:	e0a4      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>

		case 60://STOP SUPPLY
			TxHeader.StdId = 0x60A;
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 800116c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001170:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001172:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 8001174:	2208      	movs	r2, #8
 8001176:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001178:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800117a:	2222      	movs	r2, #34	; 0x22
 800117c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 800117e:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001180:	2240      	movs	r2, #64	; 0x40
 8001182:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001186:	2260      	movs	r2, #96	; 0x60
 8001188:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800118a:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800118c:	2200      	movs	r2, #0
 800118e:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 8001190:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001192:	220f      	movs	r2, #15
 8001194:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001196:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001198:	2200      	movs	r2, #0
 800119a:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800119e:	2200      	movs	r2, #0
 80011a0:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80011a8:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <HAL_UART_RxCpltCallback+0x834>)
 80011aa:	4a4b      	ldr	r2, [pc, #300]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 80011ac:	4949      	ldr	r1, [pc, #292]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 80011ae:	484c      	ldr	r0, [pc, #304]	; (80012e0 <HAL_UART_RxCpltCallback+0x838>)
 80011b0:	f000 fd1a 	bl	8001be8 <HAL_CAN_AddTxMessage>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_UART_RxCpltCallback+0x718>
				Error_Handler();
 80011ba:	f000 f8b7 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 70;
				HAL_UART_Transmit(&huart3, "C060", 4, 100);
			}
			break;
 80011be:	e079      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 70;
 80011c0:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <HAL_UART_RxCpltCallback+0x820>)
 80011c2:	2246      	movs	r2, #70	; 0x46
 80011c4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C060", 4, 100);
 80011c6:	2364      	movs	r3, #100	; 0x64
 80011c8:	2204      	movs	r2, #4
 80011ca:	4947      	ldr	r1, [pc, #284]	; (80012e8 <HAL_UART_RxCpltCallback+0x840>)
 80011cc:	4840      	ldr	r0, [pc, #256]	; (80012d0 <HAL_UART_RxCpltCallback+0x828>)
 80011ce:	f002 ffb7 	bl	8004140 <HAL_UART_Transmit>
			break;
 80011d2:	e06f      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 70://POSTION CHECK
			TxHeader.StdId = 0x60A;
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 80011d6:	f240 620a 	movw	r2, #1546	; 0x60a
 80011da:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 80011de:	2208      	movs	r2, #8
 80011e0:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x40;
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x64;
 80011e8:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 80011ea:	2264      	movs	r2, #100	; 0x64
 80011ec:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 80011ee:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 80011f0:	2260      	movs	r2, #96	; 0x60
 80011f2:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 80011f4:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x00;
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001202:	2200      	movs	r2, #0
 8001204:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001208:	2200      	movs	r2, #0
 800120a:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800120e:	2200      	movs	r2, #0
 8001210:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_UART_RxCpltCallback+0x834>)
 8001214:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001216:	492f      	ldr	r1, [pc, #188]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 8001218:	4831      	ldr	r0, [pc, #196]	; (80012e0 <HAL_UART_RxCpltCallback+0x838>)
 800121a:	f000 fce5 	bl	8001be8 <HAL_CAN_AddTxMessage>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_UART_RxCpltCallback+0x782>
				Error_Handler();
 8001224:	f000 f882 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 80;
				HAL_UART_Transmit(&huart3, "C070", 4, 100);
			}
			break;
 8001228:	e044      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 80;
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_UART_RxCpltCallback+0x820>)
 800122c:	2250      	movs	r2, #80	; 0x50
 800122e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	2204      	movs	r2, #4
 8001234:	492d      	ldr	r1, [pc, #180]	; (80012ec <HAL_UART_RxCpltCallback+0x844>)
 8001236:	4826      	ldr	r0, [pc, #152]	; (80012d0 <HAL_UART_RxCpltCallback+0x828>)
 8001238:	f002 ff82 	bl	8004140 <HAL_UART_Transmit>
			break;
 800123c:	e03a      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		case 200://FAULT RESET
			TxHeader.StdId = 0x60A;
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 8001240:	f240 620a 	movw	r2, #1546	; 0x60a
 8001244:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 8001248:	2208      	movs	r2, #8
 800124a:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800124e:	2222      	movs	r2, #34	; 0x22
 8001250:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800125a:	2260      	movs	r2, #96	; 0x60
 800125c:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001260:	2200      	movs	r2, #0
 8001262:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x80;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 800126c:	2200      	movs	r2, #0
 800126e:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001272:	2200      	movs	r2, #0
 8001274:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001278:	2200      	movs	r2, #0
 800127a:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_UART_RxCpltCallback+0x834>)
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <HAL_UART_RxCpltCallback+0x830>)
 8001280:	4914      	ldr	r1, [pc, #80]	; (80012d4 <HAL_UART_RxCpltCallback+0x82c>)
 8001282:	4817      	ldr	r0, [pc, #92]	; (80012e0 <HAL_UART_RxCpltCallback+0x838>)
 8001284:	f000 fcb0 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <HAL_UART_RxCpltCallback+0x7ec>
				Error_Handler();
 800128e:	f000 f84d 	bl	800132c <Error_Handler>
			}
			else{
				iMachineStatus = 10;
				HAL_UART_Transmit(&huart3, "C200", 4, 100);
			}
			break;
 8001292:	e00f      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
				iMachineStatus = 10;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_UART_RxCpltCallback+0x820>)
 8001296:	220a      	movs	r2, #10
 8001298:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, "C200", 4, 100);
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	2204      	movs	r2, #4
 800129e:	4914      	ldr	r1, [pc, #80]	; (80012f0 <HAL_UART_RxCpltCallback+0x848>)
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_UART_RxCpltCallback+0x828>)
 80012a2:	f002 ff4d 	bl	8004140 <HAL_UART_Transmit>
			break;
 80012a6:	e005      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x80c>
		}

	}
	else{
		HAL_UART_Transmit(&huart3, ErrorMessage, strlen(ErrorMessage), 100);
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	220c      	movs	r2, #12
 80012ac:	4911      	ldr	r1, [pc, #68]	; (80012f4 <HAL_UART_RxCpltCallback+0x84c>)
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <HAL_UART_RxCpltCallback+0x828>)
 80012b0:	f002 ff46 	bl	8004140 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, UserMessage, 4);
 80012b4:	2204      	movs	r2, #4
 80012b6:	4910      	ldr	r1, [pc, #64]	; (80012f8 <HAL_UART_RxCpltCallback+0x850>)
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <HAL_UART_RxCpltCallback+0x828>)
 80012ba:	f002 ffd4 	bl	8004266 <HAL_UART_Receive_IT>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000
 80012cc:	08005d6c 	.word	0x08005d6c
 80012d0:	200000c8 	.word	0x200000c8
 80012d4:	20000090 	.word	0x20000090
 80012d8:	20000054 	.word	0x20000054
 80012dc:	2000005c 	.word	0x2000005c
 80012e0:	2000002c 	.word	0x2000002c
 80012e4:	08005d74 	.word	0x08005d74
 80012e8:	08005d7c 	.word	0x08005d7c
 80012ec:	08005d84 	.word	0x08005d84
 80012f0:	08005d8c 	.word	0x08005d8c
 80012f4:	08005d94 	.word	0x08005d94
 80012f8:	200000c4 	.word	0x200000c4

080012fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001308:	2100      	movs	r1, #0
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fd47 	bl	8001d9e <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001310:	2101      	movs	r1, #1
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001314:	f001 fc13 	bl	8002b3e <HAL_GPIO_TogglePin>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000060 	.word	0x20000060
 8001324:	200000a8 	.word	0x200000a8
 8001328:	40020400 	.word	0x40020400

0800132c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013cc:	f000 f99c 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <CAN1_RX0_IRQHandler+0x10>)
 80013da:	f000 fe18 	bl	800200e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000002c 	.word	0x2000002c

080013e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <USART3_IRQHandler+0x10>)
 80013ee:	f002 ff89 	bl	8004304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200000c8 	.word	0x200000c8

080013fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001400:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001404:	f001 fbb6 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <MX_USART3_UART_Init+0x5c>)
 8001438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800143c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART3_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART3_UART_Init+0x58>)
 8001474:	f002 fe16 	bl	80040a4 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800147e:	f7ff ff55 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000c8 	.word	0x200000c8
 800148c:	40004800 	.word	0x40004800

08001490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_UART_MspInit+0x8c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d130      	bne.n	8001514 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_UART_MspInit+0x90>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <HAL_UART_MspInit+0x90>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_UART_MspInit+0x90>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_UART_MspInit+0x90>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_UART_MspInit+0x90>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_UART_MspInit+0x90>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f4:	2307      	movs	r3, #7
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <HAL_UART_MspInit+0x94>)
 8001500:	f001 f958 	bl	80027b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2027      	movs	r0, #39	; 0x27
 800150a:	f001 f88a 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800150e:	2027      	movs	r0, #39	; 0x27
 8001510:	f001 f8a3 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40004800 	.word	0x40004800
 8001520:	40023800 	.word	0x40023800
 8001524:	40020c00 	.word	0x40020c00

08001528 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001532:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	2206      	movs	r2, #6
 8001538:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153c:	2202      	movs	r2, #2
 800153e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2202      	movs	r2, #2
 800154a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2201      	movs	r2, #1
 8001550:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	2201      	movs	r2, #1
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156c:	f001 fb1a 	bl	8002ba4 <HAL_PCD_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001576:	f7ff fed9 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000014c 	.word	0x2000014c

08001584 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a4:	d141      	bne.n	800162a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d0:	230a      	movs	r3, #10
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4817      	ldr	r0, [pc, #92]	; (8001638 <HAL_PCD_MspInit+0xb4>)
 80015dc:	f001 f8ea 	bl	80027b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <HAL_PCD_MspInit+0xb4>)
 80015f6:	f001 f8dd 	bl	80027b4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6353      	str	r3, [r2, #52]	; 0x34
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_PCD_MspInit+0xb0>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001666:	f7ff fed1 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f004 fb1f 	bl	8005cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f911 	bl	8000894 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001680:	08005dcc 	.word	0x08005dcc
  ldr r2, =_sbss
 8001684:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001688:	20000554 	.word	0x20000554

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>

0800168e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001692:	2003      	movs	r0, #3
 8001694:	f000 ffba 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001698:	2000      	movs	r0, #0
 800169a:	f000 f805 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169e:	f7ff fe4b 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 ffd5 	bl	8002676 <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 ff9d 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000004 	.word	0x20000004
 8001700:	2000000c 	.word	0x2000000c
 8001704:	20000008 	.word	0x20000008

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000000c 	.word	0x2000000c
 800172c:	20000550 	.word	0x20000550

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000550 	.word	0x20000550

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c

08001790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0ed      	b.n	800197e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe fef6 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff ffb4 	bl	8001730 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ca:	e012      	b.n	80017f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017cc:	f7ff ffb0 	bl	8001730 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	d90b      	bls.n	80017f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2205      	movs	r2, #5
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0c5      	b.n	800197e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0e5      	beq.n	80017cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0202 	bic.w	r2, r2, #2
 800180e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001810:	f7ff ff8e 	bl	8001730 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001816:	e012      	b.n	800183e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001818:	f7ff ff8a 	bl	8001730 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b0a      	cmp	r3, #10
 8001824:	d90b      	bls.n	800183e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2205      	movs	r2, #5
 8001836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e09f      	b.n	800197e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e5      	bne.n	8001818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7e1b      	ldrb	r3, [r3, #24]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d108      	bne.n	8001866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e007      	b.n	8001876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7e5b      	ldrb	r3, [r3, #25]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e007      	b.n	80018a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800189e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e9b      	ldrb	r3, [r3, #26]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0220 	orr.w	r2, r2, #32
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e007      	b.n	80018ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0220 	bic.w	r2, r2, #32
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7edb      	ldrb	r3, [r3, #27]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d108      	bne.n	80018e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0210 	bic.w	r2, r2, #16
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e007      	b.n	80018f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0210 	orr.w	r2, r2, #16
 80018f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7f1b      	ldrb	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0208 	orr.w	r2, r2, #8
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e007      	b.n	800191e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0208 	bic.w	r2, r2, #8
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7f5b      	ldrb	r3, [r3, #29]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0204 	orr.w	r2, r2, #4
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e007      	b.n	8001948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0204 	bic.w	r2, r2, #4
 8001946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	ea42 0103 	orr.w	r1, r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019a0:	7cfb      	ldrb	r3, [r7, #19]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d003      	beq.n	80019ae <HAL_CAN_ConfigFilter+0x26>
 80019a6:	7cfb      	ldrb	r3, [r7, #19]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	f040 80c7 	bne.w	8001b3c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a69      	ldr	r2, [pc, #420]	; (8001b58 <HAL_CAN_ConfigFilter+0x1d0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d001      	beq.n	80019bc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_CAN_ConfigFilter+0x1d4>)
 80019ba:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	4a63      	ldr	r2, [pc, #396]	; (8001b5c <HAL_CAN_ConfigFilter+0x1d4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d111      	bne.n	80019f8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	2201      	movs	r2, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d123      	bne.n	8001a6a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3248      	adds	r2, #72	; 0x48
 8001a4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a60:	6979      	ldr	r1, [r7, #20]
 8001a62:	3348      	adds	r3, #72	; 0x48
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d122      	bne.n	8001ab8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3248      	adds	r2, #72	; 0x48
 8001a98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aae:	6979      	ldr	r1, [r7, #20]
 8001ab0:	3348      	adds	r3, #72	; 0x48
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ad2:	e007      	b.n	8001ae4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001afe:	e007      	b.n	8001b10 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b2e:	f023 0201 	bic.w	r2, r3, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e006      	b.n	8001b4a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40003400 	.word	0x40003400
 8001b5c:	40006400 	.word	0x40006400

08001b60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d12e      	bne.n	8001bd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff fdd0 	bl	8001730 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b92:	e012      	b.n	8001bba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b94:	f7ff fdcc 	bl	8001730 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b0a      	cmp	r3, #10
 8001ba0:	d90b      	bls.n	8001bba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e012      	b.n	8001be0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e5      	bne.n	8001b94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e006      	b.n	8001be0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d003      	beq.n	8001c14 <HAL_CAN_AddTxMessage+0x2c>
 8001c0c:	7ffb      	ldrb	r3, [r7, #31]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 80b8 	bne.w	8001d84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80a0 	beq.w	8001d74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	0e1b      	lsrs	r3, r3, #24
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e09e      	b.n	8001d92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c54:	2201      	movs	r2, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10d      	bne.n	8001c82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	6809      	ldr	r1, [r1, #0]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3318      	adds	r3, #24
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	440b      	add	r3, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e00f      	b.n	8001ca2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	440b      	add	r3, r1
 8001ca0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3318      	adds	r3, #24
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	7d1b      	ldrb	r3, [r3, #20]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d111      	bne.n	8001ce2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3318      	adds	r3, #24
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	6811      	ldr	r1, [r2, #0]
 8001cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3318      	adds	r3, #24
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	440b      	add	r3, r1
 8001cde:	3304      	adds	r3, #4
 8001ce0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3307      	adds	r3, #7
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	061a      	lsls	r2, r3, #24
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3306      	adds	r3, #6
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3305      	adds	r3, #5
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	3204      	adds	r2, #4
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	4610      	mov	r0, r2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	ea43 0200 	orr.w	r2, r3, r0
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	440b      	add	r3, r1
 8001d14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3303      	adds	r3, #3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3302      	adds	r3, #2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	4313      	orrs	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	6811      	ldr	r1, [r2, #0]
 8001d40:	ea43 0200 	orr.w	r2, r3, r0
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3318      	adds	r3, #24
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	6811      	ldr	r1, [r2, #0]
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	440b      	add	r3, r1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e00e      	b.n	8001d92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e006      	b.n	8001d92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b087      	sub	sp, #28
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d003      	beq.n	8001dc2 <HAL_CAN_GetRxMessage+0x24>
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f040 80f3 	bne.w	8001fa8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10e      	bne.n	8001de6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d8      	b.n	8001fb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	331b      	adds	r3, #27
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0204 	and.w	r2, r3, #4
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	331b      	adds	r3, #27
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0d5b      	lsrs	r3, r3, #21
 8001e32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	331b      	adds	r3, #27
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	331b      	adds	r3, #27
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	4413      	add	r3, r2
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0202 	and.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	331b      	adds	r3, #27
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	331b      	adds	r3, #27
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	331b      	adds	r3, #27
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0a1a      	lsrs	r2, r3, #8
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0c1a      	lsrs	r2, r3, #16
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e1a      	lsrs	r2, r3, #24
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	3303      	adds	r3, #3
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0a1a      	lsrs	r2, r3, #8
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3305      	adds	r3, #5
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0c1a      	lsrs	r2, r3, #16
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3306      	adds	r3, #6
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e1a      	lsrs	r2, r3, #24
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3307      	adds	r3, #7
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	e007      	b.n	8001fa4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e006      	b.n	8001fb6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d002      	beq.n	8001fe0 <HAL_CAN_ActivateNotification+0x1e>
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d109      	bne.n	8001ff4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6959      	ldr	r1, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e006      	b.n	8002002 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d07c      	beq.n	800214e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d023      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f983 	bl	800237c <HAL_CAN_TxMailbox0CompleteCallback>
 8002076:	e016      	b.n	80020a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e00c      	b.n	80020a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	e002      	b.n	80020a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f989 	bl	80023b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d024      	beq.n	80020fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f963 	bl	8002390 <HAL_CAN_TxMailbox1CompleteCallback>
 80020ca:	e016      	b.n	80020fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	e00c      	b.n	80020fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	e002      	b.n	80020fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f969 	bl	80023cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d024      	beq.n	800214e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f943 	bl	80023a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800211e:	e016      	b.n	800214e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e00c      	b.n	800214e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e002      	b.n	800214e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f949 	bl	80023e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00c      	beq.n	8002172 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2210      	movs	r2, #16
 8002170:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2208      	movs	r2, #8
 800218c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f930 	bl	80023f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff f8a5 	bl	80012fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2210      	movs	r2, #16
 80021d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2208      	movs	r2, #8
 80021f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f912 	bl	800241c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8f9 	bl	8002408 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2210      	movs	r2, #16
 8002230:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8fc 	bl	8002430 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2208      	movs	r2, #8
 8002252:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f8f5 	bl	8002444 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d07b      	beq.n	800235c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d072      	beq.n	8002354 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d043      	beq.n	8002354 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03e      	beq.n	8002354 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022dc:	2b60      	cmp	r3, #96	; 0x60
 80022de:	d02b      	beq.n	8002338 <HAL_CAN_IRQHandler+0x32a>
 80022e0:	2b60      	cmp	r3, #96	; 0x60
 80022e2:	d82e      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022e4:	2b50      	cmp	r3, #80	; 0x50
 80022e6:	d022      	beq.n	800232e <HAL_CAN_IRQHandler+0x320>
 80022e8:	2b50      	cmp	r3, #80	; 0x50
 80022ea:	d82a      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d019      	beq.n	8002324 <HAL_CAN_IRQHandler+0x316>
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	d826      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022f4:	2b30      	cmp	r3, #48	; 0x30
 80022f6:	d010      	beq.n	800231a <HAL_CAN_IRQHandler+0x30c>
 80022f8:	2b30      	cmp	r3, #48	; 0x30
 80022fa:	d822      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d002      	beq.n	8002306 <HAL_CAN_IRQHandler+0x2f8>
 8002300:	2b20      	cmp	r3, #32
 8002302:	d005      	beq.n	8002310 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002304:	e01d      	b.n	8002342 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800230e:	e019      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f043 0310 	orr.w	r3, r3, #16
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002318:	e014      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f043 0320 	orr.w	r3, r3, #32
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002322:	e00f      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232c:	e00a      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002336:	e005      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002340:	e000      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            break;
 8002342:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002352:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2204      	movs	r2, #4
 800235a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f872 	bl	8002458 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <__NVIC_SetPriorityGrouping+0x40>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	4313      	orrs	r3, r2
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x40>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00
 80024b0:	05fa0000 	.word	0x05fa0000

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff f848 	bl	8001730 <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d008      	beq.n	80026c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e052      	b.n	8002766 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0216 	bic.w	r2, r2, #22
 80026ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d103      	bne.n	80026f0 <HAL_DMA_Abort+0x62>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0208 	bic.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002710:	e013      	b.n	800273a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002712:	f7ff f80d 	bl	8001730 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b05      	cmp	r3, #5
 800271e:	d90c      	bls.n	800273a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e015      	b.n	8002766 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e4      	bne.n	8002712 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	223f      	movs	r2, #63	; 0x3f
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d004      	beq.n	800278c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e00c      	b.n	80027a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2205      	movs	r2, #5
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e175      	b.n	8002ac0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 8164 	bne.w	8002aba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d005      	beq.n	800280a <HAL_GPIO_Init+0x56>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d130      	bne.n	800286c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b03      	cmp	r3, #3
 8002876:	d017      	beq.n	80028a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80be 	beq.w	8002aba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_GPIO_Init+0x324>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_GPIO_Init+0x324>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_GPIO_Init+0x324>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002956:	4a61      	ldr	r2, [pc, #388]	; (8002adc <HAL_GPIO_Init+0x328>)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <HAL_GPIO_Init+0x32c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d037      	beq.n	80029f2 <HAL_GPIO_Init+0x23e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_GPIO_Init+0x330>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d031      	beq.n	80029ee <HAL_GPIO_Init+0x23a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a56      	ldr	r2, [pc, #344]	; (8002ae8 <HAL_GPIO_Init+0x334>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d02b      	beq.n	80029ea <HAL_GPIO_Init+0x236>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a55      	ldr	r2, [pc, #340]	; (8002aec <HAL_GPIO_Init+0x338>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d025      	beq.n	80029e6 <HAL_GPIO_Init+0x232>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_GPIO_Init+0x33c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01f      	beq.n	80029e2 <HAL_GPIO_Init+0x22e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a53      	ldr	r2, [pc, #332]	; (8002af4 <HAL_GPIO_Init+0x340>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d019      	beq.n	80029de <HAL_GPIO_Init+0x22a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a52      	ldr	r2, [pc, #328]	; (8002af8 <HAL_GPIO_Init+0x344>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_GPIO_Init+0x226>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a51      	ldr	r2, [pc, #324]	; (8002afc <HAL_GPIO_Init+0x348>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00d      	beq.n	80029d6 <HAL_GPIO_Init+0x222>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a50      	ldr	r2, [pc, #320]	; (8002b00 <HAL_GPIO_Init+0x34c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <HAL_GPIO_Init+0x21e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_GPIO_Init+0x350>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_GPIO_Init+0x21a>
 80029ca:	2309      	movs	r3, #9
 80029cc:	e012      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029ce:	230a      	movs	r3, #10
 80029d0:	e010      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029d2:	2308      	movs	r3, #8
 80029d4:	e00e      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029d6:	2307      	movs	r3, #7
 80029d8:	e00c      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029da:	2306      	movs	r3, #6
 80029dc:	e00a      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029de:	2305      	movs	r3, #5
 80029e0:	e008      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e006      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029e6:	2303      	movs	r3, #3
 80029e8:	e004      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e002      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_GPIO_Init+0x240>
 80029f2:	2300      	movs	r3, #0
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	f002 0203 	and.w	r2, r2, #3
 80029fa:	0092      	lsls	r2, r2, #2
 80029fc:	4093      	lsls	r3, r2
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a04:	4935      	ldr	r1, [pc, #212]	; (8002adc <HAL_GPIO_Init+0x328>)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a36:	4a34      	ldr	r2, [pc, #208]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a3c:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a60:	4a29      	ldr	r2, [pc, #164]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a66:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_GPIO_Init+0x354>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3301      	adds	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b0f      	cmp	r3, #15
 8002ac4:	f67f ae86 	bls.w	80027d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020c00 	.word	0x40020c00
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40021400 	.word	0x40021400
 8002af8:	40021800 	.word	0x40021800
 8002afc:	40021c00 	.word	0x40021c00
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40022400 	.word	0x40022400
 8002b08:	40013c00 	.word	0x40013c00

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b28:	e003      	b.n	8002b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	041a      	lsls	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	619a      	str	r2, [r3, #24]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	041a      	lsls	r2, r3, #16
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	400b      	ands	r3, r1
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fe3e 	bl	8000814 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40013c00 	.word	0x40013c00

08002ba4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	b08f      	sub	sp, #60	; 0x3c
 8002ba8:	af0a      	add	r7, sp, #40	; 0x28
 8002baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e116      	b.n	8002de4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe fcd7 	bl	8001584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 fdc3 	bl	8005780 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	687e      	ldr	r6, [r7, #4]
 8002c02:	466d      	mov	r5, sp
 8002c04:	f106 0410 	add.w	r4, r6, #16
 8002c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c18:	1d33      	adds	r3, r6, #4
 8002c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1c:	6838      	ldr	r0, [r7, #0]
 8002c1e:	f002 fd57 	bl	80056d0 <USB_CoreInit>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0d7      	b.n	8002de4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fdb1 	bl	80057a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e04a      	b.n	8002cdc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	333d      	adds	r3, #61	; 0x3d
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	333c      	adds	r3, #60	; 0x3c
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	b298      	uxth	r0, r3
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3342      	adds	r3, #66	; 0x42
 8002c82:	4602      	mov	r2, r0
 8002c84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	333f      	adds	r3, #63	; 0x3f
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3344      	adds	r3, #68	; 0x44
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3348      	adds	r3, #72	; 0x48
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3350      	adds	r3, #80	; 0x50
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d3af      	bcc.n	8002c46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e044      	b.n	8002d76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	3301      	adds	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3b5      	bcc.n	8002cec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	687e      	ldr	r6, [r7, #4]
 8002d88:	466d      	mov	r5, sp
 8002d8a:	f106 0410 	add.w	r4, r6, #16
 8002d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d9e:	1d33      	adds	r3, r6, #4
 8002da0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	f002 fd4a 	bl	800583c <USB_DevInit>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e014      	b.n	8002de4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d102      	bne.n	8002dd8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f80a 	bl	8002dec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 ff04 	bl	8005bea <USB_DevDisconnect>

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	10000003 	.word	0x10000003

08002e34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40007000 	.word	0x40007000

08002e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <HAL_PWREx_EnableOverDrive+0x98>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <HAL_PWREx_EnableOverDrive+0x98>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_PWREx_EnableOverDrive+0x98>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e82:	f7fe fc55 	bl	8001730 <HAL_GetTick>
 8002e86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e88:	e009      	b.n	8002e9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e8a:	f7fe fc51 	bl	8001730 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e98:	d901      	bls.n	8002e9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e022      	b.n	8002ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb8:	f7fe fc3a 	bl	8001730 <HAL_GetTick>
 8002ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ebe:	e009      	b.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec0:	f7fe fc36 	bl	8001730 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ece:	d901      	bls.n	8002ed4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e007      	b.n	8002ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee0:	d1ee      	bne.n	8002ec0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000

08002ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e29b      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8087 	beq.w	8003026 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f18:	4b96      	ldr	r3, [pc, #600]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d00c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f24:	4b93      	ldr	r3, [pc, #588]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d112      	bne.n	8002f56 <HAL_RCC_OscConfig+0x62>
 8002f30:	4b90      	ldr	r3, [pc, #576]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3c:	d10b      	bne.n	8002f56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3e:	4b8d      	ldr	r3, [pc, #564]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06c      	beq.n	8003024 <HAL_RCC_OscConfig+0x130>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d168      	bne.n	8003024 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e275      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x7a>
 8002f60:	4b84      	ldr	r3, [pc, #528]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a83      	ldr	r2, [pc, #524]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	e02e      	b.n	8002fcc <HAL_RCC_OscConfig+0xd8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x9c>
 8002f76:	4b7f      	ldr	r3, [pc, #508]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a7e      	ldr	r2, [pc, #504]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b7c      	ldr	r3, [pc, #496]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7b      	ldr	r2, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e01d      	b.n	8002fcc <HAL_RCC_OscConfig+0xd8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xc0>
 8002f9a:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a72      	ldr	r2, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0xd8>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6b      	ldr	r2, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fbac 	bl	8001730 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fba8 	bl	8001730 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e229      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0xe8>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fb98 	bl	8001730 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe fb94 	bl	8001730 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e215      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x110>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d069      	beq.n	8003106 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b08      	cmp	r3, #8
 8003048:	d11c      	bne.n	8003084 <HAL_RCC_OscConfig+0x190>
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RCC_OscConfig+0x17a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e1e9      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	493d      	ldr	r1, [pc, #244]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	e040      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d023      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a38      	ldr	r2, [pc, #224]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fb4a 	bl	8001730 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe fb46 	bl	8001730 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e1c7      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4929      	ldr	r1, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
 80030d2:	e018      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a26      	ldr	r2, [pc, #152]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fb26 	bl	8001730 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fb22 	bl	8001730 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1a3      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d038      	beq.n	8003184 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d019      	beq.n	800314e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	4a15      	ldr	r2, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe fb03 	bl	8001730 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe faff 	bl	8001730 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e180      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x23a>
 800314c:	e01a      	b.n	8003184 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <HAL_RCC_OscConfig+0x280>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fe fae9 	bl	8001730 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fe fae5 	bl	8001730 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d903      	bls.n	8003178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e166      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
 8003174:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b92      	ldr	r3, [pc, #584]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ee      	bne.n	8003162 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a4 	beq.w	80032da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b8c      	ldr	r3, [pc, #560]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a88      	ldr	r2, [pc, #544]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b86      	ldr	r3, [pc, #536]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ba:	4b83      	ldr	r3, [pc, #524]	; (80033c8 <HAL_RCC_OscConfig+0x4d4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031c6:	4b80      	ldr	r3, [pc, #512]	; (80033c8 <HAL_RCC_OscConfig+0x4d4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7f      	ldr	r2, [pc, #508]	; (80033c8 <HAL_RCC_OscConfig+0x4d4>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe faad 	bl	8001730 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fe faa9 	bl	8001730 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	; 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e12a      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ec:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x4d4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x31a>
 8003200:	4b70      	ldr	r3, [pc, #448]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a6f      	ldr	r2, [pc, #444]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	e02d      	b.n	800326a <HAL_RCC_OscConfig+0x376>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x33c>
 8003216:	4b6b      	ldr	r3, [pc, #428]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a67      	ldr	r2, [pc, #412]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	e01c      	b.n	800326a <HAL_RCC_OscConfig+0x376>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x35e>
 8003238:	4b62      	ldr	r3, [pc, #392]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a61      	ldr	r2, [pc, #388]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a5e      	ldr	r2, [pc, #376]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0x376>
 8003252:	4b5c      	ldr	r3, [pc, #368]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
 800325e:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003272:	f7fe fa5d 	bl	8001730 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe fa59 	bl	8001730 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0d8      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b4c      	ldr	r3, [pc, #304]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ee      	beq.n	800327a <HAL_RCC_OscConfig+0x386>
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fe fa47 	bl	8001730 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fa43 	bl	8001730 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0c2      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a3c      	ldr	r2, [pc, #240]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80ae 	beq.w	8003440 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d06d      	beq.n	80033cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d14b      	bne.n	8003390 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fa14 	bl	8001730 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe fa10 	bl	8001730 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e091      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	3b01      	subs	r3, #1
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	491b      	ldr	r1, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe f9e2 	bl	8001730 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe f9de 	bl	8001730 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e05f      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x47c>
 800338e:	e057      	b.n	8003440 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe f9c8 	bl	8001730 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe f9c4 	bl	8001730 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e045      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4b0>
 80033c2:	e03d      	b.n	8003440 <HAL_RCC_OscConfig+0x54c>
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <HAL_RCC_OscConfig+0x558>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d030      	beq.n	800343c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d129      	bne.n	800343c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d122      	bne.n	800343c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033fc:	4013      	ands	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003402:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003404:	4293      	cmp	r3, r2
 8003406:	d119      	bne.n	800343c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d10f      	bne.n	800343c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d107      	bne.n	800343c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0d0      	b.n	800360a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 020f 	bic.w	r2, r3, #15
 800347e:	4965      	ldr	r1, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d040      	beq.n	8003574 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e073      	b.n	800360a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06b      	b.n	800360a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4936      	ldr	r1, [pc, #216]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fe f8f4 	bl	8001730 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe f8f0 	bl	8001730 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e053      	b.n	800360a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d210      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 020f 	bic.w	r2, r3, #15
 800358a:	4922      	ldr	r1, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490a      	ldr	r1, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1cc>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1d0>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1d4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe f850 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023c00 	.word	0x40023c00
 8003618:	40023800 	.word	0x40023800
 800361c:	08005da4 	.word	0x08005da4
 8003620:	20000004 	.word	0x20000004
 8003624:	20000008 	.word	0x20000008

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	2300      	movs	r3, #0
 800363a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003640:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d00d      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x40>
 800364c:	2b08      	cmp	r3, #8
 800364e:	f200 80bd 	bhi.w	80037cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x34>
 8003656:	2b04      	cmp	r3, #4
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x3a>
 800365a:	e0b7      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b61      	ldr	r3, [pc, #388]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800365e:	60bb      	str	r3, [r7, #8]
      break;
 8003660:	e0b7      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003662:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003664:	60bb      	str	r3, [r7, #8]
      break;
 8003666:	e0b4      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003668:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003670:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d04d      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367e:	4b58      	ldr	r3, [pc, #352]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	461a      	mov	r2, r3
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	ea02 0800 	and.w	r8, r2, r0
 8003696:	ea03 0901 	and.w	r9, r3, r1
 800369a:	4640      	mov	r0, r8
 800369c:	4649      	mov	r1, r9
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	014b      	lsls	r3, r1, #5
 80036a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036ac:	0142      	lsls	r2, r0, #5
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	ebb0 0008 	subs.w	r0, r0, r8
 80036b6:	eb61 0109 	sbc.w	r1, r1, r9
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	018b      	lsls	r3, r1, #6
 80036c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036c8:	0182      	lsls	r2, r0, #6
 80036ca:	1a12      	subs	r2, r2, r0
 80036cc:	eb63 0301 	sbc.w	r3, r3, r1
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	00d9      	lsls	r1, r3, #3
 80036da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036de:	00d0      	lsls	r0, r2, #3
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	eb12 0208 	adds.w	r2, r2, r8
 80036e8:	eb43 0309 	adc.w	r3, r3, r9
 80036ec:	f04f 0000 	mov.w	r0, #0
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	0259      	lsls	r1, r3, #9
 80036f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036fa:	0250      	lsls	r0, r2, #9
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	461a      	mov	r2, r3
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	f7fc fd94 	bl	8000238 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e04a      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	461a      	mov	r2, r3
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	f240 10ff 	movw	r0, #511	; 0x1ff
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	ea02 0400 	and.w	r4, r2, r0
 8003732:	ea03 0501 	and.w	r5, r3, r1
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	014b      	lsls	r3, r1, #5
 8003744:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003748:	0142      	lsls	r2, r0, #5
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	1b00      	subs	r0, r0, r4
 8003750:	eb61 0105 	sbc.w	r1, r1, r5
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	018b      	lsls	r3, r1, #6
 800375e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003762:	0182      	lsls	r2, r0, #6
 8003764:	1a12      	subs	r2, r2, r0
 8003766:	eb63 0301 	sbc.w	r3, r3, r1
 800376a:	f04f 0000 	mov.w	r0, #0
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	00d9      	lsls	r1, r3, #3
 8003774:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003778:	00d0      	lsls	r0, r2, #3
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	1912      	adds	r2, r2, r4
 8003780:	eb45 0303 	adc.w	r3, r5, r3
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	0299      	lsls	r1, r3, #10
 800378e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003792:	0290      	lsls	r0, r2, #10
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	f7fc fd48 	bl	8000238 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4613      	mov	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	60bb      	str	r3, [r7, #8]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ce:	60bb      	str	r3, [r7, #8]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	68bb      	ldr	r3, [r7, #8]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200

080037ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003808:	f7ff fff0 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	08005db4 	.word	0x08005db4

0800382c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003830:	f7ff ffdc 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0b5b      	lsrs	r3, r3, #13
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	08005db4 	.word	0x08005db4

08003854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800387c:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a68      	ldr	r2, [pc, #416]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003882:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003886:	6093      	str	r3, [r2, #8]
 8003888:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	4964      	ldr	r1, [pc, #400]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d017      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ae:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	4959      	ldr	r1, [pc, #356]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038cc:	d101      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d017      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038ea:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	494a      	ldr	r1, [pc, #296]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003908:	d101      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800390a:	2301      	movs	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 808b 	beq.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	4a39      	ldr	r2, [pc, #228]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	6413      	str	r3, [r2, #64]	; 0x40
 8003944:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395c:	f7fd fee8 	bl	8001730 <HAL_GetTick>
 8003960:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003964:	f7fd fee4 	bl	8001730 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e38f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d035      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	429a      	cmp	r2, r3
 800399e:	d02e      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a1a      	ldr	r2, [pc, #104]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039c2:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d114      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fd feac 	bl	8001730 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fd fea8 	bl	8001730 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e351      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ee      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0a:	d111      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	4901      	ldr	r1, [pc, #4]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
 8003a22:	e00b      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	0ffffcff 	.word	0x0ffffcff
 8003a30:	4bb3      	ldr	r3, [pc, #716]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4ab2      	ldr	r2, [pc, #712]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a3a:	6093      	str	r3, [r2, #8]
 8003a3c:	4bb0      	ldr	r3, [pc, #704]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	49ad      	ldr	r1, [pc, #692]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d010      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a5a:	4ba9      	ldr	r3, [pc, #676]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a60:	4aa7      	ldr	r2, [pc, #668]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a6a:	4ba5      	ldr	r3, [pc, #660]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	49a2      	ldr	r1, [pc, #648]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a88:	4b9d      	ldr	r3, [pc, #628]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a96:	499a      	ldr	r1, [pc, #616]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aaa:	4b95      	ldr	r3, [pc, #596]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab8:	4991      	ldr	r1, [pc, #580]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003acc:	4b8c      	ldr	r3, [pc, #560]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	4989      	ldr	r1, [pc, #548]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aee:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4980      	ldr	r1, [pc, #512]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b10:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	4978      	ldr	r1, [pc, #480]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b32:	4b73      	ldr	r3, [pc, #460]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f023 020c 	bic.w	r2, r3, #12
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b40:	496f      	ldr	r1, [pc, #444]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b54:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	4967      	ldr	r1, [pc, #412]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b76:	4b62      	ldr	r3, [pc, #392]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	495e      	ldr	r1, [pc, #376]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b98:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	4956      	ldr	r1, [pc, #344]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bba:	4b51      	ldr	r3, [pc, #324]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	494d      	ldr	r1, [pc, #308]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bdc:	4b48      	ldr	r3, [pc, #288]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	4945      	ldr	r1, [pc, #276]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0c:	493c      	ldr	r1, [pc, #240]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c20:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2e:	4934      	ldr	r1, [pc, #208]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d011      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c50:	492b      	ldr	r1, [pc, #172]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c60:	d101      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c62:	2301      	movs	r3, #1
 8003c64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c82:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c90:	491b      	ldr	r1, [pc, #108]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb4:	4912      	ldr	r1, [pc, #72]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd8:	4909      	ldr	r1, [pc, #36]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	e002      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	4986      	ldr	r1, [pc, #536]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d18:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d28:	497d      	ldr	r1, [pc, #500]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d006      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80d6 	beq.w	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d44:	4b76      	ldr	r3, [pc, #472]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a75      	ldr	r2, [pc, #468]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d50:	f7fd fcee 	bl	8001730 <HAL_GetTick>
 8003d54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d58:	f7fd fcea 	bl	8001730 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e195      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d021      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11d      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d8a:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d98:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9e:	0e1b      	lsrs	r3, r3, #24
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	019a      	lsls	r2, r3, #6
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	4958      	ldr	r1, [pc, #352]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d02e      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df0:	d129      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003df2:	4b4b      	ldr	r3, [pc, #300]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e00:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e06:	0f1b      	lsrs	r3, r3, #28
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	019a      	lsls	r2, r3, #6
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	071b      	lsls	r3, r3, #28
 8003e26:	493e      	ldr	r1, [pc, #248]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e2e:	4b3c      	ldr	r3, [pc, #240]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e34:	f023 021f 	bic.w	r2, r3, #31
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	4938      	ldr	r1, [pc, #224]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01d      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e52:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e58:	0e1b      	lsrs	r3, r3, #24
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e60:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e66:	0f1b      	lsrs	r3, r3, #28
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	019a      	lsls	r2, r3, #6
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	071b      	lsls	r3, r3, #28
 8003e86:	4926      	ldr	r1, [pc, #152]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	019a      	lsls	r2, r3, #6
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	071b      	lsls	r3, r3, #28
 8003eb6:	491a      	ldr	r1, [pc, #104]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ebe:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eca:	f7fd fc31 	bl	8001730 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ed2:	f7fd fc2d 	bl	8001730 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b64      	cmp	r3, #100	; 0x64
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0d8      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	f040 80ce 	bne.w	8004094 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f04:	f7fd fc14 	bl	8001730 <HAL_GetTick>
 8003f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f0c:	f7fd fc10 	bl	8001730 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d904      	bls.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e0bb      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f24:	4b5e      	ldr	r3, [pc, #376]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f30:	d0ec      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02e      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d12a      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f5a:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f68:	4b4d      	ldr	r3, [pc, #308]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	0f1b      	lsrs	r3, r3, #28
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	019a      	lsls	r2, r3, #6
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	071b      	lsls	r3, r3, #28
 8003f8e:	4944      	ldr	r1, [pc, #272]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f96:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	493d      	ldr	r1, [pc, #244]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d022      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc4:	d11d      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	0e1b      	lsrs	r3, r3, #24
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	0f1b      	lsrs	r3, r3, #28
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	019a      	lsls	r2, r3, #6
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	4929      	ldr	r1, [pc, #164]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d028      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	0e1b      	lsrs	r3, r3, #24
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	019a      	lsls	r2, r3, #6
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	4917      	ldr	r1, [pc, #92]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800404c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4911      	ldr	r1, [pc, #68]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd fb60 	bl	8001730 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004074:	f7fd fb5c 	bl	8001730 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e007      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800408e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004092:	d1ef      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e040      	b.n	8004138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd f9e2 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2224      	movs	r2, #36	; 0x24
 80040d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fc18 	bl	8004918 <UART_SetConfig>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e022      	b.n	8004138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fe6e 	bl	8004ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800410e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fef5 	bl	8004f20 <UART_CheckIdleState>
 8004136:	4603      	mov	r3, r0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004154:	2b20      	cmp	r3, #32
 8004156:	f040 8081 	bne.w	800425c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Transmit+0x26>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e079      	b.n	800425e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_UART_Transmit+0x38>
 8004174:	2302      	movs	r3, #2
 8004176:	e072      	b.n	800425e <HAL_UART_Transmit+0x11e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418e:	f7fd facf 	bl	8001730 <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d108      	bne.n	80041c0 <HAL_UART_Transmit+0x80>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e003      	b.n	80041c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80041d0:	e02c      	b.n	800422c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fee8 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e038      	b.n	800425e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	3302      	adds	r3, #2
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	e007      	b.n	800421a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1cc      	bne.n	80041d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 feb5 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e005      	b.n	800425e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b08a      	sub	sp, #40	; 0x28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004278:	2b20      	cmp	r3, #32
 800427a:	d13d      	bne.n	80042f8 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_Receive_IT+0x22>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e036      	b.n	80042fa <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_UART_Receive_IT+0x34>
 8004296:	2302      	movs	r3, #2
 8004298:	e02f      	b.n	80042fa <HAL_UART_Receive_IT+0x94>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d018      	beq.n	80042e8 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	613b      	str	r3, [r7, #16]
   return(result);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	69f9      	ldr	r1, [r7, #28]
 80042da:	6a3a      	ldr	r2, [r7, #32]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e6      	bne.n	80042b6 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 ff24 	bl	800513c <UART_Start_Receive_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	e000      	b.n	80042fa <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b0ba      	sub	sp, #232	; 0xe8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800432a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800432e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004332:	4013      	ands	r3, r2
 8004334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d115      	bne.n	800436c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00f      	beq.n	800436c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800434c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 82a4 	beq.w	80048aa <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
      }
      return;
 800436a:	e29e      	b.n	80048aa <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800436c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8117 	beq.w	80045a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004382:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004386:	4b85      	ldr	r3, [pc, #532]	; (800459c <HAL_UART_IRQHandler+0x298>)
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 810a 	beq.w	80045a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d011      	beq.n	80043c0 <HAL_UART_IRQHandler+0xbc>
 800439c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2201      	movs	r2, #1
 80043ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b6:	f043 0201 	orr.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d011      	beq.n	80043f0 <HAL_UART_IRQHandler+0xec>
 80043cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2202      	movs	r2, #2
 80043de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e6:	f043 0204 	orr.w	r2, r3, #4
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d011      	beq.n	8004420 <HAL_UART_IRQHandler+0x11c>
 80043fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2204      	movs	r2, #4
 800440e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d017      	beq.n	800445c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800442c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2208      	movs	r2, #8
 800444a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004452:	f043 0208 	orr.w	r2, r3, #8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004464:	2b00      	cmp	r3, #0
 8004466:	d012      	beq.n	800448e <HAL_UART_IRQHandler+0x18a>
 8004468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 820a 	beq.w	80048ae <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d005      	beq.n	80044e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d04f      	beq.n	8004586 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fef2 	bl	80052d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d141      	bne.n	800457e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004526:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800452a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800453e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1d9      	bne.n	80044fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	2b00      	cmp	r3, #0
 800454c:	d013      	beq.n	8004576 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <HAL_UART_IRQHandler+0x29c>)
 8004554:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe f907 	bl	800276e <HAL_DMA_Abort_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d017      	beq.n	8004596 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004570:	4610      	mov	r0, r2
 8004572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	e00f      	b.n	8004596 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9ae 	bl	80048d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	e00b      	b.n	8004596 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9aa 	bl	80048d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	e007      	b.n	8004596 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9a6 	bl	80048d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004594:	e18b      	b.n	80048ae <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004596:	bf00      	nop
    return;
 8004598:	e189      	b.n	80048ae <HAL_UART_IRQHandler+0x5aa>
 800459a:	bf00      	nop
 800459c:	04000120 	.word	0x04000120
 80045a0:	08005397 	.word	0x08005397

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f040 8144 	bne.w	8004836 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 813d 	beq.w	8004836 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8136 	beq.w	8004836 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2210      	movs	r2, #16
 80045d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	f040 80b2 	bne.w	8004746 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 815d 	beq.w	80048b2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004602:	429a      	cmp	r2, r3
 8004604:	f080 8155 	bcs.w	80048b2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800460e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461c:	f000 8085 	beq.w	800472a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800464a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800464e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004656:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1da      	bne.n	8004620 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800467a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800468e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004692:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004696:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e1      	bne.n	800466a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3308      	adds	r3, #8
 80046ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e3      	bne.n	80046a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fa:	f023 0310 	bic.w	r3, r3, #16
 80046fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800470c:	65bb      	str	r3, [r7, #88]	; 0x58
 800470e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800471a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e4      	bne.n	80046ea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	4618      	mov	r0, r3
 8004726:	f7fd ffb2 	bl	800268e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004736:	b29b      	uxth	r3, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	b29b      	uxth	r3, r3
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8d4 	bl	80048ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004744:	e0b5      	b.n	80048b2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004752:	b29b      	uxth	r3, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80a7 	beq.w	80048b6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a2 	beq.w	80048b6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004794:	647b      	str	r3, [r7, #68]	; 0x44
 8004796:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800479a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e4      	bne.n	8004772 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	623b      	str	r3, [r7, #32]
   return(result);
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3308      	adds	r3, #8
 80047c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047cc:	633a      	str	r2, [r7, #48]	; 0x30
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e3      	bne.n	80047a8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0310 	bic.w	r3, r3, #16
 8004806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	617b      	str	r3, [r7, #20]
   return(result);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e4      	bne.n	80047f2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f85c 	bl	80048ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004834:	e03f      	b.n	80048b6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <HAL_UART_IRQHandler+0x55c>
 8004842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004856:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f853 	bl	8004904 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800485e:	e02d      	b.n	80048bc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01c      	beq.n	80048ba <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
    }
    return;
 8004888:	e017      	b.n	80048ba <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d012      	beq.n	80048bc <HAL_UART_IRQHandler+0x5b8>
 8004896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00c      	beq.n	80048bc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fd8d 	bl	80053c2 <UART_EndTransmit_IT>
    return;
 80048a8:	e008      	b.n	80048bc <HAL_UART_IRQHandler+0x5b8>
      return;
 80048aa:	bf00      	nop
 80048ac:	e006      	b.n	80048bc <HAL_UART_IRQHandler+0x5b8>
    return;
 80048ae:	bf00      	nop
 80048b0:	e004      	b.n	80048bc <HAL_UART_IRQHandler+0x5b8>
      return;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <HAL_UART_IRQHandler+0x5b8>
      return;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <HAL_UART_IRQHandler+0x5b8>
    return;
 80048ba:	bf00      	nop
  }

}
 80048bc:	37e8      	adds	r7, #232	; 0xe8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop

080048c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4ba7      	ldr	r3, [pc, #668]	; (8004be0 <UART_SetConfig+0x2c8>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	6979      	ldr	r1, [r7, #20]
 800494c:	430b      	orrs	r3, r1
 800494e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a95      	ldr	r2, [pc, #596]	; (8004be4 <UART_SetConfig+0x2cc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d120      	bne.n	80049d6 <UART_SetConfig+0xbe>
 8004994:	4b94      	ldr	r3, [pc, #592]	; (8004be8 <UART_SetConfig+0x2d0>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d816      	bhi.n	80049d0 <UART_SetConfig+0xb8>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0x90>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049c5 	.word	0x080049c5
 80049b0:	080049bf 	.word	0x080049bf
 80049b4:	080049cb 	.word	0x080049cb
 80049b8:	2301      	movs	r3, #1
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e14f      	b.n	8004c5e <UART_SetConfig+0x346>
 80049be:	2302      	movs	r3, #2
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e14c      	b.n	8004c5e <UART_SetConfig+0x346>
 80049c4:	2304      	movs	r3, #4
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e149      	b.n	8004c5e <UART_SetConfig+0x346>
 80049ca:	2308      	movs	r3, #8
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e146      	b.n	8004c5e <UART_SetConfig+0x346>
 80049d0:	2310      	movs	r3, #16
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e143      	b.n	8004c5e <UART_SetConfig+0x346>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a84      	ldr	r2, [pc, #528]	; (8004bec <UART_SetConfig+0x2d4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d132      	bne.n	8004a46 <UART_SetConfig+0x12e>
 80049e0:	4b81      	ldr	r3, [pc, #516]	; (8004be8 <UART_SetConfig+0x2d0>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d828      	bhi.n	8004a40 <UART_SetConfig+0x128>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0xdc>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004a41 	.word	0x08004a41
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a35 	.word	0x08004a35
 8004a08:	08004a41 	.word	0x08004a41
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a41 	.word	0x08004a41
 8004a14:	08004a2f 	.word	0x08004a2f
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a41 	.word	0x08004a41
 8004a24:	08004a3b 	.word	0x08004a3b
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e117      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e114      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a34:	2304      	movs	r3, #4
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e111      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e10e      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a40:	2310      	movs	r3, #16
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e10b      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a69      	ldr	r2, [pc, #420]	; (8004bf0 <UART_SetConfig+0x2d8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d120      	bne.n	8004a92 <UART_SetConfig+0x17a>
 8004a50:	4b65      	ldr	r3, [pc, #404]	; (8004be8 <UART_SetConfig+0x2d0>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a5a:	2b30      	cmp	r3, #48	; 0x30
 8004a5c:	d013      	beq.n	8004a86 <UART_SetConfig+0x16e>
 8004a5e:	2b30      	cmp	r3, #48	; 0x30
 8004a60:	d814      	bhi.n	8004a8c <UART_SetConfig+0x174>
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d009      	beq.n	8004a7a <UART_SetConfig+0x162>
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d810      	bhi.n	8004a8c <UART_SetConfig+0x174>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <UART_SetConfig+0x15c>
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d006      	beq.n	8004a80 <UART_SetConfig+0x168>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x174>
 8004a74:	2300      	movs	r3, #0
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e0f1      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e0ee      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a80:	2304      	movs	r3, #4
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e0eb      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a86:	2308      	movs	r3, #8
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e0e8      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e0e5      	b.n	8004c5e <UART_SetConfig+0x346>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <UART_SetConfig+0x2dc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d120      	bne.n	8004ade <UART_SetConfig+0x1c6>
 8004a9c:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <UART_SetConfig+0x2d0>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aa6:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa8:	d013      	beq.n	8004ad2 <UART_SetConfig+0x1ba>
 8004aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8004aac:	d814      	bhi.n	8004ad8 <UART_SetConfig+0x1c0>
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d009      	beq.n	8004ac6 <UART_SetConfig+0x1ae>
 8004ab2:	2b80      	cmp	r3, #128	; 0x80
 8004ab4:	d810      	bhi.n	8004ad8 <UART_SetConfig+0x1c0>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <UART_SetConfig+0x1a8>
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d006      	beq.n	8004acc <UART_SetConfig+0x1b4>
 8004abe:	e00b      	b.n	8004ad8 <UART_SetConfig+0x1c0>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e0cb      	b.n	8004c5e <UART_SetConfig+0x346>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e0c8      	b.n	8004c5e <UART_SetConfig+0x346>
 8004acc:	2304      	movs	r3, #4
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e0c5      	b.n	8004c5e <UART_SetConfig+0x346>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e0c2      	b.n	8004c5e <UART_SetConfig+0x346>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e0bf      	b.n	8004c5e <UART_SetConfig+0x346>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a45      	ldr	r2, [pc, #276]	; (8004bf8 <UART_SetConfig+0x2e0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d125      	bne.n	8004b34 <UART_SetConfig+0x21c>
 8004ae8:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <UART_SetConfig+0x2d0>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af6:	d017      	beq.n	8004b28 <UART_SetConfig+0x210>
 8004af8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afc:	d817      	bhi.n	8004b2e <UART_SetConfig+0x216>
 8004afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b02:	d00b      	beq.n	8004b1c <UART_SetConfig+0x204>
 8004b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b08:	d811      	bhi.n	8004b2e <UART_SetConfig+0x216>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <UART_SetConfig+0x1fe>
 8004b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b12:	d006      	beq.n	8004b22 <UART_SetConfig+0x20a>
 8004b14:	e00b      	b.n	8004b2e <UART_SetConfig+0x216>
 8004b16:	2300      	movs	r3, #0
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e0a0      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e09d      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b22:	2304      	movs	r3, #4
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e09a      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e097      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b2e:	2310      	movs	r3, #16
 8004b30:	77fb      	strb	r3, [r7, #31]
 8004b32:	e094      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a30      	ldr	r2, [pc, #192]	; (8004bfc <UART_SetConfig+0x2e4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d125      	bne.n	8004b8a <UART_SetConfig+0x272>
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <UART_SetConfig+0x2d0>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b4c:	d017      	beq.n	8004b7e <UART_SetConfig+0x266>
 8004b4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b52:	d817      	bhi.n	8004b84 <UART_SetConfig+0x26c>
 8004b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b58:	d00b      	beq.n	8004b72 <UART_SetConfig+0x25a>
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	d811      	bhi.n	8004b84 <UART_SetConfig+0x26c>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <UART_SetConfig+0x254>
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b68:	d006      	beq.n	8004b78 <UART_SetConfig+0x260>
 8004b6a:	e00b      	b.n	8004b84 <UART_SetConfig+0x26c>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e075      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b72:	2302      	movs	r3, #2
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e072      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e06f      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e06c      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b84:	2310      	movs	r3, #16
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e069      	b.n	8004c5e <UART_SetConfig+0x346>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <UART_SetConfig+0x2e8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d137      	bne.n	8004c04 <UART_SetConfig+0x2ec>
 8004b94:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <UART_SetConfig+0x2d0>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ba2:	d017      	beq.n	8004bd4 <UART_SetConfig+0x2bc>
 8004ba4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ba8:	d817      	bhi.n	8004bda <UART_SetConfig+0x2c2>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bae:	d00b      	beq.n	8004bc8 <UART_SetConfig+0x2b0>
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d811      	bhi.n	8004bda <UART_SetConfig+0x2c2>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <UART_SetConfig+0x2aa>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	d006      	beq.n	8004bce <UART_SetConfig+0x2b6>
 8004bc0:	e00b      	b.n	8004bda <UART_SetConfig+0x2c2>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e04a      	b.n	8004c5e <UART_SetConfig+0x346>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e047      	b.n	8004c5e <UART_SetConfig+0x346>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e044      	b.n	8004c5e <UART_SetConfig+0x346>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e041      	b.n	8004c5e <UART_SetConfig+0x346>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e03e      	b.n	8004c5e <UART_SetConfig+0x346>
 8004be0:	efff69f3 	.word	0xefff69f3
 8004be4:	40011000 	.word	0x40011000
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40004400 	.word	0x40004400
 8004bf0:	40004800 	.word	0x40004800
 8004bf4:	40004c00 	.word	0x40004c00
 8004bf8:	40005000 	.word	0x40005000
 8004bfc:	40011400 	.word	0x40011400
 8004c00:	40007800 	.word	0x40007800
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a71      	ldr	r2, [pc, #452]	; (8004dd0 <UART_SetConfig+0x4b8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d125      	bne.n	8004c5a <UART_SetConfig+0x342>
 8004c0e:	4b71      	ldr	r3, [pc, #452]	; (8004dd4 <UART_SetConfig+0x4bc>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c1c:	d017      	beq.n	8004c4e <UART_SetConfig+0x336>
 8004c1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c22:	d817      	bhi.n	8004c54 <UART_SetConfig+0x33c>
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c28:	d00b      	beq.n	8004c42 <UART_SetConfig+0x32a>
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2e:	d811      	bhi.n	8004c54 <UART_SetConfig+0x33c>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <UART_SetConfig+0x324>
 8004c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c38:	d006      	beq.n	8004c48 <UART_SetConfig+0x330>
 8004c3a:	e00b      	b.n	8004c54 <UART_SetConfig+0x33c>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e00d      	b.n	8004c5e <UART_SetConfig+0x346>
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e00a      	b.n	8004c5e <UART_SetConfig+0x346>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e007      	b.n	8004c5e <UART_SetConfig+0x346>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e004      	b.n	8004c5e <UART_SetConfig+0x346>
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e001      	b.n	8004c5e <UART_SetConfig+0x346>
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c66:	d15a      	bne.n	8004d1e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004c68:	7ffb      	ldrb	r3, [r7, #31]
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d827      	bhi.n	8004cbe <UART_SetConfig+0x3a6>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x35c>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004cbf 	.word	0x08004cbf
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	08004cbf 	.word	0x08004cbf
 8004c8c:	08004cbf 	.word	0x08004cbf
 8004c90:	08004cbf 	.word	0x08004cbf
 8004c94:	08004cb7 	.word	0x08004cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7fe fdb4 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	61b8      	str	r0, [r7, #24]
        break;
 8004c9e:	e013      	b.n	8004cc8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7fe fdc4 	bl	800382c <HAL_RCC_GetPCLK2Freq>
 8004ca4:	61b8      	str	r0, [r7, #24]
        break;
 8004ca6:	e00f      	b.n	8004cc8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca8:	4b4b      	ldr	r3, [pc, #300]	; (8004dd8 <UART_SetConfig+0x4c0>)
 8004caa:	61bb      	str	r3, [r7, #24]
        break;
 8004cac:	e00c      	b.n	8004cc8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7fe fcbb 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8004cb2:	61b8      	str	r0, [r7, #24]
        break;
 8004cb4:	e008      	b.n	8004cc8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	61bb      	str	r3, [r7, #24]
        break;
 8004cbc:	e004      	b.n	8004cc8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8004cc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d074      	beq.n	8004db8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	005a      	lsls	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d916      	bls.n	8004d18 <UART_SetConfig+0x400>
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d212      	bcs.n	8004d18 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f023 030f 	bic.w	r3, r3, #15
 8004cfa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	89fb      	ldrh	r3, [r7, #14]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	89fa      	ldrh	r2, [r7, #14]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e04f      	b.n	8004db8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	77bb      	strb	r3, [r7, #30]
 8004d1c:	e04c      	b.n	8004db8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d828      	bhi.n	8004d76 <UART_SetConfig+0x45e>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <UART_SetConfig+0x414>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d77 	.word	0x08004d77
 8004d3c:	08004d67 	.word	0x08004d67
 8004d40:	08004d77 	.word	0x08004d77
 8004d44:	08004d77 	.word	0x08004d77
 8004d48:	08004d77 	.word	0x08004d77
 8004d4c:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fe fd58 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004d54:	61b8      	str	r0, [r7, #24]
        break;
 8004d56:	e013      	b.n	8004d80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe fd68 	bl	800382c <HAL_RCC_GetPCLK2Freq>
 8004d5c:	61b8      	str	r0, [r7, #24]
        break;
 8004d5e:	e00f      	b.n	8004d80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <UART_SetConfig+0x4c0>)
 8004d62:	61bb      	str	r3, [r7, #24]
        break;
 8004d64:	e00c      	b.n	8004d80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fe fc5f 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 8004d6a:	61b8      	str	r0, [r7, #24]
        break;
 8004d6c:	e008      	b.n	8004d80 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e004      	b.n	8004d80 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d7e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d018      	beq.n	8004db8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	085a      	lsrs	r2, r3, #1
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	441a      	add	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d909      	bls.n	8004db4 <UART_SetConfig+0x49c>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d205      	bcs.n	8004db4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	e001      	b.n	8004db8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004dc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40007c00 	.word	0x40007c00
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400

08004ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eda:	d10a      	bne.n	8004ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f30:	f7fc fbfe 	bl	8001730 <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d10e      	bne.n	8004f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f82d 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e023      	b.n	8004faa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d10e      	bne.n	8004f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f817 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e00d      	b.n	8004faa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b09c      	sub	sp, #112	; 0x70
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc2:	e0a5      	b.n	8005110 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	f000 80a1 	beq.w	8005110 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fc fbaf 	bl	8001730 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d13e      	bne.n	8005062 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005004:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e6      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3308      	adds	r3, #8
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	663b      	str	r3, [r7, #96]	; 0x60
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3308      	adds	r3, #8
 8005034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005036:	64ba      	str	r2, [r7, #72]	; 0x48
 8005038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800503c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e067      	b.n	8005132 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d04f      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507e:	d147      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005088:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800509e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
 80050aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e6      	bne.n	800508a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3308      	adds	r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	613b      	str	r3, [r7, #16]
   return(result);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050dc:	623a      	str	r2, [r7, #32]
 80050de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	6a3a      	ldr	r2, [r7, #32]
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e5      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e010      	b.n	8005132 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4013      	ands	r3, r2
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	429a      	cmp	r2, r3
 800512c:	f43f af4a 	beq.w	8004fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3770      	adds	r7, #112	; 0x70
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800513c:	b480      	push	{r7}
 800513e:	b097      	sub	sp, #92	; 0x5c
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d10e      	bne.n	800518e <UART_Start_Receive_IT+0x52>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <UART_Start_Receive_IT+0x48>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800517e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005182:	e02d      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22ff      	movs	r2, #255	; 0xff
 8005188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800518c:	e028      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10d      	bne.n	80051b2 <UART_Start_Receive_IT+0x76>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <UART_Start_Receive_IT+0x6c>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	22ff      	movs	r2, #255	; 0xff
 80051a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a6:	e01b      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	227f      	movs	r2, #127	; 0x7f
 80051ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051b0:	e016      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ba:	d10d      	bne.n	80051d8 <UART_Start_Receive_IT+0x9c>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <UART_Start_Receive_IT+0x92>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	227f      	movs	r2, #127	; 0x7f
 80051c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051cc:	e008      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	223f      	movs	r2, #63	; 0x3f
 80051d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051d6:	e003      	b.n	80051e0 <UART_Start_Receive_IT+0xa4>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2222      	movs	r2, #34	; 0x22
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	657b      	str	r3, [r7, #84]	; 0x54
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800520e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800521c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e5      	bne.n	80051ee <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	d107      	bne.n	800523c <UART_Start_Receive_IT+0x100>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <UART_Start_Receive_IT+0x18c>)
 8005238:	665a      	str	r2, [r3, #100]	; 0x64
 800523a:	e002      	b.n	8005242 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a23      	ldr	r2, [pc, #140]	; (80052cc <UART_Start_Receive_IT+0x190>)
 8005240:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d019      	beq.n	8005286 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	637b      	str	r3, [r7, #52]	; 0x34
 8005272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e6      	bne.n	8005252 <UART_Start_Receive_IT+0x116>
 8005284:	e018      	b.n	80052b8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	613b      	str	r3, [r7, #16]
   return(result);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f043 0320 	orr.w	r3, r3, #32
 800529a:	653b      	str	r3, [r7, #80]	; 0x50
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	69f9      	ldr	r1, [r7, #28]
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e6      	bne.n	8005286 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	375c      	adds	r7, #92	; 0x5c
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	08005573 	.word	0x08005573
 80052cc:	08005417 	.word	0x08005417

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b095      	sub	sp, #84	; 0x54
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
 80052f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e6      	bne.n	80052d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	61fb      	str	r3, [r7, #28]
   return(result);
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005342:	2b01      	cmp	r3, #1
 8005344:	d118      	bne.n	8005378 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	60bb      	str	r3, [r7, #8]
   return(result);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f023 0310 	bic.w	r3, r3, #16
 800535a:	647b      	str	r3, [r7, #68]	; 0x44
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	613b      	str	r3, [r7, #16]
   return(result);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	665a      	str	r2, [r3, #100]	; 0x64
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	; 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fa8f 	bl	80048d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b088      	sub	sp, #32
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6979      	ldr	r1, [r7, #20]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	613b      	str	r3, [r7, #16]
   return(result);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e6      	bne.n	80053ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fa5b 	bl	80048c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540e:	bf00      	nop
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b096      	sub	sp, #88	; 0x58
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005424:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542c:	2b22      	cmp	r3, #34	; 0x22
 800542e:	f040 8094 	bne.w	800555a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800543c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005440:	b2d9      	uxtb	r1, r3
 8005442:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005446:	b2da      	uxtb	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	400a      	ands	r2, r1
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d177      	bne.n	800556a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548e:	653b      	str	r3, [r7, #80]	; 0x50
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005498:	647b      	str	r3, [r7, #68]	; 0x44
 800549a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800549e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e6      	bne.n	800547a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	623b      	str	r3, [r7, #32]
   return(result);
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054cc:	633a      	str	r2, [r7, #48]	; 0x30
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e5      	bne.n	80054ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d12e      	bne.n	8005552 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	60fb      	str	r3, [r7, #12]
   return(result);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0310 	bic.w	r3, r3, #16
 800550e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	617b      	str	r3, [r7, #20]
   return(result);
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e6      	bne.n	80054fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b10      	cmp	r3, #16
 8005538:	d103      	bne.n	8005542 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2210      	movs	r2, #16
 8005540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff f9ce 	bl	80048ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005550:	e00b      	b.n	800556a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fb faa8 	bl	8000aa8 <HAL_UART_RxCpltCallback>
}
 8005558:	e007      	b.n	800556a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0208 	orr.w	r2, r2, #8
 8005568:	619a      	str	r2, [r3, #24]
}
 800556a:	bf00      	nop
 800556c:	3758      	adds	r7, #88	; 0x58
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b096      	sub	sp, #88	; 0x58
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005580:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005588:	2b22      	cmp	r3, #34	; 0x22
 800558a:	f040 8094 	bne.w	80056b6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800559e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80055a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d177      	bne.n	80056c6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f4:	643b      	str	r3, [r7, #64]	; 0x40
 80055f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	61fb      	str	r3, [r7, #28]
   return(result);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800562e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564c:	2b01      	cmp	r3, #1
 800564e:	d12e      	bne.n	80056ae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	60bb      	str	r3, [r7, #8]
   return(result);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	647b      	str	r3, [r7, #68]	; 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6979      	ldr	r1, [r7, #20]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	613b      	str	r3, [r7, #16]
   return(result);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e6      	bne.n	8005656 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b10      	cmp	r3, #16
 8005694:	d103      	bne.n	800569e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2210      	movs	r2, #16
 800569c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff f920 	bl	80048ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056ac:	e00b      	b.n	80056c6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb f9fa 	bl	8000aa8 <HAL_UART_RxCpltCallback>
}
 80056b4:	e007      	b.n	80056c6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0208 	orr.w	r2, r2, #8
 80056c4:	619a      	str	r2, [r3, #24]
}
 80056c6:	bf00      	nop
 80056c8:	3758      	adds	r7, #88	; 0x58
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056d0:	b084      	sub	sp, #16
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	f107 001c 	add.w	r0, r7, #28
 80056de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d120      	bne.n	800572a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	4b20      	ldr	r3, [pc, #128]	; (800577c <USB_CoreInit+0xac>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570e:	2b01      	cmp	r3, #1
 8005710:	d105      	bne.n	800571e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa92 	bl	8005c48 <USB_CoreReset>
 8005724:	4603      	mov	r3, r0
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e010      	b.n	800574c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa86 	bl	8005c48 <USB_CoreReset>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	2b01      	cmp	r3, #1
 8005750:	d10b      	bne.n	800576a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f043 0206 	orr.w	r2, r3, #6
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005776:	b004      	add	sp, #16
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	ffbdffbf 	.word	0xffbdffbf

08005780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 0201 	bic.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d115      	bne.n	80057f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057d0:	2001      	movs	r0, #1
 80057d2:	f7fb ffb9 	bl	8001748 <HAL_Delay>
      ms++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa25 	bl	8005c2c <USB_GetMode>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d01e      	beq.n	8005826 <USB_SetCurrentMode+0x84>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b31      	cmp	r3, #49	; 0x31
 80057ec:	d9f0      	bls.n	80057d0 <USB_SetCurrentMode+0x2e>
 80057ee:	e01a      	b.n	8005826 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d115      	bne.n	8005822 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005802:	2001      	movs	r0, #1
 8005804:	f7fb ffa0 	bl	8001748 <HAL_Delay>
      ms++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa0c 	bl	8005c2c <USB_GetMode>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <USB_SetCurrentMode+0x84>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b31      	cmp	r3, #49	; 0x31
 800581e:	d9f0      	bls.n	8005802 <USB_SetCurrentMode+0x60>
 8005820:	e001      	b.n	8005826 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e005      	b.n	8005832 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b32      	cmp	r3, #50	; 0x32
 800582a:	d101      	bne.n	8005830 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800583c:	b084      	sub	sp, #16
 800583e:	b580      	push	{r7, lr}
 8005840:	b086      	sub	sp, #24
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800584a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	e009      	b.n	8005870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3340      	adds	r3, #64	; 0x40
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	2200      	movs	r2, #0
 8005868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3301      	adds	r3, #1
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b0e      	cmp	r3, #14
 8005874:	d9f2      	bls.n	800585c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11c      	bne.n	80058b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800588a:	f043 0302 	orr.w	r3, r3, #2
 800588e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e005      	b.n	80058c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d4:	4619      	mov	r1, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	461a      	mov	r2, r3
 80058de:	680b      	ldr	r3, [r1, #0]
 80058e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d10c      	bne.n	8005902 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058ee:	2100      	movs	r1, #0
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f961 	bl	8005bb8 <USB_SetDevSpeed>
 80058f6:	e008      	b.n	800590a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058f8:	2101      	movs	r1, #1
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f95c 	bl	8005bb8 <USB_SetDevSpeed>
 8005900:	e003      	b.n	800590a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005902:	2103      	movs	r1, #3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f957 	bl	8005bb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800590a:	2110      	movs	r1, #16
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8f3 	bl	8005af8 <USB_FlushTxFifo>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f91d 	bl	8005b5c <USB_FlushRxFifo>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	461a      	mov	r2, r3
 8005934:	2300      	movs	r3, #0
 8005936:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	461a      	mov	r2, r3
 8005940:	2300      	movs	r3, #0
 8005942:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	461a      	mov	r2, r3
 800594c:	2300      	movs	r3, #0
 800594e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	e043      	b.n	80059de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800596c:	d118      	bne.n	80059a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	461a      	mov	r2, r3
 8005982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e013      	b.n	80059b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	461a      	mov	r2, r3
 8005998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e008      	b.n	80059b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	461a      	mov	r2, r3
 80059ae:	2300      	movs	r3, #0
 80059b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	461a      	mov	r2, r3
 80059c0:	2300      	movs	r3, #0
 80059c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	461a      	mov	r2, r3
 80059d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	3301      	adds	r3, #1
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d3b7      	bcc.n	8005956 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e043      	b.n	8005a74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a02:	d118      	bne.n	8005a36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	461a      	mov	r2, r3
 8005a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e013      	b.n	8005a48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e008      	b.n	8005a48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	461a      	mov	r2, r3
 8005a44:	2300      	movs	r3, #0
 8005a46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	461a      	mov	r2, r3
 8005a56:	2300      	movs	r3, #0
 8005a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	461a      	mov	r2, r3
 8005a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d3b7      	bcc.n	80059ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f043 0210 	orr.w	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <USB_DevInit+0x2b4>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f043 0208 	orr.w	r2, r3, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d105      	bne.n	8005ae0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <USB_DevInit+0x2b8>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aec:	b004      	add	sp, #16
 8005aee:	4770      	bx	lr
 8005af0:	803c3800 	.word	0x803c3800
 8005af4:	40000004 	.word	0x40000004

08005af8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	4a12      	ldr	r2, [pc, #72]	; (8005b58 <USB_FlushTxFifo+0x60>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e01a      	b.n	8005b4c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	daf3      	bge.n	8005b06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	019b      	lsls	r3, r3, #6
 8005b26:	f043 0220 	orr.w	r2, r3, #32
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <USB_FlushTxFifo+0x60>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e006      	b.n	8005b4c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d0f1      	beq.n	8005b2e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	00030d40 	.word	0x00030d40

08005b5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <USB_FlushRxFifo+0x58>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d901      	bls.n	8005b78 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e017      	b.n	8005ba8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	daf3      	bge.n	8005b68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2210      	movs	r2, #16
 8005b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <USB_FlushRxFifo+0x58>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e006      	b.n	8005ba8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d0f1      	beq.n	8005b8a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	00030d40 	.word	0x00030d40

08005bb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c04:	f023 0303 	bic.w	r3, r3, #3
 8005c08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0301 	and.w	r3, r3, #1
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <USB_CoreReset+0x60>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e01a      	b.n	8005c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	daf3      	bge.n	8005c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f043 0201 	orr.w	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <USB_CoreReset+0x60>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e006      	b.n	8005c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d0f1      	beq.n	8005c7c <USB_CoreReset+0x34>

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	00030d40 	.word	0x00030d40

08005cac <__libc_init_array>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	4d0d      	ldr	r5, [pc, #52]	; (8005ce4 <__libc_init_array+0x38>)
 8005cb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ce8 <__libc_init_array+0x3c>)
 8005cb2:	1b64      	subs	r4, r4, r5
 8005cb4:	10a4      	asrs	r4, r4, #2
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	42a6      	cmp	r6, r4
 8005cba:	d109      	bne.n	8005cd0 <__libc_init_array+0x24>
 8005cbc:	4d0b      	ldr	r5, [pc, #44]	; (8005cec <__libc_init_array+0x40>)
 8005cbe:	4c0c      	ldr	r4, [pc, #48]	; (8005cf0 <__libc_init_array+0x44>)
 8005cc0:	f000 f820 	bl	8005d04 <_init>
 8005cc4:	1b64      	subs	r4, r4, r5
 8005cc6:	10a4      	asrs	r4, r4, #2
 8005cc8:	2600      	movs	r6, #0
 8005cca:	42a6      	cmp	r6, r4
 8005ccc:	d105      	bne.n	8005cda <__libc_init_array+0x2e>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd4:	4798      	blx	r3
 8005cd6:	3601      	adds	r6, #1
 8005cd8:	e7ee      	b.n	8005cb8 <__libc_init_array+0xc>
 8005cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cde:	4798      	blx	r3
 8005ce0:	3601      	adds	r6, #1
 8005ce2:	e7f2      	b.n	8005cca <__libc_init_array+0x1e>
 8005ce4:	08005dc4 	.word	0x08005dc4
 8005ce8:	08005dc4 	.word	0x08005dc4
 8005cec:	08005dc4 	.word	0x08005dc4
 8005cf0:	08005dc8 	.word	0x08005dc8

08005cf4 <memset>:
 8005cf4:	4402      	add	r2, r0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d100      	bne.n	8005cfe <memset+0xa>
 8005cfc:	4770      	bx	lr
 8005cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005d02:	e7f9      	b.n	8005cf8 <memset+0x4>

08005d04 <_init>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr

08005d10 <_fini>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr
