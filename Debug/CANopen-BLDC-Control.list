
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007134  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800732c  0800732c  0001732c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e8  080074e8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f0  080074f0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080074f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000088  08007580  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08007580  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f8a  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334f  00000000  00000000  00039040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029caa  00000000  00000000  0003e958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001892e  00000000  00000000  00068602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100aaa  00000000  00000000  00080f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001819da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000528c  00000000  00000000  00181a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000088 	.word	0x20000088
 8000214:	00000000 	.word	0x00000000
 8000218:	08007314 	.word	0x08007314

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000008c 	.word	0x2000008c
 8000234:	08007314 	.word	0x08007314

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_CAN1_Init+0x6c>)
 8000544:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000548:	2210      	movs	r2, #16
 800054a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_CAN1_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000558:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_CAN1_Init+0x68>)
 800055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000560:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000564:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000568:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CAN1_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000590:	f001 fe22 	bl	80021d8 <HAL_CAN_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800059a:	f001 fa07 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000a4 	.word	0x200000a4
 80005a8:	40006400 	.word	0x40006400

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_CAN_MspInit+0x8c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d12f      	bne.n	800062e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fe:	2303      	movs	r3, #3
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800060e:	2309      	movs	r3, #9
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_CAN_MspInit+0x94>)
 800061a:	f002 fdef 	bl	80031fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2014      	movs	r0, #20
 8000624:	f002 fd21 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000628:	2014      	movs	r0, #20
 800062a:	f002 fd3a 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020c00 	.word	0x40020c00

08000644 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b6c      	ldr	r3, [pc, #432]	; (800080c <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a6b      	ldr	r2, [pc, #428]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b69      	ldr	r3, [pc, #420]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b66      	ldr	r3, [pc, #408]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a65      	ldr	r2, [pc, #404]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b63      	ldr	r3, [pc, #396]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b60      	ldr	r3, [pc, #384]	; (800080c <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a5f      	ldr	r2, [pc, #380]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b5d      	ldr	r3, [pc, #372]	; (800080c <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b5a      	ldr	r3, [pc, #360]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a59      	ldr	r2, [pc, #356]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b57      	ldr	r3, [pc, #348]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b54      	ldr	r3, [pc, #336]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a53      	ldr	r2, [pc, #332]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c0:	f043 0308 	orr.w	r3, r3, #8
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b51      	ldr	r3, [pc, #324]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d2:	4b4e      	ldr	r3, [pc, #312]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a4d      	ldr	r2, [pc, #308]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <MX_GPIO_Init+0x1c8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80006f0:	4847      	ldr	r0, [pc, #284]	; (8000810 <MX_GPIO_Init+0x1cc>)
 80006f2:	f002 ff2f 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	4846      	ldr	r0, [pc, #280]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80006fc:	f002 ff2a 	bl	8003554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4840      	ldr	r0, [pc, #256]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000718:	f002 fd70 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800071c:	2332      	movs	r3, #50	; 0x32
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800072c:	230b      	movs	r3, #11
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4838      	ldr	r0, [pc, #224]	; (8000818 <MX_GPIO_Init+0x1d4>)
 8000738:	f002 fd60 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800073c:	2386      	movs	r3, #134	; 0x86
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4831      	ldr	r0, [pc, #196]	; (800081c <MX_GPIO_Init+0x1d8>)
 8000758:	f002 fd50 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800075c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4826      	ldr	r0, [pc, #152]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000776:	f002 fd41 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	481e      	ldr	r0, [pc, #120]	; (8000810 <MX_GPIO_Init+0x1cc>)
 8000798:	f002 fd30 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007b4:	f002 fd22 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007cc:	f002 fd16 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_GPIO_Init+0x1d0>)
 80007ee:	f002 fd05 	bl	80031fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2028      	movs	r0, #40	; 0x28
 80007f8:	f002 fc37 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f002 fc50 	bl	80030a2 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400
 8000814:	40021800 	.word	0x40021800
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000

08000820 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <fnLEDsErrorState+0x28>)
 800082a:	f002 fe93 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <fnLEDsErrorState+0x28>)
 8000834:	f002 fe8e 	bl	8003554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4802      	ldr	r0, [pc, #8]	; (8000848 <fnLEDsErrorState+0x28>)
 8000840:	f002 fe88 	bl	8003554 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020400 	.word	0x40020400

0800084c <fnInit>:


//INIT FUNCTION
void fnInit(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000850:	4bc6      	ldr	r3, [pc, #792]	; (8000b6c <fnInit+0x320>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b50      	cmp	r3, #80	; 0x50
 8000856:	f200 833a 	bhi.w	8000ece <fnInit+0x682>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <fnInit+0x14>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080009a5 	.word	0x080009a5
 8000864:	08000ecf 	.word	0x08000ecf
 8000868:	08000ecf 	.word	0x08000ecf
 800086c:	08000ecf 	.word	0x08000ecf
 8000870:	08000ecf 	.word	0x08000ecf
 8000874:	080009ed 	.word	0x080009ed
 8000878:	08000ecf 	.word	0x08000ecf
 800087c:	08000ecf 	.word	0x08000ecf
 8000880:	08000ecf 	.word	0x08000ecf
 8000884:	08000ecf 	.word	0x08000ecf
 8000888:	08000a35 	.word	0x08000a35
 800088c:	08000ecf 	.word	0x08000ecf
 8000890:	08000ecf 	.word	0x08000ecf
 8000894:	08000ecf 	.word	0x08000ecf
 8000898:	08000ecf 	.word	0x08000ecf
 800089c:	08000ecf 	.word	0x08000ecf
 80008a0:	08000ecf 	.word	0x08000ecf
 80008a4:	08000ecf 	.word	0x08000ecf
 80008a8:	08000ecf 	.word	0x08000ecf
 80008ac:	08000ecf 	.word	0x08000ecf
 80008b0:	08000aa3 	.word	0x08000aa3
 80008b4:	08000ecf 	.word	0x08000ecf
 80008b8:	08000ecf 	.word	0x08000ecf
 80008bc:	08000ecf 	.word	0x08000ecf
 80008c0:	08000ecf 	.word	0x08000ecf
 80008c4:	08000b11 	.word	0x08000b11
 80008c8:	08000ecf 	.word	0x08000ecf
 80008cc:	08000ecf 	.word	0x08000ecf
 80008d0:	08000ecf 	.word	0x08000ecf
 80008d4:	08000ecf 	.word	0x08000ecf
 80008d8:	08000ba9 	.word	0x08000ba9
 80008dc:	08000ecf 	.word	0x08000ecf
 80008e0:	08000ecf 	.word	0x08000ecf
 80008e4:	08000ecf 	.word	0x08000ecf
 80008e8:	08000ecf 	.word	0x08000ecf
 80008ec:	08000ecf 	.word	0x08000ecf
 80008f0:	08000ecf 	.word	0x08000ecf
 80008f4:	08000ecf 	.word	0x08000ecf
 80008f8:	08000ecf 	.word	0x08000ecf
 80008fc:	08000ecf 	.word	0x08000ecf
 8000900:	08000c17 	.word	0x08000c17
 8000904:	08000ecf 	.word	0x08000ecf
 8000908:	08000ecf 	.word	0x08000ecf
 800090c:	08000ecf 	.word	0x08000ecf
 8000910:	08000ecf 	.word	0x08000ecf
 8000914:	08000ecf 	.word	0x08000ecf
 8000918:	08000ecf 	.word	0x08000ecf
 800091c:	08000ecf 	.word	0x08000ecf
 8000920:	08000ecf 	.word	0x08000ecf
 8000924:	08000ecf 	.word	0x08000ecf
 8000928:	08000c85 	.word	0x08000c85
 800092c:	08000ecf 	.word	0x08000ecf
 8000930:	08000ecf 	.word	0x08000ecf
 8000934:	08000ecf 	.word	0x08000ecf
 8000938:	08000ecf 	.word	0x08000ecf
 800093c:	08000cf3 	.word	0x08000cf3
 8000940:	08000ecf 	.word	0x08000ecf
 8000944:	08000ecf 	.word	0x08000ecf
 8000948:	08000ecf 	.word	0x08000ecf
 800094c:	08000ecf 	.word	0x08000ecf
 8000950:	08000d6f 	.word	0x08000d6f
 8000954:	08000ecf 	.word	0x08000ecf
 8000958:	08000ecf 	.word	0x08000ecf
 800095c:	08000ecf 	.word	0x08000ecf
 8000960:	08000ecf 	.word	0x08000ecf
 8000964:	08000ecf 	.word	0x08000ecf
 8000968:	08000ecf 	.word	0x08000ecf
 800096c:	08000ecf 	.word	0x08000ecf
 8000970:	08000ecf 	.word	0x08000ecf
 8000974:	08000ecf 	.word	0x08000ecf
 8000978:	08000ddd 	.word	0x08000ddd
 800097c:	08000ecf 	.word	0x08000ecf
 8000980:	08000ecf 	.word	0x08000ecf
 8000984:	08000ecf 	.word	0x08000ecf
 8000988:	08000ecf 	.word	0x08000ecf
 800098c:	08000ecf 	.word	0x08000ecf
 8000990:	08000ecf 	.word	0x08000ecf
 8000994:	08000ecf 	.word	0x08000ecf
 8000998:	08000ecf 	.word	0x08000ecf
 800099c:	08000ecf 	.word	0x08000ecf
 80009a0:	08000e91 	.word	0x08000e91

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 80009a4:	4b72      	ldr	r3, [pc, #456]	; (8000b70 <fnInit+0x324>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009aa:	4b71      	ldr	r3, [pc, #452]	; (8000b70 <fnInit+0x324>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 80009b0:	4b70      	ldr	r3, [pc, #448]	; (8000b74 <fnInit+0x328>)
 80009b2:	2282      	movs	r2, #130	; 0x82
 80009b4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <fnInit+0x328>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009bc:	4b6e      	ldr	r3, [pc, #440]	; (8000b78 <fnInit+0x32c>)
 80009be:	4a6d      	ldr	r2, [pc, #436]	; (8000b74 <fnInit+0x328>)
 80009c0:	496b      	ldr	r1, [pc, #428]	; (8000b70 <fnInit+0x324>)
 80009c2:	486e      	ldr	r0, [pc, #440]	; (8000b7c <fnInit+0x330>)
 80009c4:	f001 fe34 	bl	8002630 <HAL_CAN_AddTxMessage>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d004      	beq.n	80009d8 <fnInit+0x18c>
			fnLEDsErrorState();
 80009ce:	f7ff ff27 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 80009d2:	f000 ffeb 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 80009d6:	e27a      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 5;
 80009d8:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <fnInit+0x320>)
 80009da:	2205      	movs	r2, #5
 80009dc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	2204      	movs	r2, #4
 80009e2:	4967      	ldr	r1, [pc, #412]	; (8000b80 <fnInit+0x334>)
 80009e4:	4867      	ldr	r0, [pc, #412]	; (8000b84 <fnInit+0x338>)
 80009e6:	f004 fe07 	bl	80055f8 <HAL_UART_Transmit>
		break;
 80009ea:	e270      	b.n	8000ece <fnInit+0x682>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 80009ec:	4b60      	ldr	r3, [pc, #384]	; (8000b70 <fnInit+0x324>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009f2:	4b5f      	ldr	r3, [pc, #380]	; (8000b70 <fnInit+0x324>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 80009f8:	4b5e      	ldr	r3, [pc, #376]	; (8000b74 <fnInit+0x328>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <fnInit+0x328>)
 8000a00:	220a      	movs	r2, #10
 8000a02:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a04:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <fnInit+0x32c>)
 8000a06:	4a5b      	ldr	r2, [pc, #364]	; (8000b74 <fnInit+0x328>)
 8000a08:	4959      	ldr	r1, [pc, #356]	; (8000b70 <fnInit+0x324>)
 8000a0a:	485c      	ldr	r0, [pc, #368]	; (8000b7c <fnInit+0x330>)
 8000a0c:	f001 fe10 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d004      	beq.n	8000a20 <fnInit+0x1d4>
			fnLEDsErrorState();
 8000a16:	f7ff ff03 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000a1a:	f000 ffc7 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000a1e:	e256      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 10;
 8000a20:	4b52      	ldr	r3, [pc, #328]	; (8000b6c <fnInit+0x320>)
 8000a22:	220a      	movs	r2, #10
 8000a24:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	2204      	movs	r2, #4
 8000a2a:	4957      	ldr	r1, [pc, #348]	; (8000b88 <fnInit+0x33c>)
 8000a2c:	4855      	ldr	r0, [pc, #340]	; (8000b84 <fnInit+0x338>)
 8000a2e:	f004 fde3 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000a32:	e24c      	b.n	8000ece <fnInit+0x682>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000a34:	4b4e      	ldr	r3, [pc, #312]	; (8000b70 <fnInit+0x324>)
 8000a36:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a3a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <fnInit+0x324>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <fnInit+0x328>)
 8000a44:	2222      	movs	r2, #34	; 0x22
 8000a46:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <fnInit+0x328>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <fnInit+0x328>)
 8000a50:	2260      	movs	r2, #96	; 0x60
 8000a52:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <fnInit+0x328>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <fnInit+0x328>)
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <fnInit+0x328>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <fnInit+0x328>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <fnInit+0x328>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a72:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <fnInit+0x32c>)
 8000a74:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <fnInit+0x328>)
 8000a76:	493e      	ldr	r1, [pc, #248]	; (8000b70 <fnInit+0x324>)
 8000a78:	4840      	ldr	r0, [pc, #256]	; (8000b7c <fnInit+0x330>)
 8000a7a:	f001 fdd9 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <fnInit+0x242>
			fnLEDsErrorState();
 8000a84:	f7ff fecc 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000a88:	f000 ff90 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000a8c:	e21f      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 20;
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <fnInit+0x320>)
 8000a90:	2214      	movs	r2, #20
 8000a92:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2204      	movs	r2, #4
 8000a98:	493c      	ldr	r1, [pc, #240]	; (8000b8c <fnInit+0x340>)
 8000a9a:	483a      	ldr	r0, [pc, #232]	; (8000b84 <fnInit+0x338>)
 8000a9c:	f004 fdac 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000aa0:	e215      	b.n	8000ece <fnInit+0x682>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <fnInit+0x324>)
 8000aa4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000aa8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <fnInit+0x324>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <fnInit+0x328>)
 8000ab2:	2222      	movs	r2, #34	; 0x22
 8000ab4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <fnInit+0x328>)
 8000ab8:	2240      	movs	r2, #64	; 0x40
 8000aba:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <fnInit+0x328>)
 8000abe:	2260      	movs	r2, #96	; 0x60
 8000ac0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <fnInit+0x328>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <fnInit+0x328>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <fnInit+0x328>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <fnInit+0x328>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <fnInit+0x328>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <fnInit+0x32c>)
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <fnInit+0x328>)
 8000ae4:	4922      	ldr	r1, [pc, #136]	; (8000b70 <fnInit+0x324>)
 8000ae6:	4825      	ldr	r0, [pc, #148]	; (8000b7c <fnInit+0x330>)
 8000ae8:	f001 fda2 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <fnInit+0x2b0>
			fnLEDsErrorState();
 8000af2:	f7ff fe95 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000af6:	f000 ff59 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000afa:	e1e8      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 25;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <fnInit+0x320>)
 8000afe:	2219      	movs	r2, #25
 8000b00:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2204      	movs	r2, #4
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <fnInit+0x344>)
 8000b08:	481e      	ldr	r0, [pc, #120]	; (8000b84 <fnInit+0x338>)
 8000b0a:	f004 fd75 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000b0e:	e1de      	b.n	8000ece <fnInit+0x682>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <fnInit+0x324>)
 8000b12:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b16:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <fnInit+0x324>)
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <fnInit+0x328>)
 8000b20:	2222      	movs	r2, #34	; 0x22
 8000b22:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <fnInit+0x328>)
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <fnInit+0x328>)
 8000b2c:	2260      	movs	r2, #96	; 0x60
 8000b2e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <fnInit+0x328>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <fnInit+0x328>)
 8000b38:	220f      	movs	r2, #15
 8000b3a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <fnInit+0x328>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <fnInit+0x328>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <fnInit+0x328>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <fnInit+0x32c>)
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <fnInit+0x328>)
 8000b52:	4907      	ldr	r1, [pc, #28]	; (8000b70 <fnInit+0x324>)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <fnInit+0x330>)
 8000b56:	f001 fd6b 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d019      	beq.n	8000b94 <fnInit+0x348>
			fnLEDsErrorState();
 8000b60:	f7ff fe5e 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000b64:	f000 ff22 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000b68:	e1b1      	b.n	8000ece <fnInit+0x682>
 8000b6a:	bf00      	nop
 8000b6c:	20000002 	.word	0x20000002
 8000b70:	200000d0 	.word	0x200000d0
 8000b74:	200000e8 	.word	0x200000e8
 8000b78:	200000f0 	.word	0x200000f0
 8000b7c:	200000a4 	.word	0x200000a4
 8000b80:	0800732c 	.word	0x0800732c
 8000b84:	20000280 	.word	0x20000280
 8000b88:	08007334 	.word	0x08007334
 8000b8c:	0800733c 	.word	0x0800733c
 8000b90:	08007344 	.word	0x08007344
			iMachineStatus = 30;
 8000b94:	4bb0      	ldr	r3, [pc, #704]	; (8000e58 <fnInit+0x60c>)
 8000b96:	221e      	movs	r2, #30
 8000b98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	49af      	ldr	r1, [pc, #700]	; (8000e5c <fnInit+0x610>)
 8000ba0:	48af      	ldr	r0, [pc, #700]	; (8000e60 <fnInit+0x614>)
 8000ba2:	f004 fd29 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000ba6:	e192      	b.n	8000ece <fnInit+0x682>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000ba8:	4bae      	ldr	r3, [pc, #696]	; (8000e64 <fnInit+0x618>)
 8000baa:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bae:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bb0:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <fnInit+0x618>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bb6:	4bac      	ldr	r3, [pc, #688]	; (8000e68 <fnInit+0x61c>)
 8000bb8:	2222      	movs	r2, #34	; 0x22
 8000bba:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000bbc:	4baa      	ldr	r3, [pc, #680]	; (8000e68 <fnInit+0x61c>)
 8000bbe:	2260      	movs	r2, #96	; 0x60
 8000bc0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bc2:	4ba9      	ldr	r3, [pc, #676]	; (8000e68 <fnInit+0x61c>)
 8000bc4:	2260      	movs	r2, #96	; 0x60
 8000bc6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bc8:	4ba7      	ldr	r3, [pc, #668]	; (8000e68 <fnInit+0x61c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000bce:	4ba6      	ldr	r3, [pc, #664]	; (8000e68 <fnInit+0x61c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bd4:	4ba4      	ldr	r3, [pc, #656]	; (8000e68 <fnInit+0x61c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bda:	4ba3      	ldr	r3, [pc, #652]	; (8000e68 <fnInit+0x61c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000be0:	4ba1      	ldr	r3, [pc, #644]	; (8000e68 <fnInit+0x61c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000be6:	4ba1      	ldr	r3, [pc, #644]	; (8000e6c <fnInit+0x620>)
 8000be8:	4a9f      	ldr	r2, [pc, #636]	; (8000e68 <fnInit+0x61c>)
 8000bea:	499e      	ldr	r1, [pc, #632]	; (8000e64 <fnInit+0x618>)
 8000bec:	48a0      	ldr	r0, [pc, #640]	; (8000e70 <fnInit+0x624>)
 8000bee:	f001 fd1f 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <fnInit+0x3b6>
			fnLEDsErrorState();
 8000bf8:	f7ff fe12 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000bfc:	f000 fed6 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000c00:	e165      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 40;
 8000c02:	4b95      	ldr	r3, [pc, #596]	; (8000e58 <fnInit+0x60c>)
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4999      	ldr	r1, [pc, #612]	; (8000e74 <fnInit+0x628>)
 8000c0e:	4894      	ldr	r0, [pc, #592]	; (8000e60 <fnInit+0x614>)
 8000c10:	f004 fcf2 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000c14:	e15b      	b.n	8000ece <fnInit+0x682>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000c16:	4b93      	ldr	r3, [pc, #588]	; (8000e64 <fnInit+0x618>)
 8000c18:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c1c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c1e:	4b91      	ldr	r3, [pc, #580]	; (8000e64 <fnInit+0x618>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000c24:	4b90      	ldr	r3, [pc, #576]	; (8000e68 <fnInit+0x61c>)
 8000c26:	2222      	movs	r2, #34	; 0x22
 8000c28:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000c2a:	4b8f      	ldr	r3, [pc, #572]	; (8000e68 <fnInit+0x61c>)
 8000c2c:	227a      	movs	r2, #122	; 0x7a
 8000c2e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c30:	4b8d      	ldr	r3, [pc, #564]	; (8000e68 <fnInit+0x61c>)
 8000c32:	2260      	movs	r2, #96	; 0x60
 8000c34:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c36:	4b8c      	ldr	r3, [pc, #560]	; (8000e68 <fnInit+0x61c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000c3c:	4b8a      	ldr	r3, [pc, #552]	; (8000e68 <fnInit+0x61c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <fnInit+0x61c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c48:	4b87      	ldr	r3, [pc, #540]	; (8000e68 <fnInit+0x61c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c4e:	4b86      	ldr	r3, [pc, #536]	; (8000e68 <fnInit+0x61c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c54:	4b85      	ldr	r3, [pc, #532]	; (8000e6c <fnInit+0x620>)
 8000c56:	4a84      	ldr	r2, [pc, #528]	; (8000e68 <fnInit+0x61c>)
 8000c58:	4982      	ldr	r1, [pc, #520]	; (8000e64 <fnInit+0x618>)
 8000c5a:	4885      	ldr	r0, [pc, #532]	; (8000e70 <fnInit+0x624>)
 8000c5c:	f001 fce8 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <fnInit+0x424>
			fnLEDsErrorState();
 8000c66:	f7ff fddb 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000c6a:	f000 fe9f 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000c6e:	e12e      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 50;
 8000c70:	4b79      	ldr	r3, [pc, #484]	; (8000e58 <fnInit+0x60c>)
 8000c72:	2232      	movs	r2, #50	; 0x32
 8000c74:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	2204      	movs	r2, #4
 8000c7a:	497f      	ldr	r1, [pc, #508]	; (8000e78 <fnInit+0x62c>)
 8000c7c:	4878      	ldr	r0, [pc, #480]	; (8000e60 <fnInit+0x614>)
 8000c7e:	f004 fcbb 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000c82:	e124      	b.n	8000ece <fnInit+0x682>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <fnInit+0x618>)
 8000c86:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c8a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c8c:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <fnInit+0x618>)
 8000c8e:	2208      	movs	r2, #8
 8000c90:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c92:	4b75      	ldr	r3, [pc, #468]	; (8000e68 <fnInit+0x61c>)
 8000c94:	2222      	movs	r2, #34	; 0x22
 8000c96:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c98:	4b73      	ldr	r3, [pc, #460]	; (8000e68 <fnInit+0x61c>)
 8000c9a:	2240      	movs	r2, #64	; 0x40
 8000c9c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c9e:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <fnInit+0x61c>)
 8000ca0:	2260      	movs	r2, #96	; 0x60
 8000ca2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ca4:	4b70      	ldr	r3, [pc, #448]	; (8000e68 <fnInit+0x61c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000caa:	4b6f      	ldr	r3, [pc, #444]	; (8000e68 <fnInit+0x61c>)
 8000cac:	221f      	movs	r2, #31
 8000cae:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cb0:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <fnInit+0x61c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000cb6:	4b6c      	ldr	r3, [pc, #432]	; (8000e68 <fnInit+0x61c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cbc:	4b6a      	ldr	r3, [pc, #424]	; (8000e68 <fnInit+0x61c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cc2:	4b6a      	ldr	r3, [pc, #424]	; (8000e6c <fnInit+0x620>)
 8000cc4:	4a68      	ldr	r2, [pc, #416]	; (8000e68 <fnInit+0x61c>)
 8000cc6:	4967      	ldr	r1, [pc, #412]	; (8000e64 <fnInit+0x618>)
 8000cc8:	4869      	ldr	r0, [pc, #420]	; (8000e70 <fnInit+0x624>)
 8000cca:	f001 fcb1 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <fnInit+0x492>
			fnLEDsErrorState();
 8000cd4:	f7ff fda4 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000cd8:	f000 fe68 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 55;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000cdc:	e0f7      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 55;
 8000cde:	4b5e      	ldr	r3, [pc, #376]	; (8000e58 <fnInit+0x60c>)
 8000ce0:	2237      	movs	r2, #55	; 0x37
 8000ce2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000ce4:	2364      	movs	r3, #100	; 0x64
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4964      	ldr	r1, [pc, #400]	; (8000e7c <fnInit+0x630>)
 8000cea:	485d      	ldr	r0, [pc, #372]	; (8000e60 <fnInit+0x614>)
 8000cec:	f004 fc84 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000cf0:	e0ed      	b.n	8000ece <fnInit+0x682>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000cf2:	4b5c      	ldr	r3, [pc, #368]	; (8000e64 <fnInit+0x618>)
 8000cf4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cf8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <fnInit+0x618>)
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d00:	4b59      	ldr	r3, [pc, #356]	; (8000e68 <fnInit+0x61c>)
 8000d02:	2240      	movs	r2, #64	; 0x40
 8000d04:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d06:	4b58      	ldr	r3, [pc, #352]	; (8000e68 <fnInit+0x61c>)
 8000d08:	2241      	movs	r2, #65	; 0x41
 8000d0a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d0c:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <fnInit+0x61c>)
 8000d0e:	2260      	movs	r2, #96	; 0x60
 8000d10:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d12:	4b55      	ldr	r3, [pc, #340]	; (8000e68 <fnInit+0x61c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d18:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <fnInit+0x61c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <fnInit+0x61c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d24:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <fnInit+0x61c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d2a:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <fnInit+0x61c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d30:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <fnInit+0x620>)
 8000d32:	4a4d      	ldr	r2, [pc, #308]	; (8000e68 <fnInit+0x61c>)
 8000d34:	494b      	ldr	r1, [pc, #300]	; (8000e64 <fnInit+0x618>)
 8000d36:	484e      	ldr	r0, [pc, #312]	; (8000e70 <fnInit+0x624>)
 8000d38:	f001 fc7a 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d004      	beq.n	8000d4c <fnInit+0x500>
			fnLEDsErrorState();
 8000d42:	f7ff fd6d 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000d46:	f000 fe31 	bl	80019ac <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
		}
		break;
 8000d4a:	e0bd      	b.n	8000ec8 <fnInit+0x67c>
		else if (RxData[5] & 0b10000) {
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <fnInit+0x634>)
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80b7 	beq.w	8000ec8 <fnInit+0x67c>
			iMachineStatus = 60;
 8000d5a:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <fnInit+0x60c>)
 8000d5c:	223c      	movs	r2, #60	; 0x3c
 8000d5e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	2204      	movs	r2, #4
 8000d64:	4947      	ldr	r1, [pc, #284]	; (8000e84 <fnInit+0x638>)
 8000d66:	483e      	ldr	r0, [pc, #248]	; (8000e60 <fnInit+0x614>)
 8000d68:	f004 fc46 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000d6c:	e0ac      	b.n	8000ec8 <fnInit+0x67c>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <fnInit+0x618>)
 8000d70:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d74:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <fnInit+0x618>)
 8000d78:	2208      	movs	r2, #8
 8000d7a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d7c:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <fnInit+0x61c>)
 8000d7e:	2222      	movs	r2, #34	; 0x22
 8000d80:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <fnInit+0x61c>)
 8000d84:	2240      	movs	r2, #64	; 0x40
 8000d86:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d88:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <fnInit+0x61c>)
 8000d8a:	2260      	movs	r2, #96	; 0x60
 8000d8c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <fnInit+0x61c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <fnInit+0x61c>)
 8000d96:	220f      	movs	r2, #15
 8000d98:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d9a:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <fnInit+0x61c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <fnInit+0x61c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <fnInit+0x61c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <fnInit+0x620>)
 8000dae:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <fnInit+0x61c>)
 8000db0:	492c      	ldr	r1, [pc, #176]	; (8000e64 <fnInit+0x618>)
 8000db2:	482f      	ldr	r0, [pc, #188]	; (8000e70 <fnInit+0x624>)
 8000db4:	f001 fc3c 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d004      	beq.n	8000dc8 <fnInit+0x57c>
			fnLEDsErrorState();
 8000dbe:	f7ff fd2f 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000dc2:	f000 fdf3 	bl	80019ac <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000dc6:	e082      	b.n	8000ece <fnInit+0x682>
			iMachineStatus = 70;
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <fnInit+0x60c>)
 8000dca:	2246      	movs	r2, #70	; 0x46
 8000dcc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	492d      	ldr	r1, [pc, #180]	; (8000e88 <fnInit+0x63c>)
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <fnInit+0x614>)
 8000dd6:	f004 fc0f 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000dda:	e078      	b.n	8000ece <fnInit+0x682>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <fnInit+0x618>)
 8000dde:	f240 620a 	movw	r2, #1546	; 0x60a
 8000de2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <fnInit+0x618>)
 8000de6:	2208      	movs	r2, #8
 8000de8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <fnInit+0x61c>)
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <fnInit+0x61c>)
 8000df2:	2241      	movs	r2, #65	; 0x41
 8000df4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <fnInit+0x61c>)
 8000df8:	2260      	movs	r2, #96	; 0x60
 8000dfa:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <fnInit+0x61c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <fnInit+0x61c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <fnInit+0x61c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <fnInit+0x61c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <fnInit+0x61c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <fnInit+0x620>)
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <fnInit+0x61c>)
 8000e1e:	4911      	ldr	r1, [pc, #68]	; (8000e64 <fnInit+0x618>)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <fnInit+0x624>)
 8000e22:	f001 fc05 	bl	8002630 <HAL_CAN_AddTxMessage>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <fnInit+0x5ea>
			fnLEDsErrorState();
 8000e2c:	f7ff fcf8 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000e30:	f000 fdbc 	bl	80019ac <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000e34:	e04a      	b.n	8000ecc <fnInit+0x680>
		else if (RxData[5] & 0b00100) {
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <fnInit+0x634>)
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d044      	beq.n	8000ecc <fnInit+0x680>
			iMachineStatus = 80;
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <fnInit+0x60c>)
 8000e44:	2250      	movs	r2, #80	; 0x50
 8000e46:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	490f      	ldr	r1, [pc, #60]	; (8000e8c <fnInit+0x640>)
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <fnInit+0x614>)
 8000e50:	f004 fbd2 	bl	80055f8 <HAL_UART_Transmit>
		break;
 8000e54:	e03a      	b.n	8000ecc <fnInit+0x680>
 8000e56:	bf00      	nop
 8000e58:	20000002 	.word	0x20000002
 8000e5c:	0800734c 	.word	0x0800734c
 8000e60:	20000280 	.word	0x20000280
 8000e64:	200000d0 	.word	0x200000d0
 8000e68:	200000e8 	.word	0x200000e8
 8000e6c:	200000f0 	.word	0x200000f0
 8000e70:	200000a4 	.word	0x200000a4
 8000e74:	08007354 	.word	0x08007354
 8000e78:	0800735c 	.word	0x0800735c
 8000e7c:	08007364 	.word	0x08007364
 8000e80:	20000110 	.word	0x20000110
 8000e84:	0800736c 	.word	0x0800736c
 8000e88:	08007374 	.word	0x08007374
 8000e8c:	0800737c 	.word	0x0800737c

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <fnInit+0x688>)
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	2b27      	cmp	r3, #39	; 0x27
 8000e96:	d112      	bne.n	8000ebe <fnInit+0x672>
			iMachineStatus = 1;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <fnInit+0x68c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <fnInit+0x690>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000ea4:	213c      	movs	r1, #60	; 0x3c
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <fnInit+0x694>)
 8000ea8:	f004 f810 	bl	8004ecc <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000eac:	f000 f872 	bl	8000f94 <fnEncCalibration>

			HAL_UART_Transmit(&huart3, "C080", 4, 100);
 8000eb0:	2364      	movs	r3, #100	; 0x64
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	490b      	ldr	r1, [pc, #44]	; (8000ee4 <fnInit+0x698>)
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <fnInit+0x69c>)
 8000eb8:	f004 fb9e 	bl	80055f8 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000ebc:	e007      	b.n	8000ece <fnInit+0x682>
			fnLEDsErrorState();
 8000ebe:	f7ff fcaf 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8000ec2:	f000 fd73 	bl	80019ac <Error_Handler>
		break;
 8000ec6:	e002      	b.n	8000ece <fnInit+0x682>
		break;
 8000ec8:	bf00      	nop
 8000eca:	e000      	b.n	8000ece <fnInit+0x682>
		break;
 8000ecc:	bf00      	nop
	}
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000110 	.word	0x20000110
 8000ed8:	20000002 	.word	0x20000002
 8000edc:	20000003 	.word	0x20000003
 8000ee0:	20000150 	.word	0x20000150
 8000ee4:	08007384 	.word	0x08007384
 8000ee8:	20000280 	.word	0x20000280

08000eec <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <fnEncCounts2Angle+0x3c>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <fnEncCounts2Angle+0x40>)
 8000f0c:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <fnEncCounts2Angle+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	ee07 3a90 	vmov	s15, r3
}
 8000f18:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000148 	.word	0x20000148

08000f30 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <fnEncReadCount+0x54>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <fnEncReadCount+0x58>)
 8000f3e:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	085b      	lsrs	r3, r3, #1
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <fnEncReadCount+0x58>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d208      	bcs.n	8000f62 <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8000f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <fnEncReadCount+0x58>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <fnEncReadCount+0x5c>)
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	e003      	b.n	8000f6a <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <fnEncReadCount+0x58>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <fnEncReadCount+0x5c>)
 8000f68:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <fnEncReadCount+0x5c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffbc 	bl	8000eec <fnEncCounts2Angle>
 8000f74:	eef0 7a40 	vmov.f32	s15, s0
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <fnEncReadCount+0x60>)
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000150 	.word	0x20000150
 8000f88:	20000140 	.word	0x20000140
 8000f8c:	20000142 	.word	0x20000142
 8000f90:	20000144 	.word	0x20000144

08000f94 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <fnEncCalibration+0x14>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 8000f9e:	f7ff ffc7 	bl	8000f30 <fnEncReadCount>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40000400 	.word	0x40000400

08000fac <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b5a      	cmp	r3, #90	; 0x5a
 8000fbc:	d901      	bls.n	8000fc2 <fnMoveAbsolute+0x16>
		iNumber = 90;
 8000fbe:	235a      	movs	r3, #90	; 0x5a
 8000fc0:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <fnMoveAbsolute+0xc4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d108      	bne.n	8000fde <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e00e      	b.n	8000ffc <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <fnMoveAbsolute+0xc4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d107      	bne.n	8000ff8 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <fnMoveAbsolute+0xc8>)
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e001      	b.n	8000ffc <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d132      	bne.n	8001068 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <fnMoveAbsolute+0xcc>)
 8001004:	f240 620a 	movw	r2, #1546	; 0x60a
 8001008:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <fnMoveAbsolute+0xcc>)
 800100c:	2208      	movs	r2, #8
 800100e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <fnMoveAbsolute+0xd0>)
 8001012:	2222      	movs	r2, #34	; 0x22
 8001014:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <fnMoveAbsolute+0xd0>)
 8001018:	227a      	movs	r2, #122	; 0x7a
 800101a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <fnMoveAbsolute+0xd0>)
 800101e:	2260      	movs	r2, #96	; 0x60
 8001020:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <fnMoveAbsolute+0xd0>)
 8001024:	2200      	movs	r2, #0
 8001026:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <fnMoveAbsolute+0xd0>)
 800102e:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <fnMoveAbsolute+0xd0>)
 8001038:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0c1b      	lsrs	r3, r3, #16
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <fnMoveAbsolute+0xd0>)
 8001042:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	0e1b      	lsrs	r3, r3, #24
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <fnMoveAbsolute+0xd0>)
 800104c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <fnMoveAbsolute+0xd4>)
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <fnMoveAbsolute+0xd0>)
 8001052:	4909      	ldr	r1, [pc, #36]	; (8001078 <fnMoveAbsolute+0xcc>)
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <fnMoveAbsolute+0xd8>)
 8001056:	f001 faeb 	bl	8002630 <HAL_CAN_AddTxMessage>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 8001060:	f7ff fbde 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8001064:	f000 fca2 	bl	80019ac <Error_Handler>
		}

	}
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000001 	.word	0x20000001
 8001074:	fffffc18 	.word	0xfffffc18
 8001078:	200000d0 	.word	0x200000d0
 800107c:	200000e8 	.word	0x200000e8
 8001080:	200000f0 	.word	0x200000f0
 8001084:	200000a4 	.word	0x200000a4

08001088 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	switch (iSingleMachineStatus){
 800108c:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <fnSingleMotionAction+0xfc>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b1e      	cmp	r3, #30
 8001092:	d040      	beq.n	8001116 <fnSingleMotionAction+0x8e>
 8001094:	2b1e      	cmp	r3, #30
 8001096:	dc72      	bgt.n	800117e <fnSingleMotionAction+0xf6>
 8001098:	2b0a      	cmp	r3, #10
 800109a:	d002      	beq.n	80010a2 <fnSingleMotionAction+0x1a>
 800109c:	2b14      	cmp	r3, #20
 800109e:	d031      	beq.n	8001104 <fnSingleMotionAction+0x7c>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
		}
		break;
	}
}
 80010a0:	e06d      	b.n	800117e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <fnSingleMotionAction+0x100>)
 80010a4:	f240 620a 	movw	r2, #1546	; 0x60a
 80010a8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <fnSingleMotionAction+0x100>)
 80010ac:	2208      	movs	r2, #8
 80010ae:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <fnSingleMotionAction+0x104>)
 80010b2:	2222      	movs	r2, #34	; 0x22
 80010b4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <fnSingleMotionAction+0x104>)
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <fnSingleMotionAction+0x104>)
 80010be:	2260      	movs	r2, #96	; 0x60
 80010c0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <fnSingleMotionAction+0x104>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <fnSingleMotionAction+0x104>)
 80010ca:	221f      	movs	r2, #31
 80010cc:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <fnSingleMotionAction+0x104>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <fnSingleMotionAction+0x104>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <fnSingleMotionAction+0x104>)
 80010dc:	2200      	movs	r2, #0
 80010de:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <fnSingleMotionAction+0x108>)
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <fnSingleMotionAction+0x104>)
 80010e4:	4928      	ldr	r1, [pc, #160]	; (8001188 <fnSingleMotionAction+0x100>)
 80010e6:	482b      	ldr	r0, [pc, #172]	; (8001194 <fnSingleMotionAction+0x10c>)
 80010e8:	f001 faa2 	bl	8002630 <HAL_CAN_AddTxMessage>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <fnSingleMotionAction+0x74>
			fnLEDsErrorState();
 80010f2:	f7ff fb95 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 80010f6:	f000 fc59 	bl	80019ac <Error_Handler>
		break;
 80010fa:	e040      	b.n	800117e <fnSingleMotionAction+0xf6>
			iSingleMachineStatus = 20;
 80010fc:	4b21      	ldr	r3, [pc, #132]	; (8001184 <fnSingleMotionAction+0xfc>)
 80010fe:	2214      	movs	r2, #20
 8001100:	701a      	strb	r2, [r3, #0]
		break;
 8001102:	e03c      	b.n	800117e <fnSingleMotionAction+0xf6>
		fnMoveAbsolute(iPosition);
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <fnSingleMotionAction+0x110>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff4f 	bl	8000fac <fnMoveAbsolute>
		iSingleMachineStatus = 30;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <fnSingleMotionAction+0xfc>)
 8001110:	221e      	movs	r2, #30
 8001112:	701a      	strb	r2, [r3, #0]
		break;
 8001114:	e033      	b.n	800117e <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <fnSingleMotionAction+0x100>)
 8001118:	f240 620a 	movw	r2, #1546	; 0x60a
 800111c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <fnSingleMotionAction+0x100>)
 8001120:	2208      	movs	r2, #8
 8001122:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <fnSingleMotionAction+0x104>)
 8001126:	2222      	movs	r2, #34	; 0x22
 8001128:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <fnSingleMotionAction+0x104>)
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <fnSingleMotionAction+0x104>)
 8001132:	2260      	movs	r2, #96	; 0x60
 8001134:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <fnSingleMotionAction+0x104>)
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <fnSingleMotionAction+0x104>)
 800113e:	220f      	movs	r2, #15
 8001140:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <fnSingleMotionAction+0x104>)
 8001144:	2200      	movs	r2, #0
 8001146:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <fnSingleMotionAction+0x104>)
 800114a:	2200      	movs	r2, #0
 800114c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <fnSingleMotionAction+0x104>)
 8001150:	2200      	movs	r2, #0
 8001152:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <fnSingleMotionAction+0x108>)
 8001156:	4a0d      	ldr	r2, [pc, #52]	; (800118c <fnSingleMotionAction+0x104>)
 8001158:	490b      	ldr	r1, [pc, #44]	; (8001188 <fnSingleMotionAction+0x100>)
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <fnSingleMotionAction+0x10c>)
 800115c:	f001 fa68 	bl	8002630 <HAL_CAN_AddTxMessage>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <fnSingleMotionAction+0xe8>
			fnLEDsErrorState();
 8001166:	f7ff fb5b 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 800116a:	f000 fc1f 	bl	80019ac <Error_Handler>
		break;
 800116e:	e005      	b.n	800117c <fnSingleMotionAction+0xf4>
			iSingleMachineStatus = 100;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <fnSingleMotionAction+0xfc>)
 8001172:	2264      	movs	r2, #100	; 0x64
 8001174:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <fnSingleMotionAction+0x114>)
 8001178:	f003 fdd2 	bl	8004d20 <HAL_TIM_Base_Stop_IT>
		break;
 800117c:	bf00      	nop
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000004 	.word	0x20000004
 8001188:	200000d0 	.word	0x200000d0
 800118c:	200000e8 	.word	0x200000e8
 8001190:	200000f0 	.word	0x200000f0
 8001194:	200000a4 	.word	0x200000a4
 8001198:	2000014c 	.word	0x2000014c
 800119c:	200001e8 	.word	0x200001e8

080011a0 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	switch (iSerialMachineStatus){
 80011a4:	4bab      	ldr	r3, [pc, #684]	; (8001454 <fnSerialMotionAction+0x2b4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	3b0a      	subs	r3, #10
 80011aa:	2b1e      	cmp	r3, #30
 80011ac:	f200 8150 	bhi.w	8001450 <fnSerialMotionAction+0x2b0>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <fnSerialMotionAction+0x18>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	08001235 	.word	0x08001235
 80011bc:	08001451 	.word	0x08001451
 80011c0:	08001451 	.word	0x08001451
 80011c4:	08001451 	.word	0x08001451
 80011c8:	08001451 	.word	0x08001451
 80011cc:	08001451 	.word	0x08001451
 80011d0:	08001451 	.word	0x08001451
 80011d4:	08001451 	.word	0x08001451
 80011d8:	08001451 	.word	0x08001451
 80011dc:	08001451 	.word	0x08001451
 80011e0:	08001297 	.word	0x08001297
 80011e4:	08001451 	.word	0x08001451
 80011e8:	08001451 	.word	0x08001451
 80011ec:	08001451 	.word	0x08001451
 80011f0:	08001451 	.word	0x08001451
 80011f4:	080012a9 	.word	0x080012a9
 80011f8:	08001451 	.word	0x08001451
 80011fc:	08001451 	.word	0x08001451
 8001200:	08001451 	.word	0x08001451
 8001204:	08001451 	.word	0x08001451
 8001208:	08001319 	.word	0x08001319
 800120c:	08001451 	.word	0x08001451
 8001210:	08001451 	.word	0x08001451
 8001214:	08001451 	.word	0x08001451
 8001218:	08001451 	.word	0x08001451
 800121c:	0800137b 	.word	0x0800137b
 8001220:	08001451 	.word	0x08001451
 8001224:	08001451 	.word	0x08001451
 8001228:	08001451 	.word	0x08001451
 800122c:	08001451 	.word	0x08001451
 8001230:	080013f5 	.word	0x080013f5
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001234:	4b88      	ldr	r3, [pc, #544]	; (8001458 <fnSerialMotionAction+0x2b8>)
 8001236:	f240 620a 	movw	r2, #1546	; 0x60a
 800123a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800123c:	4b86      	ldr	r3, [pc, #536]	; (8001458 <fnSerialMotionAction+0x2b8>)
 800123e:	2208      	movs	r2, #8
 8001240:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001242:	4b86      	ldr	r3, [pc, #536]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001244:	2222      	movs	r2, #34	; 0x22
 8001246:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001248:	4b84      	ldr	r3, [pc, #528]	; (800145c <fnSerialMotionAction+0x2bc>)
 800124a:	2240      	movs	r2, #64	; 0x40
 800124c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800124e:	4b83      	ldr	r3, [pc, #524]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001250:	2260      	movs	r2, #96	; 0x60
 8001252:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001254:	4b81      	ldr	r3, [pc, #516]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001256:	2200      	movs	r2, #0
 8001258:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800125a:	4b80      	ldr	r3, [pc, #512]	; (800145c <fnSerialMotionAction+0x2bc>)
 800125c:	221f      	movs	r2, #31
 800125e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001260:	4b7e      	ldr	r3, [pc, #504]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001262:	2200      	movs	r2, #0
 8001264:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001266:	4b7d      	ldr	r3, [pc, #500]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001268:	2200      	movs	r2, #0
 800126a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800126c:	4b7b      	ldr	r3, [pc, #492]	; (800145c <fnSerialMotionAction+0x2bc>)
 800126e:	2200      	movs	r2, #0
 8001270:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001272:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <fnSerialMotionAction+0x2c0>)
 8001274:	4a79      	ldr	r2, [pc, #484]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001276:	4978      	ldr	r1, [pc, #480]	; (8001458 <fnSerialMotionAction+0x2b8>)
 8001278:	487a      	ldr	r0, [pc, #488]	; (8001464 <fnSerialMotionAction+0x2c4>)
 800127a:	f001 f9d9 	bl	8002630 <HAL_CAN_AddTxMessage>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <fnSerialMotionAction+0xee>
			fnLEDsErrorState();
 8001284:	f7ff facc 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 8001288:	f000 fb90 	bl	80019ac <Error_Handler>
		}
		else{
			iSerialMachineStatus = 20;
		}
		break;
 800128c:	e0e0      	b.n	8001450 <fnSerialMotionAction+0x2b0>
			iSerialMachineStatus = 20;
 800128e:	4b71      	ldr	r3, [pc, #452]	; (8001454 <fnSerialMotionAction+0x2b4>)
 8001290:	2214      	movs	r2, #20
 8001292:	701a      	strb	r2, [r3, #0]
		break;
 8001294:	e0dc      	b.n	8001450 <fnSerialMotionAction+0x2b0>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 8001296:	4b74      	ldr	r3, [pc, #464]	; (8001468 <fnSerialMotionAction+0x2c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe86 	bl	8000fac <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 80012a0:	4b6c      	ldr	r3, [pc, #432]	; (8001454 <fnSerialMotionAction+0x2b4>)
 80012a2:	2219      	movs	r2, #25
 80012a4:	701a      	strb	r2, [r3, #0]
		break;
 80012a6:	e0d3      	b.n	8001450 <fnSerialMotionAction+0x2b0>

	case 25://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 80012a8:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <fnSerialMotionAction+0x2b8>)
 80012aa:	f240 620a 	movw	r2, #1546	; 0x60a
 80012ae:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80012b0:	4b69      	ldr	r3, [pc, #420]	; (8001458 <fnSerialMotionAction+0x2b8>)
 80012b2:	2208      	movs	r2, #8
 80012b4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80012b6:	4b69      	ldr	r3, [pc, #420]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80012bc:	4b67      	ldr	r3, [pc, #412]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012be:	2241      	movs	r2, #65	; 0x41
 80012c0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012c4:	2260      	movs	r2, #96	; 0x60
 80012c6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80012d4:	4b61      	ldr	r3, [pc, #388]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80012e0:	4b5e      	ldr	r3, [pc, #376]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80012e6:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <fnSerialMotionAction+0x2c0>)
 80012e8:	4a5c      	ldr	r2, [pc, #368]	; (800145c <fnSerialMotionAction+0x2bc>)
 80012ea:	495b      	ldr	r1, [pc, #364]	; (8001458 <fnSerialMotionAction+0x2b8>)
 80012ec:	485d      	ldr	r0, [pc, #372]	; (8001464 <fnSerialMotionAction+0x2c4>)
 80012ee:	f001 f99f 	bl	8002630 <HAL_CAN_AddTxMessage>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <fnSerialMotionAction+0x162>
			fnLEDsErrorState();
 80012f8:	f7ff fa92 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 80012fc:	f000 fb56 	bl	80019ac <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 8001300:	e0a3      	b.n	800144a <fnSerialMotionAction+0x2aa>
		else if (RxData[5] & 0b10000) {
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <fnSerialMotionAction+0x2cc>)
 8001304:	795b      	ldrb	r3, [r3, #5]
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 809d 	beq.w	800144a <fnSerialMotionAction+0x2aa>
			iSerialMachineStatus = 30;
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <fnSerialMotionAction+0x2b4>)
 8001312:	221e      	movs	r2, #30
 8001314:	701a      	strb	r2, [r3, #0]
		break;
 8001316:	e098      	b.n	800144a <fnSerialMotionAction+0x2aa>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8001318:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <fnSerialMotionAction+0x2b8>)
 800131a:	f240 620a 	movw	r2, #1546	; 0x60a
 800131e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <fnSerialMotionAction+0x2b8>)
 8001322:	2208      	movs	r2, #8
 8001324:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001326:	4b4d      	ldr	r3, [pc, #308]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001328:	2222      	movs	r2, #34	; 0x22
 800132a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800132c:	4b4b      	ldr	r3, [pc, #300]	; (800145c <fnSerialMotionAction+0x2bc>)
 800132e:	2240      	movs	r2, #64	; 0x40
 8001330:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001334:	2260      	movs	r2, #96	; 0x60
 8001336:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001338:	4b48      	ldr	r3, [pc, #288]	; (800145c <fnSerialMotionAction+0x2bc>)
 800133a:	2200      	movs	r2, #0
 800133c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001340:	220f      	movs	r2, #15
 8001342:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001346:	2200      	movs	r2, #0
 8001348:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800134a:	4b44      	ldr	r3, [pc, #272]	; (800145c <fnSerialMotionAction+0x2bc>)
 800134c:	2200      	movs	r2, #0
 800134e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001352:	2200      	movs	r2, #0
 8001354:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <fnSerialMotionAction+0x2c0>)
 8001358:	4a40      	ldr	r2, [pc, #256]	; (800145c <fnSerialMotionAction+0x2bc>)
 800135a:	493f      	ldr	r1, [pc, #252]	; (8001458 <fnSerialMotionAction+0x2b8>)
 800135c:	4841      	ldr	r0, [pc, #260]	; (8001464 <fnSerialMotionAction+0x2c4>)
 800135e:	f001 f967 	bl	8002630 <HAL_CAN_AddTxMessage>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <fnSerialMotionAction+0x1d2>
			fnLEDsErrorState();
 8001368:	f7ff fa5a 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 800136c:	f000 fb1e 	bl	80019ac <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 8001370:	e06e      	b.n	8001450 <fnSerialMotionAction+0x2b0>
			iSerialMachineStatus = 35;
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <fnSerialMotionAction+0x2b4>)
 8001374:	2223      	movs	r2, #35	; 0x23
 8001376:	701a      	strb	r2, [r3, #0]
		break;
 8001378:	e06a      	b.n	8001450 <fnSerialMotionAction+0x2b0>

	case 35://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <fnSerialMotionAction+0x2b8>)
 800137c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001380:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <fnSerialMotionAction+0x2b8>)
 8001384:	2208      	movs	r2, #8
 8001386:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <fnSerialMotionAction+0x2bc>)
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001390:	2241      	movs	r2, #65	; 0x41
 8001392:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <fnSerialMotionAction+0x2bc>)
 8001396:	2260      	movs	r2, #96	; 0x60
 8001398:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800139a:	4b30      	ldr	r3, [pc, #192]	; (800145c <fnSerialMotionAction+0x2bc>)
 800139c:	2200      	movs	r2, #0
 800139e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <fnSerialMotionAction+0x2bc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <fnSerialMotionAction+0x2bc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <fnSerialMotionAction+0x2bc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <fnSerialMotionAction+0x2bc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <fnSerialMotionAction+0x2c0>)
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <fnSerialMotionAction+0x2bc>)
 80013bc:	4926      	ldr	r1, [pc, #152]	; (8001458 <fnSerialMotionAction+0x2b8>)
 80013be:	4829      	ldr	r0, [pc, #164]	; (8001464 <fnSerialMotionAction+0x2c4>)
 80013c0:	f001 f936 	bl	8002630 <HAL_CAN_AddTxMessage>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <fnSerialMotionAction+0x234>
			fnLEDsErrorState();
 80013ca:	f7ff fa29 	bl	8000820 <fnLEDsErrorState>
			Error_Handler();
 80013ce:	f000 faed 	bl	80019ac <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 80013d2:	e03c      	b.n	800144e <fnSerialMotionAction+0x2ae>
		else if (RxData[5] & 0b00100) {
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <fnSerialMotionAction+0x2cc>)
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d036      	beq.n	800144e <fnSerialMotionAction+0x2ae>
			iSerialCounter++;
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <fnSerialMotionAction+0x2d0>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <fnSerialMotionAction+0x2d0>)
 80013ea:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <fnSerialMotionAction+0x2b4>)
 80013ee:	2228      	movs	r2, #40	; 0x28
 80013f0:	701a      	strb	r2, [r3, #0]
		break;
 80013f2:	e02c      	b.n	800144e <fnSerialMotionAction+0x2ae>

	case 40://REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <fnSerialMotionAction+0x2d0>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <fnSerialMotionAction+0x2d4>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d10c      	bne.n	800141e <fnSerialMotionAction+0x27e>
			//iSerialCounter = 0;
			iSerialMachineStatus = 100;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <fnSerialMotionAction+0x2b4>)
 8001406:	2264      	movs	r2, #100	; 0x64
 8001408:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <fnSerialMotionAction+0x2d8>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <fnSerialMotionAction+0x2d4>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 8001416:	4819      	ldr	r0, [pc, #100]	; (800147c <fnSerialMotionAction+0x2dc>)
 8001418:	f003 fbe3 	bl	8004be2 <HAL_TIM_Base_Stop>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 800141c:	e018      	b.n	8001450 <fnSerialMotionAction+0x2b0>
		else if (iSerialCounter % 2 == 0) {
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <fnSerialMotionAction+0x2d0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <fnSerialMotionAction+0x29c>
			iPosition = iSerialRange;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <fnSerialMotionAction+0x2d8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <fnSerialMotionAction+0x2c8>)
 8001432:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <fnSerialMotionAction+0x2b4>)
 8001436:	220a      	movs	r2, #10
 8001438:	701a      	strb	r2, [r3, #0]
		break;
 800143a:	e009      	b.n	8001450 <fnSerialMotionAction+0x2b0>
			iPosition = 0;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <fnSerialMotionAction+0x2c8>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <fnSerialMotionAction+0x2b4>)
 8001444:	220a      	movs	r2, #10
 8001446:	701a      	strb	r2, [r3, #0]
		break;
 8001448:	e002      	b.n	8001450 <fnSerialMotionAction+0x2b0>
		break;
 800144a:	bf00      	nop
 800144c:	e000      	b.n	8001450 <fnSerialMotionAction+0x2b0>
		break;
 800144e:	bf00      	nop
	}
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000005 	.word	0x20000005
 8001458:	200000d0 	.word	0x200000d0
 800145c:	200000e8 	.word	0x200000e8
 8001460:	200000f0 	.word	0x200000f0
 8001464:	200000a4 	.word	0x200000a4
 8001468:	2000014c 	.word	0x2000014c
 800146c:	20000110 	.word	0x20000110
 8001470:	2000000c 	.word	0x2000000c
 8001474:	20000014 	.word	0x20000014
 8001478:	20000010 	.word	0x20000010
 800147c:	20000234 	.word	0x20000234

08001480 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d116      	bne.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if (iHomingStatus != 1) {
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d006      	beq.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 800149a:	f7ff f9d7 	bl	800084c <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800149e:	2101      	movs	r1, #1
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80014a2:	f002 f870 	bl	8003586 <HAL_GPIO_TogglePin>
	}
	else if(htim -> Instance == TIM10){
		fnSerialMotionAction();
	}

}
 80014a6:	e01a      	b.n	80014de <HAL_TIM_PeriodElapsedCallback+0x5e>
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80014a8:	213c      	movs	r1, #60	; 0x3c
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80014ac:	f003 fd0e 	bl	8004ecc <HAL_TIM_Encoder_Start>
			fnEncReadCount();
 80014b0:	f7ff fd3e 	bl	8000f30 <fnEncReadCount>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2101      	movs	r1, #1
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80014ba:	f002 f84b 	bl	8003554 <HAL_GPIO_WritePin>
}
 80014be:	e00e      	b.n	80014de <HAL_TIM_PeriodElapsedCallback+0x5e>
	else if(htim -> Instance == TIM7){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d102      	bne.n	80014d0 <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 80014ca:	f7ff fddd 	bl	8001088 <fnSingleMotionAction>
}
 80014ce:	e006      	b.n	80014de <HAL_TIM_PeriodElapsedCallback+0x5e>
	else if(htim -> Instance == TIM10){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x5e>
		fnSerialMotionAction();
 80014da:	f7ff fe61 	bl	80011a0 <fnSerialMotionAction>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40001000 	.word	0x40001000
 80014ec:	20000003 	.word	0x20000003
 80014f0:	40020400 	.word	0x40020400
 80014f4:	20000150 	.word	0x20000150
 80014f8:	40001400 	.word	0x40001400
 80014fc:	40014400 	.word	0x40014400

08001500 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001510:	d129      	bne.n	8001566 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_GPIO_EXTI_Callback+0x70>)
 8001514:	f240 620a 	movw	r2, #1546	; 0x60a
 8001518:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_GPIO_EXTI_Callback+0x70>)
 800151c:	2208      	movs	r2, #8
 800151e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 8001522:	2240      	movs	r2, #64	; 0x40
 8001524:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 8001528:	2241      	movs	r2, #65	; 0x41
 800152a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 800152e:	2260      	movs	r2, #96	; 0x60
 8001530:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_GPIO_EXTI_Callback+0x78>)
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_GPIO_EXTI_Callback+0x74>)
 8001554:	4906      	ldr	r1, [pc, #24]	; (8001570 <HAL_GPIO_EXTI_Callback+0x70>)
 8001556:	4809      	ldr	r0, [pc, #36]	; (800157c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001558:	f001 f86a 	bl	8002630 <HAL_CAN_AddTxMessage>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8001562:	f000 fa23 	bl	80019ac <Error_Handler>

		//// ENCODER CALIBRATION - BASE
		//		fnEncCalibration();

	}
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000d0 	.word	0x200000d0
 8001574:	200000e8 	.word	0x200000e8
 8001578:	200000f0 	.word	0x200000f0
 800157c:	200000a4 	.word	0x200000a4

08001580 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001584:	f000 fd9e 	bl	80020c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001588:	f000 f85e 	bl	8001648 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800158c:	f7ff f85a 	bl	8000644 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001590:	f000 fc68 	bl	8001e64 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001594:	f000 fce2 	bl	8001f5c <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001598:	f7fe ffd0 	bl	800053c <MX_CAN1_Init>
	MX_TIM6_Init();
 800159c:	f000 fb06 	bl	8001bac <MX_TIM6_Init>
	MX_TIM3_Init();
 80015a0:	f000 faae 	bl	8001b00 <MX_TIM3_Init>
	MX_TIM7_Init();
 80015a4:	f000 fb3a 	bl	8001c1c <MX_TIM7_Init>
	MX_TIM10_Init();
 80015a8:	f000 fb70 	bl	8001c8c <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 80015ac:	2204      	movs	r2, #4
 80015ae:	4921      	ldr	r1, [pc, #132]	; (8001634 <main+0xb4>)
 80015b0:	4821      	ldr	r0, [pc, #132]	; (8001638 <main+0xb8>)
 80015b2:	f004 f8b4 	bl	800571e <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 80015b6:	4821      	ldr	r0, [pc, #132]	; (800163c <main+0xbc>)
 80015b8:	f000 fff6 	bl	80025a8 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <main+0xc0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <main+0xc0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <main+0xc0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <main+0xc0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <main+0xc0>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <main+0xc0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <main+0xc4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <main+0xc4>)
 80015e8:	2212      	movs	r2, #18
 80015ea:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <main+0xc4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <main+0xc4>)
 80015f4:	f24b 1240 	movw	r2, #45376	; 0xb140
 80015f8:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <main+0xc4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <main+0xc4>)
 8001602:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001606:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <main+0xc4>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <main+0xc4>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <main+0xc4>)
 8001616:	2201      	movs	r2, #1
 8001618:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <main+0xc4>)
 800161c:	2214      	movs	r2, #20
 800161e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001620:	4908      	ldr	r1, [pc, #32]	; (8001644 <main+0xc4>)
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <main+0xbc>)
 8001624:	f000 fed4 	bl	80023d0 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001628:	2102      	movs	r1, #2
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <main+0xbc>)
 800162c:	f001 f9ed 	bl	8002a0a <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001630:	e7fe      	b.n	8001630 <main+0xb0>
 8001632:	bf00      	nop
 8001634:	200000cc 	.word	0x200000cc
 8001638:	20000280 	.word	0x20000280
 800163c:	200000a4 	.word	0x200000a4
 8001640:	200000d0 	.word	0x200000d0
 8001644:	20000118 	.word	0x20000118

08001648 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0b8      	sub	sp, #224	; 0xe0
 800164c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001652:	2234      	movs	r2, #52	; 0x34
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 fdb4 	bl	80071c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	2290      	movs	r2, #144	; 0x90
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fda5 	bl	80071c4 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800167a:	f002 f8ff 	bl	800387c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <SystemClock_Config+0x128>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a3b      	ldr	r2, [pc, #236]	; (8001770 <SystemClock_Config+0x128>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <SystemClock_Config+0x128>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <SystemClock_Config+0x12c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800169e:	4a35      	ldr	r2, [pc, #212]	; (8001774 <SystemClock_Config+0x12c>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <SystemClock_Config+0x12c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80016ce:	2304      	movs	r3, #4
 80016d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 80016d4:	2360      	movs	r3, #96	; 0x60
 80016d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e0:	2304      	movs	r3, #4
 80016e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 f923 	bl	800393c <HAL_RCC_OscConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 80016fc:	f000 f956 	bl	80019ac <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001700:	f002 f8cc 	bl	800389c <HAL_PWREx_EnableOverDrive>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800170a:	f000 f94f 	bl	80019ac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170e:	230f      	movs	r3, #15
 8001710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800172e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001732:	2103      	movs	r1, #3
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fbaf 	bl	8003e98 <HAL_RCC_ClockConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001740:	f000 f934 	bl	80019ac <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <SystemClock_Config+0x130>)
 8001746:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fdc4 	bl	80042e4 <HAL_RCCEx_PeriphCLKConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8001762:	f000 f923 	bl	80019ac <Error_Handler>
	}
}
 8001766:	bf00      	nop
 8001768:	37e0      	adds	r7, #224	; 0xe0
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000
 8001778:	00200100 	.word	0x00200100

0800177c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a64      	ldr	r2, [pc, #400]	; (800191c <HAL_UART_RxCpltCallback+0x1a0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f040 80b7 	bne.w	80018fe <HAL_UART_RxCpltCallback+0x182>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001790:	2204      	movs	r2, #4
 8001792:	4963      	ldr	r1, [pc, #396]	; (8001920 <HAL_UART_RxCpltCallback+0x1a4>)
 8001794:	4863      	ldr	r0, [pc, #396]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 8001796:	f005 fd1d 	bl	80071d4 <strncmp>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_UART_RxCpltCallback+0x1ac>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 80017a6:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_UART_RxCpltCallback+0x1b0>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 80017ac:	4860      	ldr	r0, [pc, #384]	; (8001930 <HAL_UART_RxCpltCallback+0x1b4>)
 80017ae:	f003 fa3f 	bl	8004c30 <HAL_TIM_Base_Start_IT>
 80017b2:	e0aa      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 80017b4:	2204      	movs	r2, #4
 80017b6:	495f      	ldr	r1, [pc, #380]	; (8001934 <HAL_UART_RxCpltCallback+0x1b8>)
 80017b8:	485a      	ldr	r0, [pc, #360]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 80017ba:	f005 fd0b 	bl	80071d4 <strncmp>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_UART_RxCpltCallback+0x1bc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80017ca:	2101      	movs	r1, #1
 80017cc:	485b      	ldr	r0, [pc, #364]	; (800193c <HAL_UART_RxCpltCallback+0x1c0>)
 80017ce:	f001 feda 	bl	8003586 <HAL_GPIO_TogglePin>
 80017d2:	e09a      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 80017d4:	2204      	movs	r2, #4
 80017d6:	495a      	ldr	r1, [pc, #360]	; (8001940 <HAL_UART_RxCpltCallback+0x1c4>)
 80017d8:	4852      	ldr	r0, [pc, #328]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 80017da:	f005 fcfb 	bl	80071d4 <strncmp>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 80017e4:	4b54      	ldr	r3, [pc, #336]	; (8001938 <HAL_UART_RxCpltCallback+0x1bc>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	4853      	ldr	r0, [pc, #332]	; (800193c <HAL_UART_RxCpltCallback+0x1c0>)
 80017ee:	f001 feca 	bl	8003586 <HAL_GPIO_TogglePin>
 80017f2:	e08a      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 80017f4:	2204      	movs	r2, #4
 80017f6:	4953      	ldr	r1, [pc, #332]	; (8001944 <HAL_UART_RxCpltCallback+0x1c8>)
 80017f8:	484a      	ldr	r0, [pc, #296]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 80017fa:	f005 fceb 	bl	80071d4 <strncmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <HAL_UART_RxCpltCallback+0x98>
			iSelected_leg = 0;
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_UART_RxCpltCallback+0x1cc>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800180a:	2101      	movs	r1, #1
 800180c:	484b      	ldr	r0, [pc, #300]	; (800193c <HAL_UART_RxCpltCallback+0x1c0>)
 800180e:	f001 feba 	bl	8003586 <HAL_GPIO_TogglePin>
 8001812:	e07a      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 8001814:	2204      	movs	r2, #4
 8001816:	494d      	ldr	r1, [pc, #308]	; (800194c <HAL_UART_RxCpltCallback+0x1d0>)
 8001818:	4842      	ldr	r0, [pc, #264]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 800181a:	f005 fcdb 	bl	80071d4 <strncmp>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <HAL_UART_RxCpltCallback+0xb8>
			iSelected_leg = 1;
 8001824:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_UART_RxCpltCallback+0x1cc>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	4843      	ldr	r0, [pc, #268]	; (800193c <HAL_UART_RxCpltCallback+0x1c0>)
 800182e:	f001 feaa 	bl	8003586 <HAL_GPIO_TogglePin>
 8001832:	e06a      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	2b50      	cmp	r3, #80	; 0x50
 800183a:	d112      	bne.n	8001862 <HAL_UART_RxCpltCallback+0xe6>

			if(iMode == 0){
 800183c:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_UART_RxCpltCallback+0x1bc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d161      	bne.n	800190a <HAL_UART_RxCpltCallback+0x18e>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001846:	4837      	ldr	r0, [pc, #220]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 8001848:	f005 fc8e 	bl	8007168 <atoi>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_UART_RxCpltCallback+0x1d4>)
 8001852:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_UART_RxCpltCallback+0x1d8>)
 8001856:	220a      	movs	r2, #10
 8001858:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 800185a:	483f      	ldr	r0, [pc, #252]	; (8001958 <HAL_UART_RxCpltCallback+0x1dc>)
 800185c:	f003 f9e8 	bl	8004c30 <HAL_TIM_Base_Start_IT>
 8001860:	e053      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001862:	2204      	movs	r2, #4
 8001864:	493d      	ldr	r1, [pc, #244]	; (800195c <HAL_UART_RxCpltCallback+0x1e0>)
 8001866:	482f      	ldr	r0, [pc, #188]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 8001868:	f005 fcb4 	bl	80071d4 <strncmp>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d11f      	bne.n	80018b2 <HAL_UART_RxCpltCallback+0x136>

			if(iMode == 1 && iSelected_leg != 0 && iSerialReps != 0 && iSerialRange != 0){
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <HAL_UART_RxCpltCallback+0x1bc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d146      	bne.n	800190a <HAL_UART_RxCpltCallback+0x18e>
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_UART_RxCpltCallback+0x1cc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d041      	beq.n	800190a <HAL_UART_RxCpltCallback+0x18e>
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_UART_RxCpltCallback+0x1e4>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03d      	beq.n	800190a <HAL_UART_RxCpltCallback+0x18e>
 800188e:	4b35      	ldr	r3, [pc, #212]	; (8001964 <HAL_UART_RxCpltCallback+0x1e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d039      	beq.n	800190a <HAL_UART_RxCpltCallback+0x18e>
				iSerialCounter = 0;
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_UART_RxCpltCallback+0x1ec>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_UART_RxCpltCallback+0x1f0>)
 800189e:	220a      	movs	r2, #10
 80018a0:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 80018a2:	4833      	ldr	r0, [pc, #204]	; (8001970 <HAL_UART_RxCpltCallback+0x1f4>)
 80018a4:	f003 f9c4 	bl	8004c30 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80018a8:	2101      	movs	r1, #1
 80018aa:	4824      	ldr	r0, [pc, #144]	; (800193c <HAL_UART_RxCpltCallback+0x1c0>)
 80018ac:	f001 fe6b 	bl	8003586 <HAL_GPIO_TogglePin>
 80018b0:	e02b      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 80018b4:	78db      	ldrb	r3, [r3, #3]
 80018b6:	2b4e      	cmp	r3, #78	; 0x4e
 80018b8:	d10c      	bne.n	80018d4 <HAL_UART_RxCpltCallback+0x158>
			if(iMode == 1){
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_UART_RxCpltCallback+0x1bc>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d122      	bne.n	800190a <HAL_UART_RxCpltCallback+0x18e>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 80018c4:	4817      	ldr	r0, [pc, #92]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 80018c6:	f005 fc4f 	bl	8007168 <atoi>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_UART_RxCpltCallback+0x1e4>)
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e01a      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b52      	cmp	r3, #82	; 0x52
 80018da:	d116      	bne.n	800190a <HAL_UART_RxCpltCallback+0x18e>
			if(iMode == 1){
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_UART_RxCpltCallback+0x1bc>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d111      	bne.n	800190a <HAL_UART_RxCpltCallback+0x18e>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 80018e6:	480f      	ldr	r0, [pc, #60]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 80018e8:	f005 fc3e 	bl	8007168 <atoi>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_UART_RxCpltCallback+0x1e8>)
 80018f2:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_UART_RxCpltCallback+0x1e8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a15      	ldr	r2, [pc, #84]	; (8001950 <HAL_UART_RxCpltCallback+0x1d4>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e005      	b.n	800190a <HAL_UART_RxCpltCallback+0x18e>



	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 80018fe:	2364      	movs	r3, #100	; 0x64
 8001900:	220c      	movs	r2, #12
 8001902:	491c      	ldr	r1, [pc, #112]	; (8001974 <HAL_UART_RxCpltCallback+0x1f8>)
 8001904:	481c      	ldr	r0, [pc, #112]	; (8001978 <HAL_UART_RxCpltCallback+0x1fc>)
 8001906:	f003 fe77 	bl	80055f8 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 800190a:	2204      	movs	r2, #4
 800190c:	4905      	ldr	r1, [pc, #20]	; (8001924 <HAL_UART_RxCpltCallback+0x1a8>)
 800190e:	481a      	ldr	r0, [pc, #104]	; (8001978 <HAL_UART_RxCpltCallback+0x1fc>)
 8001910:	f003 ff05 	bl	800571e <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40004800 	.word	0x40004800
 8001920:	0800738c 	.word	0x0800738c
 8001924:	200000cc 	.word	0x200000cc
 8001928:	20000002 	.word	0x20000002
 800192c:	20000003 	.word	0x20000003
 8001930:	2000019c 	.word	0x2000019c
 8001934:	080073ac 	.word	0x080073ac
 8001938:	20000000 	.word	0x20000000
 800193c:	40020400 	.word	0x40020400
 8001940:	080073b4 	.word	0x080073b4
 8001944:	080073c4 	.word	0x080073c4
 8001948:	20000001 	.word	0x20000001
 800194c:	080073bc 	.word	0x080073bc
 8001950:	2000014c 	.word	0x2000014c
 8001954:	20000004 	.word	0x20000004
 8001958:	200001e8 	.word	0x200001e8
 800195c:	080073a4 	.word	0x080073a4
 8001960:	20000014 	.word	0x20000014
 8001964:	20000010 	.word	0x20000010
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20000005 	.word	0x20000005
 8001970:	20000234 	.word	0x20000234
 8001974:	08007394 	.word	0x08007394
 8001978:	20000280 	.word	0x20000280

0800197c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001988:	2100      	movs	r1, #0
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 ff2b 	bl	80027e6 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001994:	f001 fdf7 	bl	8003586 <HAL_GPIO_TogglePin>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000110 	.word	0x20000110
 80019a4:	200000f4 	.word	0x200000f4
 80019a8:	40020400 	.word	0x40020400

080019ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019b4:	e7fe      	b.n	80019b4 <Error_Handler+0x8>
	...

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_MspInit+0x44>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_MspInit+0x44>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_MspInit+0x44>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_MspInit+0x44>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_MspInit+0x44>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_MspInit+0x44>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f000 fb80 	bl	8002150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <CAN1_RX0_IRQHandler+0x10>)
 8001a5a:	f000 fffc 	bl	8002a56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200000a4 	.word	0x200000a4

08001a68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a6e:	f003 fabb 	bl	8004fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000234 	.word	0x20000234

08001a7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM3_IRQHandler+0x10>)
 8001a82:	f003 fab1 	bl	8004fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000150 	.word	0x20000150

08001a90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <USART3_IRQHandler+0x10>)
 8001a96:	f003 fe91 	bl	80057bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000280 	.word	0x20000280

08001aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001aa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aac:	f001 fd86 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM6_DAC_IRQHandler+0x10>)
 8001aba:	f003 fa95 	bl	8004fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000019c 	.word	0x2000019c

08001ac8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <TIM7_IRQHandler+0x10>)
 8001ace:	f003 fa8b 	bl	8004fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200001e8 	.word	0x200001e8

08001adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2224      	movs	r2, #36	; 0x24
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f005 fb58 	bl	80071c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <MX_TIM3_Init+0xa8>)
 8001b22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b70:	f003 f906 	bl	8004d80 <HAL_TIM_Encoder_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b7a:	f7ff ff17 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_TIM3_Init+0xa4>)
 8001b8c:	f003 fc3a 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b96:	f7ff ff09 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3730      	adds	r7, #48	; 0x30
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000150 	.word	0x20000150
 8001ba8:	40000400 	.word	0x40000400

08001bac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_TIM6_Init+0x68>)
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <MX_TIM6_Init+0x6c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_TIM6_Init+0x68>)
 8001bc4:	f242 527f 	movw	r2, #9599	; 0x257f
 8001bc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_TIM6_Init+0x68>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_TIM6_Init+0x68>)
 8001bd2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_TIM6_Init+0x68>)
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <MX_TIM6_Init+0x68>)
 8001be0:	f002 ffa8 	bl	8004b34 <HAL_TIM_Base_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001bea:	f7ff fedf 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <MX_TIM6_Init+0x68>)
 8001bfc:	f003 fc02 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c06:	f7ff fed1 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000019c 	.word	0x2000019c
 8001c18:	40001000 	.word	0x40001000

08001c1c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MX_TIM7_Init+0x68>)
 8001c2e:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <MX_TIM7_Init+0x6c>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_TIM7_Init+0x68>)
 8001c34:	f242 527f 	movw	r2, #9599	; 0x257f
 8001c38:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_TIM7_Init+0x68>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_TIM7_Init+0x68>)
 8001c42:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c46:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_TIM7_Init+0x68>)
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_TIM7_Init+0x68>)
 8001c50:	f002 ff70 	bl	8004b34 <HAL_TIM_Base_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001c5a:	f7ff fea7 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <MX_TIM7_Init+0x68>)
 8001c6c:	f003 fbca 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001c76:	f7ff fe99 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200001e8 	.word	0x200001e8
 8001c88:	40001400 	.word	0x40001400

08001c8c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_TIM10_Init+0x40>)
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <MX_TIM10_Init+0x44>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <MX_TIM10_Init+0x40>)
 8001c98:	f242 527f 	movw	r2, #9599	; 0x257f
 8001c9c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MX_TIM10_Init+0x40>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_TIM10_Init+0x40>)
 8001ca6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001caa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_TIM10_Init+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_TIM10_Init+0x40>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_TIM10_Init+0x40>)
 8001cba:	f002 ff3b 	bl	8004b34 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001cc4:	f7ff fe72 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000234 	.word	0x20000234
 8001cd0:	40014400 	.word	0x40014400

08001cd4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d14b      	bne.n	8001d8e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a22      	ldr	r2, [pc, #136]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4811      	ldr	r0, [pc, #68]	; (8001da0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001d5a:	f001 fa4f 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	480a      	ldr	r0, [pc, #40]	; (8001da4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d7a:	f001 fa3f 	bl	80031fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	201d      	movs	r0, #29
 8001d84:	f001 f971 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d88:	201d      	movs	r0, #29
 8001d8a:	f001 f98a 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	; 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020800 	.word	0x40020800

08001da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_TIM_Base_MspInit+0xac>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d114      	bne.n	8001de4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2036      	movs	r0, #54	; 0x36
 8001dd8:	f001 f947 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ddc:	2036      	movs	r0, #54	; 0x36
 8001dde:	f001 f960 	bl	80030a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001de2:	e032      	b.n	8001e4a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <HAL_TIM_Base_MspInit+0xb4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d114      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2037      	movs	r0, #55	; 0x37
 8001e0c:	f001 f92d 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e10:	2037      	movs	r0, #55	; 0x37
 8001e12:	f001 f946 	bl	80030a2 <HAL_NVIC_EnableIRQ>
}
 8001e16:	e018      	b.n	8001e4a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM10)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_TIM_Base_MspInit+0xb8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d113      	bne.n	8001e4a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_TIM_Base_MspInit+0xb0>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2019      	movs	r0, #25
 8001e40:	f001 f913 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e44:	2019      	movs	r0, #25
 8001e46:	f001 f92c 	bl	80030a2 <HAL_NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40001000 	.word	0x40001000
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40001400 	.word	0x40001400
 8001e60:	40014400 	.word	0x40014400

08001e64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MX_USART3_UART_Init+0x5c>)
 8001e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_USART3_UART_Init+0x58>)
 8001ea8:	f003 fb58 	bl	800555c <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001eb2:	f7ff fd7b 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000280 	.word	0x20000280
 8001ec0:	40004800 	.word	0x40004800

08001ec4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_UART_MspInit+0x8c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d130      	bne.n	8001f48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_UART_MspInit+0x90>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_UART_MspInit+0x94>)
 8001f34:	f001 f962 	bl	80031fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2027      	movs	r0, #39	; 0x27
 8001f3e:	f001 f894 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f42:	2027      	movs	r0, #39	; 0x27
 8001f44:	f001 f8ad 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	; 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40004800 	.word	0x40004800
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020c00 	.word	0x40020c00

08001f5c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6a:	2206      	movs	r2, #6
 8001f6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f70:	2202      	movs	r2, #2
 8001f72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa0:	f001 fb24 	bl	80035ec <HAL_PCD_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001faa:	f7ff fcff 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000304 	.word	0x20000304

08001fb8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd8:	d141      	bne.n	800205e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a22      	ldr	r2, [pc, #136]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ff2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002004:	230a      	movs	r3, #10
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4817      	ldr	r0, [pc, #92]	; (800206c <HAL_PCD_MspInit+0xb4>)
 8002010:	f001 f8f4 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4810      	ldr	r0, [pc, #64]	; (800206c <HAL_PCD_MspInit+0xb4>)
 800202a:	f001 f8e7 	bl	80031fc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	6353      	str	r3, [r2, #52]	; 0x34
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_PCD_MspInit+0xb0>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000

08002070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002076:	490e      	ldr	r1, [pc, #56]	; (80020b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800208c:	4c0b      	ldr	r4, [pc, #44]	; (80020bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800209a:	f7ff fd1f 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f005 f86d 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7ff fa6d 	bl	8001580 <main>
  bx  lr    
 80020a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80020b4:	080074f8 	.word	0x080074f8
  ldr r2, =_sbss
 80020b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80020bc:	2000070c 	.word	0x2000070c

080020c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_Init+0x28>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_Init+0x28>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 ffbd 	bl	8003054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	2000      	movs	r0, #0
 80020dc:	f000 f808 	bl	80020f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff fc6a 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x54>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x58>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002106:	fbb3 f3f1 	udiv	r3, r3, r1
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f000 ffd5 	bl	80030be <HAL_SYSTICK_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00e      	b.n	800213c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d80a      	bhi.n	800213a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f000 ff9d 	bl	800306a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <HAL_InitTick+0x5c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000018 	.word	0x20000018
 8002148:	20000020 	.word	0x20000020
 800214c:	2000001c 	.word	0x2000001c

08002150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x20>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x24>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_IncTick+0x24>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000020 	.word	0x20000020
 8002174:	20000708 	.word	0x20000708

08002178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_GetTick+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000708 	.word	0x20000708

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff ffee 	bl	8002178 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffde 	bl	8002178 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000020 	.word	0x20000020

080021d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0ed      	b.n	80023c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe f9d8 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800220c:	f7ff ffb4 	bl	8002178 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002212:	e012      	b.n	800223a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002214:	f7ff ffb0 	bl	8002178 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b0a      	cmp	r3, #10
 8002220:	d90b      	bls.n	800223a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2205      	movs	r2, #5
 8002232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0c5      	b.n	80023c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0e5      	beq.n	8002214 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0202 	bic.w	r2, r2, #2
 8002256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002258:	f7ff ff8e 	bl	8002178 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800225e:	e012      	b.n	8002286 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002260:	f7ff ff8a 	bl	8002178 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b0a      	cmp	r3, #10
 800226c:	d90b      	bls.n	8002286 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2205      	movs	r2, #5
 800227e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e09f      	b.n	80023c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e5      	bne.n	8002260 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e1b      	ldrb	r3, [r3, #24]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d108      	bne.n	80022ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e007      	b.n	80022be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7e5b      	ldrb	r3, [r3, #25]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e007      	b.n	80022e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e9b      	ldrb	r3, [r3, #26]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0220 	orr.w	r2, r2, #32
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e007      	b.n	8002312 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0220 	bic.w	r2, r2, #32
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7edb      	ldrb	r3, [r3, #27]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d108      	bne.n	800232c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0210 	bic.w	r2, r2, #16
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e007      	b.n	800233c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0210 	orr.w	r2, r2, #16
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7f1b      	ldrb	r3, [r3, #28]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d108      	bne.n	8002356 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0208 	orr.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e007      	b.n	8002366 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0208 	bic.w	r2, r2, #8
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7f5b      	ldrb	r3, [r3, #29]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0204 	orr.w	r2, r2, #4
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e007      	b.n	8002390 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	ea42 0103 	orr.w	r1, r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d003      	beq.n	80023f6 <HAL_CAN_ConfigFilter+0x26>
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	f040 80c7 	bne.w	8002584 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_CAN_ConfigFilter+0x1d0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d001      	beq.n	8002404 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002400:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002402:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d111      	bne.n	8002440 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002422:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	431a      	orrs	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2201      	movs	r2, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d123      	bne.n	80024b2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800248c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3248      	adds	r2, #72	; 0x48
 8002492:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024a8:	6979      	ldr	r1, [r7, #20]
 80024aa:	3348      	adds	r3, #72	; 0x48
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d122      	bne.n	8002500 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3248      	adds	r2, #72	; 0x48
 80024e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024f6:	6979      	ldr	r1, [r7, #20]
 80024f8:	3348      	adds	r3, #72	; 0x48
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800251a:	e007      	b.n	800252c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	431a      	orrs	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002546:	e007      	b.n	8002558 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	431a      	orrs	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	431a      	orrs	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002576:	f023 0201 	bic.w	r2, r3, #1
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e006      	b.n	8002592 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40003400 	.word	0x40003400
 80025a4:	40006400 	.word	0x40006400

080025a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d12e      	bne.n	800261a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025d4:	f7ff fdd0 	bl	8002178 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025da:	e012      	b.n	8002602 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025dc:	f7ff fdcc 	bl	8002178 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b0a      	cmp	r3, #10
 80025e8:	d90b      	bls.n	8002602 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2205      	movs	r2, #5
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e012      	b.n	8002628 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e006      	b.n	8002628 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002644:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d003      	beq.n	800265c <HAL_CAN_AddTxMessage+0x2c>
 8002654:	7ffb      	ldrb	r3, [r7, #31]
 8002656:	2b02      	cmp	r3, #2
 8002658:	f040 80b8 	bne.w	80027cc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80a0 	beq.w	80027bc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	0e1b      	lsrs	r3, r3, #24
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d907      	bls.n	800269c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e09e      	b.n	80027da <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800269c:	2201      	movs	r2, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	409a      	lsls	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	6809      	ldr	r1, [r1, #0]
 80026bc:	431a      	orrs	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3318      	adds	r3, #24
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	440b      	add	r3, r1
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e00f      	b.n	80026ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3318      	adds	r3, #24
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	440b      	add	r3, r1
 80026e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3318      	adds	r3, #24
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	440b      	add	r3, r1
 80026fa:	3304      	adds	r3, #4
 80026fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	7d1b      	ldrb	r3, [r3, #20]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d111      	bne.n	800272a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3318      	adds	r3, #24
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6811      	ldr	r1, [r2, #0]
 800271a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3318      	adds	r3, #24
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	440b      	add	r3, r1
 8002726:	3304      	adds	r3, #4
 8002728:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3307      	adds	r3, #7
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	061a      	lsls	r2, r3, #24
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3306      	adds	r3, #6
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3305      	adds	r3, #5
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	4313      	orrs	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	3204      	adds	r2, #4
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	4610      	mov	r0, r2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6811      	ldr	r1, [r2, #0]
 8002752:	ea43 0200 	orr.w	r2, r3, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	440b      	add	r3, r1
 800275c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002760:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3303      	adds	r3, #3
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	061a      	lsls	r2, r3, #24
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3302      	adds	r3, #2
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	4313      	orrs	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	4610      	mov	r0, r2
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6811      	ldr	r1, [r2, #0]
 8002788:	ea43 0200 	orr.w	r2, r3, r0
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	440b      	add	r3, r1
 8002792:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002796:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3318      	adds	r3, #24
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	6811      	ldr	r1, [r2, #0]
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3318      	adds	r3, #24
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	440b      	add	r3, r1
 80027b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e00e      	b.n	80027da <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e006      	b.n	80027da <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027e6:	b480      	push	{r7}
 80027e8:	b087      	sub	sp, #28
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d003      	beq.n	800280a <HAL_CAN_GetRxMessage+0x24>
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b02      	cmp	r3, #2
 8002806:	f040 80f3 	bne.w	80029f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d116      	bne.n	800284c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0e7      	b.n	80029fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0d8      	b.n	80029fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	331b      	adds	r3, #27
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	4413      	add	r3, r2
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0204 	and.w	r2, r3, #4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	331b      	adds	r3, #27
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4413      	add	r3, r2
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0d5b      	lsrs	r3, r3, #21
 800287a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e00b      	b.n	800289c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	331b      	adds	r3, #27
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	4413      	add	r3, r2
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	331b      	adds	r3, #27
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	4413      	add	r3, r2
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0202 	and.w	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	331b      	adds	r3, #27
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	4413      	add	r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 020f 	and.w	r2, r3, #15
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	331b      	adds	r3, #27
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	331b      	adds	r3, #27
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	3304      	adds	r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	4413      	add	r3, r2
 8002904:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	4413      	add	r3, r2
 800291a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0a1a      	lsrs	r2, r3, #8
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	4413      	add	r3, r2
 8002934:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0c1a      	lsrs	r2, r3, #16
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	3302      	adds	r3, #2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4413      	add	r3, r2
 800294e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0e1a      	lsrs	r2, r3, #24
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3303      	adds	r3, #3
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	4413      	add	r3, r2
 8002968:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	3304      	adds	r3, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0a1a      	lsrs	r2, r3, #8
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3305      	adds	r3, #5
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0c1a      	lsrs	r2, r3, #16
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3306      	adds	r3, #6
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0e1a      	lsrs	r2, r3, #24
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	3307      	adds	r3, #7
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	e007      	b.n	80029ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0220 	orr.w	r2, r2, #32
 80029ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e006      	b.n	80029fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d002      	beq.n	8002a28 <HAL_CAN_ActivateNotification+0x1e>
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d109      	bne.n	8002a3c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6959      	ldr	r1, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e006      	b.n	8002a4a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b08a      	sub	sp, #40	; 0x28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d07c      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d023      	beq.n	8002aee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f983 	bl	8002dc4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002abe:	e016      	b.n	8002aee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	e00c      	b.n	8002aee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	e002      	b.n	8002aee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f989 	bl	8002e00 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d024      	beq.n	8002b42 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f963 	bl	8002dd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b12:	e016      	b.n	8002b42 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e00c      	b.n	8002b42 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e002      	b.n	8002b42 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f969 	bl	8002e14 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d024      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f943 	bl	8002dec <HAL_CAN_TxMailbox2CompleteCallback>
 8002b66:	e016      	b.n	8002b96 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	e00c      	b.n	8002b96 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e002      	b.n	8002b96 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f949 	bl	8002e28 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00c      	beq.n	8002bba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2210      	movs	r2, #16
 8002bb8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f930 	bl	8002e3c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fe fec1 	bl	800197c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2208      	movs	r2, #8
 8002c38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f912 	bl	8002e64 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f8f9 	bl	8002e50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8fc 	bl	8002e78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8f5 	bl	8002e8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d07b      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d072      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d043      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d03e      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d24:	2b60      	cmp	r3, #96	; 0x60
 8002d26:	d02b      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x32a>
 8002d28:	2b60      	cmp	r3, #96	; 0x60
 8002d2a:	d82e      	bhi.n	8002d8a <HAL_CAN_IRQHandler+0x334>
 8002d2c:	2b50      	cmp	r3, #80	; 0x50
 8002d2e:	d022      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x320>
 8002d30:	2b50      	cmp	r3, #80	; 0x50
 8002d32:	d82a      	bhi.n	8002d8a <HAL_CAN_IRQHandler+0x334>
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d019      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x316>
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d826      	bhi.n	8002d8a <HAL_CAN_IRQHandler+0x334>
 8002d3c:	2b30      	cmp	r3, #48	; 0x30
 8002d3e:	d010      	beq.n	8002d62 <HAL_CAN_IRQHandler+0x30c>
 8002d40:	2b30      	cmp	r3, #48	; 0x30
 8002d42:	d822      	bhi.n	8002d8a <HAL_CAN_IRQHandler+0x334>
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d002      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x2f8>
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d005      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d4c:	e01d      	b.n	8002d8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d56:	e019      	b.n	8002d8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d60:	e014      	b.n	8002d8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	f043 0320 	orr.w	r3, r3, #32
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d6a:	e00f      	b.n	8002d8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d74:	e00a      	b.n	8002d8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d7e:	e005      	b.n	8002d8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d88:	e000      	b.n	8002d8c <HAL_CAN_IRQHandler+0x336>
            break;
 8002d8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2204      	movs	r2, #4
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f872 	bl	8002ea0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	; 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee2:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	60d3      	str	r3, [r2, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00
 8002ef8:	05fa0000 	.word	0x05fa0000

08002efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <__NVIC_GetPriorityGrouping+0x18>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0307 	and.w	r3, r3, #7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0b      	blt.n	8002f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4907      	ldr	r1, [pc, #28]	; (8002f50 <__NVIC_EnableIRQ+0x38>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	bf28      	it	cs
 8002fc6:	2304      	movcs	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	4313      	orrs	r3, r2
         );
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003020:	d301      	bcc.n	8003026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003022:	2301      	movs	r3, #1
 8003024:	e00f      	b.n	8003046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003026:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <SysTick_Config+0x40>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302e:	210f      	movs	r1, #15
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f7ff ff8e 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SysTick_Config+0x40>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <SysTick_Config+0x40>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010

08003054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff29 	bl	8002eb4 <__NVIC_SetPriorityGrouping>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800307c:	f7ff ff3e 	bl	8002efc <__NVIC_GetPriorityGrouping>
 8003080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ff8e 	bl	8002fa8 <NVIC_EncodePriority>
 800308c:	4602      	mov	r2, r0
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff5d 	bl	8002f54 <__NVIC_SetPriority>
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff31 	bl	8002f18 <__NVIC_EnableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffa2 	bl	8003010 <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030e4:	f7ff f848 	bl	8002178 <HAL_GetTick>
 80030e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d008      	beq.n	8003108 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e052      	b.n	80031ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0216 	bic.w	r2, r2, #22
 8003116:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003126:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <HAL_DMA_Abort+0x62>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0208 	bic.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003158:	e013      	b.n	8003182 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315a:	f7ff f80d 	bl	8002178 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b05      	cmp	r3, #5
 8003166:	d90c      	bls.n	8003182 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2203      	movs	r2, #3
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e015      	b.n	80031ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e4      	bne.n	800315a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	223f      	movs	r2, #63	; 0x3f
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e00c      	b.n	80031ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2205      	movs	r2, #5
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e175      	b.n	8003508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8164 	bne.w	8003502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d005      	beq.n	8003252 <HAL_GPIO_Init+0x56>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d130      	bne.n	80032b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003288:	2201      	movs	r2, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 0201 	and.w	r2, r3, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d017      	beq.n	80032f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d123      	bne.n	8003344 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220f      	movs	r2, #15
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	08da      	lsrs	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3208      	adds	r2, #8
 800333e:	69b9      	ldr	r1, [r7, #24]
 8003340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80be 	beq.w	8003502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_GPIO_Init+0x324>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_GPIO_Init+0x324>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b63      	ldr	r3, [pc, #396]	; (8003520 <HAL_GPIO_Init+0x324>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800339e:	4a61      	ldr	r2, [pc, #388]	; (8003524 <HAL_GPIO_Init+0x328>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_GPIO_Init+0x32c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d037      	beq.n	800343a <HAL_GPIO_Init+0x23e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a57      	ldr	r2, [pc, #348]	; (800352c <HAL_GPIO_Init+0x330>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_GPIO_Init+0x23a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a56      	ldr	r2, [pc, #344]	; (8003530 <HAL_GPIO_Init+0x334>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <HAL_GPIO_Init+0x236>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a55      	ldr	r2, [pc, #340]	; (8003534 <HAL_GPIO_Init+0x338>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d025      	beq.n	800342e <HAL_GPIO_Init+0x232>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a54      	ldr	r2, [pc, #336]	; (8003538 <HAL_GPIO_Init+0x33c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <HAL_GPIO_Init+0x22e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a53      	ldr	r2, [pc, #332]	; (800353c <HAL_GPIO_Init+0x340>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x22a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_GPIO_Init+0x344>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x226>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a51      	ldr	r2, [pc, #324]	; (8003544 <HAL_GPIO_Init+0x348>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x222>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a50      	ldr	r2, [pc, #320]	; (8003548 <HAL_GPIO_Init+0x34c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x21e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4f      	ldr	r2, [pc, #316]	; (800354c <HAL_GPIO_Init+0x350>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x21a>
 8003412:	2309      	movs	r3, #9
 8003414:	e012      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003416:	230a      	movs	r3, #10
 8003418:	e010      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341a:	2308      	movs	r3, #8
 800341c:	e00e      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341e:	2307      	movs	r3, #7
 8003420:	e00c      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003422:	2306      	movs	r3, #6
 8003424:	e00a      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003426:	2305      	movs	r3, #5
 8003428:	e008      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342a:	2304      	movs	r3, #4
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342e:	2303      	movs	r3, #3
 8003430:	e004      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003432:	2302      	movs	r3, #2
 8003434:	e002      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x240>
 800343a:	2300      	movs	r3, #0
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f002 0203 	and.w	r2, r2, #3
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4093      	lsls	r3, r2
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800344c:	4935      	ldr	r1, [pc, #212]	; (8003524 <HAL_GPIO_Init+0x328>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	3302      	adds	r3, #2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345a:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_GPIO_Init+0x354>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347e:	4a34      	ldr	r2, [pc, #208]	; (8003550 <HAL_GPIO_Init+0x354>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_GPIO_Init+0x354>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d2:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <HAL_GPIO_Init+0x354>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	f67f ae86 	bls.w	800321c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40013800 	.word	0x40013800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021000 	.word	0x40021000
 800353c:	40021400 	.word	0x40021400
 8003540:	40021800 	.word	0x40021800
 8003544:	40021c00 	.word	0x40021c00
 8003548:	40022000 	.word	0x40022000
 800354c:	40022400 	.word	0x40022400
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003586:	b480      	push	{r7}
 8003588:	b085      	sub	sp, #20
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003598:	887a      	ldrh	r2, [r7, #2]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4013      	ands	r3, r2
 800359e:	041a      	lsls	r2, r3, #16
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43d9      	mvns	r1, r3
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	400b      	ands	r3, r1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d2:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd ff90 	bl	8001500 <HAL_GPIO_EXTI_Callback>
  }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40013c00 	.word	0x40013c00

080035ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ee:	b08f      	sub	sp, #60	; 0x3c
 80035f0:	af0a      	add	r7, sp, #40	; 0x28
 80035f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e116      	b.n	800382c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7fe fccd 	bl	8001fb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 fafd 	bl	8006c3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	687e      	ldr	r6, [r7, #4]
 800364a:	466d      	mov	r5, sp
 800364c:	f106 0410 	add.w	r4, r6, #16
 8003650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003658:	e894 0003 	ldmia.w	r4, {r0, r1}
 800365c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003660:	1d33      	adds	r3, r6, #4
 8003662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f003 fa91 	bl	8006b8c <USB_CoreInit>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0d7      	b.n	800382c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f003 faeb 	bl	8006c5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e04a      	b.n	8003724 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	333d      	adds	r3, #61	; 0x3d
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	333c      	adds	r3, #60	; 0x3c
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	b298      	uxth	r0, r3
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3342      	adds	r3, #66	; 0x42
 80036ca:	4602      	mov	r2, r0
 80036cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	333f      	adds	r3, #63	; 0x3f
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3344      	adds	r3, #68	; 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3348      	adds	r3, #72	; 0x48
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3350      	adds	r3, #80	; 0x50
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	3301      	adds	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d3af      	bcc.n	800368e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	e044      	b.n	80037be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	3301      	adds	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3b5      	bcc.n	8003734 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	687e      	ldr	r6, [r7, #4]
 80037d0:	466d      	mov	r5, sp
 80037d2:	f106 0410 	add.w	r4, r6, #16
 80037d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80037e6:	1d33      	adds	r3, r6, #4
 80037e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	f003 fa84 	bl	8006cf8 <USB_DevInit>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e014      	b.n	800382c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f80a 	bl	8003834 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f003 fc3e 	bl	80070a6 <USB_DevDisconnect>

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003834 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_PCDEx_ActivateLPM+0x44>)
 8003864:	4313      	orrs	r3, r2
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	10000003 	.word	0x10000003

0800387c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40007000 	.word	0x40007000

0800389c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a22      	ldr	r2, [pc, #136]	; (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038ca:	f7fe fc55 	bl	8002178 <HAL_GetTick>
 80038ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038d0:	e009      	b.n	80038e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038d2:	f7fe fc51 	bl	8002178 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e0:	d901      	bls.n	80038e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e022      	b.n	800392c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d1ee      	bne.n	80038d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe fc3a 	bl	8002178 <HAL_GetTick>
 8003904:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003906:	e009      	b.n	800391c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003908:	f7fe fc36 	bl	8002178 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003916:	d901      	bls.n	800391c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e007      	b.n	800392c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_PWREx_EnableOverDrive+0x9c>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003928:	d1ee      	bne.n	8003908 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	40007000 	.word	0x40007000

0800393c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e29b      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8087 	beq.w	8003a6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003960:	4b96      	ldr	r3, [pc, #600]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b04      	cmp	r3, #4
 800396a:	d00c      	beq.n	8003986 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396c:	4b93      	ldr	r3, [pc, #588]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b08      	cmp	r3, #8
 8003976:	d112      	bne.n	800399e <HAL_RCC_OscConfig+0x62>
 8003978:	4b90      	ldr	r3, [pc, #576]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003984:	d10b      	bne.n	800399e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003986:	4b8d      	ldr	r3, [pc, #564]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d06c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x130>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d168      	bne.n	8003a6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e275      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x7a>
 80039a8:	4b84      	ldr	r3, [pc, #528]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a83      	ldr	r2, [pc, #524]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e02e      	b.n	8003a14 <HAL_RCC_OscConfig+0xd8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x9c>
 80039be:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7e      	ldr	r2, [pc, #504]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b7c      	ldr	r3, [pc, #496]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7b      	ldr	r2, [pc, #492]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e01d      	b.n	8003a14 <HAL_RCC_OscConfig+0xd8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0xc0>
 80039e2:	4b76      	ldr	r3, [pc, #472]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a75      	ldr	r2, [pc, #468]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a72      	ldr	r2, [pc, #456]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0xd8>
 80039fc:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6e      	ldr	r2, [pc, #440]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b6c      	ldr	r3, [pc, #432]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6b      	ldr	r2, [pc, #428]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fbac 	bl	8002178 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe fba8 	bl	8002178 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e229      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe fb98 	bl	8002178 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fe fb94 	bl	8002178 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e215      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	4b57      	ldr	r3, [pc, #348]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x110>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d069      	beq.n	8003b4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7a:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	4b4d      	ldr	r3, [pc, #308]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_OscConfig+0x190>
 8003a92:	4b4a      	ldr	r3, [pc, #296]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d116      	bne.n	8003acc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x17a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1e9      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b41      	ldr	r3, [pc, #260]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	493d      	ldr	r1, [pc, #244]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	e040      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d023      	beq.n	8003b1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad4:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a38      	ldr	r2, [pc, #224]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fb4a 	bl	8002178 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fb46 	bl	8002178 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1c7      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afa:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4929      	ldr	r1, [pc, #164]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
 8003b1a:	e018      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1c:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fe fb26 	bl	8002178 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b30:	f7fe fb22 	bl	8002178 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1a3      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d038      	beq.n	8003bcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d019      	beq.n	8003b96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b66:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fb03 	bl	8002178 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fe faff 	bl	8002178 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e180      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x23a>
 8003b94:	e01a      	b.n	8003bcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fae9 	bl	8002178 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fe fae5 	bl	8002178 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d903      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e166      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
 8003bbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	4b92      	ldr	r3, [pc, #584]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ee      	bne.n	8003baa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a4 	beq.w	8003d22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a88      	ldr	r2, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b86      	ldr	r3, [pc, #536]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c02:	4b83      	ldr	r3, [pc, #524]	; (8003e10 <HAL_RCC_OscConfig+0x4d4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c0e:	4b80      	ldr	r3, [pc, #512]	; (8003e10 <HAL_RCC_OscConfig+0x4d4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7f      	ldr	r2, [pc, #508]	; (8003e10 <HAL_RCC_OscConfig+0x4d4>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe faad 	bl	8002178 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fe faa9 	bl	8002178 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e12a      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x4d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x31a>
 8003c48:	4b70      	ldr	r3, [pc, #448]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a6f      	ldr	r2, [pc, #444]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e02d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x33c>
 8003c5e:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a6a      	ldr	r2, [pc, #424]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	e01c      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d10c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x35e>
 8003c80:	4b62      	ldr	r3, [pc, #392]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4a61      	ldr	r2, [pc, #388]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8c:	4b5f      	ldr	r3, [pc, #380]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a5e      	ldr	r2, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca6:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a58      	ldr	r2, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d015      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fe fa5d 	bl	8002178 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fe fa59 	bl	8002178 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0d8      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd8:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ee      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x386>
 8003ce4:	e014      	b.n	8003d10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fe fa47 	bl	8002178 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe fa43 	bl	8002178 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0c2      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d04:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1ee      	bne.n	8003cee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80ae 	beq.w	8003e88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d06d      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d14b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d40:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a31      	ldr	r2, [pc, #196]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fa14 	bl	8002178 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe fa10 	bl	8002178 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e091      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	491b      	ldr	r1, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fe f9e2 	bl	8002178 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fe f9de 	bl	8002178 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e05f      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x47c>
 8003dd6:	e057      	b.n	8003e88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe f9c8 	bl	8002178 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe f9c4 	bl	8002178 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e045      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x4b0>
 8003e0a:	e03d      	b.n	8003e88 <HAL_RCC_OscConfig+0x54c>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e14:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_RCC_OscConfig+0x558>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d030      	beq.n	8003e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d129      	bne.n	8003e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d122      	bne.n	8003e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d119      	bne.n	8003e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d10f      	bne.n	8003e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0d0      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b67      	ldr	r3, [pc, #412]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 020f 	bic.w	r2, r3, #15
 8003ec6:	4965      	ldr	r1, [pc, #404]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d040      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d115      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e073      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4936      	ldr	r1, [pc, #216]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8c:	f7fe f8f4 	bl	8002178 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fe f8f0 	bl	8002178 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e053      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 020c 	and.w	r2, r3, #12
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1eb      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d210      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	4922      	ldr	r1, [pc, #136]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f821 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	490a      	ldr	r1, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x1cc>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1d0>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1d4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe f850 	bl	80020f0 <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023c00 	.word	0x40023c00
 8004060:	40023800 	.word	0x40023800
 8004064:	080073cc 	.word	0x080073cc
 8004068:	20000018 	.word	0x20000018
 800406c:	2000001c 	.word	0x2000001c

08004070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004074:	b094      	sub	sp, #80	; 0x50
 8004076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	647b      	str	r3, [r7, #68]	; 0x44
 800407c:	2300      	movs	r3, #0
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004088:	4b79      	ldr	r3, [pc, #484]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d00d      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004094:	2b08      	cmp	r3, #8
 8004096:	f200 80e1 	bhi.w	800425c <HAL_RCC_GetSysClockFreq+0x1ec>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x34>
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x3a>
 80040a2:	e0db      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b73      	ldr	r3, [pc, #460]	; (8004274 <HAL_RCC_GetSysClockFreq+0x204>)
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040a8:	e0db      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040aa:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_GetSysClockFreq+0x208>)
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ae:	e0d8      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b0:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040ba:	4b6d      	ldr	r3, [pc, #436]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d063      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c6:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	2200      	movs	r2, #0
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
 80040da:	2300      	movs	r3, #0
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
 80040de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	f04f 0000 	mov.w	r0, #0
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	0159      	lsls	r1, r3, #5
 80040f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f4:	0150      	lsls	r0, r2, #5
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4621      	mov	r1, r4
 80040fc:	1a51      	subs	r1, r2, r1
 80040fe:	6139      	str	r1, [r7, #16]
 8004100:	4629      	mov	r1, r5
 8004102:	eb63 0301 	sbc.w	r3, r3, r1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004114:	4659      	mov	r1, fp
 8004116:	018b      	lsls	r3, r1, #6
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800411e:	4651      	mov	r1, sl
 8004120:	018a      	lsls	r2, r1, #6
 8004122:	4651      	mov	r1, sl
 8004124:	ebb2 0801 	subs.w	r8, r2, r1
 8004128:	4659      	mov	r1, fp
 800412a:	eb63 0901 	sbc.w	r9, r3, r1
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004142:	4690      	mov	r8, r2
 8004144:	4699      	mov	r9, r3
 8004146:	4623      	mov	r3, r4
 8004148:	eb18 0303 	adds.w	r3, r8, r3
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	462b      	mov	r3, r5
 8004150:	eb49 0303 	adc.w	r3, r9, r3
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004162:	4629      	mov	r1, r5
 8004164:	024b      	lsls	r3, r1, #9
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800416c:	4621      	mov	r1, r4
 800416e:	024a      	lsls	r2, r1, #9
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	2200      	movs	r2, #0
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
 800417a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800417c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004180:	f7fc f85a 	bl	8000238 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	e058      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	2200      	movs	r2, #0
 8004196:	4618      	mov	r0, r3
 8004198:	4611      	mov	r1, r2
 800419a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	2300      	movs	r3, #0
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	0159      	lsls	r1, r3, #5
 80041b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ba:	0150      	lsls	r0, r2, #5
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4641      	mov	r1, r8
 80041c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e0:	ebb2 040a 	subs.w	r4, r2, sl
 80041e4:	eb63 050b 	sbc.w	r5, r3, fp
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	00eb      	lsls	r3, r5, #3
 80041f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f6:	00e2      	lsls	r2, r4, #3
 80041f8:	4614      	mov	r4, r2
 80041fa:	461d      	mov	r5, r3
 80041fc:	4643      	mov	r3, r8
 80041fe:	18e3      	adds	r3, r4, r3
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	464b      	mov	r3, r9
 8004204:	eb45 0303 	adc.w	r3, r5, r3
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004216:	4629      	mov	r1, r5
 8004218:	028b      	lsls	r3, r1, #10
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004220:	4621      	mov	r1, r4
 8004222:	028a      	lsls	r2, r1, #10
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	2200      	movs	r2, #0
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	61fa      	str	r2, [r7, #28]
 8004230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004234:	f7fc f800 	bl	8000238 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetSysClockFreq+0x204>)
 800425e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004264:	4618      	mov	r0, r3
 8004266:	3750      	adds	r7, #80	; 0x50
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200

0800427c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000018 	.word	0x20000018

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	080073dc 	.word	0x080073dc

080042bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042c0:	f7ff ffdc 	bl	800427c <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0b5b      	lsrs	r3, r3, #13
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4903      	ldr	r1, [pc, #12]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	080073dc 	.word	0x080073dc

080042e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d012      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800430c:	4b69      	ldr	r3, [pc, #420]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a68      	ldr	r2, [pc, #416]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004316:	6093      	str	r3, [r2, #8]
 8004318:	4b66      	ldr	r3, [pc, #408]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	4964      	ldr	r1, [pc, #400]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d017      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800433e:	4b5d      	ldr	r3, [pc, #372]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	4959      	ldr	r1, [pc, #356]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435c:	d101      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d017      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800437a:	4b4e      	ldr	r3, [pc, #312]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	494a      	ldr	r1, [pc, #296]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004398:	d101      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800439a:	2301      	movs	r3, #1
 800439c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 808b 	beq.w	80044de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c8:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	4a39      	ldr	r2, [pc, #228]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6413      	str	r3, [r2, #64]	; 0x40
 80043d4:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043e0:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a34      	ldr	r2, [pc, #208]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd fec4 	bl	8002178 <HAL_GetTick>
 80043f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fd fec0 	bl	8002178 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e38f      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004406:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004412:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d035      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	429a      	cmp	r2, r3
 800442e:	d02e      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004430:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004438:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004446:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	4a1a      	ldr	r2, [pc, #104]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004450:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004452:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004458:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d114      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd fe88 	bl	8002178 <HAL_GetTick>
 8004468:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	e00a      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446c:	f7fd fe84 	bl	8002178 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f241 3288 	movw	r2, #5000	; 0x1388
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e351      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0ee      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449a:	d111      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044aa:	400b      	ands	r3, r1
 80044ac:	4901      	ldr	r1, [pc, #4]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
 80044b2:	e00b      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40007000 	.word	0x40007000
 80044bc:	0ffffcff 	.word	0x0ffffcff
 80044c0:	4bac      	ldr	r3, [pc, #688]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4aab      	ldr	r2, [pc, #684]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ca:	6093      	str	r3, [r2, #8]
 80044cc:	4ba9      	ldr	r3, [pc, #676]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d8:	49a6      	ldr	r1, [pc, #664]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d010      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ea:	4ba2      	ldr	r3, [pc, #648]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f0:	4aa0      	ldr	r2, [pc, #640]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044fa:	4b9e      	ldr	r3, [pc, #632]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	499b      	ldr	r1, [pc, #620]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004518:	4b96      	ldr	r3, [pc, #600]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004526:	4993      	ldr	r1, [pc, #588]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453a:	4b8e      	ldr	r3, [pc, #568]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004548:	498a      	ldr	r1, [pc, #552]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800455c:	4b85      	ldr	r3, [pc, #532]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456a:	4982      	ldr	r1, [pc, #520]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800457e:	4b7d      	ldr	r3, [pc, #500]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4979      	ldr	r1, [pc, #484]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a0:	4b74      	ldr	r3, [pc, #464]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	4971      	ldr	r1, [pc, #452]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c2:	4b6c      	ldr	r3, [pc, #432]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f023 020c 	bic.w	r2, r3, #12
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d0:	4968      	ldr	r1, [pc, #416]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e4:	4b63      	ldr	r3, [pc, #396]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	4960      	ldr	r1, [pc, #384]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004606:	4b5b      	ldr	r3, [pc, #364]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004614:	4957      	ldr	r1, [pc, #348]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004628:	4b52      	ldr	r3, [pc, #328]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	494f      	ldr	r1, [pc, #316]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800464a:	4b4a      	ldr	r3, [pc, #296]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004658:	4946      	ldr	r1, [pc, #280]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800466c:	4b41      	ldr	r3, [pc, #260]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	493e      	ldr	r1, [pc, #248]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469c:	4935      	ldr	r1, [pc, #212]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046b0:	4b30      	ldr	r3, [pc, #192]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046be:	492d      	ldr	r1, [pc, #180]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d011      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e0:	4924      	ldr	r1, [pc, #144]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f0:	d101      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046f2:	2301      	movs	r3, #1
 80046f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004702:	2301      	movs	r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004720:	4914      	ldr	r1, [pc, #80]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004744:	490b      	ldr	r1, [pc, #44]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004768:	4902      	ldr	r1, [pc, #8]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004770:	e002      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00b      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004784:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	4986      	ldr	r1, [pc, #536]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047a8:	4b81      	ldr	r3, [pc, #516]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b8:	497d      	ldr	r1, [pc, #500]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d006      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80d6 	beq.w	8004980 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047d4:	4b76      	ldr	r3, [pc, #472]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a75      	ldr	r2, [pc, #468]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e0:	f7fd fcca 	bl	8002178 <HAL_GetTick>
 80047e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047e8:	f7fd fcc6 	bl	8002178 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e195      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047fa:	4b6d      	ldr	r3, [pc, #436]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d021      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11d      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800481a:	4b65      	ldr	r3, [pc, #404]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004828:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	0e1b      	lsrs	r3, r3, #24
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	019a      	lsls	r2, r3, #6
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	071b      	lsls	r3, r3, #28
 800484e:	4958      	ldr	r1, [pc, #352]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02e      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004880:	d129      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004882:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004890:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004896:	0f1b      	lsrs	r3, r3, #28
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	019a      	lsls	r2, r3, #6
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	061b      	lsls	r3, r3, #24
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	493e      	ldr	r1, [pc, #248]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048be:	4b3c      	ldr	r3, [pc, #240]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c4:	f023 021f 	bic.w	r2, r3, #31
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	3b01      	subs	r3, #1
 80048ce:	4938      	ldr	r1, [pc, #224]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01d      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048e2:	4b33      	ldr	r3, [pc, #204]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e8:	0e1b      	lsrs	r3, r3, #24
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048f0:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f6:	0f1b      	lsrs	r3, r3, #28
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	019a      	lsls	r2, r3, #6
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	431a      	orrs	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	061b      	lsls	r3, r3, #24
 8004910:	431a      	orrs	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	071b      	lsls	r3, r3, #28
 8004916:	4926      	ldr	r1, [pc, #152]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d011      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	019a      	lsls	r2, r3, #6
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	071b      	lsls	r3, r3, #28
 8004946:	491a      	ldr	r1, [pc, #104]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800494e:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495a:	f7fd fc0d 	bl	8002178 <HAL_GetTick>
 800495e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004962:	f7fd fc09 	bl	8002178 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b64      	cmp	r3, #100	; 0x64
 800496e:	d901      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e0d8      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b01      	cmp	r3, #1
 8004984:	f040 80ce 	bne.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004994:	f7fd fbf0 	bl	8002178 <HAL_GetTick>
 8004998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800499a:	e00b      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800499c:	f7fd fbec 	bl	8002178 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d904      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e0bb      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049b4:	4b5e      	ldr	r3, [pc, #376]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c0:	d0ec      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02e      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d12a      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049ea:	4b51      	ldr	r3, [pc, #324]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049f8:	4b4d      	ldr	r3, [pc, #308]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	0f1b      	lsrs	r3, r3, #28
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	019a      	lsls	r2, r3, #6
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	071b      	lsls	r3, r3, #28
 8004a1e:	4944      	ldr	r1, [pc, #272]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a26:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	493d      	ldr	r1, [pc, #244]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d022      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a54:	d11d      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	0e1b      	lsrs	r3, r3, #24
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a64:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	0f1b      	lsrs	r3, r3, #28
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	019a      	lsls	r2, r3, #6
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	071b      	lsls	r3, r3, #28
 8004a8a:	4929      	ldr	r1, [pc, #164]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d028      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	0e1b      	lsrs	r3, r3, #24
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aac:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	019a      	lsls	r2, r3, #6
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	061b      	lsls	r3, r3, #24
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	071b      	lsls	r3, r3, #28
 8004ad2:	4917      	ldr	r1, [pc, #92]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4911      	ldr	r1, [pc, #68]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afc:	f7fd fb3c 	bl	8002178 <HAL_GetTick>
 8004b00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b04:	f7fd fb38 	bl	8002178 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e007      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b22:	d1ef      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e049      	b.n	8004bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd f924 	bl	8001da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fb80 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_TIM_Base_Stop+0x38>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	f240 4344 	movw	r3, #1092	; 0x444
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <HAL_TIM_Base_Stop+0x38>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e054      	b.n	8004cf2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d01d      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a22      	ldr	r2, [pc, #136]	; (8004d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <HAL_TIM_Base_Start_IT+0xe8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d115      	bne.n	8004cdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_TIM_Base_Start_IT+0xec>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d015      	beq.n	8004cee <HAL_TIM_Base_Start_IT+0xbe>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d011      	beq.n	8004cee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cda:	e008      	b.n	8004cee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	e000      	b.n	8004cf0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40001800 	.word	0x40001800
 8004d1c:	00010007 	.word	0x00010007

08004d20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10f      	bne.n	8004d68 <HAL_TIM_Base_Stop_IT+0x48>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	f240 4344 	movw	r3, #1092	; 0x444
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_Base_Stop_IT+0x48>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e08f      	b.n	8004eb4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fc ff93 	bl	8001cd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6899      	ldr	r1, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <HAL_TIM_Encoder_Init+0x13c>)
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f000 fa51 	bl	8005278 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_TIM_Encoder_Init+0x140>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <HAL_TIM_Encoder_Init+0x144>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <HAL_TIM_Encoder_Init+0x148>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	011a      	lsls	r2, r3, #4
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	031b      	lsls	r3, r3, #12
 8004e40:	4313      	orrs	r3, r2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	4313      	orrs	r3, r2
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	fffebff8 	.word	0xfffebff8
 8004ec0:	fffffcfc 	.word	0xfffffcfc
 8004ec4:	fffff3f3 	.word	0xfffff3f3
 8004ec8:	ffff0f0f 	.word	0xffff0f0f

08004ecc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004edc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ee4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d110      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d102      	bne.n	8004f08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f02:	7b7b      	ldrb	r3, [r7, #13]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d001      	beq.n	8004f0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e069      	b.n	8004fe0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	e031      	b.n	8004f82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d110      	bne.n	8004f46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f24:	7bbb      	ldrb	r3, [r7, #14]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d102      	bne.n	8004f30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f2a:	7b3b      	ldrb	r3, [r7, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d001      	beq.n	8004f34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e055      	b.n	8004fe0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f44:	e01d      	b.n	8004f82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d108      	bne.n	8004f5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f52:	7b7b      	ldrb	r3, [r7, #13]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f58:	7b3b      	ldrb	r3, [r7, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d001      	beq.n	8004f62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e03e      	b.n	8004fe0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_TIM_Encoder_Start+0xc4>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d008      	beq.n	8004fa0 <HAL_TIM_Encoder_Start+0xd4>
 8004f8e:	e00f      	b.n	8004fb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2201      	movs	r2, #1
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fa0d 	bl	80053b8 <TIM_CCxChannelCmd>
      break;
 8004f9e:	e016      	b.n	8004fce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	2104      	movs	r1, #4
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fa05 	bl	80053b8 <TIM_CCxChannelCmd>
      break;
 8004fae:	e00e      	b.n	8004fce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f9fd 	bl	80053b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	2104      	movs	r1, #4
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f9f6 	bl	80053b8 <TIM_CCxChannelCmd>
      break;
 8004fcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d122      	bne.n	8005044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d11b      	bne.n	8005044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0202 	mvn.w	r2, #2
 8005014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f905 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8f7 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f908 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b04      	cmp	r3, #4
 8005050:	d122      	bne.n	8005098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b04      	cmp	r3, #4
 800505e:	d11b      	bne.n	8005098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0204 	mvn.w	r2, #4
 8005068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8db 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f8cd 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f8de 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d122      	bne.n	80050ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d11b      	bne.n	80050ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0208 	mvn.w	r2, #8
 80050bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2204      	movs	r2, #4
 80050c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f8b1 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 80050d8:	e005      	b.n	80050e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f8a3 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8b4 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d122      	bne.n	8005140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b10      	cmp	r3, #16
 8005106:	d11b      	bne.n	8005140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0210 	mvn.w	r2, #16
 8005110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2208      	movs	r2, #8
 8005116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f887 	bl	800523a <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f879 	bl	8005226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f88a 	bl	800524e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0201 	mvn.w	r2, #1
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc f98a 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b80      	cmp	r3, #128	; 0x80
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9ce 	bl	8005534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a6:	d10e      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d107      	bne.n	80051c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f9c1 	bl	8005548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d10e      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d107      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f838 	bl	8005262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d10e      	bne.n	800521e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b20      	cmp	r3, #32
 800520c:	d107      	bne.n	800521e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f06f 0220 	mvn.w	r2, #32
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f981 	bl	8005520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a40      	ldr	r2, [pc, #256]	; (800538c <TIM_Base_SetConfig+0x114>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d00f      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a3d      	ldr	r2, [pc, #244]	; (8005390 <TIM_Base_SetConfig+0x118>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3c      	ldr	r2, [pc, #240]	; (8005394 <TIM_Base_SetConfig+0x11c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3b      	ldr	r2, [pc, #236]	; (8005398 <TIM_Base_SetConfig+0x120>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3a      	ldr	r2, [pc, #232]	; (800539c <TIM_Base_SetConfig+0x124>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2f      	ldr	r2, [pc, #188]	; (800538c <TIM_Base_SetConfig+0x114>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d02b      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d027      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2c      	ldr	r2, [pc, #176]	; (8005390 <TIM_Base_SetConfig+0x118>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d023      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2b      	ldr	r2, [pc, #172]	; (8005394 <TIM_Base_SetConfig+0x11c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01f      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <TIM_Base_SetConfig+0x120>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01b      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a29      	ldr	r2, [pc, #164]	; (800539c <TIM_Base_SetConfig+0x124>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d017      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a28      	ldr	r2, [pc, #160]	; (80053a0 <TIM_Base_SetConfig+0x128>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <TIM_Base_SetConfig+0x12c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00f      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <TIM_Base_SetConfig+0x130>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00b      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <TIM_Base_SetConfig+0x134>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <TIM_Base_SetConfig+0x138>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <TIM_Base_SetConfig+0x13c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d108      	bne.n	800533c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a0a      	ldr	r2, [pc, #40]	; (800538c <TIM_Base_SetConfig+0x114>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a0c      	ldr	r2, [pc, #48]	; (800539c <TIM_Base_SetConfig+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d103      	bne.n	8005378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	615a      	str	r2, [r3, #20]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40010400 	.word	0x40010400
 80053a0:	40014000 	.word	0x40014000
 80053a4:	40014400 	.word	0x40014400
 80053a8:	40014800 	.word	0x40014800
 80053ac:	40001800 	.word	0x40001800
 80053b0:	40001c00 	.word	0x40001c00
 80053b4:	40002000 	.word	0x40002000

080053b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2201      	movs	r2, #1
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1a      	ldr	r2, [r3, #32]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	43db      	mvns	r3, r3
 80053da:	401a      	ands	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e06d      	b.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a30      	ldr	r2, [pc, #192]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2f      	ldr	r2, [pc, #188]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d108      	bne.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005456:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a20      	ldr	r2, [pc, #128]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d022      	beq.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d01d      	beq.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1d      	ldr	r2, [pc, #116]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d018      	beq.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d013      	beq.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00e      	beq.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a15      	ldr	r2, [pc, #84]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d009      	beq.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a16      	ldr	r2, [pc, #88]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d004      	beq.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a15      	ldr	r2, [pc, #84]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10c      	bne.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40010000 	.word	0x40010000
 8005508:	40010400 	.word	0x40010400
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40014000 	.word	0x40014000
 800551c:	40001800 	.word	0x40001800

08005520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e040      	b.n	80055f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc fca0 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2224      	movs	r2, #36	; 0x24
 8005588:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fc18 	bl	8005dd0 <UART_SetConfig>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e022      	b.n	80055f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fe70 	bl	8006298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fef7 	bl	80063dc <UART_CheckIdleState>
 80055ee:	4603      	mov	r3, r0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560c:	2b20      	cmp	r3, #32
 800560e:	f040 8081 	bne.w	8005714 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_UART_Transmit+0x26>
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e079      	b.n	8005716 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_UART_Transmit+0x38>
 800562c:	2302      	movs	r3, #2
 800562e:	e072      	b.n	8005716 <HAL_UART_Transmit+0x11e>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2221      	movs	r2, #33	; 0x21
 8005644:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005646:	f7fc fd97 	bl	8002178 <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d108      	bne.n	8005678 <HAL_UART_Transmit+0x80>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e003      	b.n	8005680 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005688:	e02c      	b.n	80056e4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 feea 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e038      	b.n	8005716 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10b      	bne.n	80056c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	3302      	adds	r3, #2
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	e007      	b.n	80056d2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1cc      	bne.n	800568a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 feb7 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e005      	b.n	8005716 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b08a      	sub	sp, #40	; 0x28
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	4613      	mov	r3, r2
 800572a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005730:	2b20      	cmp	r3, #32
 8005732:	d13d      	bne.n	80057b0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_UART_Receive_IT+0x22>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e036      	b.n	80057b2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_IT+0x34>
 800574e:	2302      	movs	r3, #2
 8005750:	e02f      	b.n	80057b2 <HAL_UART_Receive_IT+0x94>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	613b      	str	r3, [r7, #16]
   return(result);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	623b      	str	r3, [r7, #32]
 800578e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	69f9      	ldr	r1, [r7, #28]
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	61bb      	str	r3, [r7, #24]
   return(result);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e6      	bne.n	800576e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	461a      	mov	r2, r3
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 ff26 	bl	80065f8 <UART_Start_Receive_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	e000      	b.n	80057b2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3728      	adds	r7, #40	; 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b0ba      	sub	sp, #232	; 0xe8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80057ea:	4013      	ands	r3, r2
 80057ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d115      	bne.n	8005824 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00f      	beq.n	8005824 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 82a4 	beq.w	8005d62 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
      }
      return;
 8005822:	e29e      	b.n	8005d62 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8117 	beq.w	8005a5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800582e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800583a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800583e:	4b85      	ldr	r3, [pc, #532]	; (8005a54 <HAL_UART_IRQHandler+0x298>)
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 810a 	beq.w	8005a5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d011      	beq.n	8005878 <HAL_UART_IRQHandler+0xbc>
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2201      	movs	r2, #1
 8005866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586e:	f043 0201 	orr.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d011      	beq.n	80058a8 <HAL_UART_IRQHandler+0xec>
 8005884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2202      	movs	r2, #2
 8005896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589e:	f043 0204 	orr.w	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d011      	beq.n	80058d8 <HAL_UART_IRQHandler+0x11c>
 80058b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2204      	movs	r2, #4
 80058c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ce:	f043 0202 	orr.w	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d017      	beq.n	8005914 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2208      	movs	r2, #8
 8005902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <HAL_UART_IRQHandler+0x18a>
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 820a 	beq.w	8005d66 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00d      	beq.n	800597a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800595e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d005      	beq.n	800599e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005996:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800599a:	2b00      	cmp	r3, #0
 800599c:	d04f      	beq.n	8005a3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fef4 	bl	800678c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d141      	bne.n	8005a36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1d9      	bne.n	80059b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d013      	beq.n	8005a2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <HAL_UART_IRQHandler+0x29c>)
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fbcf 	bl	80031b6 <HAL_DMA_Abort_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d017      	beq.n	8005a4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	e00f      	b.n	8005a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f9ae 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	e00b      	b.n	8005a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9aa 	bl	8005d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	e007      	b.n	8005a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9a6 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a4c:	e18b      	b.n	8005d66 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	bf00      	nop
    return;
 8005a50:	e189      	b.n	8005d66 <HAL_UART_IRQHandler+0x5aa>
 8005a52:	bf00      	nop
 8005a54:	04000120 	.word	0x04000120
 8005a58:	08006853 	.word	0x08006853

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 8144 	bne.w	8005cee <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 813d 	beq.w	8005cee <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8136 	beq.w	8005cee <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2210      	movs	r2, #16
 8005a88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	f040 80b2 	bne.w	8005bfe <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 815d 	beq.w	8005d6a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aba:	429a      	cmp	r2, r3
 8005abc:	f080 8155 	bcs.w	8005d6a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad4:	f000 8085 	beq.w	8005be2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1da      	bne.n	8005ad8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3308      	adds	r3, #8
 8005b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e1      	bne.n	8005b22 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb2:	f023 0310 	bic.w	r3, r3, #16
 8005bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e4      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fd fa7a 	bl	80030d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f8d4 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bfc:	e0b5      	b.n	8005d6a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80a7 	beq.w	8005d6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005c20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80a2 	beq.w	8005d6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e4      	bne.n	8005c2a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c84:	633a      	str	r2, [r7, #48]	; 0x30
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e3      	bne.n	8005c60 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0310 	bic.w	r3, r3, #16
 8005cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e4      	bne.n	8005caa <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f85c 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cec:	e03f      	b.n	8005d6e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00e      	beq.n	8005d18 <HAL_UART_IRQHandler+0x55c>
 8005cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f853 	bl	8005dbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d16:	e02d      	b.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00e      	beq.n	8005d42 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01c      	beq.n	8005d72 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	4798      	blx	r3
    }
    return;
 8005d40:	e017      	b.n	8005d72 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fd8f 	bl	800687e <UART_EndTransmit_IT>
    return;
 8005d60:	e008      	b.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d62:	bf00      	nop
 8005d64:	e006      	b.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005d66:	bf00      	nop
 8005d68:	e004      	b.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005d72:	bf00      	nop
  }

}
 8005d74:	37e8      	adds	r7, #232	; 0xe8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4ba6      	ldr	r3, [pc, #664]	; (8006094 <UART_SetConfig+0x2c4>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	6979      	ldr	r1, [r7, #20]
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a94      	ldr	r2, [pc, #592]	; (8006098 <UART_SetConfig+0x2c8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d120      	bne.n	8005e8e <UART_SetConfig+0xbe>
 8005e4c:	4b93      	ldr	r3, [pc, #588]	; (800609c <UART_SetConfig+0x2cc>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d816      	bhi.n	8005e88 <UART_SetConfig+0xb8>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x90>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e71 	.word	0x08005e71
 8005e64:	08005e7d 	.word	0x08005e7d
 8005e68:	08005e77 	.word	0x08005e77
 8005e6c:	08005e83 	.word	0x08005e83
 8005e70:	2301      	movs	r3, #1
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e150      	b.n	8006118 <UART_SetConfig+0x348>
 8005e76:	2302      	movs	r3, #2
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e14d      	b.n	8006118 <UART_SetConfig+0x348>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e14a      	b.n	8006118 <UART_SetConfig+0x348>
 8005e82:	2308      	movs	r3, #8
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	e147      	b.n	8006118 <UART_SetConfig+0x348>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e144      	b.n	8006118 <UART_SetConfig+0x348>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a83      	ldr	r2, [pc, #524]	; (80060a0 <UART_SetConfig+0x2d0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d132      	bne.n	8005efe <UART_SetConfig+0x12e>
 8005e98:	4b80      	ldr	r3, [pc, #512]	; (800609c <UART_SetConfig+0x2cc>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d828      	bhi.n	8005ef8 <UART_SetConfig+0x128>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0xdc>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005ef9 	.word	0x08005ef9
 8005eb4:	08005ef9 	.word	0x08005ef9
 8005eb8:	08005ef9 	.word	0x08005ef9
 8005ebc:	08005eed 	.word	0x08005eed
 8005ec0:	08005ef9 	.word	0x08005ef9
 8005ec4:	08005ef9 	.word	0x08005ef9
 8005ec8:	08005ef9 	.word	0x08005ef9
 8005ecc:	08005ee7 	.word	0x08005ee7
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005ef3 	.word	0x08005ef3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e118      	b.n	8006118 <UART_SetConfig+0x348>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e115      	b.n	8006118 <UART_SetConfig+0x348>
 8005eec:	2304      	movs	r3, #4
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e112      	b.n	8006118 <UART_SetConfig+0x348>
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e10f      	b.n	8006118 <UART_SetConfig+0x348>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e10c      	b.n	8006118 <UART_SetConfig+0x348>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a68      	ldr	r2, [pc, #416]	; (80060a4 <UART_SetConfig+0x2d4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d120      	bne.n	8005f4a <UART_SetConfig+0x17a>
 8005f08:	4b64      	ldr	r3, [pc, #400]	; (800609c <UART_SetConfig+0x2cc>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f12:	2b30      	cmp	r3, #48	; 0x30
 8005f14:	d013      	beq.n	8005f3e <UART_SetConfig+0x16e>
 8005f16:	2b30      	cmp	r3, #48	; 0x30
 8005f18:	d814      	bhi.n	8005f44 <UART_SetConfig+0x174>
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d009      	beq.n	8005f32 <UART_SetConfig+0x162>
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d810      	bhi.n	8005f44 <UART_SetConfig+0x174>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <UART_SetConfig+0x15c>
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d006      	beq.n	8005f38 <UART_SetConfig+0x168>
 8005f2a:	e00b      	b.n	8005f44 <UART_SetConfig+0x174>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e0f2      	b.n	8006118 <UART_SetConfig+0x348>
 8005f32:	2302      	movs	r3, #2
 8005f34:	77fb      	strb	r3, [r7, #31]
 8005f36:	e0ef      	b.n	8006118 <UART_SetConfig+0x348>
 8005f38:	2304      	movs	r3, #4
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e0ec      	b.n	8006118 <UART_SetConfig+0x348>
 8005f3e:	2308      	movs	r3, #8
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e0e9      	b.n	8006118 <UART_SetConfig+0x348>
 8005f44:	2310      	movs	r3, #16
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e0e6      	b.n	8006118 <UART_SetConfig+0x348>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a56      	ldr	r2, [pc, #344]	; (80060a8 <UART_SetConfig+0x2d8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d120      	bne.n	8005f96 <UART_SetConfig+0x1c6>
 8005f54:	4b51      	ldr	r3, [pc, #324]	; (800609c <UART_SetConfig+0x2cc>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f60:	d013      	beq.n	8005f8a <UART_SetConfig+0x1ba>
 8005f62:	2bc0      	cmp	r3, #192	; 0xc0
 8005f64:	d814      	bhi.n	8005f90 <UART_SetConfig+0x1c0>
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d009      	beq.n	8005f7e <UART_SetConfig+0x1ae>
 8005f6a:	2b80      	cmp	r3, #128	; 0x80
 8005f6c:	d810      	bhi.n	8005f90 <UART_SetConfig+0x1c0>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <UART_SetConfig+0x1a8>
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	d006      	beq.n	8005f84 <UART_SetConfig+0x1b4>
 8005f76:	e00b      	b.n	8005f90 <UART_SetConfig+0x1c0>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e0cc      	b.n	8006118 <UART_SetConfig+0x348>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e0c9      	b.n	8006118 <UART_SetConfig+0x348>
 8005f84:	2304      	movs	r3, #4
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e0c6      	b.n	8006118 <UART_SetConfig+0x348>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e0c3      	b.n	8006118 <UART_SetConfig+0x348>
 8005f90:	2310      	movs	r3, #16
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e0c0      	b.n	8006118 <UART_SetConfig+0x348>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a44      	ldr	r2, [pc, #272]	; (80060ac <UART_SetConfig+0x2dc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d125      	bne.n	8005fec <UART_SetConfig+0x21c>
 8005fa0:	4b3e      	ldr	r3, [pc, #248]	; (800609c <UART_SetConfig+0x2cc>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fae:	d017      	beq.n	8005fe0 <UART_SetConfig+0x210>
 8005fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb4:	d817      	bhi.n	8005fe6 <UART_SetConfig+0x216>
 8005fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fba:	d00b      	beq.n	8005fd4 <UART_SetConfig+0x204>
 8005fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc0:	d811      	bhi.n	8005fe6 <UART_SetConfig+0x216>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <UART_SetConfig+0x1fe>
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fca:	d006      	beq.n	8005fda <UART_SetConfig+0x20a>
 8005fcc:	e00b      	b.n	8005fe6 <UART_SetConfig+0x216>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e0a1      	b.n	8006118 <UART_SetConfig+0x348>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e09e      	b.n	8006118 <UART_SetConfig+0x348>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e09b      	b.n	8006118 <UART_SetConfig+0x348>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e098      	b.n	8006118 <UART_SetConfig+0x348>
 8005fe6:	2310      	movs	r3, #16
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e095      	b.n	8006118 <UART_SetConfig+0x348>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <UART_SetConfig+0x2e0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d125      	bne.n	8006042 <UART_SetConfig+0x272>
 8005ff6:	4b29      	ldr	r3, [pc, #164]	; (800609c <UART_SetConfig+0x2cc>)
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006004:	d017      	beq.n	8006036 <UART_SetConfig+0x266>
 8006006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800600a:	d817      	bhi.n	800603c <UART_SetConfig+0x26c>
 800600c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006010:	d00b      	beq.n	800602a <UART_SetConfig+0x25a>
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006016:	d811      	bhi.n	800603c <UART_SetConfig+0x26c>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <UART_SetConfig+0x254>
 800601c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006020:	d006      	beq.n	8006030 <UART_SetConfig+0x260>
 8006022:	e00b      	b.n	800603c <UART_SetConfig+0x26c>
 8006024:	2301      	movs	r3, #1
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e076      	b.n	8006118 <UART_SetConfig+0x348>
 800602a:	2302      	movs	r3, #2
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e073      	b.n	8006118 <UART_SetConfig+0x348>
 8006030:	2304      	movs	r3, #4
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e070      	b.n	8006118 <UART_SetConfig+0x348>
 8006036:	2308      	movs	r3, #8
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e06d      	b.n	8006118 <UART_SetConfig+0x348>
 800603c:	2310      	movs	r3, #16
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e06a      	b.n	8006118 <UART_SetConfig+0x348>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <UART_SetConfig+0x2e4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d138      	bne.n	80060be <UART_SetConfig+0x2ee>
 800604c:	4b13      	ldr	r3, [pc, #76]	; (800609c <UART_SetConfig+0x2cc>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006056:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800605a:	d017      	beq.n	800608c <UART_SetConfig+0x2bc>
 800605c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006060:	d82a      	bhi.n	80060b8 <UART_SetConfig+0x2e8>
 8006062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006066:	d00b      	beq.n	8006080 <UART_SetConfig+0x2b0>
 8006068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606c:	d824      	bhi.n	80060b8 <UART_SetConfig+0x2e8>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <UART_SetConfig+0x2aa>
 8006072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006076:	d006      	beq.n	8006086 <UART_SetConfig+0x2b6>
 8006078:	e01e      	b.n	80060b8 <UART_SetConfig+0x2e8>
 800607a:	2300      	movs	r3, #0
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e04b      	b.n	8006118 <UART_SetConfig+0x348>
 8006080:	2302      	movs	r3, #2
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e048      	b.n	8006118 <UART_SetConfig+0x348>
 8006086:	2304      	movs	r3, #4
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e045      	b.n	8006118 <UART_SetConfig+0x348>
 800608c:	2308      	movs	r3, #8
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e042      	b.n	8006118 <UART_SetConfig+0x348>
 8006092:	bf00      	nop
 8006094:	efff69f3 	.word	0xefff69f3
 8006098:	40011000 	.word	0x40011000
 800609c:	40023800 	.word	0x40023800
 80060a0:	40004400 	.word	0x40004400
 80060a4:	40004800 	.word	0x40004800
 80060a8:	40004c00 	.word	0x40004c00
 80060ac:	40005000 	.word	0x40005000
 80060b0:	40011400 	.word	0x40011400
 80060b4:	40007800 	.word	0x40007800
 80060b8:	2310      	movs	r3, #16
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e02c      	b.n	8006118 <UART_SetConfig+0x348>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a72      	ldr	r2, [pc, #456]	; (800628c <UART_SetConfig+0x4bc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d125      	bne.n	8006114 <UART_SetConfig+0x344>
 80060c8:	4b71      	ldr	r3, [pc, #452]	; (8006290 <UART_SetConfig+0x4c0>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060d6:	d017      	beq.n	8006108 <UART_SetConfig+0x338>
 80060d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060dc:	d817      	bhi.n	800610e <UART_SetConfig+0x33e>
 80060de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e2:	d00b      	beq.n	80060fc <UART_SetConfig+0x32c>
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d811      	bhi.n	800610e <UART_SetConfig+0x33e>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <UART_SetConfig+0x326>
 80060ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060f2:	d006      	beq.n	8006102 <UART_SetConfig+0x332>
 80060f4:	e00b      	b.n	800610e <UART_SetConfig+0x33e>
 80060f6:	2300      	movs	r3, #0
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e00d      	b.n	8006118 <UART_SetConfig+0x348>
 80060fc:	2302      	movs	r3, #2
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e00a      	b.n	8006118 <UART_SetConfig+0x348>
 8006102:	2304      	movs	r3, #4
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e007      	b.n	8006118 <UART_SetConfig+0x348>
 8006108:	2308      	movs	r3, #8
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e004      	b.n	8006118 <UART_SetConfig+0x348>
 800610e:	2310      	movs	r3, #16
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e001      	b.n	8006118 <UART_SetConfig+0x348>
 8006114:	2310      	movs	r3, #16
 8006116:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006120:	d15b      	bne.n	80061da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006122:	7ffb      	ldrb	r3, [r7, #31]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d828      	bhi.n	800617a <UART_SetConfig+0x3aa>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <UART_SetConfig+0x360>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006155 	.word	0x08006155
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006165 	.word	0x08006165
 800613c:	0800617b 	.word	0x0800617b
 8006140:	0800616b 	.word	0x0800616b
 8006144:	0800617b 	.word	0x0800617b
 8006148:	0800617b 	.word	0x0800617b
 800614c:	0800617b 	.word	0x0800617b
 8006150:	08006173 	.word	0x08006173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006154:	f7fe f89e 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8006158:	61b8      	str	r0, [r7, #24]
        break;
 800615a:	e013      	b.n	8006184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800615c:	f7fe f8ae 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8006160:	61b8      	str	r0, [r7, #24]
        break;
 8006162:	e00f      	b.n	8006184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006164:	4b4b      	ldr	r3, [pc, #300]	; (8006294 <UART_SetConfig+0x4c4>)
 8006166:	61bb      	str	r3, [r7, #24]
        break;
 8006168:	e00c      	b.n	8006184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616a:	f7fd ff81 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800616e:	61b8      	str	r0, [r7, #24]
        break;
 8006170:	e008      	b.n	8006184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	61bb      	str	r3, [r7, #24]
        break;
 8006178:	e004      	b.n	8006184 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	77bb      	strb	r3, [r7, #30]
        break;
 8006182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d074      	beq.n	8006274 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	005a      	lsls	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	441a      	add	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b0f      	cmp	r3, #15
 80061a4:	d916      	bls.n	80061d4 <UART_SetConfig+0x404>
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ac:	d212      	bcs.n	80061d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f023 030f 	bic.w	r3, r3, #15
 80061b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	89fb      	ldrh	r3, [r7, #14]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	89fa      	ldrh	r2, [r7, #14]
 80061d0:	60da      	str	r2, [r3, #12]
 80061d2:	e04f      	b.n	8006274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	77bb      	strb	r3, [r7, #30]
 80061d8:	e04c      	b.n	8006274 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061da:	7ffb      	ldrb	r3, [r7, #31]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d828      	bhi.n	8006232 <UART_SetConfig+0x462>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <UART_SetConfig+0x418>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	08006233 	.word	0x08006233
 80061f8:	08006223 	.word	0x08006223
 80061fc:	08006233 	.word	0x08006233
 8006200:	08006233 	.word	0x08006233
 8006204:	08006233 	.word	0x08006233
 8006208:	0800622b 	.word	0x0800622b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800620c:	f7fe f842 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8006210:	61b8      	str	r0, [r7, #24]
        break;
 8006212:	e013      	b.n	800623c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006214:	f7fe f852 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8006218:	61b8      	str	r0, [r7, #24]
        break;
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800621c:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <UART_SetConfig+0x4c4>)
 800621e:	61bb      	str	r3, [r7, #24]
        break;
 8006220:	e00c      	b.n	800623c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006222:	f7fd ff25 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8006226:	61b8      	str	r0, [r7, #24]
        break;
 8006228:	e008      	b.n	800623c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622e:	61bb      	str	r3, [r7, #24]
        break;
 8006230:	e004      	b.n	800623c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	77bb      	strb	r3, [r7, #30]
        break;
 800623a:	bf00      	nop
    }

    if (pclk != 0U)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d018      	beq.n	8006274 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	085a      	lsrs	r2, r3, #1
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	441a      	add	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b0f      	cmp	r3, #15
 800625a:	d909      	bls.n	8006270 <UART_SetConfig+0x4a0>
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006262:	d205      	bcs.n	8006270 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	b29a      	uxth	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e001      	b.n	8006274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006280:	7fbb      	ldrb	r3, [r7, #30]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40007c00 	.word	0x40007c00
 8006290:	40023800 	.word	0x40023800
 8006294:	00f42400 	.word	0x00f42400

08006298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006396:	d10a      	bne.n	80063ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063ec:	f7fb fec4 	bl	8002178 <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d10e      	bne.n	800641e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f82d 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e023      	b.n	8006466 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b04      	cmp	r3, #4
 800642a:	d10e      	bne.n	800644a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800642c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f817 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e00d      	b.n	8006466 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b09c      	sub	sp, #112	; 0x70
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647e:	e0a5      	b.n	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	f000 80a1 	beq.w	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648a:	f7fb fe75 	bl	8002178 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006496:	429a      	cmp	r2, r3
 8006498:	d302      	bcc.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800649a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800649c:	2b00      	cmp	r3, #0
 800649e:	d13e      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064b4:	667b      	str	r3, [r7, #100]	; 0x64
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	663b      	str	r3, [r7, #96]	; 0x60
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80064f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e5      	bne.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e067      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d04f      	beq.n	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653a:	d147      	bne.n	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006544:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800655a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
 8006566:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800656a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e6      	bne.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	613b      	str	r3, [r7, #16]
   return(result);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006598:	623a      	str	r2, [r7, #32]
 800659a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	69f9      	ldr	r1, [r7, #28]
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e010      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	69da      	ldr	r2, [r3, #28]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4013      	ands	r3, r2
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	f43f af4a 	beq.w	8006480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3770      	adds	r7, #112	; 0x70
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b097      	sub	sp, #92	; 0x5c
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662a:	d10e      	bne.n	800664a <UART_Start_Receive_IT+0x52>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <UART_Start_Receive_IT+0x48>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f240 12ff 	movw	r2, #511	; 0x1ff
 800663a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800663e:	e02d      	b.n	800669c <UART_Start_Receive_IT+0xa4>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	22ff      	movs	r2, #255	; 0xff
 8006644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006648:	e028      	b.n	800669c <UART_Start_Receive_IT+0xa4>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <UART_Start_Receive_IT+0x76>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d104      	bne.n	8006664 <UART_Start_Receive_IT+0x6c>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	22ff      	movs	r2, #255	; 0xff
 800665e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006662:	e01b      	b.n	800669c <UART_Start_Receive_IT+0xa4>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	227f      	movs	r2, #127	; 0x7f
 8006668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800666c:	e016      	b.n	800669c <UART_Start_Receive_IT+0xa4>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006676:	d10d      	bne.n	8006694 <UART_Start_Receive_IT+0x9c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <UART_Start_Receive_IT+0x92>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	227f      	movs	r2, #127	; 0x7f
 8006684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006688:	e008      	b.n	800669c <UART_Start_Receive_IT+0xa4>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	223f      	movs	r2, #63	; 0x3f
 800668e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006692:	e003      	b.n	800669c <UART_Start_Receive_IT+0xa4>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2222      	movs	r2, #34	; 0x22
 80066a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	657b      	str	r3, [r7, #84]	; 0x54
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80066cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e6:	d107      	bne.n	80066f8 <UART_Start_Receive_IT+0x100>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a24      	ldr	r2, [pc, #144]	; (8006784 <UART_Start_Receive_IT+0x18c>)
 80066f4:	665a      	str	r2, [r3, #100]	; 0x64
 80066f6:	e002      	b.n	80066fe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a23      	ldr	r2, [pc, #140]	; (8006788 <UART_Start_Receive_IT+0x190>)
 80066fc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d019      	beq.n	8006742 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
 800672e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e6      	bne.n	800670e <UART_Start_Receive_IT+0x116>
 8006740:	e018      	b.n	8006774 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	613b      	str	r3, [r7, #16]
   return(result);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f043 0320 	orr.w	r3, r3, #32
 8006756:	653b      	str	r3, [r7, #80]	; 0x50
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	69f9      	ldr	r1, [r7, #28]
 8006766:	6a3a      	ldr	r2, [r7, #32]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	61bb      	str	r3, [r7, #24]
   return(result);
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	375c      	adds	r7, #92	; 0x5c
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	08006a2f 	.word	0x08006a2f
 8006788:	080068d3 	.word	0x080068d3

0800678c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b095      	sub	sp, #84	; 0x54
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b2:	643b      	str	r3, [r7, #64]	; 0x40
 80067b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e6      	bne.n	8006794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3308      	adds	r3, #8
 80067cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3308      	adds	r3, #8
 80067e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e5      	bne.n	80067c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d118      	bne.n	8006834 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f023 0310 	bic.w	r3, r3, #16
 8006816:	647b      	str	r3, [r7, #68]	; 0x44
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6979      	ldr	r1, [r7, #20]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	613b      	str	r3, [r7, #16]
   return(result);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e6      	bne.n	8006802 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006846:	bf00      	nop
 8006848:	3754      	adds	r7, #84	; 0x54
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff fa8d 	bl	8005d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b088      	sub	sp, #32
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	60bb      	str	r3, [r7, #8]
   return(result);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689a:	61fb      	str	r3, [r7, #28]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6979      	ldr	r1, [r7, #20]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	613b      	str	r3, [r7, #16]
   return(result);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e6      	bne.n	8006886 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff fa59 	bl	8005d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ca:	bf00      	nop
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b096      	sub	sp, #88	; 0x58
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e8:	2b22      	cmp	r3, #34	; 0x22
 80068ea:	f040 8094 	bne.w	8006a16 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80068fc:	b2d9      	uxtb	r1, r3
 80068fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006902:	b2da      	uxtb	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	400a      	ands	r2, r1
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d177      	bne.n	8006a26 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800694a:	653b      	str	r3, [r7, #80]	; 0x50
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006954:	647b      	str	r3, [r7, #68]	; 0x44
 8006956:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800695a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	623b      	str	r3, [r7, #32]
   return(result);
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006988:	633a      	str	r2, [r7, #48]	; 0x30
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800698e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d12e      	bne.n	8006a0e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0310 	bic.w	r3, r3, #16
 80069ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d4:	61fb      	str	r3, [r7, #28]
 80069d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	69b9      	ldr	r1, [r7, #24]
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	617b      	str	r3, [r7, #20]
   return(result);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e6      	bne.n	80069b6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d103      	bne.n	80069fe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2210      	movs	r2, #16
 80069fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff f9cc 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a0c:	e00b      	b.n	8006a26 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fa feb4 	bl	800177c <HAL_UART_RxCpltCallback>
}
 8006a14:	e007      	b.n	8006a26 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0208 	orr.w	r2, r2, #8
 8006a24:	619a      	str	r2, [r3, #24]
}
 8006a26:	bf00      	nop
 8006a28:	3758      	adds	r7, #88	; 0x58
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b096      	sub	sp, #88	; 0x58
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a44:	2b22      	cmp	r3, #34	; 0x22
 8006a46:	f040 8094 	bne.w	8006b72 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a5a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006a5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a62:	4013      	ands	r3, r2
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	1c9a      	adds	r2, r3, #2
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d177      	bne.n	8006b82 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e6      	bne.n	8006a92 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d12e      	bne.n	8006b6a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	647b      	str	r3, [r7, #68]	; 0x44
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d103      	bne.n	8006b5a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2210      	movs	r2, #16
 8006b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff f91e 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b68:	e00b      	b.n	8006b82 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fa fe06 	bl	800177c <HAL_UART_RxCpltCallback>
}
 8006b70:	e007      	b.n	8006b82 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699a      	ldr	r2, [r3, #24]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0208 	orr.w	r2, r2, #8
 8006b80:	619a      	str	r2, [r3, #24]
}
 8006b82:	bf00      	nop
 8006b84:	3758      	adds	r7, #88	; 0x58
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	f107 001c 	add.w	r0, r7, #28
 8006b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d120      	bne.n	8006be6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	4b20      	ldr	r3, [pc, #128]	; (8006c38 <USB_CoreInit+0xac>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d105      	bne.n	8006bda <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa92 	bl	8007104 <USB_CoreReset>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
 8006be4:	e010      	b.n	8006c08 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa86 	bl	8007104 <USB_CoreReset>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d10b      	bne.n	8006c26 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f043 0206 	orr.w	r2, r3, #6
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f043 0220 	orr.w	r2, r3, #32
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c32:	b004      	add	sp, #16
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	ffbdffbf 	.word	0xffbdffbf

08006c3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 0201 	bic.w	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d115      	bne.n	8006cac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f7fb fa7f 	bl	8002190 <HAL_Delay>
      ms++;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3301      	adds	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa25 	bl	80070e8 <USB_GetMode>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d01e      	beq.n	8006ce2 <USB_SetCurrentMode+0x84>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b31      	cmp	r3, #49	; 0x31
 8006ca8:	d9f0      	bls.n	8006c8c <USB_SetCurrentMode+0x2e>
 8006caa:	e01a      	b.n	8006ce2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d115      	bne.n	8006cde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cbe:	2001      	movs	r0, #1
 8006cc0:	f7fb fa66 	bl	8002190 <HAL_Delay>
      ms++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa0c 	bl	80070e8 <USB_GetMode>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <USB_SetCurrentMode+0x84>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b31      	cmp	r3, #49	; 0x31
 8006cda:	d9f0      	bls.n	8006cbe <USB_SetCurrentMode+0x60>
 8006cdc:	e001      	b.n	8006ce2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e005      	b.n	8006cee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b32      	cmp	r3, #50	; 0x32
 8006ce6:	d101      	bne.n	8006cec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b086      	sub	sp, #24
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	e009      	b.n	8006d2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3340      	adds	r3, #64	; 0x40
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	2200      	movs	r2, #0
 8006d24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b0e      	cmp	r3, #14
 8006d30:	d9f2      	bls.n	8006d18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11c      	bne.n	8006d72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d46:	f043 0302 	orr.w	r3, r3, #2
 8006d4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e005      	b.n	8006d7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d90:	4619      	mov	r1, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d98:	461a      	mov	r2, r3
 8006d9a:	680b      	ldr	r3, [r1, #0]
 8006d9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d10c      	bne.n	8006dbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006daa:	2100      	movs	r1, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f961 	bl	8007074 <USB_SetDevSpeed>
 8006db2:	e008      	b.n	8006dc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006db4:	2101      	movs	r1, #1
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f95c 	bl	8007074 <USB_SetDevSpeed>
 8006dbc:	e003      	b.n	8006dc6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006dbe:	2103      	movs	r1, #3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f957 	bl	8007074 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dc6:	2110      	movs	r1, #16
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8f3 	bl	8006fb4 <USB_FlushTxFifo>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f91d 	bl	8007018 <USB_FlushRxFifo>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	461a      	mov	r2, r3
 8006df0:	2300      	movs	r3, #0
 8006df2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	461a      	mov	r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	e043      	b.n	8006e9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e28:	d118      	bne.n	8006e5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	e013      	b.n	8006e6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	461a      	mov	r2, r3
 8006e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	e008      	b.n	8006e6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3301      	adds	r3, #1
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d3b7      	bcc.n	8006e12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	e043      	b.n	8006f30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ebe:	d118      	bne.n	8006ef2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e013      	b.n	8006f04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	e008      	b.n	8006f04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efe:	461a      	mov	r2, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	461a      	mov	r2, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d3b7      	bcc.n	8006ea8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f043 0210 	orr.w	r2, r3, #16
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <USB_DevInit+0x2b4>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f043 0208 	orr.w	r2, r3, #8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d105      	bne.n	8006f9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <USB_DevInit+0x2b8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fa8:	b004      	add	sp, #16
 8006faa:	4770      	bx	lr
 8006fac:	803c3800 	.word	0x803c3800
 8006fb0:	40000004 	.word	0x40000004

08006fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	4a12      	ldr	r2, [pc, #72]	; (8007014 <USB_FlushTxFifo+0x60>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e01a      	b.n	8007008 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	daf3      	bge.n	8006fc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	019b      	lsls	r3, r3, #6
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	4a08      	ldr	r2, [pc, #32]	; (8007014 <USB_FlushTxFifo+0x60>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d901      	bls.n	8006ffa <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e006      	b.n	8007008 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b20      	cmp	r3, #32
 8007004:	d0f1      	beq.n	8006fea <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	00030d40 	.word	0x00030d40

08007018 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	4a11      	ldr	r2, [pc, #68]	; (8007070 <USB_FlushRxFifo+0x58>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d901      	bls.n	8007034 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e017      	b.n	8007064 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	daf3      	bge.n	8007024 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2210      	movs	r2, #16
 8007044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	4a08      	ldr	r2, [pc, #32]	; (8007070 <USB_FlushRxFifo+0x58>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e006      	b.n	8007064 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0310 	and.w	r3, r3, #16
 800705e:	2b10      	cmp	r3, #16
 8007060:	d0f1      	beq.n	8007046 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	00030d40 	.word	0x00030d40

08007074 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	68f9      	ldr	r1, [r7, #12]
 8007090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007094:	4313      	orrs	r3, r2
 8007096:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b085      	sub	sp, #20
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070c0:	f023 0303 	bic.w	r3, r3, #3
 80070c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070d4:	f043 0302 	orr.w	r3, r3, #2
 80070d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	f003 0301 	and.w	r3, r3, #1
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	4a13      	ldr	r2, [pc, #76]	; (8007164 <USB_CoreReset+0x60>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d901      	bls.n	8007120 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e01a      	b.n	8007156 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	daf3      	bge.n	8007110 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f043 0201 	orr.w	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	4a09      	ldr	r2, [pc, #36]	; (8007164 <USB_CoreReset+0x60>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e006      	b.n	8007156 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d0f1      	beq.n	8007138 <USB_CoreReset+0x34>

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	00030d40 	.word	0x00030d40

08007168 <atoi>:
 8007168:	220a      	movs	r2, #10
 800716a:	2100      	movs	r1, #0
 800716c:	f000 b8c8 	b.w	8007300 <strtol>

08007170 <__errno>:
 8007170:	4b01      	ldr	r3, [pc, #4]	; (8007178 <__errno+0x8>)
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000024 	.word	0x20000024

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f000 f8c0 	bl	8007314 <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	080074f0 	.word	0x080074f0
 80071b8:	080074f0 	.word	0x080074f0
 80071bc:	080074f0 	.word	0x080074f0
 80071c0:	080074f4 	.word	0x080074f4

080071c4 <memset>:
 80071c4:	4402      	add	r2, r0
 80071c6:	4603      	mov	r3, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d100      	bne.n	80071ce <memset+0xa>
 80071cc:	4770      	bx	lr
 80071ce:	f803 1b01 	strb.w	r1, [r3], #1
 80071d2:	e7f9      	b.n	80071c8 <memset+0x4>

080071d4 <strncmp>:
 80071d4:	b510      	push	{r4, lr}
 80071d6:	b17a      	cbz	r2, 80071f8 <strncmp+0x24>
 80071d8:	4603      	mov	r3, r0
 80071da:	3901      	subs	r1, #1
 80071dc:	1884      	adds	r4, r0, r2
 80071de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80071e6:	4290      	cmp	r0, r2
 80071e8:	d101      	bne.n	80071ee <strncmp+0x1a>
 80071ea:	42a3      	cmp	r3, r4
 80071ec:	d101      	bne.n	80071f2 <strncmp+0x1e>
 80071ee:	1a80      	subs	r0, r0, r2
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d1f3      	bne.n	80071de <strncmp+0xa>
 80071f6:	e7fa      	b.n	80071ee <strncmp+0x1a>
 80071f8:	4610      	mov	r0, r2
 80071fa:	e7f9      	b.n	80071f0 <strncmp+0x1c>

080071fc <_strtol_l.constprop.0>:
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007202:	d001      	beq.n	8007208 <_strtol_l.constprop.0+0xc>
 8007204:	2b24      	cmp	r3, #36	; 0x24
 8007206:	d906      	bls.n	8007216 <_strtol_l.constprop.0+0x1a>
 8007208:	f7ff ffb2 	bl	8007170 <__errno>
 800720c:	2316      	movs	r3, #22
 800720e:	6003      	str	r3, [r0, #0]
 8007210:	2000      	movs	r0, #0
 8007212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007216:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072fc <_strtol_l.constprop.0+0x100>
 800721a:	460d      	mov	r5, r1
 800721c:	462e      	mov	r6, r5
 800721e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007222:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007226:	f017 0708 	ands.w	r7, r7, #8
 800722a:	d1f7      	bne.n	800721c <_strtol_l.constprop.0+0x20>
 800722c:	2c2d      	cmp	r4, #45	; 0x2d
 800722e:	d132      	bne.n	8007296 <_strtol_l.constprop.0+0x9a>
 8007230:	782c      	ldrb	r4, [r5, #0]
 8007232:	2701      	movs	r7, #1
 8007234:	1cb5      	adds	r5, r6, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d05b      	beq.n	80072f2 <_strtol_l.constprop.0+0xf6>
 800723a:	2b10      	cmp	r3, #16
 800723c:	d109      	bne.n	8007252 <_strtol_l.constprop.0+0x56>
 800723e:	2c30      	cmp	r4, #48	; 0x30
 8007240:	d107      	bne.n	8007252 <_strtol_l.constprop.0+0x56>
 8007242:	782c      	ldrb	r4, [r5, #0]
 8007244:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007248:	2c58      	cmp	r4, #88	; 0x58
 800724a:	d14d      	bne.n	80072e8 <_strtol_l.constprop.0+0xec>
 800724c:	786c      	ldrb	r4, [r5, #1]
 800724e:	2310      	movs	r3, #16
 8007250:	3502      	adds	r5, #2
 8007252:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007256:	f108 38ff 	add.w	r8, r8, #4294967295
 800725a:	f04f 0c00 	mov.w	ip, #0
 800725e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007262:	4666      	mov	r6, ip
 8007264:	fb03 8a19 	mls	sl, r3, r9, r8
 8007268:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800726c:	f1be 0f09 	cmp.w	lr, #9
 8007270:	d816      	bhi.n	80072a0 <_strtol_l.constprop.0+0xa4>
 8007272:	4674      	mov	r4, lr
 8007274:	42a3      	cmp	r3, r4
 8007276:	dd24      	ble.n	80072c2 <_strtol_l.constprop.0+0xc6>
 8007278:	f1bc 0f00 	cmp.w	ip, #0
 800727c:	db1e      	blt.n	80072bc <_strtol_l.constprop.0+0xc0>
 800727e:	45b1      	cmp	r9, r6
 8007280:	d31c      	bcc.n	80072bc <_strtol_l.constprop.0+0xc0>
 8007282:	d101      	bne.n	8007288 <_strtol_l.constprop.0+0x8c>
 8007284:	45a2      	cmp	sl, r4
 8007286:	db19      	blt.n	80072bc <_strtol_l.constprop.0+0xc0>
 8007288:	fb06 4603 	mla	r6, r6, r3, r4
 800728c:	f04f 0c01 	mov.w	ip, #1
 8007290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007294:	e7e8      	b.n	8007268 <_strtol_l.constprop.0+0x6c>
 8007296:	2c2b      	cmp	r4, #43	; 0x2b
 8007298:	bf04      	itt	eq
 800729a:	782c      	ldrbeq	r4, [r5, #0]
 800729c:	1cb5      	addeq	r5, r6, #2
 800729e:	e7ca      	b.n	8007236 <_strtol_l.constprop.0+0x3a>
 80072a0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80072a4:	f1be 0f19 	cmp.w	lr, #25
 80072a8:	d801      	bhi.n	80072ae <_strtol_l.constprop.0+0xb2>
 80072aa:	3c37      	subs	r4, #55	; 0x37
 80072ac:	e7e2      	b.n	8007274 <_strtol_l.constprop.0+0x78>
 80072ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80072b2:	f1be 0f19 	cmp.w	lr, #25
 80072b6:	d804      	bhi.n	80072c2 <_strtol_l.constprop.0+0xc6>
 80072b8:	3c57      	subs	r4, #87	; 0x57
 80072ba:	e7db      	b.n	8007274 <_strtol_l.constprop.0+0x78>
 80072bc:	f04f 3cff 	mov.w	ip, #4294967295
 80072c0:	e7e6      	b.n	8007290 <_strtol_l.constprop.0+0x94>
 80072c2:	f1bc 0f00 	cmp.w	ip, #0
 80072c6:	da05      	bge.n	80072d4 <_strtol_l.constprop.0+0xd8>
 80072c8:	2322      	movs	r3, #34	; 0x22
 80072ca:	6003      	str	r3, [r0, #0]
 80072cc:	4646      	mov	r6, r8
 80072ce:	b942      	cbnz	r2, 80072e2 <_strtol_l.constprop.0+0xe6>
 80072d0:	4630      	mov	r0, r6
 80072d2:	e79e      	b.n	8007212 <_strtol_l.constprop.0+0x16>
 80072d4:	b107      	cbz	r7, 80072d8 <_strtol_l.constprop.0+0xdc>
 80072d6:	4276      	negs	r6, r6
 80072d8:	2a00      	cmp	r2, #0
 80072da:	d0f9      	beq.n	80072d0 <_strtol_l.constprop.0+0xd4>
 80072dc:	f1bc 0f00 	cmp.w	ip, #0
 80072e0:	d000      	beq.n	80072e4 <_strtol_l.constprop.0+0xe8>
 80072e2:	1e69      	subs	r1, r5, #1
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	e7f3      	b.n	80072d0 <_strtol_l.constprop.0+0xd4>
 80072e8:	2430      	movs	r4, #48	; 0x30
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1b1      	bne.n	8007252 <_strtol_l.constprop.0+0x56>
 80072ee:	2308      	movs	r3, #8
 80072f0:	e7af      	b.n	8007252 <_strtol_l.constprop.0+0x56>
 80072f2:	2c30      	cmp	r4, #48	; 0x30
 80072f4:	d0a5      	beq.n	8007242 <_strtol_l.constprop.0+0x46>
 80072f6:	230a      	movs	r3, #10
 80072f8:	e7ab      	b.n	8007252 <_strtol_l.constprop.0+0x56>
 80072fa:	bf00      	nop
 80072fc:	080073e5 	.word	0x080073e5

08007300 <strtol>:
 8007300:	4613      	mov	r3, r2
 8007302:	460a      	mov	r2, r1
 8007304:	4601      	mov	r1, r0
 8007306:	4802      	ldr	r0, [pc, #8]	; (8007310 <strtol+0x10>)
 8007308:	6800      	ldr	r0, [r0, #0]
 800730a:	f7ff bf77 	b.w	80071fc <_strtol_l.constprop.0>
 800730e:	bf00      	nop
 8007310:	20000024 	.word	0x20000024

08007314 <_init>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr

08007320 <_fini>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	bf00      	nop
 8007324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007326:	bc08      	pop	{r3}
 8007328:	469e      	mov	lr, r3
 800732a:	4770      	bx	lr
