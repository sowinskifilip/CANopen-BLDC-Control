
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800a8c0  0800a8c0  0001a8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad44  0800ad44  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad44  0800ad44  0001ad44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad4c  0800ad4c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad4c  0800ad4c  0001ad4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad50  0800ad50  0001ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ad54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001f8  0800af4c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  0800af4c  00020948  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdd4  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003764  00000000  00000000  0003bffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0003f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad2b  00000000  00000000  00041ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a43e  00000000  00000000  0006cc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102648  00000000  00000000  00087061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001896a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  001896fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a8a8 	.word	0x0800a8a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800a8a8 	.word	0x0800a8a8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_CAN1_Init+0x68>)
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <MX_CAN1_Init+0x6c>)
 80005f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_CAN1_Init+0x68>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_CAN1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_CAN1_Init+0x68>)
 8000600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000604:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_CAN1_Init+0x68>)
 8000608:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_CAN1_Init+0x68>)
 8000610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000614:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_CAN1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_CAN1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_CAN1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_CAN1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_CAN1_Init+0x68>)
 800063c:	f002 fab8 	bl	8002bb0 <HAL_CAN_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000646:	f001 fd43 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000022c 	.word	0x2000022c
 8000654:	40006400 	.word	0x40006400

08000658 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_CAN_MspInit+0x8c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d12f      	bne.n	80006da <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006aa:	2303      	movs	r3, #3
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ba:	2309      	movs	r3, #9
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <HAL_CAN_MspInit+0x94>)
 80006c6:	f003 fa85 	bl	8003bd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2014      	movs	r0, #20
 80006d0:	f003 f9b7 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006d4:	2014      	movs	r0, #20
 80006d6:	f003 f9d0 	bl	8003a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40006400 	.word	0x40006400
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020c00 	.word	0x40020c00

080006f0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b6c      	ldr	r3, [pc, #432]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a6b      	ldr	r2, [pc, #428]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a65      	ldr	r2, [pc, #404]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b63      	ldr	r3, [pc, #396]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a5f      	ldr	r2, [pc, #380]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a59      	ldr	r2, [pc, #356]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a53      	ldr	r2, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a4d      	ldr	r2, [pc, #308]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f244 0181 	movw	r1, #16513	; 0x4081
 800079c:	4847      	ldr	r0, [pc, #284]	; (80008bc <MX_GPIO_Init+0x1cc>)
 800079e:	f003 fbc5 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	4846      	ldr	r0, [pc, #280]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 80007a8:	f003 fbc0 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4840      	ldr	r0, [pc, #256]	; (80008c4 <MX_GPIO_Init+0x1d4>)
 80007c4:	f003 fa06 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007c8:	2332      	movs	r3, #50	; 0x32
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d8:	230b      	movs	r3, #11
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4838      	ldr	r0, [pc, #224]	; (80008c4 <MX_GPIO_Init+0x1d4>)
 80007e4:	f003 f9f6 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007e8:	2386      	movs	r3, #134	; 0x86
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4831      	ldr	r0, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x1d8>)
 8000804:	f003 f9e6 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000808:	f244 0381 	movw	r3, #16513	; 0x4081
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <MX_GPIO_Init+0x1cc>)
 8000822:	f003 f9d7 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000838:	230b      	movs	r3, #11
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481e      	ldr	r0, [pc, #120]	; (80008bc <MX_GPIO_Init+0x1cc>)
 8000844:	f003 f9c6 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 8000860:	f003 f9b8 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 8000878:	f003 f9ac 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800087c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 800089a:	f003 f99b 	bl	8003bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2028      	movs	r0, #40	; 0x28
 80008a4:	f003 f8cd 	bl	8003a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a8:	2028      	movs	r0, #40	; 0x28
 80008aa:	f003 f8e6 	bl	8003a7a <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000

080008cc <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008d6:	f003 fb29 	bl	8003f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008e0:	f003 fb24 	bl	8003f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ea:	4802      	ldr	r0, [pc, #8]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008ec:	f003 fb1e 	bl	8003f2c <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40020400 	.word	0x40020400

080008f8 <fnInit>:


//INIT FUNCTION
void fnInit(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

	switch(iMachineStatus){
 80008fc:	4bc8      	ldr	r3, [pc, #800]	; (8000c20 <fnInit+0x328>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b50      	cmp	r3, #80	; 0x50
 8000902:	f200 8339 	bhi.w	8000f78 <fnInit+0x680>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <fnInit+0x14>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000a51 	.word	0x08000a51
 8000910:	08000f79 	.word	0x08000f79
 8000914:	08000f79 	.word	0x08000f79
 8000918:	08000f79 	.word	0x08000f79
 800091c:	08000f79 	.word	0x08000f79
 8000920:	08000a9d 	.word	0x08000a9d
 8000924:	08000f79 	.word	0x08000f79
 8000928:	08000f79 	.word	0x08000f79
 800092c:	08000f79 	.word	0x08000f79
 8000930:	08000f79 	.word	0x08000f79
 8000934:	08000ad9 	.word	0x08000ad9
 8000938:	08000f79 	.word	0x08000f79
 800093c:	08000f79 	.word	0x08000f79
 8000940:	08000f79 	.word	0x08000f79
 8000944:	08000f79 	.word	0x08000f79
 8000948:	08000f79 	.word	0x08000f79
 800094c:	08000f79 	.word	0x08000f79
 8000950:	08000f79 	.word	0x08000f79
 8000954:	08000f79 	.word	0x08000f79
 8000958:	08000f79 	.word	0x08000f79
 800095c:	08000b65 	.word	0x08000b65
 8000960:	08000f79 	.word	0x08000f79
 8000964:	08000f79 	.word	0x08000f79
 8000968:	08000f79 	.word	0x08000f79
 800096c:	08000f79 	.word	0x08000f79
 8000970:	08000bc7 	.word	0x08000bc7
 8000974:	08000f79 	.word	0x08000f79
 8000978:	08000f79 	.word	0x08000f79
 800097c:	08000f79 	.word	0x08000f79
 8000980:	08000f79 	.word	0x08000f79
 8000984:	08000c65 	.word	0x08000c65
 8000988:	08000f79 	.word	0x08000f79
 800098c:	08000f79 	.word	0x08000f79
 8000990:	08000f79 	.word	0x08000f79
 8000994:	08000f79 	.word	0x08000f79
 8000998:	08000f79 	.word	0x08000f79
 800099c:	08000f79 	.word	0x08000f79
 80009a0:	08000f79 	.word	0x08000f79
 80009a4:	08000f79 	.word	0x08000f79
 80009a8:	08000f79 	.word	0x08000f79
 80009ac:	08000cc7 	.word	0x08000cc7
 80009b0:	08000f79 	.word	0x08000f79
 80009b4:	08000f79 	.word	0x08000f79
 80009b8:	08000f79 	.word	0x08000f79
 80009bc:	08000f79 	.word	0x08000f79
 80009c0:	08000f79 	.word	0x08000f79
 80009c4:	08000f79 	.word	0x08000f79
 80009c8:	08000f79 	.word	0x08000f79
 80009cc:	08000f79 	.word	0x08000f79
 80009d0:	08000f79 	.word	0x08000f79
 80009d4:	08000d29 	.word	0x08000d29
 80009d8:	08000f79 	.word	0x08000f79
 80009dc:	08000f79 	.word	0x08000f79
 80009e0:	08000f79 	.word	0x08000f79
 80009e4:	08000f79 	.word	0x08000f79
 80009e8:	08000d8b 	.word	0x08000d8b
 80009ec:	08000f79 	.word	0x08000f79
 80009f0:	08000f79 	.word	0x08000f79
 80009f4:	08000f79 	.word	0x08000f79
 80009f8:	08000f79 	.word	0x08000f79
 80009fc:	08000dfb 	.word	0x08000dfb
 8000a00:	08000f79 	.word	0x08000f79
 8000a04:	08000f79 	.word	0x08000f79
 8000a08:	08000f79 	.word	0x08000f79
 8000a0c:	08000f79 	.word	0x08000f79
 8000a10:	08000f79 	.word	0x08000f79
 8000a14:	08000f79 	.word	0x08000f79
 8000a18:	08000f79 	.word	0x08000f79
 8000a1c:	08000f79 	.word	0x08000f79
 8000a20:	08000f79 	.word	0x08000f79
 8000a24:	08000e5d 	.word	0x08000e5d
 8000a28:	08000f79 	.word	0x08000f79
 8000a2c:	08000f79 	.word	0x08000f79
 8000a30:	08000f79 	.word	0x08000f79
 8000a34:	08000f79 	.word	0x08000f79
 8000a38:	08000f79 	.word	0x08000f79
 8000a3c:	08000f79 	.word	0x08000f79
 8000a40:	08000f79 	.word	0x08000f79
 8000a44:	08000f79 	.word	0x08000f79
 8000a48:	08000f79 	.word	0x08000f79
 8000a4c:	08000edb 	.word	0x08000edb

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000a50:	4b74      	ldr	r3, [pc, #464]	; (8000c24 <fnInit+0x32c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000a56:	4b73      	ldr	r3, [pc, #460]	; (8000c24 <fnInit+0x32c>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 8000a5c:	4b72      	ldr	r3, [pc, #456]	; (8000c28 <fnInit+0x330>)
 8000a5e:	2282      	movs	r2, #130	; 0x82
 8000a60:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000a62:	4b71      	ldr	r3, [pc, #452]	; (8000c28 <fnInit+0x330>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a68:	4b70      	ldr	r3, [pc, #448]	; (8000c2c <fnInit+0x334>)
 8000a6a:	4a6f      	ldr	r2, [pc, #444]	; (8000c28 <fnInit+0x330>)
 8000a6c:	496d      	ldr	r1, [pc, #436]	; (8000c24 <fnInit+0x32c>)
 8000a6e:	4870      	ldr	r0, [pc, #448]	; (8000c30 <fnInit+0x338>)
 8000a70:	f002 faca 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d004      	beq.n	8000a84 <fnInit+0x18c>
			fnLEDsErrorState();
 8000a7a:	f7ff ff27 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000a7e:	f001 fb27 	bl	80020d0 <Error_Handler>
		else{
			iMachineStatus = 5;
			//SEND INFO THAT ENGINE IS INITIALIZING
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
		}
		break;
 8000a82:	e279      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 5;
 8000a84:	4b66      	ldr	r3, [pc, #408]	; (8000c20 <fnInit+0x328>)
 8000a86:	2205      	movs	r2, #5
 8000a88:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
 8000a8a:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <fnInit+0x33c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	4969      	ldr	r1, [pc, #420]	; (8000c38 <fnInit+0x340>)
 8000a94:	4869      	ldr	r0, [pc, #420]	; (8000c3c <fnInit+0x344>)
 8000a96:	f005 fa77 	bl	8005f88 <HAL_UART_Transmit>
		break;
 8000a9a:	e26d      	b.n	8000f78 <fnInit+0x680>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 8000a9c:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <fnInit+0x32c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000aa2:	4b60      	ldr	r3, [pc, #384]	; (8000c24 <fnInit+0x32c>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 8000aa8:	4b5f      	ldr	r3, [pc, #380]	; (8000c28 <fnInit+0x330>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000aae:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <fnInit+0x330>)
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ab4:	4b5d      	ldr	r3, [pc, #372]	; (8000c2c <fnInit+0x334>)
 8000ab6:	4a5c      	ldr	r2, [pc, #368]	; (8000c28 <fnInit+0x330>)
 8000ab8:	495a      	ldr	r1, [pc, #360]	; (8000c24 <fnInit+0x32c>)
 8000aba:	485d      	ldr	r0, [pc, #372]	; (8000c30 <fnInit+0x338>)
 8000abc:	f002 faa4 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d004      	beq.n	8000ad0 <fnInit+0x1d8>
			fnLEDsErrorState();
 8000ac6:	f7ff ff01 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000aca:	f001 fb01 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
		}
		break;
 8000ace:	e253      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 10;
 8000ad0:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <fnInit+0x328>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	701a      	strb	r2, [r3, #0]
		break;
 8000ad6:	e24f      	b.n	8000f78 <fnInit+0x680>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000ad8:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <fnInit+0x32c>)
 8000ada:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ade:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ae0:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <fnInit+0x32c>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000ae6:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <fnInit+0x330>)
 8000ae8:	2222      	movs	r2, #34	; 0x22
 8000aea:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000aec:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <fnInit+0x330>)
 8000aee:	2240      	movs	r2, #64	; 0x40
 8000af0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000af2:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <fnInit+0x330>)
 8000af4:	2260      	movs	r2, #96	; 0x60
 8000af6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <fnInit+0x330>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000afe:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <fnInit+0x330>)
 8000b00:	2206      	movs	r2, #6
 8000b02:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b04:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <fnInit+0x330>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b0a:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <fnInit+0x330>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b10:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <fnInit+0x330>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	71da      	strb	r2, [r3, #7]

		//RESET ALL VARIABLES TO INITIAL CONDITIONS
		iMode = 100;
 8000b16:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <fnInit+0x348>)
 8000b18:	2264      	movs	r2, #100	; 0x64
 8000b1a:	701a      	strb	r2, [r3, #0]
		iSelected_leg = 100;
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <fnInit+0x34c>)
 8000b1e:	2264      	movs	r2, #100	; 0x64
 8000b20:	701a      	strb	r2, [r3, #0]

		iSerialMachineStatus = 100;
 8000b22:	4b49      	ldr	r3, [pc, #292]	; (8000c48 <fnInit+0x350>)
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	701a      	strb	r2, [r3, #0]
		iSerialRange = 0;
 8000b28:	4b48      	ldr	r3, [pc, #288]	; (8000c4c <fnInit+0x354>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
		iSerialReps = 0;
 8000b2e:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <fnInit+0x358>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

		iSingleMachineStatus = 100;
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <fnInit+0x35c>)
 8000b36:	2264      	movs	r2, #100	; 0x64
 8000b38:	701a      	strb	r2, [r3, #0]
		iPosition = 0;
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <fnInit+0x360>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <fnInit+0x334>)
 8000b42:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <fnInit+0x330>)
 8000b44:	4937      	ldr	r1, [pc, #220]	; (8000c24 <fnInit+0x32c>)
 8000b46:	483a      	ldr	r0, [pc, #232]	; (8000c30 <fnInit+0x338>)
 8000b48:	f002 fa5e 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d004      	beq.n	8000b5c <fnInit+0x264>
			fnLEDsErrorState();
 8000b52:	f7ff febb 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000b56:	f001 fabb 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
		}
		break;
 8000b5a:	e20d      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 20;
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <fnInit+0x328>)
 8000b5e:	2214      	movs	r2, #20
 8000b60:	701a      	strb	r2, [r3, #0]
		break;
 8000b62:	e209      	b.n	8000f78 <fnInit+0x680>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <fnInit+0x32c>)
 8000b66:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b6a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <fnInit+0x32c>)
 8000b6e:	2208      	movs	r2, #8
 8000b70:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <fnInit+0x330>)
 8000b74:	2222      	movs	r2, #34	; 0x22
 8000b76:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <fnInit+0x330>)
 8000b7a:	2240      	movs	r2, #64	; 0x40
 8000b7c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <fnInit+0x330>)
 8000b80:	2260      	movs	r2, #96	; 0x60
 8000b82:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <fnInit+0x330>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <fnInit+0x330>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <fnInit+0x330>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <fnInit+0x330>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <fnInit+0x330>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <fnInit+0x334>)
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <fnInit+0x330>)
 8000ba6:	491f      	ldr	r1, [pc, #124]	; (8000c24 <fnInit+0x32c>)
 8000ba8:	4821      	ldr	r0, [pc, #132]	; (8000c30 <fnInit+0x338>)
 8000baa:	f002 fa2d 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <fnInit+0x2c6>
			fnLEDsErrorState();
 8000bb4:	f7ff fe8a 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000bb8:	f001 fa8a 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
		}
		break;
 8000bbc:	e1dc      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 25;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <fnInit+0x328>)
 8000bc0:	2219      	movs	r2, #25
 8000bc2:	701a      	strb	r2, [r3, #0]
		break;
 8000bc4:	e1d8      	b.n	8000f78 <fnInit+0x680>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <fnInit+0x32c>)
 8000bc8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bcc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <fnInit+0x32c>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <fnInit+0x330>)
 8000bd6:	2222      	movs	r2, #34	; 0x22
 8000bd8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <fnInit+0x330>)
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <fnInit+0x330>)
 8000be2:	2260      	movs	r2, #96	; 0x60
 8000be4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <fnInit+0x330>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <fnInit+0x330>)
 8000bee:	220f      	movs	r2, #15
 8000bf0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <fnInit+0x330>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <fnInit+0x330>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <fnInit+0x330>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <fnInit+0x334>)
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <fnInit+0x330>)
 8000c08:	4906      	ldr	r1, [pc, #24]	; (8000c24 <fnInit+0x32c>)
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <fnInit+0x338>)
 8000c0c:	f002 f9fc 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d022      	beq.n	8000c5c <fnInit+0x364>
			fnLEDsErrorState();
 8000c16:	f7ff fe59 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000c1a:	f001 fa59 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
		}
		break;
 8000c1e:	e1ab      	b.n	8000f78 <fnInit+0x680>
 8000c20:	20000006 	.word	0x20000006
 8000c24:	200002a0 	.word	0x200002a0
 8000c28:	20000260 	.word	0x20000260
 8000c2c:	20000268 	.word	0x20000268
 8000c30:	2000022c 	.word	0x2000022c
 8000c34:	20000000 	.word	0x20000000
 8000c38:	0800a904 	.word	0x0800a904
 8000c3c:	200004ac 	.word	0x200004ac
 8000c40:	20000004 	.word	0x20000004
 8000c44:	20000005 	.word	0x20000005
 8000c48:	20000009 	.word	0x20000009
 8000c4c:	20000014 	.word	0x20000014
 8000c50:	20000018 	.word	0x20000018
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000258 	.word	0x20000258
			iMachineStatus = 30;
 8000c5c:	4bb3      	ldr	r3, [pc, #716]	; (8000f2c <fnInit+0x634>)
 8000c5e:	221e      	movs	r2, #30
 8000c60:	701a      	strb	r2, [r3, #0]
		break;
 8000c62:	e189      	b.n	8000f78 <fnInit+0x680>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000c64:	4bb2      	ldr	r3, [pc, #712]	; (8000f30 <fnInit+0x638>)
 8000c66:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c6a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c6c:	4bb0      	ldr	r3, [pc, #704]	; (8000f30 <fnInit+0x638>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c72:	4bb0      	ldr	r3, [pc, #704]	; (8000f34 <fnInit+0x63c>)
 8000c74:	2222      	movs	r2, #34	; 0x22
 8000c76:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000c78:	4bae      	ldr	r3, [pc, #696]	; (8000f34 <fnInit+0x63c>)
 8000c7a:	2260      	movs	r2, #96	; 0x60
 8000c7c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c7e:	4bad      	ldr	r3, [pc, #692]	; (8000f34 <fnInit+0x63c>)
 8000c80:	2260      	movs	r2, #96	; 0x60
 8000c82:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c84:	4bab      	ldr	r3, [pc, #684]	; (8000f34 <fnInit+0x63c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000c8a:	4baa      	ldr	r3, [pc, #680]	; (8000f34 <fnInit+0x63c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c90:	4ba8      	ldr	r3, [pc, #672]	; (8000f34 <fnInit+0x63c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c96:	4ba7      	ldr	r3, [pc, #668]	; (8000f34 <fnInit+0x63c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c9c:	4ba5      	ldr	r3, [pc, #660]	; (8000f34 <fnInit+0x63c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ca2:	4ba5      	ldr	r3, [pc, #660]	; (8000f38 <fnInit+0x640>)
 8000ca4:	4aa3      	ldr	r2, [pc, #652]	; (8000f34 <fnInit+0x63c>)
 8000ca6:	49a2      	ldr	r1, [pc, #648]	; (8000f30 <fnInit+0x638>)
 8000ca8:	48a4      	ldr	r0, [pc, #656]	; (8000f3c <fnInit+0x644>)
 8000caa:	f002 f9ad 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d004      	beq.n	8000cbe <fnInit+0x3c6>
			fnLEDsErrorState();
 8000cb4:	f7ff fe0a 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000cb8:	f001 fa0a 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
		}
		break;
 8000cbc:	e15c      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 40;
 8000cbe:	4b9b      	ldr	r3, [pc, #620]	; (8000f2c <fnInit+0x634>)
 8000cc0:	2228      	movs	r2, #40	; 0x28
 8000cc2:	701a      	strb	r2, [r3, #0]
		break;
 8000cc4:	e158      	b.n	8000f78 <fnInit+0x680>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000cc6:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <fnInit+0x638>)
 8000cc8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ccc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cce:	4b98      	ldr	r3, [pc, #608]	; (8000f30 <fnInit+0x638>)
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000cd4:	4b97      	ldr	r3, [pc, #604]	; (8000f34 <fnInit+0x63c>)
 8000cd6:	2222      	movs	r2, #34	; 0x22
 8000cd8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000cda:	4b96      	ldr	r3, [pc, #600]	; (8000f34 <fnInit+0x63c>)
 8000cdc:	227a      	movs	r2, #122	; 0x7a
 8000cde:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ce0:	4b94      	ldr	r3, [pc, #592]	; (8000f34 <fnInit+0x63c>)
 8000ce2:	2260      	movs	r2, #96	; 0x60
 8000ce4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ce6:	4b93      	ldr	r3, [pc, #588]	; (8000f34 <fnInit+0x63c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000cec:	4b91      	ldr	r3, [pc, #580]	; (8000f34 <fnInit+0x63c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cf2:	4b90      	ldr	r3, [pc, #576]	; (8000f34 <fnInit+0x63c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000cf8:	4b8e      	ldr	r3, [pc, #568]	; (8000f34 <fnInit+0x63c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cfe:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <fnInit+0x63c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d04:	4b8c      	ldr	r3, [pc, #560]	; (8000f38 <fnInit+0x640>)
 8000d06:	4a8b      	ldr	r2, [pc, #556]	; (8000f34 <fnInit+0x63c>)
 8000d08:	4989      	ldr	r1, [pc, #548]	; (8000f30 <fnInit+0x638>)
 8000d0a:	488c      	ldr	r0, [pc, #560]	; (8000f3c <fnInit+0x644>)
 8000d0c:	f002 f97c 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <fnInit+0x428>
			fnLEDsErrorState();
 8000d16:	f7ff fdd9 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000d1a:	f001 f9d9 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
		}
		break;
 8000d1e:	e12b      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 50;
 8000d20:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <fnInit+0x634>)
 8000d22:	2232      	movs	r2, #50	; 0x32
 8000d24:	701a      	strb	r2, [r3, #0]
		break;
 8000d26:	e127      	b.n	8000f78 <fnInit+0x680>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000d28:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <fnInit+0x638>)
 8000d2a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d2e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d30:	4b7f      	ldr	r3, [pc, #508]	; (8000f30 <fnInit+0x638>)
 8000d32:	2208      	movs	r2, #8
 8000d34:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d36:	4b7f      	ldr	r3, [pc, #508]	; (8000f34 <fnInit+0x63c>)
 8000d38:	2222      	movs	r2, #34	; 0x22
 8000d3a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d3c:	4b7d      	ldr	r3, [pc, #500]	; (8000f34 <fnInit+0x63c>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d42:	4b7c      	ldr	r3, [pc, #496]	; (8000f34 <fnInit+0x63c>)
 8000d44:	2260      	movs	r2, #96	; 0x60
 8000d46:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d48:	4b7a      	ldr	r3, [pc, #488]	; (8000f34 <fnInit+0x63c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000d4e:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <fnInit+0x63c>)
 8000d50:	221f      	movs	r2, #31
 8000d52:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d54:	4b77      	ldr	r3, [pc, #476]	; (8000f34 <fnInit+0x63c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d5a:	4b76      	ldr	r3, [pc, #472]	; (8000f34 <fnInit+0x63c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d60:	4b74      	ldr	r3, [pc, #464]	; (8000f34 <fnInit+0x63c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d66:	4b74      	ldr	r3, [pc, #464]	; (8000f38 <fnInit+0x640>)
 8000d68:	4a72      	ldr	r2, [pc, #456]	; (8000f34 <fnInit+0x63c>)
 8000d6a:	4971      	ldr	r1, [pc, #452]	; (8000f30 <fnInit+0x638>)
 8000d6c:	4873      	ldr	r0, [pc, #460]	; (8000f3c <fnInit+0x644>)
 8000d6e:	f002 f94b 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <fnInit+0x48a>
			fnLEDsErrorState();
 8000d78:	f7ff fda8 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000d7c:	f001 f9a8 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 55;
		}
		break;
 8000d80:	e0fa      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 55;
 8000d82:	4b6a      	ldr	r3, [pc, #424]	; (8000f2c <fnInit+0x634>)
 8000d84:	2237      	movs	r2, #55	; 0x37
 8000d86:	701a      	strb	r2, [r3, #0]
		break;
 8000d88:	e0f6      	b.n	8000f78 <fnInit+0x680>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000d8a:	4b69      	ldr	r3, [pc, #420]	; (8000f30 <fnInit+0x638>)
 8000d8c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d90:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d92:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <fnInit+0x638>)
 8000d94:	2208      	movs	r2, #8
 8000d96:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d98:	4b66      	ldr	r3, [pc, #408]	; (8000f34 <fnInit+0x63c>)
 8000d9a:	2240      	movs	r2, #64	; 0x40
 8000d9c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d9e:	4b65      	ldr	r3, [pc, #404]	; (8000f34 <fnInit+0x63c>)
 8000da0:	2241      	movs	r2, #65	; 0x41
 8000da2:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000da4:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <fnInit+0x63c>)
 8000da6:	2260      	movs	r2, #96	; 0x60
 8000da8:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000daa:	4b62      	ldr	r3, [pc, #392]	; (8000f34 <fnInit+0x63c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000db0:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <fnInit+0x63c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000db6:	4b5f      	ldr	r3, [pc, #380]	; (8000f34 <fnInit+0x63c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000dbc:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <fnInit+0x63c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <fnInit+0x63c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000dc8:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <fnInit+0x640>)
 8000dca:	4a5a      	ldr	r2, [pc, #360]	; (8000f34 <fnInit+0x63c>)
 8000dcc:	4958      	ldr	r1, [pc, #352]	; (8000f30 <fnInit+0x638>)
 8000dce:	485b      	ldr	r0, [pc, #364]	; (8000f3c <fnInit+0x644>)
 8000dd0:	f002 f91a 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d004      	beq.n	8000de4 <fnInit+0x4ec>
			fnLEDsErrorState();
 8000dda:	f7ff fd77 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000dde:	f001 f977 	bl	80020d0 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
		}
		break;
 8000de2:	e0c6      	b.n	8000f72 <fnInit+0x67a>
		else if (RxData[5] & 0b10000) {
 8000de4:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <fnInit+0x648>)
 8000de6:	795b      	ldrb	r3, [r3, #5]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80c0 	beq.w	8000f72 <fnInit+0x67a>
			iMachineStatus = 60;
 8000df2:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <fnInit+0x634>)
 8000df4:	223c      	movs	r2, #60	; 0x3c
 8000df6:	701a      	strb	r2, [r3, #0]
		break;
 8000df8:	e0bb      	b.n	8000f72 <fnInit+0x67a>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <fnInit+0x638>)
 8000dfc:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e00:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e02:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <fnInit+0x638>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000e08:	4b4a      	ldr	r3, [pc, #296]	; (8000f34 <fnInit+0x63c>)
 8000e0a:	2222      	movs	r2, #34	; 0x22
 8000e0c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000e0e:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <fnInit+0x63c>)
 8000e10:	2240      	movs	r2, #64	; 0x40
 8000e12:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e14:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <fnInit+0x63c>)
 8000e16:	2260      	movs	r2, #96	; 0x60
 8000e18:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e1a:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <fnInit+0x63c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000e20:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <fnInit+0x63c>)
 8000e22:	220f      	movs	r2, #15
 8000e24:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <fnInit+0x63c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e2c:	4b41      	ldr	r3, [pc, #260]	; (8000f34 <fnInit+0x63c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e32:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <fnInit+0x63c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e38:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <fnInit+0x640>)
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <fnInit+0x63c>)
 8000e3c:	493c      	ldr	r1, [pc, #240]	; (8000f30 <fnInit+0x638>)
 8000e3e:	483f      	ldr	r0, [pc, #252]	; (8000f3c <fnInit+0x644>)
 8000e40:	f002 f8e2 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <fnInit+0x55c>
			fnLEDsErrorState();
 8000e4a:	f7ff fd3f 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000e4e:	f001 f93f 	bl	80020d0 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
		}
		break;
 8000e52:	e091      	b.n	8000f78 <fnInit+0x680>
			iMachineStatus = 70;
 8000e54:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <fnInit+0x634>)
 8000e56:	2246      	movs	r2, #70	; 0x46
 8000e58:	701a      	strb	r2, [r3, #0]
		break;
 8000e5a:	e08d      	b.n	8000f78 <fnInit+0x680>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000e5c:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <fnInit+0x638>)
 8000e5e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e62:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <fnInit+0x638>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <fnInit+0x63c>)
 8000e6c:	2240      	movs	r2, #64	; 0x40
 8000e6e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <fnInit+0x63c>)
 8000e72:	2241      	movs	r2, #65	; 0x41
 8000e74:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <fnInit+0x63c>)
 8000e78:	2260      	movs	r2, #96	; 0x60
 8000e7a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <fnInit+0x63c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <fnInit+0x63c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <fnInit+0x63c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <fnInit+0x63c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <fnInit+0x63c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <fnInit+0x640>)
 8000e9c:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <fnInit+0x63c>)
 8000e9e:	4924      	ldr	r1, [pc, #144]	; (8000f30 <fnInit+0x638>)
 8000ea0:	4826      	ldr	r0, [pc, #152]	; (8000f3c <fnInit+0x644>)
 8000ea2:	f002 f8b1 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <fnInit+0x5be>
			fnLEDsErrorState();
 8000eac:	f7ff fd0e 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000eb0:	f001 f90e 	bl	80020d0 <Error_Handler>
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 8000eb4:	e05f      	b.n	8000f76 <fnInit+0x67e>
		else if (RxData[5] & 0b00100) {
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <fnInit+0x648>)
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d059      	beq.n	8000f76 <fnInit+0x67e>
			iMachineStatus = 80;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <fnInit+0x634>)
 8000ec4:	2250      	movs	r2, #80	; 0x50
 8000ec6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <fnInit+0x64c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	491d      	ldr	r1, [pc, #116]	; (8000f48 <fnInit+0x650>)
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <fnInit+0x654>)
 8000ed4:	f005 f858 	bl	8005f88 <HAL_UART_Transmit>
		break;
 8000ed8:	e04d      	b.n	8000f76 <fnInit+0x67e>

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <fnInit+0x648>)
 8000edc:	791b      	ldrb	r3, [r3, #4]
 8000ede:	2b27      	cmp	r3, #39	; 0x27
 8000ee0:	d142      	bne.n	8000f68 <fnInit+0x670>
			iMachineStatus = 1;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <fnInit+0x634>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <fnInit+0x658>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000eee:	213c      	movs	r1, #60	; 0x3c
 8000ef0:	4818      	ldr	r0, [pc, #96]	; (8000f54 <fnInit+0x65c>)
 8000ef2:	f004 fcb3 	bl	800585c <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000ef6:	f000 f9cb 	bl	8001290 <fnEncCalibration>

			//SEND ENCODER VALUE AFTER INIT
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <fnInit+0x660>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f04:	ec53 2b17 	vmov	r2, r3, d7
 8000f08:	4914      	ldr	r1, [pc, #80]	; (8000f5c <fnInit+0x664>)
 8000f0a:	4815      	ldr	r0, [pc, #84]	; (8000f60 <fnInit+0x668>)
 8000f0c:	f007 fa6a 	bl	80083e4 <siprintf>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <fnInit+0x66c>)
 8000f14:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <fnInit+0x66c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f20:	490f      	ldr	r1, [pc, #60]	; (8000f60 <fnInit+0x668>)
 8000f22:	480a      	ldr	r0, [pc, #40]	; (8000f4c <fnInit+0x654>)
 8000f24:	f005 f830 	bl	8005f88 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000f28:	e026      	b.n	8000f78 <fnInit+0x680>
 8000f2a:	bf00      	nop
 8000f2c:	20000006 	.word	0x20000006
 8000f30:	200002a0 	.word	0x200002a0
 8000f34:	20000260 	.word	0x20000260
 8000f38:	20000268 	.word	0x20000268
 8000f3c:	2000022c 	.word	0x2000022c
 8000f40:	2000026c 	.word	0x2000026c
 8000f44:	20000000 	.word	0x20000000
 8000f48:	0800a914 	.word	0x0800a914
 8000f4c:	200004ac 	.word	0x200004ac
 8000f50:	20000007 	.word	0x20000007
 8000f54:	20000330 	.word	0x20000330
 8000f58:	20000218 	.word	0x20000218
 8000f5c:	0800a8c0 	.word	0x0800a8c0
 8000f60:	200002d4 	.word	0x200002d4
 8000f64:	20000254 	.word	0x20000254
			fnLEDsErrorState();
 8000f68:	f7ff fcb0 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000f6c:	f001 f8b0 	bl	80020d0 <Error_Handler>
		break;
 8000f70:	e002      	b.n	8000f78 <fnInit+0x680>
		break;
 8000f72:	bf00      	nop
 8000f74:	e000      	b.n	8000f78 <fnInit+0x680>
		break;
 8000f76:	bf00      	nop
	}
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <fnReset>:

void fnReset(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000f80:	4b8b      	ldr	r3, [pc, #556]	; (80011b0 <fnReset+0x234>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b50      	cmp	r3, #80	; 0x50
 8000f86:	f000 80d7 	beq.w	8001138 <fnReset+0x1bc>
 8000f8a:	2b50      	cmp	r3, #80	; 0x50
 8000f8c:	f300 810d 	bgt.w	80011aa <fnReset+0x22e>
 8000f90:	2b46      	cmp	r3, #70	; 0x46
 8000f92:	f000 80a0 	beq.w	80010d6 <fnReset+0x15a>
 8000f96:	2b46      	cmp	r3, #70	; 0x46
 8000f98:	f300 8107 	bgt.w	80011aa <fnReset+0x22e>
 8000f9c:	2b19      	cmp	r3, #25
 8000f9e:	d069      	beq.n	8001074 <fnReset+0xf8>
 8000fa0:	2b19      	cmp	r3, #25
 8000fa2:	f300 8102 	bgt.w	80011aa <fnReset+0x22e>
 8000fa6:	2b0a      	cmp	r3, #10
 8000fa8:	d002      	beq.n	8000fb0 <fnReset+0x34>
 8000faa:	2b14      	cmp	r3, #20
 8000fac:	d031      	beq.n	8001012 <fnReset+0x96>
			Error_Handler();
		}

		break;
	}
}
 8000fae:	e0fc      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8000fb0:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <fnReset+0x238>)
 8000fb2:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fb6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000fb8:	4b7e      	ldr	r3, [pc, #504]	; (80011b4 <fnReset+0x238>)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000fbe:	4b7e      	ldr	r3, [pc, #504]	; (80011b8 <fnReset+0x23c>)
 8000fc0:	2222      	movs	r2, #34	; 0x22
 8000fc2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000fc4:	4b7c      	ldr	r3, [pc, #496]	; (80011b8 <fnReset+0x23c>)
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000fca:	4b7b      	ldr	r3, [pc, #492]	; (80011b8 <fnReset+0x23c>)
 8000fcc:	2260      	movs	r2, #96	; 0x60
 8000fce:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000fd0:	4b79      	ldr	r3, [pc, #484]	; (80011b8 <fnReset+0x23c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000fd6:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <fnReset+0x23c>)
 8000fd8:	2206      	movs	r2, #6
 8000fda:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000fdc:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <fnReset+0x23c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000fe2:	4b75      	ldr	r3, [pc, #468]	; (80011b8 <fnReset+0x23c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000fe8:	4b73      	ldr	r3, [pc, #460]	; (80011b8 <fnReset+0x23c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000fee:	4b73      	ldr	r3, [pc, #460]	; (80011bc <fnReset+0x240>)
 8000ff0:	4a71      	ldr	r2, [pc, #452]	; (80011b8 <fnReset+0x23c>)
 8000ff2:	4970      	ldr	r1, [pc, #448]	; (80011b4 <fnReset+0x238>)
 8000ff4:	4872      	ldr	r0, [pc, #456]	; (80011c0 <fnReset+0x244>)
 8000ff6:	f002 f807 	bl	8003008 <HAL_CAN_AddTxMessage>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <fnReset+0x8e>
			fnLEDsErrorState();
 8001000:	f7ff fc64 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001004:	f001 f864 	bl	80020d0 <Error_Handler>
		break;
 8001008:	e0cf      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 20;
 800100a:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <fnReset+0x234>)
 800100c:	2214      	movs	r2, #20
 800100e:	701a      	strb	r2, [r3, #0]
		break;
 8001010:	e0cb      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8001012:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <fnReset+0x238>)
 8001014:	f240 620a 	movw	r2, #1546	; 0x60a
 8001018:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800101a:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <fnReset+0x238>)
 800101c:	2208      	movs	r2, #8
 800101e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001020:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <fnReset+0x23c>)
 8001022:	2222      	movs	r2, #34	; 0x22
 8001024:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001026:	4b64      	ldr	r3, [pc, #400]	; (80011b8 <fnReset+0x23c>)
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800102c:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <fnReset+0x23c>)
 800102e:	2260      	movs	r2, #96	; 0x60
 8001030:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001032:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <fnReset+0x23c>)
 8001034:	2200      	movs	r2, #0
 8001036:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8001038:	4b5f      	ldr	r3, [pc, #380]	; (80011b8 <fnReset+0x23c>)
 800103a:	2207      	movs	r2, #7
 800103c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800103e:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <fnReset+0x23c>)
 8001040:	2200      	movs	r2, #0
 8001042:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001044:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <fnReset+0x23c>)
 8001046:	2200      	movs	r2, #0
 8001048:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <fnReset+0x23c>)
 800104c:	2200      	movs	r2, #0
 800104e:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001050:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <fnReset+0x240>)
 8001052:	4a59      	ldr	r2, [pc, #356]	; (80011b8 <fnReset+0x23c>)
 8001054:	4957      	ldr	r1, [pc, #348]	; (80011b4 <fnReset+0x238>)
 8001056:	485a      	ldr	r0, [pc, #360]	; (80011c0 <fnReset+0x244>)
 8001058:	f001 ffd6 	bl	8003008 <HAL_CAN_AddTxMessage>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <fnReset+0xf0>
			fnLEDsErrorState();
 8001062:	f7ff fc33 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001066:	f001 f833 	bl	80020d0 <Error_Handler>
		break;
 800106a:	e09e      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 25;
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <fnReset+0x234>)
 800106e:	2219      	movs	r2, #25
 8001070:	701a      	strb	r2, [r3, #0]
		break;
 8001072:	e09a      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8001074:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <fnReset+0x238>)
 8001076:	f240 620a 	movw	r2, #1546	; 0x60a
 800107a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <fnReset+0x238>)
 800107e:	2208      	movs	r2, #8
 8001080:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001082:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <fnReset+0x23c>)
 8001084:	2222      	movs	r2, #34	; 0x22
 8001086:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001088:	4b4b      	ldr	r3, [pc, #300]	; (80011b8 <fnReset+0x23c>)
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800108e:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <fnReset+0x23c>)
 8001090:	2260      	movs	r2, #96	; 0x60
 8001092:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <fnReset+0x23c>)
 8001096:	2200      	movs	r2, #0
 8001098:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <fnReset+0x23c>)
 800109c:	220f      	movs	r2, #15
 800109e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <fnReset+0x23c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010a6:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <fnReset+0x23c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010ac:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <fnReset+0x23c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <fnReset+0x240>)
 80010b4:	4a40      	ldr	r2, [pc, #256]	; (80011b8 <fnReset+0x23c>)
 80010b6:	493f      	ldr	r1, [pc, #252]	; (80011b4 <fnReset+0x238>)
 80010b8:	4841      	ldr	r0, [pc, #260]	; (80011c0 <fnReset+0x244>)
 80010ba:	f001 ffa5 	bl	8003008 <HAL_CAN_AddTxMessage>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <fnReset+0x152>
			fnLEDsErrorState();
 80010c4:	f7ff fc02 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80010c8:	f001 f802 	bl	80020d0 <Error_Handler>
		break;
 80010cc:	e06d      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 70;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <fnReset+0x234>)
 80010d0:	2246      	movs	r2, #70	; 0x46
 80010d2:	701a      	strb	r2, [r3, #0]
		break;
 80010d4:	e069      	b.n	80011aa <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <fnReset+0x238>)
 80010d8:	f240 620a 	movw	r2, #1546	; 0x60a
 80010dc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <fnReset+0x238>)
 80010e0:	2208      	movs	r2, #8
 80010e2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <fnReset+0x23c>)
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <fnReset+0x23c>)
 80010ec:	2241      	movs	r2, #65	; 0x41
 80010ee:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010f0:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <fnReset+0x23c>)
 80010f2:	2260      	movs	r2, #96	; 0x60
 80010f4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <fnReset+0x23c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <fnReset+0x23c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <fnReset+0x23c>)
 8001104:	2200      	movs	r2, #0
 8001106:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <fnReset+0x23c>)
 800110a:	2200      	movs	r2, #0
 800110c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <fnReset+0x23c>)
 8001110:	2200      	movs	r2, #0
 8001112:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <fnReset+0x240>)
 8001116:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <fnReset+0x23c>)
 8001118:	4926      	ldr	r1, [pc, #152]	; (80011b4 <fnReset+0x238>)
 800111a:	4829      	ldr	r0, [pc, #164]	; (80011c0 <fnReset+0x244>)
 800111c:	f001 ff74 	bl	8003008 <HAL_CAN_AddTxMessage>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <fnReset+0x1b4>
			fnLEDsErrorState();
 8001126:	f7ff fbd1 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800112a:	f000 ffd1 	bl	80020d0 <Error_Handler>
		break;
 800112e:	e03c      	b.n	80011aa <fnReset+0x22e>
			iMachineStatus = 80;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <fnReset+0x234>)
 8001132:	2250      	movs	r2, #80	; 0x50
 8001134:	701a      	strb	r2, [r3, #0]
		break;
 8001136:	e038      	b.n	80011aa <fnReset+0x22e>
		if (RxData[4] == 39) {
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <fnReset+0x248>)
 800113a:	791b      	ldrb	r3, [r3, #4]
 800113c:	2b27      	cmp	r3, #39	; 0x27
 800113e:	d12f      	bne.n	80011a0 <fnReset+0x224>
			iMachineStatus = 1;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <fnReset+0x234>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
			if (iMode == 0 && iSingleMachineStatus != 100) {
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <fnReset+0x24c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d107      	bne.n	8001160 <fnReset+0x1e4>
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <fnReset+0x250>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d003      	beq.n	8001160 <fnReset+0x1e4>
				iSingleMachineStatus = 10;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <fnReset+0x250>)
 800115a:	220a      	movs	r2, #10
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e015      	b.n	800118c <fnReset+0x210>
			else if (iMode == 1 && iSerialMachineStatus != 100) {
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <fnReset+0x24c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d110      	bne.n	800118c <fnReset+0x210>
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <fnReset+0x254>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d00c      	beq.n	800118c <fnReset+0x210>
				if (iSerialMachineStatus == 40) {
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <fnReset+0x254>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b28      	cmp	r3, #40	; 0x28
 8001178:	d105      	bne.n	8001186 <fnReset+0x20a>
					iSerialCounter--;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <fnReset+0x258>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <fnReset+0x258>)
 8001184:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <fnReset+0x254>)
 8001188:	220a      	movs	r2, #10
 800118a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <fnReset+0x25c>)
 8001194:	f002 feca 	bl	8003f2c <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim14);
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <fnReset+0x260>)
 800119a:	f004 fa89 	bl	80056b0 <HAL_TIM_Base_Stop_IT>
		break;
 800119e:	e003      	b.n	80011a8 <fnReset+0x22c>
			fnLEDsErrorState();
 80011a0:	f7ff fb94 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80011a4:	f000 ff94 	bl	80020d0 <Error_Handler>
		break;
 80011a8:	bf00      	nop
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000006 	.word	0x20000006
 80011b4:	200002a0 	.word	0x200002a0
 80011b8:	20000260 	.word	0x20000260
 80011bc:	20000268 	.word	0x20000268
 80011c0:	2000022c 	.word	0x2000022c
 80011c4:	2000026c 	.word	0x2000026c
 80011c8:	20000004 	.word	0x20000004
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000009 	.word	0x20000009
 80011d4:	20000010 	.word	0x20000010
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000414 	.word	0x20000414

080011e0 <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <fnEncCounts2Angle+0x3c>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <fnEncCounts2Angle+0x40>)
 8001200:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <fnEncCounts2Angle+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	ee07 3a90 	vmov	s15, r3
}
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000000c 	.word	0x2000000c
 8001220:	2000021c 	.word	0x2000021c

08001224 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <fnEncReadCount+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <fnEncReadCount+0x60>)
 8001232:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	085b      	lsrs	r3, r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <fnEncReadCount+0x60>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d208      	bcs.n	8001256 <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8001244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <fnEncReadCount+0x60>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <fnEncReadCount+0x64>)
 8001252:	801a      	strh	r2, [r3, #0]
 8001254:	e003      	b.n	800125e <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <fnEncReadCount+0x60>)
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <fnEncReadCount+0x64>)
 800125c:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount)/2;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <fnEncReadCount+0x64>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffbc 	bl	80011e0 <fnEncCounts2Angle>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <fnEncReadCount+0x68>)
 8001276:	edc3 7a00 	vstr	s15, [r3]
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000330 	.word	0x20000330
 8001284:	20000214 	.word	0x20000214
 8001288:	20000216 	.word	0x20000216
 800128c:	20000218 	.word	0x20000218

08001290 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <fnEncCalibration+0x14>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 800129a:	f7ff ffc3 	bl	8001224 <fnEncReadCount>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40000400 	.word	0x40000400

080012a8 <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b5a      	cmp	r3, #90	; 0x5a
 80012b8:	d901      	bls.n	80012be <fnMoveAbsolute+0x16>
		iNumber = 90;
 80012ba:	235a      	movs	r3, #90	; 0x5a
 80012bc:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <fnMoveAbsolute+0xc4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d108      	bne.n	80012da <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e00e      	b.n	80012f8 <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <fnMoveAbsolute+0xc4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <fnMoveAbsolute+0xc8>)
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e001      	b.n	80012f8 <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d132      	bne.n	8001364 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <fnMoveAbsolute+0xcc>)
 8001300:	f240 620a 	movw	r2, #1546	; 0x60a
 8001304:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <fnMoveAbsolute+0xcc>)
 8001308:	2208      	movs	r2, #8
 800130a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <fnMoveAbsolute+0xd0>)
 800130e:	2222      	movs	r2, #34	; 0x22
 8001310:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001314:	227a      	movs	r2, #122	; 0x7a
 8001316:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <fnMoveAbsolute+0xd0>)
 800131a:	2260      	movs	r2, #96	; 0x60
 800131c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001320:	2200      	movs	r2, #0
 8001322:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <fnMoveAbsolute+0xd0>)
 800132a:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001334:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <fnMoveAbsolute+0xd0>)
 800133e:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0e1b      	lsrs	r3, r3, #24
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <fnMoveAbsolute+0xd0>)
 8001348:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <fnMoveAbsolute+0xd4>)
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <fnMoveAbsolute+0xd0>)
 800134e:	4909      	ldr	r1, [pc, #36]	; (8001374 <fnMoveAbsolute+0xcc>)
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <fnMoveAbsolute+0xd8>)
 8001352:	f001 fe59 	bl	8003008 <HAL_CAN_AddTxMessage>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 800135c:	f7ff fab6 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001360:	f000 feb6 	bl	80020d0 <Error_Handler>
		}

	}
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000005 	.word	0x20000005
 8001370:	fffffc18 	.word	0xfffffc18
 8001374:	200002a0 	.word	0x200002a0
 8001378:	20000260 	.word	0x20000260
 800137c:	20000268 	.word	0x20000268
 8001380:	2000022c 	.word	0x2000022c

08001384 <fnSetVelocity>:

//FRAME SET VELOCITY
void fnSetVelocity(uint32_t iNumber){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

		TxHeader.StdId = 0x60A;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <fnSetVelocity+0x78>)
 800138e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001392:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <fnSetVelocity+0x78>)
 8001396:	2208      	movs	r2, #8
 8001398:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <fnSetVelocity+0x7c>)
 800139c:	2222      	movs	r2, #34	; 0x22
 800139e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x81;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <fnSetVelocity+0x7c>)
 80013a2:	2281      	movs	r2, #129	; 0x81
 80013a4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <fnSetVelocity+0x7c>)
 80013a8:	2260      	movs	r2, #96	; 0x60
 80013aa:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <fnSetVelocity+0x7c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <fnSetVelocity+0x7c>)
 80013b8:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <fnSetVelocity+0x7c>)
 80013c2:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <fnSetVelocity+0x7c>)
 80013cc:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0e1b      	lsrs	r3, r3, #24
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <fnSetVelocity+0x7c>)
 80013d6:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <fnSetVelocity+0x80>)
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <fnSetVelocity+0x7c>)
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <fnSetVelocity+0x78>)
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <fnSetVelocity+0x84>)
 80013e0:	f001 fe12 	bl	8003008 <HAL_CAN_AddTxMessage>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <fnSetVelocity+0x6e>
			fnLEDsErrorState();
 80013ea:	f7ff fa6f 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80013ee:	f000 fe6f 	bl	80020d0 <Error_Handler>
		}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002a0 	.word	0x200002a0
 8001400:	20000260 	.word	0x20000260
 8001404:	20000268 	.word	0x20000268
 8001408:	2000022c 	.word	0x2000022c

0800140c <fnSingleMotionAction>:

void fnSingleMotionAction(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	switch (iSingleMachineStatus){
 8001410:	4b97      	ldr	r3, [pc, #604]	; (8001670 <fnSingleMotionAction+0x264>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3b0a      	subs	r3, #10
 8001416:	2b19      	cmp	r3, #25
 8001418:	f200 8127 	bhi.w	800166a <fnSingleMotionAction+0x25e>
 800141c:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <fnSingleMotionAction+0x18>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	0800148d 	.word	0x0800148d
 8001428:	0800166b 	.word	0x0800166b
 800142c:	0800166b 	.word	0x0800166b
 8001430:	0800166b 	.word	0x0800166b
 8001434:	0800166b 	.word	0x0800166b
 8001438:	0800166b 	.word	0x0800166b
 800143c:	0800166b 	.word	0x0800166b
 8001440:	0800166b 	.word	0x0800166b
 8001444:	0800166b 	.word	0x0800166b
 8001448:	0800166b 	.word	0x0800166b
 800144c:	080014ff 	.word	0x080014ff
 8001450:	0800166b 	.word	0x0800166b
 8001454:	0800166b 	.word	0x0800166b
 8001458:	0800166b 	.word	0x0800166b
 800145c:	0800166b 	.word	0x0800166b
 8001460:	08001511 	.word	0x08001511
 8001464:	0800166b 	.word	0x0800166b
 8001468:	0800166b 	.word	0x0800166b
 800146c:	0800166b 	.word	0x0800166b
 8001470:	0800166b 	.word	0x0800166b
 8001474:	0800157f 	.word	0x0800157f
 8001478:	0800166b 	.word	0x0800166b
 800147c:	0800166b 	.word	0x0800166b
 8001480:	0800166b 	.word	0x0800166b
 8001484:	0800166b 	.word	0x0800166b
 8001488:	080015e1 	.word	0x080015e1
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 800148c:	4b79      	ldr	r3, [pc, #484]	; (8001674 <fnSingleMotionAction+0x268>)
 800148e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001492:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <fnSingleMotionAction+0x268>)
 8001496:	2208      	movs	r2, #8
 8001498:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800149a:	4b77      	ldr	r3, [pc, #476]	; (8001678 <fnSingleMotionAction+0x26c>)
 800149c:	2222      	movs	r2, #34	; 0x22
 800149e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80014a0:	4b75      	ldr	r3, [pc, #468]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80014a6:	4b74      	ldr	r3, [pc, #464]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014a8:	2260      	movs	r2, #96	; 0x60
 80014aa:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80014ac:	4b72      	ldr	r3, [pc, #456]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80014b2:	4b71      	ldr	r3, [pc, #452]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014b4:	221f      	movs	r2, #31
 80014b6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80014b8:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80014be:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80014c4:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80014ca:	4b6c      	ldr	r3, [pc, #432]	; (800167c <fnSingleMotionAction+0x270>)
 80014cc:	4a6a      	ldr	r2, [pc, #424]	; (8001678 <fnSingleMotionAction+0x26c>)
 80014ce:	4969      	ldr	r1, [pc, #420]	; (8001674 <fnSingleMotionAction+0x268>)
 80014d0:	486b      	ldr	r0, [pc, #428]	; (8001680 <fnSingleMotionAction+0x274>)
 80014d2:	f001 fd99 	bl	8003008 <HAL_CAN_AddTxMessage>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <fnSingleMotionAction+0xda>
			fnLEDsErrorState();
 80014dc:	f7ff f9f6 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80014e0:	f000 fdf6 	bl	80020d0 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 20;
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
		}
		break;
 80014e4:	e0c1      	b.n	800166a <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 20;
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <fnSingleMotionAction+0x264>)
 80014e8:	2214      	movs	r2, #20
 80014ea:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 80014ec:	4b65      	ldr	r3, [pc, #404]	; (8001684 <fnSingleMotionAction+0x278>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	2364      	movs	r3, #100	; 0x64
 80014f4:	4964      	ldr	r1, [pc, #400]	; (8001688 <fnSingleMotionAction+0x27c>)
 80014f6:	4865      	ldr	r0, [pc, #404]	; (800168c <fnSingleMotionAction+0x280>)
 80014f8:	f004 fd46 	bl	8005f88 <HAL_UART_Transmit>
		break;
 80014fc:	e0b5      	b.n	800166a <fnSingleMotionAction+0x25e>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 80014fe:	4b64      	ldr	r3, [pc, #400]	; (8001690 <fnSingleMotionAction+0x284>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fed0 	bl	80012a8 <fnMoveAbsolute>
		iSingleMachineStatus = 25;
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <fnSingleMotionAction+0x264>)
 800150a:	2219      	movs	r2, #25
 800150c:	701a      	strb	r2, [r3, #0]
		break;
 800150e:	e0ac      	b.n	800166a <fnSingleMotionAction+0x25e>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8001510:	4b58      	ldr	r3, [pc, #352]	; (8001674 <fnSingleMotionAction+0x268>)
 8001512:	f240 620a 	movw	r2, #1546	; 0x60a
 8001516:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001518:	4b56      	ldr	r3, [pc, #344]	; (8001674 <fnSingleMotionAction+0x268>)
 800151a:	2208      	movs	r2, #8
 800151c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800151e:	4b56      	ldr	r3, [pc, #344]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001520:	2240      	movs	r2, #64	; 0x40
 8001522:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001524:	4b54      	ldr	r3, [pc, #336]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001526:	2241      	movs	r2, #65	; 0x41
 8001528:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800152a:	4b53      	ldr	r3, [pc, #332]	; (8001678 <fnSingleMotionAction+0x26c>)
 800152c:	2260      	movs	r2, #96	; 0x60
 800152e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001532:	2200      	movs	r2, #0
 8001534:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001536:	4b50      	ldr	r3, [pc, #320]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001538:	2200      	movs	r2, #0
 800153a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800153c:	4b4e      	ldr	r3, [pc, #312]	; (8001678 <fnSingleMotionAction+0x26c>)
 800153e:	2200      	movs	r2, #0
 8001540:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001544:	2200      	movs	r2, #0
 8001546:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <fnSingleMotionAction+0x26c>)
 800154a:	2200      	movs	r2, #0
 800154c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800154e:	4b4b      	ldr	r3, [pc, #300]	; (800167c <fnSingleMotionAction+0x270>)
 8001550:	4a49      	ldr	r2, [pc, #292]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001552:	4948      	ldr	r1, [pc, #288]	; (8001674 <fnSingleMotionAction+0x268>)
 8001554:	484a      	ldr	r0, [pc, #296]	; (8001680 <fnSingleMotionAction+0x274>)
 8001556:	f001 fd57 	bl	8003008 <HAL_CAN_AddTxMessage>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <fnSingleMotionAction+0x15e>
			fnLEDsErrorState();
 8001560:	f7ff f9b4 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001564:	f000 fdb4 	bl	80020d0 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSingleMachineStatus = 30;
		}
		break;
 8001568:	e07c      	b.n	8001664 <fnSingleMotionAction+0x258>
		else if (RxData[5] & 0b10000) {
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <fnSingleMotionAction+0x288>)
 800156c:	795b      	ldrb	r3, [r3, #5]
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b00      	cmp	r3, #0
 8001574:	d076      	beq.n	8001664 <fnSingleMotionAction+0x258>
			iSingleMachineStatus = 30;
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <fnSingleMotionAction+0x264>)
 8001578:	221e      	movs	r2, #30
 800157a:	701a      	strb	r2, [r3, #0]
		break;
 800157c:	e072      	b.n	8001664 <fnSingleMotionAction+0x258>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <fnSingleMotionAction+0x268>)
 8001580:	f240 620a 	movw	r2, #1546	; 0x60a
 8001584:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <fnSingleMotionAction+0x268>)
 8001588:	2208      	movs	r2, #8
 800158a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800158c:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <fnSingleMotionAction+0x26c>)
 800158e:	2222      	movs	r2, #34	; 0x22
 8001590:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001592:	4b39      	ldr	r3, [pc, #228]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001594:	2240      	movs	r2, #64	; 0x40
 8001596:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <fnSingleMotionAction+0x26c>)
 800159a:	2260      	movs	r2, #96	; 0x60
 800159c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015a6:	220f      	movs	r2, #15
 80015a8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80015b0:	4b31      	ldr	r3, [pc, #196]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80015b6:	4b30      	ldr	r3, [pc, #192]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80015bc:	4b2f      	ldr	r3, [pc, #188]	; (800167c <fnSingleMotionAction+0x270>)
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015c0:	492c      	ldr	r1, [pc, #176]	; (8001674 <fnSingleMotionAction+0x268>)
 80015c2:	482f      	ldr	r0, [pc, #188]	; (8001680 <fnSingleMotionAction+0x274>)
 80015c4:	f001 fd20 	bl	8003008 <HAL_CAN_AddTxMessage>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <fnSingleMotionAction+0x1cc>
			fnLEDsErrorState();
 80015ce:	f7ff f97d 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80015d2:	f000 fd7d 	bl	80020d0 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 35;
		}
		break;
 80015d6:	e048      	b.n	800166a <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 35;
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <fnSingleMotionAction+0x264>)
 80015da:	2223      	movs	r2, #35	; 0x23
 80015dc:	701a      	strb	r2, [r3, #0]
		break;
 80015de:	e044      	b.n	800166a <fnSingleMotionAction+0x25e>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <fnSingleMotionAction+0x268>)
 80015e2:	f240 620a 	movw	r2, #1546	; 0x60a
 80015e6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <fnSingleMotionAction+0x268>)
 80015ea:	2208      	movs	r2, #8
 80015ec:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015f6:	2241      	movs	r2, #65	; 0x41
 80015f8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <fnSingleMotionAction+0x26c>)
 80015fc:	2260      	movs	r2, #96	; 0x60
 80015fe:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001602:	2200      	movs	r2, #0
 8001604:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001608:	2200      	movs	r2, #0
 800160a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <fnSingleMotionAction+0x26c>)
 800160e:	2200      	movs	r2, #0
 8001610:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001614:	2200      	movs	r2, #0
 8001616:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <fnSingleMotionAction+0x26c>)
 800161a:	2200      	movs	r2, #0
 800161c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <fnSingleMotionAction+0x270>)
 8001620:	4a15      	ldr	r2, [pc, #84]	; (8001678 <fnSingleMotionAction+0x26c>)
 8001622:	4914      	ldr	r1, [pc, #80]	; (8001674 <fnSingleMotionAction+0x268>)
 8001624:	4816      	ldr	r0, [pc, #88]	; (8001680 <fnSingleMotionAction+0x274>)
 8001626:	f001 fcef 	bl	8003008 <HAL_CAN_AddTxMessage>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <fnSingleMotionAction+0x22e>
			fnLEDsErrorState();
 8001630:	f7ff f94c 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001634:	f000 fd4c 	bl	80020d0 <Error_Handler>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 8001638:	e016      	b.n	8001668 <fnSingleMotionAction+0x25c>
		else if (RxData[5] & 0b00100) {
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <fnSingleMotionAction+0x288>)
 800163c:	795b      	ldrb	r3, [r3, #5]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	d010      	beq.n	8001668 <fnSingleMotionAction+0x25c>
			iSingleMachineStatus = 100;
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <fnSingleMotionAction+0x264>)
 8001648:	2264      	movs	r2, #100	; 0x64
 800164a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <fnSingleMotionAction+0x28c>)
 800164e:	f004 f82f 	bl	80056b0 <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <fnSingleMotionAction+0x278>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29a      	uxth	r2, r3
 8001658:	2364      	movs	r3, #100	; 0x64
 800165a:	4910      	ldr	r1, [pc, #64]	; (800169c <fnSingleMotionAction+0x290>)
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <fnSingleMotionAction+0x280>)
 800165e:	f004 fc93 	bl	8005f88 <HAL_UART_Transmit>
		break;
 8001662:	e001      	b.n	8001668 <fnSingleMotionAction+0x25c>
		break;
 8001664:	bf00      	nop
 8001666:	e000      	b.n	800166a <fnSingleMotionAction+0x25e>
		break;
 8001668:	bf00      	nop
	}
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	200002a0 	.word	0x200002a0
 8001678:	20000260 	.word	0x20000260
 800167c:	20000268 	.word	0x20000268
 8001680:	2000022c 	.word	0x2000022c
 8001684:	20000000 	.word	0x20000000
 8001688:	0800a90c 	.word	0x0800a90c
 800168c:	200004ac 	.word	0x200004ac
 8001690:	20000258 	.word	0x20000258
 8001694:	2000026c 	.word	0x2000026c
 8001698:	20000460 	.word	0x20000460
 800169c:	0800a914 	.word	0x0800a914

080016a0 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0


	switch (iSerialMachineStatus){
 80016a4:	4bb3      	ldr	r3, [pc, #716]	; (8001974 <fnSerialMotionAction+0x2d4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	3b0a      	subs	r3, #10
 80016aa:	2b1e      	cmp	r3, #30
 80016ac:	f200 8160 	bhi.w	8001970 <fnSerialMotionAction+0x2d0>
 80016b0:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <fnSerialMotionAction+0x18>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	08001735 	.word	0x08001735
 80016bc:	08001971 	.word	0x08001971
 80016c0:	08001971 	.word	0x08001971
 80016c4:	08001971 	.word	0x08001971
 80016c8:	08001971 	.word	0x08001971
 80016cc:	08001971 	.word	0x08001971
 80016d0:	08001971 	.word	0x08001971
 80016d4:	08001971 	.word	0x08001971
 80016d8:	08001971 	.word	0x08001971
 80016dc:	08001971 	.word	0x08001971
 80016e0:	080017a7 	.word	0x080017a7
 80016e4:	08001971 	.word	0x08001971
 80016e8:	08001971 	.word	0x08001971
 80016ec:	08001971 	.word	0x08001971
 80016f0:	08001971 	.word	0x08001971
 80016f4:	080017b9 	.word	0x080017b9
 80016f8:	08001971 	.word	0x08001971
 80016fc:	08001971 	.word	0x08001971
 8001700:	08001971 	.word	0x08001971
 8001704:	08001971 	.word	0x08001971
 8001708:	08001829 	.word	0x08001829
 800170c:	08001971 	.word	0x08001971
 8001710:	08001971 	.word	0x08001971
 8001714:	08001971 	.word	0x08001971
 8001718:	08001971 	.word	0x08001971
 800171c:	0800188b 	.word	0x0800188b
 8001720:	08001971 	.word	0x08001971
 8001724:	08001971 	.word	0x08001971
 8001728:	08001971 	.word	0x08001971
 800172c:	08001971 	.word	0x08001971
 8001730:	08001905 	.word	0x08001905
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001734:	4b90      	ldr	r3, [pc, #576]	; (8001978 <fnSerialMotionAction+0x2d8>)
 8001736:	f240 620a 	movw	r2, #1546	; 0x60a
 800173a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800173c:	4b8e      	ldr	r3, [pc, #568]	; (8001978 <fnSerialMotionAction+0x2d8>)
 800173e:	2208      	movs	r2, #8
 8001740:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001742:	4b8e      	ldr	r3, [pc, #568]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001744:	2222      	movs	r2, #34	; 0x22
 8001746:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001748:	4b8c      	ldr	r3, [pc, #560]	; (800197c <fnSerialMotionAction+0x2dc>)
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800174e:	4b8b      	ldr	r3, [pc, #556]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001750:	2260      	movs	r2, #96	; 0x60
 8001752:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001754:	4b89      	ldr	r3, [pc, #548]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001756:	2200      	movs	r2, #0
 8001758:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <fnSerialMotionAction+0x2dc>)
 800175c:	221f      	movs	r2, #31
 800175e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001760:	4b86      	ldr	r3, [pc, #536]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001762:	2200      	movs	r2, #0
 8001764:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001766:	4b85      	ldr	r3, [pc, #532]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001768:	2200      	movs	r2, #0
 800176a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800176c:	4b83      	ldr	r3, [pc, #524]	; (800197c <fnSerialMotionAction+0x2dc>)
 800176e:	2200      	movs	r2, #0
 8001770:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001772:	4b83      	ldr	r3, [pc, #524]	; (8001980 <fnSerialMotionAction+0x2e0>)
 8001774:	4a81      	ldr	r2, [pc, #516]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001776:	4980      	ldr	r1, [pc, #512]	; (8001978 <fnSerialMotionAction+0x2d8>)
 8001778:	4882      	ldr	r0, [pc, #520]	; (8001984 <fnSerialMotionAction+0x2e4>)
 800177a:	f001 fc45 	bl	8003008 <HAL_CAN_AddTxMessage>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <fnSerialMotionAction+0xee>
			fnLEDsErrorState();
 8001784:	f7ff f8a2 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001788:	f000 fca2 	bl	80020d0 <Error_Handler>
		else{
			iSerialMachineStatus = 20;
			//SEND INFO THAT ENGINE IS WORKING
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
		}
		break;
 800178c:	e0f0      	b.n	8001970 <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 20;
 800178e:	4b79      	ldr	r3, [pc, #484]	; (8001974 <fnSerialMotionAction+0x2d4>)
 8001790:	2214      	movs	r2, #20
 8001792:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 8001794:	4b7c      	ldr	r3, [pc, #496]	; (8001988 <fnSerialMotionAction+0x2e8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b29a      	uxth	r2, r3
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	497b      	ldr	r1, [pc, #492]	; (800198c <fnSerialMotionAction+0x2ec>)
 800179e:	487c      	ldr	r0, [pc, #496]	; (8001990 <fnSerialMotionAction+0x2f0>)
 80017a0:	f004 fbf2 	bl	8005f88 <HAL_UART_Transmit>
		break;
 80017a4:	e0e4      	b.n	8001970 <fnSerialMotionAction+0x2d0>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 80017a6:	4b7b      	ldr	r3, [pc, #492]	; (8001994 <fnSerialMotionAction+0x2f4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd7c 	bl	80012a8 <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 80017b0:	4b70      	ldr	r3, [pc, #448]	; (8001974 <fnSerialMotionAction+0x2d4>)
 80017b2:	2219      	movs	r2, #25
 80017b4:	701a      	strb	r2, [r3, #0]
		break;
 80017b6:	e0db      	b.n	8001970 <fnSerialMotionAction+0x2d0>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 80017b8:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <fnSerialMotionAction+0x2d8>)
 80017ba:	f240 620a 	movw	r2, #1546	; 0x60a
 80017be:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80017c0:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <fnSerialMotionAction+0x2d8>)
 80017c2:	2208      	movs	r2, #8
 80017c4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80017c6:	4b6d      	ldr	r3, [pc, #436]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017ce:	2241      	movs	r2, #65	; 0x41
 80017d0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80017d2:	4b6a      	ldr	r3, [pc, #424]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017d4:	2260      	movs	r2, #96	; 0x60
 80017d6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80017de:	4b67      	ldr	r3, [pc, #412]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80017e4:	4b65      	ldr	r3, [pc, #404]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80017ea:	4b64      	ldr	r3, [pc, #400]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80017f0:	4b62      	ldr	r3, [pc, #392]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80017f6:	4b62      	ldr	r3, [pc, #392]	; (8001980 <fnSerialMotionAction+0x2e0>)
 80017f8:	4a60      	ldr	r2, [pc, #384]	; (800197c <fnSerialMotionAction+0x2dc>)
 80017fa:	495f      	ldr	r1, [pc, #380]	; (8001978 <fnSerialMotionAction+0x2d8>)
 80017fc:	4861      	ldr	r0, [pc, #388]	; (8001984 <fnSerialMotionAction+0x2e4>)
 80017fe:	f001 fc03 	bl	8003008 <HAL_CAN_AddTxMessage>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <fnSerialMotionAction+0x172>
			fnLEDsErrorState();
 8001808:	f7ff f860 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800180c:	f000 fc60 	bl	80020d0 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 8001810:	e0ab      	b.n	800196a <fnSerialMotionAction+0x2ca>
		else if (RxData[5] & 0b10000) {
 8001812:	4b61      	ldr	r3, [pc, #388]	; (8001998 <fnSerialMotionAction+0x2f8>)
 8001814:	795b      	ldrb	r3, [r3, #5]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80a5 	beq.w	800196a <fnSerialMotionAction+0x2ca>
			iSerialMachineStatus = 30;
 8001820:	4b54      	ldr	r3, [pc, #336]	; (8001974 <fnSerialMotionAction+0x2d4>)
 8001822:	221e      	movs	r2, #30
 8001824:	701a      	strb	r2, [r3, #0]
		break;
 8001826:	e0a0      	b.n	800196a <fnSerialMotionAction+0x2ca>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <fnSerialMotionAction+0x2d8>)
 800182a:	f240 620a 	movw	r2, #1546	; 0x60a
 800182e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <fnSerialMotionAction+0x2d8>)
 8001832:	2208      	movs	r2, #8
 8001834:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001838:	2222      	movs	r2, #34	; 0x22
 800183a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <fnSerialMotionAction+0x2dc>)
 800183e:	2240      	movs	r2, #64	; 0x40
 8001840:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001844:	2260      	movs	r2, #96	; 0x60
 8001846:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <fnSerialMotionAction+0x2dc>)
 800184a:	2200      	movs	r2, #0
 800184c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001850:	220f      	movs	r2, #15
 8001852:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001856:	2200      	movs	r2, #0
 8001858:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <fnSerialMotionAction+0x2dc>)
 800185c:	2200      	movs	r2, #0
 800185e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <fnSerialMotionAction+0x2dc>)
 8001862:	2200      	movs	r2, #0
 8001864:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001866:	4b46      	ldr	r3, [pc, #280]	; (8001980 <fnSerialMotionAction+0x2e0>)
 8001868:	4a44      	ldr	r2, [pc, #272]	; (800197c <fnSerialMotionAction+0x2dc>)
 800186a:	4943      	ldr	r1, [pc, #268]	; (8001978 <fnSerialMotionAction+0x2d8>)
 800186c:	4845      	ldr	r0, [pc, #276]	; (8001984 <fnSerialMotionAction+0x2e4>)
 800186e:	f001 fbcb 	bl	8003008 <HAL_CAN_AddTxMessage>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <fnSerialMotionAction+0x1e2>
			fnLEDsErrorState();
 8001878:	f7ff f828 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800187c:	f000 fc28 	bl	80020d0 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 8001880:	e076      	b.n	8001970 <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 35;
 8001882:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <fnSerialMotionAction+0x2d4>)
 8001884:	2223      	movs	r2, #35	; 0x23
 8001886:	701a      	strb	r2, [r3, #0]
		break;
 8001888:	e072      	b.n	8001970 <fnSerialMotionAction+0x2d0>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <fnSerialMotionAction+0x2d8>)
 800188c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001890:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <fnSerialMotionAction+0x2d8>)
 8001894:	2208      	movs	r2, #8
 8001896:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <fnSerialMotionAction+0x2dc>)
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018a0:	2241      	movs	r2, #65	; 0x41
 80018a2:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80018a4:	4b35      	ldr	r3, [pc, #212]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018a6:	2260      	movs	r2, #96	; 0x60
 80018a8:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80018b6:	4b31      	ldr	r3, [pc, #196]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <fnSerialMotionAction+0x2e0>)
 80018ca:	4a2c      	ldr	r2, [pc, #176]	; (800197c <fnSerialMotionAction+0x2dc>)
 80018cc:	492a      	ldr	r1, [pc, #168]	; (8001978 <fnSerialMotionAction+0x2d8>)
 80018ce:	482d      	ldr	r0, [pc, #180]	; (8001984 <fnSerialMotionAction+0x2e4>)
 80018d0:	f001 fb9a 	bl	8003008 <HAL_CAN_AddTxMessage>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <fnSerialMotionAction+0x244>
			fnLEDsErrorState();
 80018da:	f7fe fff7 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80018de:	f000 fbf7 	bl	80020d0 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 80018e2:	e044      	b.n	800196e <fnSerialMotionAction+0x2ce>
		else if (RxData[5] & 0b00100) {
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <fnSerialMotionAction+0x2f8>)
 80018e6:	795b      	ldrb	r3, [r3, #5]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03e      	beq.n	800196e <fnSerialMotionAction+0x2ce>
			iSerialCounter++;
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <fnSerialMotionAction+0x2fc>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <fnSerialMotionAction+0x2fc>)
 80018fa:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <fnSerialMotionAction+0x2d4>)
 80018fe:	2228      	movs	r2, #40	; 0x28
 8001900:	701a      	strb	r2, [r3, #0]
		break;
 8001902:	e034      	b.n	800196e <fnSerialMotionAction+0x2ce>

	case 40:
		//REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <fnSerialMotionAction+0x2fc>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <fnSerialMotionAction+0x300>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d114      	bne.n	800193e <fnSerialMotionAction+0x29e>
			iSerialMachineStatus = 100;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <fnSerialMotionAction+0x2d4>)
 8001916:	2264      	movs	r2, #100	; 0x64
 8001918:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <fnSerialMotionAction+0x304>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <fnSerialMotionAction+0x300>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 8001926:	4820      	ldr	r0, [pc, #128]	; (80019a8 <fnSerialMotionAction+0x308>)
 8001928:	f003 fe23 	bl	8005572 <HAL_TIM_Base_Stop>
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <fnSerialMotionAction+0x2e8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29a      	uxth	r2, r3
 8001932:	2364      	movs	r3, #100	; 0x64
 8001934:	491d      	ldr	r1, [pc, #116]	; (80019ac <fnSerialMotionAction+0x30c>)
 8001936:	4816      	ldr	r0, [pc, #88]	; (8001990 <fnSerialMotionAction+0x2f0>)
 8001938:	f004 fb26 	bl	8005f88 <HAL_UART_Transmit>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 800193c:	e018      	b.n	8001970 <fnSerialMotionAction+0x2d0>
		else if (iSerialCounter % 2 == 0) {
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <fnSerialMotionAction+0x2fc>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <fnSerialMotionAction+0x2bc>
			iPosition = iSerialRange;
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <fnSerialMotionAction+0x304>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a10      	ldr	r2, [pc, #64]	; (8001994 <fnSerialMotionAction+0x2f4>)
 8001952:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <fnSerialMotionAction+0x2d4>)
 8001956:	220a      	movs	r2, #10
 8001958:	701a      	strb	r2, [r3, #0]
		break;
 800195a:	e009      	b.n	8001970 <fnSerialMotionAction+0x2d0>
			iPosition = 0;
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <fnSerialMotionAction+0x2f4>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <fnSerialMotionAction+0x2d4>)
 8001964:	220a      	movs	r2, #10
 8001966:	701a      	strb	r2, [r3, #0]
		break;
 8001968:	e002      	b.n	8001970 <fnSerialMotionAction+0x2d0>
		break;
 800196a:	bf00      	nop
 800196c:	e000      	b.n	8001970 <fnSerialMotionAction+0x2d0>
		break;
 800196e:	bf00      	nop
	}
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000009 	.word	0x20000009
 8001978:	200002a0 	.word	0x200002a0
 800197c:	20000260 	.word	0x20000260
 8001980:	20000268 	.word	0x20000268
 8001984:	2000022c 	.word	0x2000022c
 8001988:	20000000 	.word	0x20000000
 800198c:	0800a90c 	.word	0x0800a90c
 8001990:	200004ac 	.word	0x200004ac
 8001994:	20000258 	.word	0x20000258
 8001998:	2000026c 	.word	0x2000026c
 800199c:	20000010 	.word	0x20000010
 80019a0:	20000018 	.word	0x20000018
 80019a4:	20000014 	.word	0x20000014
 80019a8:	200002e4 	.word	0x200002e4
 80019ac:	0800a914 	.word	0x0800a914

080019b0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3f      	ldr	r2, [pc, #252]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d112      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (iHomingStatus != 1) {
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d006      	beq.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 80019ca:	f7fe ff95 	bl	80008f8 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80019ce:	2101      	movs	r1, #1
 80019d0:	483c      	ldr	r0, [pc, #240]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019d2:	f002 fac4 	bl	8003f5e <HAL_GPIO_TogglePin>
	else if(htim -> Instance == TIM14){
		fnReset();
	}


}
 80019d6:	e06d      	b.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	2101      	movs	r1, #1
 80019dc:	4839      	ldr	r0, [pc, #228]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019de:	f002 faa5 	bl	8003f2c <HAL_GPIO_WritePin>
			fnEncReadCount();
 80019e2:	f7ff fc1f 	bl	8001224 <fnEncReadCount>
}
 80019e6:	e065      	b.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM7){
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a36      	ldr	r2, [pc, #216]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d106      	bne.n	8001a00 <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 80019f2:	f7ff fd0b 	bl	800140c <fnSingleMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	4832      	ldr	r0, [pc, #200]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019fa:	f002 fab0 	bl	8003f5e <HAL_GPIO_TogglePin>
}
 80019fe:	e059      	b.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM10){
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a31      	ldr	r2, [pc, #196]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d106      	bne.n	8001a18 <HAL_TIM_PeriodElapsedCallback+0x68>
		fnSerialMotionAction();
 8001a0a:	f7ff fe49 	bl	80016a0 <fnSerialMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	482c      	ldr	r0, [pc, #176]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a12:	f002 faa4 	bl	8003f5e <HAL_GPIO_TogglePin>
}
 8001a16:	e04d      	b.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM11){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2c      	ldr	r2, [pc, #176]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d141      	bne.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0xf6>
		if (iMode == 0 && iSingleMachineStatus != 100) {
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11b      	bne.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d017      	beq.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0xb4>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8001a34:	4b29      	ldr	r3, [pc, #164]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a3e:	ec53 2b17 	vmov	r2, r3, d7
 8001a42:	4927      	ldr	r1, [pc, #156]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a44:	4827      	ldr	r0, [pc, #156]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a46:	f006 fccd 	bl	80083e4 <siprintf>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a4e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5a:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a5c:	4823      	ldr	r0, [pc, #140]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a5e:	f004 fa93 	bl	8005f88 <HAL_UART_Transmit>
}
 8001a62:	e027      	b.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
		else if (iMode == 1 && iSerialMachineStatus != 100) {
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d122      	bne.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d01e      	beq.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a80:	ec53 2b17 	vmov	r2, r3, d7
 8001a84:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a86:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a88:	f006 fcac 	bl	80083e4 <siprintf>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a90:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a9c:	4911      	ldr	r1, [pc, #68]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a9e:	4813      	ldr	r0, [pc, #76]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001aa0:	f004 fa72 	bl	8005f88 <HAL_UART_Transmit>
}
 8001aa4:	e006      	b.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM14){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x104>
		fnReset();
 8001ab0:	f7ff fa64 	bl	8000f7c <fnReset>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40001000 	.word	0x40001000
 8001ac0:	20000007 	.word	0x20000007
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40001400 	.word	0x40001400
 8001acc:	40014400 	.word	0x40014400
 8001ad0:	40014800 	.word	0x40014800
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000218 	.word	0x20000218
 8001ae0:	0800a8c0 	.word	0x0800a8c0
 8001ae4:	200002d4 	.word	0x200002d4
 8001ae8:	20000254 	.word	0x20000254
 8001aec:	200004ac 	.word	0x200004ac
 8001af0:	20000009 	.word	0x20000009
 8001af4:	40002000 	.word	0x40002000

08001af8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b08:	d104      	bne.n	8001b14 <HAL_GPIO_EXTI_Callback+0x1c>
			iTempRxData2 = RxData[6];
			iTempRxData3 = RxData[7];
		}
		*/

		fnSetVelocity(iVelocity);
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fc38 	bl	8001384 <fnSetVelocity>
	}
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000025c 	.word	0x2000025c

08001b20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b24:	f000 ffba 	bl	8002a9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b28:	f000 f874 	bl	8001c14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b2c:	f7fe fde0 	bl	80006f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001b30:	f000 fe84 	bl	800283c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001b34:	f000 fefe 	bl	8002934 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001b38:	f7fe fd56 	bl	80005e8 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001b3c:	f000 fca2 	bl	8002484 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001b40:	f000 fc4a 	bl	80023d8 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001b44:	f000 fcd6 	bl	80024f4 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001b48:	f000 fd0c 	bl	8002564 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001b4c:	f000 fd2e 	bl	80025ac <MX_TIM11_Init>
	MX_TIM14_Init();
 8001b50:	f000 fd50 	bl	80025f4 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b54:	f7fe fdcc 	bl	80006f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001b58:	f000 fe70 	bl	800283c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001b5c:	f000 feea 	bl	8002934 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001b60:	f7fe fd42 	bl	80005e8 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001b64:	f000 fc8e 	bl	8002484 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001b68:	f000 fc36 	bl	80023d8 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001b6c:	f000 fcc2 	bl	80024f4 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001b70:	f000 fcf8 	bl	8002564 <MX_TIM10_Init>
	MX_TIM14_Init();
 8001b74:	f000 fd3e 	bl	80025f4 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4921      	ldr	r1, [pc, #132]	; (8001c00 <main+0xe0>)
 8001b7c:	4821      	ldr	r0, [pc, #132]	; (8001c04 <main+0xe4>)
 8001b7e:	f004 fa96 	bl	80060ae <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8001b82:	4821      	ldr	r0, [pc, #132]	; (8001c08 <main+0xe8>)
 8001b84:	f001 f9fc 	bl	8002f80 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <main+0xec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <main+0xec>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <main+0xec>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <main+0xec>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <main+0xec>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <main+0xec>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <main+0xf0>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <main+0xf0>)
 8001bb4:	2212      	movs	r2, #18
 8001bb6:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <main+0xf0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <main+0xf0>)
 8001bc0:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001bc4:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <main+0xf0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <main+0xf0>)
 8001bce:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001bd2:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <main+0xf0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <main+0xf0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <main+0xf0>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <main+0xf0>)
 8001be8:	2214      	movs	r2, #20
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001bec:	4908      	ldr	r1, [pc, #32]	; (8001c10 <main+0xf0>)
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <main+0xe8>)
 8001bf0:	f001 f8da 	bl	8002da8 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <main+0xe8>)
 8001bf8:	f001 fbf3 	bl	80033e2 <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001bfc:	e7fe      	b.n	8001bfc <main+0xdc>
 8001bfe:	bf00      	nop
 8001c00:	20000274 	.word	0x20000274
 8001c04:	200004ac 	.word	0x200004ac
 8001c08:	2000022c 	.word	0x2000022c
 8001c0c:	200002a0 	.word	0x200002a0
 8001c10:	20000278 	.word	0x20000278

08001c14 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0b8      	sub	sp, #224	; 0xe0
 8001c18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c1e:	2234      	movs	r2, #52	; 0x34
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 ff94 	bl	8007b50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	2290      	movs	r2, #144	; 0x90
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f005 ff85 	bl	8007b50 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001c46:	f002 fb05 	bl	8004254 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <SystemClock_Config+0x128>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a3b      	ldr	r2, [pc, #236]	; (8001d3c <SystemClock_Config+0x128>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <SystemClock_Config+0x128>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <SystemClock_Config+0x12c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c6a:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <SystemClock_Config+0x12c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <SystemClock_Config+0x12c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001ca0:	2360      	movs	r3, #96	; 0x60
 8001ca2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cac:	2304      	movs	r3, #4
 8001cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fb29 	bl	8004314 <HAL_RCC_OscConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001cc8:	f000 fa02 	bl	80020d0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ccc:	f002 fad2 	bl	8004274 <HAL_PWREx_EnableOverDrive>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001cd6:	f000 f9fb 	bl	80020d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cda:	230f      	movs	r3, #15
 8001cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cfa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cfe:	2103      	movs	r1, #3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fdb5 	bl	8004870 <HAL_RCC_ClockConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001d0c:	f000 f9e0 	bl	80020d0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <SystemClock_Config+0x130>)
 8001d12:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 ffa6 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8001d2e:	f000 f9cf 	bl	80020d0 <Error_Handler>
	}
}
 8001d32:	bf00      	nop
 8001d34:	37e0      	adds	r7, #224	; 0xe0
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000
 8001d44:	00200100 	.word	0x00200100

08001d48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4ab2      	ldr	r2, [pc, #712]	; (8002020 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	f040 8153 	bne.w	8002002 <HAL_UART_RxCpltCallback+0x2ba>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	49b1      	ldr	r1, [pc, #708]	; (8002024 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d60:	48b1      	ldr	r0, [pc, #708]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001d62:	f006 fb5f 	bl	8008424 <strncmp>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 8001d6c:	4baf      	ldr	r3, [pc, #700]	; (800202c <HAL_UART_RxCpltCallback+0x2e4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 8001d72:	4baf      	ldr	r3, [pc, #700]	; (8002030 <HAL_UART_RxCpltCallback+0x2e8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8001d78:	48ae      	ldr	r0, [pc, #696]	; (8002034 <HAL_UART_RxCpltCallback+0x2ec>)
 8001d7a:	f003 fc21 	bl	80055c0 <HAL_TIM_Base_Start_IT>
 8001d7e:	e146      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 8001d80:	2204      	movs	r2, #4
 8001d82:	49ad      	ldr	r1, [pc, #692]	; (8002038 <HAL_UART_RxCpltCallback+0x2f0>)
 8001d84:	48a8      	ldr	r0, [pc, #672]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001d86:	f006 fb4d 	bl	8008424 <strncmp>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 8001d90:	4baa      	ldr	r3, [pc, #680]	; (800203c <HAL_UART_RxCpltCallback+0x2f4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001d96:	2101      	movs	r1, #1
 8001d98:	48a9      	ldr	r0, [pc, #676]	; (8002040 <HAL_UART_RxCpltCallback+0x2f8>)
 8001d9a:	f002 f8e0 	bl	8003f5e <HAL_GPIO_TogglePin>
 8001d9e:	e136      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 8001da0:	2204      	movs	r2, #4
 8001da2:	49a8      	ldr	r1, [pc, #672]	; (8002044 <HAL_UART_RxCpltCallback+0x2fc>)
 8001da4:	48a0      	ldr	r0, [pc, #640]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001da6:	f006 fb3d 	bl	8008424 <strncmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 8001db0:	4ba2      	ldr	r3, [pc, #648]	; (800203c <HAL_UART_RxCpltCallback+0x2f4>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	48a1      	ldr	r0, [pc, #644]	; (8002040 <HAL_UART_RxCpltCallback+0x2f8>)
 8001dba:	f002 f8d0 	bl	8003f5e <HAL_GPIO_TogglePin>
 8001dbe:	e126      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	49a1      	ldr	r1, [pc, #644]	; (8002048 <HAL_UART_RxCpltCallback+0x300>)
 8001dc4:	4898      	ldr	r0, [pc, #608]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001dc6:	f006 fb2d 	bl	8008424 <strncmp>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <HAL_UART_RxCpltCallback+0x96>
			iSelected_leg = 0;
 8001dd0:	4b9e      	ldr	r3, [pc, #632]	; (800204c <HAL_UART_RxCpltCallback+0x304>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001dd6:	489e      	ldr	r0, [pc, #632]	; (8002050 <HAL_UART_RxCpltCallback+0x308>)
 8001dd8:	f003 fbf2 	bl	80055c0 <HAL_TIM_Base_Start_IT>
 8001ddc:	e117      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 8001dde:	2204      	movs	r2, #4
 8001de0:	499c      	ldr	r1, [pc, #624]	; (8002054 <HAL_UART_RxCpltCallback+0x30c>)
 8001de2:	4891      	ldr	r0, [pc, #580]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001de4:	f006 fb1e 	bl	8008424 <strncmp>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_UART_RxCpltCallback+0xb4>
			iSelected_leg = 1;
 8001dee:	4b97      	ldr	r3, [pc, #604]	; (800204c <HAL_UART_RxCpltCallback+0x304>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001df4:	4896      	ldr	r0, [pc, #600]	; (8002050 <HAL_UART_RxCpltCallback+0x308>)
 8001df6:	f003 fbe3 	bl	80055c0 <HAL_TIM_Base_Start_IT>
 8001dfa:	e108      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001dfc:	4b8a      	ldr	r3, [pc, #552]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001dfe:	78db      	ldrb	r3, [r3, #3]
 8001e00:	2b50      	cmp	r3, #80	; 0x50
 8001e02:	d113      	bne.n	8001e2c <HAL_UART_RxCpltCallback+0xe4>

			if(iMode == 0){
 8001e04:	4b8d      	ldr	r3, [pc, #564]	; (800203c <HAL_UART_RxCpltCallback+0x2f4>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 80ff 	bne.w	800200e <HAL_UART_RxCpltCallback+0x2c6>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001e10:	4885      	ldr	r0, [pc, #532]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001e12:	f005 fe6f 	bl	8007af4 <atoi>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <HAL_UART_RxCpltCallback+0x310>)
 8001e1c:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001e1e:	4b8f      	ldr	r3, [pc, #572]	; (800205c <HAL_UART_RxCpltCallback+0x314>)
 8001e20:	220a      	movs	r2, #10
 8001e22:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001e24:	488e      	ldr	r0, [pc, #568]	; (8002060 <HAL_UART_RxCpltCallback+0x318>)
 8001e26:	f003 fbcb 	bl	80055c0 <HAL_TIM_Base_Start_IT>
 8001e2a:	e0f0      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	498d      	ldr	r1, [pc, #564]	; (8002064 <HAL_UART_RxCpltCallback+0x31c>)
 8001e30:	487d      	ldr	r0, [pc, #500]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001e32:	f006 faf7 	bl	8008424 <strncmp>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d11f      	bne.n	8001e7c <HAL_UART_RxCpltCallback+0x134>

			if(iMode == 1 && iSelected_leg != 100 && iSerialReps != 0 && iSerialRange != 0){
 8001e3c:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_UART_RxCpltCallback+0x2f4>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	f040 80e3 	bne.w	800200e <HAL_UART_RxCpltCallback+0x2c6>
 8001e48:	4b80      	ldr	r3, [pc, #512]	; (800204c <HAL_UART_RxCpltCallback+0x304>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	f000 80dd 	beq.w	800200e <HAL_UART_RxCpltCallback+0x2c6>
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <HAL_UART_RxCpltCallback+0x320>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80d8 	beq.w	800200e <HAL_UART_RxCpltCallback+0x2c6>
 8001e5e:	4b83      	ldr	r3, [pc, #524]	; (800206c <HAL_UART_RxCpltCallback+0x324>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80d3 	beq.w	800200e <HAL_UART_RxCpltCallback+0x2c6>
				iSerialCounter = 0;
 8001e68:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_UART_RxCpltCallback+0x328>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 8001e6e:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_UART_RxCpltCallback+0x32c>)
 8001e70:	220a      	movs	r2, #10
 8001e72:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 8001e74:	4880      	ldr	r0, [pc, #512]	; (8002078 <HAL_UART_RxCpltCallback+0x330>)
 8001e76:	f003 fba3 	bl	80055c0 <HAL_TIM_Base_Start_IT>
 8001e7a:	e0c8      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	2b4e      	cmp	r3, #78	; 0x4e
 8001e82:	d10d      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x158>
			if(iMode == 1){
 8001e84:	4b6d      	ldr	r3, [pc, #436]	; (800203c <HAL_UART_RxCpltCallback+0x2f4>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f040 80bf 	bne.w	800200e <HAL_UART_RxCpltCallback+0x2c6>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 8001e90:	4865      	ldr	r0, [pc, #404]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001e92:	f005 fe2f 	bl	8007af4 <atoi>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_UART_RxCpltCallback+0x320>)
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e0b6      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 8001ea0:	4b61      	ldr	r3, [pc, #388]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001ea2:	78db      	ldrb	r3, [r3, #3]
 8001ea4:	2b52      	cmp	r3, #82	; 0x52
 8001ea6:	d111      	bne.n	8001ecc <HAL_UART_RxCpltCallback+0x184>
			if(iMode == 1){
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_UART_RxCpltCallback+0x2f4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	f040 80ad 	bne.w	800200e <HAL_UART_RxCpltCallback+0x2c6>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 8001eb4:	485c      	ldr	r0, [pc, #368]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001eb6:	f005 fe1d 	bl	8007af4 <atoi>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	; (800206c <HAL_UART_RxCpltCallback+0x324>)
 8001ec0:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 8001ec2:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_UART_RxCpltCallback+0x324>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a64      	ldr	r2, [pc, #400]	; (8002058 <HAL_UART_RxCpltCallback+0x310>)
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e0a0      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
			}
		}

		//GENERAL STOP COMMAND [HALT]
		else if(strncmp(sUserMessage, sGeneralStop, 4) == 0){
 8001ecc:	2204      	movs	r2, #4
 8001ece:	496b      	ldr	r1, [pc, #428]	; (800207c <HAL_UART_RxCpltCallback+0x334>)
 8001ed0:	4855      	ldr	r0, [pc, #340]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001ed2:	f006 faa7 	bl	8008424 <strncmp>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d168      	bne.n	8001fae <HAL_UART_RxCpltCallback+0x266>

			//QUICK STOP
			TxHeader.StdId = 0x60A;
 8001edc:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_UART_RxCpltCallback+0x338>)
 8001ede:	f240 620a 	movw	r2, #1546	; 0x60a
 8001ee2:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001ee4:	4b66      	ldr	r3, [pc, #408]	; (8002080 <HAL_UART_RxCpltCallback+0x338>)
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001eea:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001eec:	2222      	movs	r2, #34	; 0x22
 8001eee:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001ef0:	4b64      	ldr	r3, [pc, #400]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001ef8:	2260      	movs	r2, #96	; 0x60
 8001efa:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001efc:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x02;
 8001f02:	4b60      	ldr	r3, [pc, #384]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001f08:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001f14:	4b5b      	ldr	r3, [pc, #364]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001f1a:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <HAL_UART_RxCpltCallback+0x340>)
 8001f1c:	4a59      	ldr	r2, [pc, #356]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f1e:	4958      	ldr	r1, [pc, #352]	; (8002080 <HAL_UART_RxCpltCallback+0x338>)
 8001f20:	485a      	ldr	r0, [pc, #360]	; (800208c <HAL_UART_RxCpltCallback+0x344>)
 8001f22:	f001 f871 	bl	8003008 <HAL_CAN_AddTxMessage>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_UART_RxCpltCallback+0x1ee>
				fnLEDsErrorState();
 8001f2c:	f7fe fcce 	bl	80008cc <fnLEDsErrorState>
				Error_Handler();
 8001f30:	f000 f8ce 	bl	80020d0 <Error_Handler>
 8001f34:	e06b      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
			}
			else{
				//DISBALE VOLTAGE
				TxHeader.StdId = 0x60A;
 8001f36:	4b52      	ldr	r3, [pc, #328]	; (8002080 <HAL_UART_RxCpltCallback+0x338>)
 8001f38:	f240 620a 	movw	r2, #1546	; 0x60a
 8001f3c:	601a      	str	r2, [r3, #0]
				TxHeader.DLC = 8;
 8001f3e:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_UART_RxCpltCallback+0x338>)
 8001f40:	2208      	movs	r2, #8
 8001f42:	611a      	str	r2, [r3, #16]
				TxData[0] = 0x22;
 8001f44:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f46:	2222      	movs	r2, #34	; 0x22
 8001f48:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x40;
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0x60;
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f52:	2260      	movs	r2, #96	; 0x60
 8001f54:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0x00;
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0x00;
 8001f5c:	4b49      	ldr	r3, [pc, #292]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	711a      	strb	r2, [r3, #4]
				TxData[5] = 0x00;
 8001f62:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	715a      	strb	r2, [r3, #5]
				TxData[6] = 0x00;
 8001f68:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	719a      	strb	r2, [r3, #6]
				TxData[7] = 0x00;
 8001f6e:	4b45      	ldr	r3, [pc, #276]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	71da      	strb	r2, [r3, #7]

				if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001f74:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_UART_RxCpltCallback+0x340>)
 8001f76:	4a43      	ldr	r2, [pc, #268]	; (8002084 <HAL_UART_RxCpltCallback+0x33c>)
 8001f78:	4941      	ldr	r1, [pc, #260]	; (8002080 <HAL_UART_RxCpltCallback+0x338>)
 8001f7a:	4844      	ldr	r0, [pc, #272]	; (800208c <HAL_UART_RxCpltCallback+0x344>)
 8001f7c:	f001 f844 	bl	8003008 <HAL_CAN_AddTxMessage>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_UART_RxCpltCallback+0x248>
					fnLEDsErrorState();
 8001f86:	f7fe fca1 	bl	80008cc <fnLEDsErrorState>
					Error_Handler();
 8001f8a:	f000 f8a1 	bl	80020d0 <Error_Handler>
 8001f8e:	e03e      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
				}
				else {
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f96:	482a      	ldr	r0, [pc, #168]	; (8002040 <HAL_UART_RxCpltCallback+0x2f8>)
 8001f98:	f001 ffc8 	bl	8003f2c <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart3, sStopState, iLengthOut, 100);
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_UART_RxCpltCallback+0x348>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	2364      	movs	r3, #100	; 0x64
 8001fa4:	493b      	ldr	r1, [pc, #236]	; (8002094 <HAL_UART_RxCpltCallback+0x34c>)
 8001fa6:	483c      	ldr	r0, [pc, #240]	; (8002098 <HAL_UART_RxCpltCallback+0x350>)
 8001fa8:	f003 ffee 	bl	8005f88 <HAL_UART_Transmit>
 8001fac:	e02f      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
				}
			}
		}

		//RESET COMMAND [RSET]
		else if(strncmp(sUserMessage, sReset, 4) == 0){
 8001fae:	2204      	movs	r2, #4
 8001fb0:	493a      	ldr	r1, [pc, #232]	; (800209c <HAL_UART_RxCpltCallback+0x354>)
 8001fb2:	481d      	ldr	r0, [pc, #116]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001fb4:	f006 fa36 	bl	8008424 <strncmp>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d112      	bne.n	8001fe4 <HAL_UART_RxCpltCallback+0x29c>
			iMachineStatus = 10;
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_UART_RxCpltCallback+0x2e4>)
 8001fc0:	220a      	movs	r2, #10
 8001fc2:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 100;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_UART_RxCpltCallback+0x2e8>)
 8001fc6:	2264      	movs	r2, #100	; 0x64
 8001fc8:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim7);
 8001fca:	4825      	ldr	r0, [pc, #148]	; (8002060 <HAL_UART_RxCpltCallback+0x318>)
 8001fcc:	f003 fb70 	bl	80056b0 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim10);
 8001fd0:	4829      	ldr	r0, [pc, #164]	; (8002078 <HAL_UART_RxCpltCallback+0x330>)
 8001fd2:	f003 fb6d 	bl	80056b0 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fdc:	4818      	ldr	r0, [pc, #96]	; (8002040 <HAL_UART_RxCpltCallback+0x2f8>)
 8001fde:	f001 ffa5 	bl	8003f2c <HAL_GPIO_WritePin>
 8001fe2:	e014      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
		}

		//CONTINUE COMMAND [CONT]
		else if(strncmp(sUserMessage, sContinue, 4) == 0){
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	492e      	ldr	r1, [pc, #184]	; (80020a0 <HAL_UART_RxCpltCallback+0x358>)
 8001fe8:	480f      	ldr	r0, [pc, #60]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8001fea:	f006 fa1b 	bl	8008424 <strncmp>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10c      	bne.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
			iMachineStatus=10;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_UART_RxCpltCallback+0x2e4>)
 8001ff6:	220a      	movs	r2, #10
 8001ff8:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim14);
 8001ffa:	482a      	ldr	r0, [pc, #168]	; (80020a4 <HAL_UART_RxCpltCallback+0x35c>)
 8001ffc:	f003 fae0 	bl	80055c0 <HAL_TIM_Base_Start_IT>
 8002000:	e005      	b.n	800200e <HAL_UART_RxCpltCallback+0x2c6>
		}

	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 8002002:	2364      	movs	r3, #100	; 0x64
 8002004:	220c      	movs	r2, #12
 8002006:	4928      	ldr	r1, [pc, #160]	; (80020a8 <HAL_UART_RxCpltCallback+0x360>)
 8002008:	4823      	ldr	r0, [pc, #140]	; (8002098 <HAL_UART_RxCpltCallback+0x350>)
 800200a:	f003 ffbd 	bl	8005f88 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 800200e:	2204      	movs	r2, #4
 8002010:	4905      	ldr	r1, [pc, #20]	; (8002028 <HAL_UART_RxCpltCallback+0x2e0>)
 8002012:	4821      	ldr	r0, [pc, #132]	; (8002098 <HAL_UART_RxCpltCallback+0x350>)
 8002014:	f004 f84b 	bl	80060ae <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40004800 	.word	0x40004800
 8002024:	0800a8cc 	.word	0x0800a8cc
 8002028:	20000274 	.word	0x20000274
 800202c:	20000006 	.word	0x20000006
 8002030:	20000007 	.word	0x20000007
 8002034:	200003c8 	.word	0x200003c8
 8002038:	0800a924 	.word	0x0800a924
 800203c:	20000004 	.word	0x20000004
 8002040:	40020400 	.word	0x40020400
 8002044:	0800a92c 	.word	0x0800a92c
 8002048:	0800a93c 	.word	0x0800a93c
 800204c:	20000005 	.word	0x20000005
 8002050:	2000037c 	.word	0x2000037c
 8002054:	0800a934 	.word	0x0800a934
 8002058:	20000258 	.word	0x20000258
 800205c:	20000008 	.word	0x20000008
 8002060:	20000460 	.word	0x20000460
 8002064:	0800a8e4 	.word	0x0800a8e4
 8002068:	20000018 	.word	0x20000018
 800206c:	20000014 	.word	0x20000014
 8002070:	20000010 	.word	0x20000010
 8002074:	20000009 	.word	0x20000009
 8002078:	200002e4 	.word	0x200002e4
 800207c:	0800a8ec 	.word	0x0800a8ec
 8002080:	200002a0 	.word	0x200002a0
 8002084:	20000260 	.word	0x20000260
 8002088:	20000268 	.word	0x20000268
 800208c:	2000022c 	.word	0x2000022c
 8002090:	20000000 	.word	0x20000000
 8002094:	0800a91c 	.word	0x0800a91c
 8002098:	200004ac 	.word	0x200004ac
 800209c:	0800a8f4 	.word	0x0800a8f4
 80020a0:	0800a8fc 	.word	0x0800a8fc
 80020a4:	20000414 	.word	0x20000414
 80020a8:	0800a8d4 	.word	0x0800a8d4

080020ac <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80020b8:	2100      	movs	r1, #0
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f001 f87f 	bl	80031be <HAL_CAN_GetRxMessage>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000026c 	.word	0x2000026c
 80020cc:	200002b8 	.word	0x200002b8

080020d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020d8:	e7fe      	b.n	80020d8 <Error_Handler+0x8>
	...

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_MspInit+0x44>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_MspInit+0x44>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_MspInit+0x44>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_MspInit+0x44>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_MspInit+0x44>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_MspInit+0x44>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler+0x4>

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002170:	f000 fcda 	bl	8002b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <CAN1_RX0_IRQHandler+0x10>)
 800217e:	f001 f956 	bl	800342e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000022c 	.word	0x2000022c

0800218c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002192:	f003 fbf1 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200002e4 	.word	0x200002e4

080021a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021a6:	f003 fbe7 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000037c 	.word	0x2000037c

080021b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM3_IRQHandler+0x10>)
 80021ba:	f003 fbdd 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000330 	.word	0x20000330

080021c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <USART3_IRQHandler+0x10>)
 80021ce:	f003 ffbd 	bl	800614c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200004ac 	.word	0x200004ac

080021dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021e4:	f001 fed6 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80021f2:	f003 fbc1 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000414 	.word	0x20000414

08002200 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM6_DAC_IRQHandler+0x10>)
 8002206:	f003 fbb7 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200003c8 	.word	0x200003c8

08002214 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM7_IRQHandler+0x10>)
 800221a:	f003 fbad 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000460 	.word	0x20000460

08002228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	return 1;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_kill>:

int _kill(int pid, int sig)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002242:	f005 fc5b 	bl	8007afc <__errno>
 8002246:	4603      	mov	r3, r0
 8002248:	2216      	movs	r2, #22
 800224a:	601a      	str	r2, [r3, #0]
	return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_exit>:

void _exit (int status)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffe7 	bl	8002238 <_kill>
	while (1) {}		/* Make sure we hang here */
 800226a:	e7fe      	b.n	800226a <_exit+0x12>

0800226c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e00a      	b.n	8002294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800227e:	f3af 8000 	nop.w
 8002282:	4601      	mov	r1, r0
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60ba      	str	r2, [r7, #8]
 800228a:	b2ca      	uxtb	r2, r1
 800228c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3301      	adds	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	dbf0      	blt.n	800227e <_read+0x12>
	}

return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e009      	b.n	80022cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf1      	blt.n	80022b8 <_write+0x12>
	}
	return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_close>:

int _close(int file)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	return -1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002306:	605a      	str	r2, [r3, #4]
	return 0;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <_isatty>:

int _isatty(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
	return 1;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002350:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <_sbrk+0x5c>)
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <_sbrk+0x60>)
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <_sbrk+0x64>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <_sbrk+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d207      	bcs.n	8002388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002378:	f005 fbc0 	bl	8007afc <__errno>
 800237c:	4603      	mov	r3, r0
 800237e:	220c      	movs	r2, #12
 8002380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e009      	b.n	800239c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <_sbrk+0x64>)
 8002398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20080000 	.word	0x20080000
 80023a8:	00000400 	.word	0x00000400
 80023ac:	20000220 	.word	0x20000220
 80023b0:	20000948 	.word	0x20000948

080023b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <SystemInit+0x20>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <SystemInit+0x20>)
 80023c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 fbb2 	bl	8007b50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	463b      	mov	r3, r7
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <MX_TIM3_Init+0xa4>)
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <MX_TIM3_Init+0xa8>)
 80023fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <MX_TIM3_Init+0xa4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <MX_TIM3_Init+0xa4>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <MX_TIM3_Init+0xa4>)
 800240a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800240e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <MX_TIM3_Init+0xa4>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <MX_TIM3_Init+0xa4>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800241c:	2301      	movs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002424:	2301      	movs	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002434:	2301      	movs	r3, #1
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4619      	mov	r1, r3
 8002446:	480d      	ldr	r0, [pc, #52]	; (800247c <MX_TIM3_Init+0xa4>)
 8002448:	f003 f962 	bl	8005710 <HAL_TIM_Encoder_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002452:	f7ff fe3d 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800245e:	463b      	mov	r3, r7
 8002460:	4619      	mov	r1, r3
 8002462:	4806      	ldr	r0, [pc, #24]	; (800247c <MX_TIM3_Init+0xa4>)
 8002464:	f003 fc96 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800246e:	f7ff fe2f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	3730      	adds	r7, #48	; 0x30
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000330 	.word	0x20000330
 8002480:	40000400 	.word	0x40000400

08002484 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_TIM6_Init+0x68>)
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <MX_TIM6_Init+0x6c>)
 8002498:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_TIM6_Init+0x68>)
 800249c:	f242 527f 	movw	r2, #9599	; 0x257f
 80024a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_TIM6_Init+0x68>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <MX_TIM6_Init+0x68>)
 80024aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80024ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_TIM6_Init+0x68>)
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024b6:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_TIM6_Init+0x68>)
 80024b8:	f003 f804 	bl	80054c4 <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80024c2:	f7ff fe05 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <MX_TIM6_Init+0x68>)
 80024d4:	f003 fc5e 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80024de:	f7ff fdf7 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200003c8 	.word	0x200003c8
 80024f0:	40001000 	.word	0x40001000

080024f4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <MX_TIM7_Init+0x68>)
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <MX_TIM7_Init+0x6c>)
 8002508:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <MX_TIM7_Init+0x68>)
 800250c:	f242 527f 	movw	r2, #9599	; 0x257f
 8002510:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <MX_TIM7_Init+0x68>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <MX_TIM7_Init+0x68>)
 800251a:	f241 3287 	movw	r2, #4999	; 0x1387
 800251e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_TIM7_Init+0x68>)
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <MX_TIM7_Init+0x68>)
 8002528:	f002 ffcc 	bl	80054c4 <HAL_TIM_Base_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002532:	f7ff fdcd 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	; (800255c <MX_TIM7_Init+0x68>)
 8002544:	f003 fc26 	bl	8005d94 <HAL_TIMEx_MasterConfigSynchronization>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800254e:	f7ff fdbf 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000460 	.word	0x20000460
 8002560:	40001400 	.word	0x40001400

08002564 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <MX_TIM10_Init+0x40>)
 800256a:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <MX_TIM10_Init+0x44>)
 800256c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <MX_TIM10_Init+0x40>)
 8002570:	f242 527f 	movw	r2, #9599	; 0x257f
 8002574:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <MX_TIM10_Init+0x40>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <MX_TIM10_Init+0x40>)
 800257e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002582:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <MX_TIM10_Init+0x40>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <MX_TIM10_Init+0x40>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <MX_TIM10_Init+0x40>)
 8002592:	f002 ff97 	bl	80054c4 <HAL_TIM_Base_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800259c:	f7ff fd98 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200002e4 	.word	0x200002e4
 80025a8:	40014400 	.word	0x40014400

080025ac <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <MX_TIM11_Init+0x40>)
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <MX_TIM11_Init+0x44>)
 80025b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9600-1;
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <MX_TIM11_Init+0x40>)
 80025b8:	f242 527f 	movw	r2, #9599	; 0x257f
 80025bc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <MX_TIM11_Init+0x40>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <MX_TIM11_Init+0x40>)
 80025c6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025ca:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <MX_TIM11_Init+0x40>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <MX_TIM11_Init+0x40>)
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_TIM11_Init+0x40>)
 80025da:	f002 ff73 	bl	80054c4 <HAL_TIM_Base_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80025e4:	f7ff fd74 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	2000037c 	.word	0x2000037c
 80025f0:	40014800 	.word	0x40014800

080025f4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_TIM14_Init+0x40>)
 80025fa:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <MX_TIM14_Init+0x44>)
 80025fc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9599;
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <MX_TIM14_Init+0x40>)
 8002600:	f242 527f 	movw	r2, #9599	; 0x257f
 8002604:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_TIM14_Init+0x40>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_TIM14_Init+0x40>)
 800260e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002612:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <MX_TIM14_Init+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_TIM14_Init+0x40>)
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002620:	4804      	ldr	r0, [pc, #16]	; (8002634 <MX_TIM14_Init+0x40>)
 8002622:	f002 ff4f 	bl	80054c4 <HAL_TIM_Base_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800262c:	f7ff fd50 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000414 	.word	0x20000414
 8002638:	40002000 	.word	0x40002000

0800263c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a29      	ldr	r2, [pc, #164]	; (8002700 <HAL_TIM_Encoder_MspInit+0xc4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d14b      	bne.n	80026f6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_TIM_Encoder_MspInit+0xc8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026a6:	2340      	movs	r3, #64	; 0x40
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b6:	2302      	movs	r3, #2
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4811      	ldr	r0, [pc, #68]	; (8002708 <HAL_TIM_Encoder_MspInit+0xcc>)
 80026c2:	f001 fa87 	bl	8003bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d6:	2302      	movs	r3, #2
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	480a      	ldr	r0, [pc, #40]	; (800270c <HAL_TIM_Encoder_MspInit+0xd0>)
 80026e2:	f001 fa77 	bl	8003bd4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	201d      	movs	r0, #29
 80026ec:	f001 f9a9 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026f0:	201d      	movs	r0, #29
 80026f2:	f001 f9c2 	bl	8003a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40000400 	.word	0x40000400
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020800 	.word	0x40020800

08002710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a41      	ldr	r2, [pc, #260]	; (8002824 <HAL_TIM_Base_MspInit+0x114>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d114      	bne.n	800274c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	2036      	movs	r0, #54	; 0x36
 8002740:	f001 f97f 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002744:	2036      	movs	r0, #54	; 0x36
 8002746:	f001 f998 	bl	8003a7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800274a:	e066      	b.n	800281a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM7)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a36      	ldr	r2, [pc, #216]	; (800282c <HAL_TIM_Base_MspInit+0x11c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d114      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002756:	4b34      	ldr	r3, [pc, #208]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a33      	ldr	r2, [pc, #204]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 800275c:	f043 0320 	orr.w	r3, r3, #32
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2037      	movs	r0, #55	; 0x37
 8002774:	f001 f965 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002778:	2037      	movs	r0, #55	; 0x37
 800277a:	f001 f97e 	bl	8003a7a <HAL_NVIC_EnableIRQ>
}
 800277e:	e04c      	b.n	800281a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM10)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_TIM_Base_MspInit+0x120>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d114      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a26      	ldr	r2, [pc, #152]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2019      	movs	r0, #25
 80027a8:	f001 f94b 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027ac:	2019      	movs	r0, #25
 80027ae:	f001 f964 	bl	8003a7a <HAL_NVIC_EnableIRQ>
}
 80027b2:	e032      	b.n	800281a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM11)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_TIM_Base_MspInit+0x124>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d114      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	201a      	movs	r0, #26
 80027dc:	f001 f931 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027e0:	201a      	movs	r0, #26
 80027e2:	f001 f94a 	bl	8003a7a <HAL_NVIC_EnableIRQ>
}
 80027e6:	e018      	b.n	800281a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM14)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a12      	ldr	r2, [pc, #72]	; (8002838 <HAL_TIM_Base_MspInit+0x128>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_TIM_Base_MspInit+0x118>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	202d      	movs	r0, #45	; 0x2d
 8002810:	f001 f917 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002814:	202d      	movs	r0, #45	; 0x2d
 8002816:	f001 f930 	bl	8003a7a <HAL_NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40001000 	.word	0x40001000
 8002828:	40023800 	.word	0x40023800
 800282c:	40001400 	.word	0x40001400
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800
 8002838:	40002000 	.word	0x40002000

0800283c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002842:	4a15      	ldr	r2, [pc, #84]	; (8002898 <MX_USART3_UART_Init+0x5c>)
 8002844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800284c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MX_USART3_UART_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_USART3_UART_Init+0x58>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_USART3_UART_Init+0x58>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <MX_USART3_UART_Init+0x58>)
 8002880:	f003 fb34 	bl	8005eec <HAL_UART_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800288a:	f7ff fc21 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200004ac 	.word	0x200004ac
 8002898:	40004800 	.word	0x40004800

0800289c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_UART_MspInit+0x8c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d130      	bne.n	8002920 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_UART_MspInit+0x90>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a1a      	ldr	r2, [pc, #104]	; (800292c <HAL_UART_MspInit+0x90>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_UART_MspInit+0x90>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_UART_MspInit+0x90>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a14      	ldr	r2, [pc, #80]	; (800292c <HAL_UART_MspInit+0x90>)
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_UART_MspInit+0x90>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002900:	2307      	movs	r3, #7
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	4809      	ldr	r0, [pc, #36]	; (8002930 <HAL_UART_MspInit+0x94>)
 800290c:	f001 f962 	bl	8003bd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2100      	movs	r1, #0
 8002914:	2027      	movs	r0, #39	; 0x27
 8002916:	f001 f894 	bl	8003a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800291a:	2027      	movs	r0, #39	; 0x27
 800291c:	f001 f8ad 	bl	8003a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40004800 	.word	0x40004800
 800292c:	40023800 	.word	0x40023800
 8002930:	40020c00 	.word	0x40020c00

08002934 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800293a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800293e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002942:	2206      	movs	r2, #6
 8002944:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002948:	2202      	movs	r2, #2
 800294a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002954:	2202      	movs	r2, #2
 8002956:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800295a:	2201      	movs	r2, #1
 800295c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800296c:	2201      	movs	r2, #1
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002978:	f001 fb24 	bl	8003fc4 <HAL_PCD_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002982:	f7ff fba5 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000530 	.word	0x20000530

08002990 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b0:	d141      	bne.n	8002a36 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029dc:	230a      	movs	r3, #10
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4817      	ldr	r0, [pc, #92]	; (8002a44 <HAL_PCD_MspInit+0xb4>)
 80029e8:	f001 f8f4 	bl	8003bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	4810      	ldr	r0, [pc, #64]	; (8002a44 <HAL_PCD_MspInit+0xb4>)
 8002a02:	f001 f8e7 	bl	8003bd4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 8002a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a10:	6353      	str	r3, [r2, #52]	; 0x34
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_PCD_MspInit+0xb0>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a36:	bf00      	nop
 8002a38:	3728      	adds	r7, #40	; 0x28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020000 	.word	0x40020000

08002a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a4e:	490e      	ldr	r1, [pc, #56]	; (8002a88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a54:	e002      	b.n	8002a5c <LoopCopyDataInit>

08002a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5a:	3304      	adds	r3, #4

08002a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a60:	d3f9      	bcc.n	8002a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a64:	4c0b      	ldr	r4, [pc, #44]	; (8002a94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a68:	e001      	b.n	8002a6e <LoopFillZerobss>

08002a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a6c:	3204      	adds	r2, #4

08002a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a70:	d3fb      	bcc.n	8002a6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a72:	f7ff fc9f 	bl	80023b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a76:	f005 f847 	bl	8007b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7a:	f7ff f851 	bl	8001b20 <main>
  bx  lr    
 8002a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a80:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a88:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002a8c:	0800ad54 	.word	0x0800ad54
  ldr r2, =_sbss
 8002a90:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002a94:	20000948 	.word	0x20000948

08002a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a98:	e7fe      	b.n	8002a98 <ADC_IRQHandler>
	...

08002a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_Init+0x28>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <HAL_Init+0x28>)
 8002aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aaa:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aac:	2003      	movs	r0, #3
 8002aae:	f000 ffbd 	bl	8003a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f000 f808 	bl	8002ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab8:	f7ff fb10 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00

08002ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_InitTick+0x54>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_InitTick+0x58>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ffd5 	bl	8003a96 <HAL_SYSTICK_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00e      	b.n	8002b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0f      	cmp	r3, #15
 8002afa:	d80a      	bhi.n	8002b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002afc:	2200      	movs	r2, #0
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
 8002b04:	f000 ff9d 	bl	8003a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b08:	4a06      	ldr	r2, [pc, #24]	; (8002b24 <HAL_InitTick+0x5c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000001c 	.word	0x2000001c
 8002b20:	20000024 	.word	0x20000024
 8002b24:	20000020 	.word	0x20000020

08002b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_IncTick+0x20>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_IncTick+0x24>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_IncTick+0x24>)
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000024 	.word	0x20000024
 8002b4c:	20000934 	.word	0x20000934

08002b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return uwTick;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_GetTick+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000934 	.word	0x20000934

08002b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff ffee 	bl	8002b50 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d005      	beq.n	8002b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_Delay+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b8e:	bf00      	nop
 8002b90:	f7ff ffde 	bl	8002b50 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d8f7      	bhi.n	8002b90 <HAL_Delay+0x28>
  {
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000024 	.word	0x20000024

08002bb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0ed      	b.n	8002d9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fd fd42 	bl	8000658 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be4:	f7ff ffb4 	bl	8002b50 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bea:	e012      	b.n	8002c12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bec:	f7ff ffb0 	bl	8002b50 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b0a      	cmp	r3, #10
 8002bf8:	d90b      	bls.n	8002c12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2205      	movs	r2, #5
 8002c0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0c5      	b.n	8002d9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0e5      	beq.n	8002bec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0202 	bic.w	r2, r2, #2
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c30:	f7ff ff8e 	bl	8002b50 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c36:	e012      	b.n	8002c5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c38:	f7ff ff8a 	bl	8002b50 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b0a      	cmp	r3, #10
 8002c44:	d90b      	bls.n	8002c5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2205      	movs	r2, #5
 8002c56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e09f      	b.n	8002d9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1e5      	bne.n	8002c38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7e1b      	ldrb	r3, [r3, #24]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d108      	bne.n	8002c86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	e007      	b.n	8002c96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7e5b      	ldrb	r3, [r3, #25]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e007      	b.n	8002cc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7e9b      	ldrb	r3, [r3, #26]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d108      	bne.n	8002cda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e007      	b.n	8002cea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0220 	bic.w	r2, r2, #32
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7edb      	ldrb	r3, [r3, #27]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d108      	bne.n	8002d04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0210 	bic.w	r2, r2, #16
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e007      	b.n	8002d14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0210 	orr.w	r2, r2, #16
 8002d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7f1b      	ldrb	r3, [r3, #28]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d108      	bne.n	8002d2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e007      	b.n	8002d3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0208 	bic.w	r2, r2, #8
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7f5b      	ldrb	r3, [r3, #29]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d108      	bne.n	8002d58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0204 	orr.w	r2, r2, #4
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e007      	b.n	8002d68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0204 	bic.w	r2, r2, #4
 8002d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	ea42 0103 	orr.w	r1, r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dbe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d003      	beq.n	8002dce <HAL_CAN_ConfigFilter+0x26>
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	f040 80c7 	bne.w	8002f5c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a69      	ldr	r2, [pc, #420]	; (8002f78 <HAL_CAN_ConfigFilter+0x1d0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d001      	beq.n	8002ddc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002dd8:	4b68      	ldr	r3, [pc, #416]	; (8002f7c <HAL_CAN_ConfigFilter+0x1d4>)
 8002dda:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	4a63      	ldr	r2, [pc, #396]	; (8002f7c <HAL_CAN_ConfigFilter+0x1d4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dfa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2201      	movs	r2, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d123      	bne.n	8002e8a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3248      	adds	r2, #72	; 0x48
 8002e6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e80:	6979      	ldr	r1, [r7, #20]
 8002e82:	3348      	adds	r3, #72	; 0x48
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d122      	bne.n	8002ed8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002eb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3248      	adds	r2, #72	; 0x48
 8002eb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ecc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	3348      	adds	r3, #72	; 0x48
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ef2:	e007      	b.n	8002f04 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f1e:	e007      	b.n	8002f30 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f4e:	f023 0201 	bic.w	r2, r3, #1
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e006      	b.n	8002f6a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40003400 	.word	0x40003400
 8002f7c:	40006400 	.word	0x40006400

08002f80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d12e      	bne.n	8002ff2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fac:	f7ff fdd0 	bl	8002b50 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fb2:	e012      	b.n	8002fda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fb4:	f7ff fdcc 	bl	8002b50 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b0a      	cmp	r3, #10
 8002fc0:	d90b      	bls.n	8002fda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e012      	b.n	8003000 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e006      	b.n	8003000 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800301c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d003      	beq.n	8003034 <HAL_CAN_AddTxMessage+0x2c>
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	2b02      	cmp	r3, #2
 8003030:	f040 80b8 	bne.w	80031a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80a0 	beq.w	8003194 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	0e1b      	lsrs	r3, r3, #24
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d907      	bls.n	8003074 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e09e      	b.n	80031b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003074:	2201      	movs	r2, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	409a      	lsls	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003090:	68f9      	ldr	r1, [r7, #12]
 8003092:	6809      	ldr	r1, [r1, #0]
 8003094:	431a      	orrs	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3318      	adds	r3, #24
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	440b      	add	r3, r1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e00f      	b.n	80030c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3318      	adds	r3, #24
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	440b      	add	r3, r1
 80030c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3318      	adds	r3, #24
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	440b      	add	r3, r1
 80030d2:	3304      	adds	r3, #4
 80030d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	7d1b      	ldrb	r3, [r3, #20]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d111      	bne.n	8003102 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3318      	adds	r3, #24
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3318      	adds	r3, #24
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	440b      	add	r3, r1
 80030fe:	3304      	adds	r3, #4
 8003100:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3307      	adds	r3, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	061a      	lsls	r2, r3, #24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3306      	adds	r3, #6
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3305      	adds	r3, #5
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	4313      	orrs	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	3204      	adds	r2, #4
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	4610      	mov	r0, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	6811      	ldr	r1, [r2, #0]
 800312a:	ea43 0200 	orr.w	r2, r3, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	440b      	add	r3, r1
 8003134:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003138:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3303      	adds	r3, #3
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	061a      	lsls	r2, r3, #24
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3302      	adds	r3, #2
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	041b      	lsls	r3, r3, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3301      	adds	r3, #1
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	4313      	orrs	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	4610      	mov	r0, r2
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	6811      	ldr	r1, [r2, #0]
 8003160:	ea43 0200 	orr.w	r2, r3, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	440b      	add	r3, r1
 800316a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800316e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3318      	adds	r3, #24
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4413      	add	r3, r2
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6811      	ldr	r1, [r2, #0]
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3318      	adds	r3, #24
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	440b      	add	r3, r1
 800318e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e00e      	b.n	80031b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e006      	b.n	80031b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	; 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031be:	b480      	push	{r7}
 80031c0:	b087      	sub	sp, #28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d003      	beq.n	80031e2 <HAL_CAN_GetRxMessage+0x24>
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	f040 80f3 	bne.w	80033c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10e      	bne.n	8003206 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0e7      	b.n	80033d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d8      	b.n	80033d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	331b      	adds	r3, #27
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4413      	add	r3, r2
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0204 	and.w	r2, r3, #4
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	331b      	adds	r3, #27
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0d5b      	lsrs	r3, r3, #21
 8003252:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e00b      	b.n	8003274 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	331b      	adds	r3, #27
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	4413      	add	r3, r2
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	08db      	lsrs	r3, r3, #3
 800326c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	331b      	adds	r3, #27
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	4413      	add	r3, r2
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0202 	and.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	331b      	adds	r3, #27
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4413      	add	r3, r2
 8003296:	3304      	adds	r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 020f 	and.w	r2, r3, #15
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	331b      	adds	r3, #27
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	331b      	adds	r3, #27
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	3304      	adds	r3, #4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0c1b      	lsrs	r3, r3, #16
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4413      	add	r3, r2
 80032dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0a1a      	lsrs	r2, r3, #8
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	4413      	add	r3, r2
 800330c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0c1a      	lsrs	r2, r3, #16
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3302      	adds	r3, #2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0e1a      	lsrs	r2, r3, #24
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	3303      	adds	r3, #3
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	4413      	add	r3, r2
 8003340:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3304      	adds	r3, #4
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0a1a      	lsrs	r2, r3, #8
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3305      	adds	r3, #5
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0c1a      	lsrs	r2, r3, #16
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3306      	adds	r3, #6
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	4413      	add	r3, r2
 800338c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	0e1a      	lsrs	r2, r3, #24
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	3307      	adds	r3, #7
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d108      	bne.n	80033b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0220 	orr.w	r2, r2, #32
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	e007      	b.n	80033c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0220 	orr.w	r2, r2, #32
 80033c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e006      	b.n	80033d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d002      	beq.n	8003400 <HAL_CAN_ActivateNotification+0x1e>
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d109      	bne.n	8003414 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6959      	ldr	r1, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e006      	b.n	8003422 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b08a      	sub	sp, #40	; 0x28
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d07c      	beq.n	800356e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d023      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2201      	movs	r2, #1
 8003484:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f983 	bl	800379c <HAL_CAN_TxMailbox0CompleteCallback>
 8003496:	e016      	b.n	80034c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
 80034aa:	e00c      	b.n	80034c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	e002      	b.n	80034c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f989 	bl	80037d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d024      	beq.n	800351a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f963 	bl	80037b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80034ea:	e016      	b.n	800351a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
 80034fe:	e00c      	b.n	800351a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	e002      	b.n	800351a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f969 	bl	80037ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d024      	beq.n	800356e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800352c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f943 	bl	80037c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800353e:	e016      	b.n	800356e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	e00c      	b.n	800356e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	e002      	b.n	800356e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f949 	bl	8003800 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003588:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2210      	movs	r2, #16
 8003590:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2208      	movs	r2, #8
 80035ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f930 	bl	8003814 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fe fd6d 	bl	80020ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2210      	movs	r2, #16
 80035f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2208      	movs	r2, #8
 8003610:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f912 	bl	800383c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8f9 	bl	8003828 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2210      	movs	r2, #16
 8003650:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8fc 	bl	8003850 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2208      	movs	r2, #8
 8003672:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f8f5 	bl	8003864 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d07b      	beq.n	800377c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d072      	beq.n	8003774 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d043      	beq.n	8003774 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d03e      	beq.n	8003774 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036fc:	2b60      	cmp	r3, #96	; 0x60
 80036fe:	d02b      	beq.n	8003758 <HAL_CAN_IRQHandler+0x32a>
 8003700:	2b60      	cmp	r3, #96	; 0x60
 8003702:	d82e      	bhi.n	8003762 <HAL_CAN_IRQHandler+0x334>
 8003704:	2b50      	cmp	r3, #80	; 0x50
 8003706:	d022      	beq.n	800374e <HAL_CAN_IRQHandler+0x320>
 8003708:	2b50      	cmp	r3, #80	; 0x50
 800370a:	d82a      	bhi.n	8003762 <HAL_CAN_IRQHandler+0x334>
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d019      	beq.n	8003744 <HAL_CAN_IRQHandler+0x316>
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d826      	bhi.n	8003762 <HAL_CAN_IRQHandler+0x334>
 8003714:	2b30      	cmp	r3, #48	; 0x30
 8003716:	d010      	beq.n	800373a <HAL_CAN_IRQHandler+0x30c>
 8003718:	2b30      	cmp	r3, #48	; 0x30
 800371a:	d822      	bhi.n	8003762 <HAL_CAN_IRQHandler+0x334>
 800371c:	2b10      	cmp	r3, #16
 800371e:	d002      	beq.n	8003726 <HAL_CAN_IRQHandler+0x2f8>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d005      	beq.n	8003730 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003724:	e01d      	b.n	8003762 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800372e:	e019      	b.n	8003764 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f043 0310 	orr.w	r3, r3, #16
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003738:	e014      	b.n	8003764 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f043 0320 	orr.w	r3, r3, #32
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003742:	e00f      	b.n	8003764 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800374c:	e00a      	b.n	8003764 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003756:	e005      	b.n	8003764 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003760:	e000      	b.n	8003764 <HAL_CAN_IRQHandler+0x336>
            break;
 8003762:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003772:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2204      	movs	r2, #4
 800377a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f872 	bl	8003878 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003794:	bf00      	nop
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <__NVIC_SetPriorityGrouping+0x40>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <__NVIC_SetPriorityGrouping+0x40>)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	60d3      	str	r3, [r2, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00
 80038d0:	05fa0000 	.word	0x05fa0000

080038d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <__NVIC_GetPriorityGrouping+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 0307 	and.w	r3, r3, #7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db0b      	blt.n	800391a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <__NVIC_EnableIRQ+0x38>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2001      	movs	r0, #1
 8003912:	fa00 f202 	lsl.w	r2, r0, r2
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000e100 	.word	0xe000e100

0800392c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	2b00      	cmp	r3, #0
 800393e:	db0a      	blt.n	8003956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <__NVIC_SetPriority+0x4c>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	440b      	add	r3, r1
 8003950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003954:	e00a      	b.n	800396c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <__NVIC_SetPriority+0x50>)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	3b04      	subs	r3, #4
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	440b      	add	r3, r1
 800396a:	761a      	strb	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f1c3 0307 	rsb	r3, r3, #7
 800399a:	2b04      	cmp	r3, #4
 800399c:	bf28      	it	cs
 800399e:	2304      	movcs	r3, #4
 80039a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d902      	bls.n	80039b0 <NVIC_EncodePriority+0x30>
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3b03      	subs	r3, #3
 80039ae:	e000      	b.n	80039b2 <NVIC_EncodePriority+0x32>
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	401a      	ands	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43d9      	mvns	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	4313      	orrs	r3, r2
         );
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f8:	d301      	bcc.n	80039fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00f      	b.n	8003a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <SysTick_Config+0x40>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a06:	210f      	movs	r1, #15
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f7ff ff8e 	bl	800392c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <SysTick_Config+0x40>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <SysTick_Config+0x40>)
 8003a18:	2207      	movs	r2, #7
 8003a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	e000e010 	.word	0xe000e010

08003a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff29 	bl	800388c <__NVIC_SetPriorityGrouping>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a54:	f7ff ff3e 	bl	80038d4 <__NVIC_GetPriorityGrouping>
 8003a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	6978      	ldr	r0, [r7, #20]
 8003a60:	f7ff ff8e 	bl	8003980 <NVIC_EncodePriority>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff5d 	bl	800392c <__NVIC_SetPriority>
}
 8003a72:	bf00      	nop
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff31 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ffa2 	bl	80039e8 <SysTick_Config>
 8003aa4:	4603      	mov	r3, r0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff f848 	bl	8002b50 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d008      	beq.n	8003ae0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2280      	movs	r2, #128	; 0x80
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e052      	b.n	8003b86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0216 	bic.w	r2, r2, #22
 8003aee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003afe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <HAL_DMA_Abort+0x62>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0208 	bic.w	r2, r2, #8
 8003b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b30:	e013      	b.n	8003b5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b32:	f7ff f80d 	bl	8002b50 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d90c      	bls.n	8003b5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e015      	b.n	8003b86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e4      	bne.n	8003b32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d004      	beq.n	8003bac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2280      	movs	r2, #128	; 0x80
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e00c      	b.n	8003bc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2205      	movs	r2, #5
 8003bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e175      	b.n	8003ee0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f040 8164 	bne.w	8003eda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d005      	beq.n	8003c2a <HAL_GPIO_Init+0x56>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d130      	bne.n	8003c8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c60:	2201      	movs	r2, #1
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 0201 	and.w	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d017      	beq.n	8003cc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d123      	bne.n	8003d1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80be 	beq.w	8003eda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5e:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4a65      	ldr	r2, [pc, #404]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d68:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d76:	4a61      	ldr	r2, [pc, #388]	; (8003efc <HAL_GPIO_Init+0x328>)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a58      	ldr	r2, [pc, #352]	; (8003f00 <HAL_GPIO_Init+0x32c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d037      	beq.n	8003e12 <HAL_GPIO_Init+0x23e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a57      	ldr	r2, [pc, #348]	; (8003f04 <HAL_GPIO_Init+0x330>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d031      	beq.n	8003e0e <HAL_GPIO_Init+0x23a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a56      	ldr	r2, [pc, #344]	; (8003f08 <HAL_GPIO_Init+0x334>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02b      	beq.n	8003e0a <HAL_GPIO_Init+0x236>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a55      	ldr	r2, [pc, #340]	; (8003f0c <HAL_GPIO_Init+0x338>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d025      	beq.n	8003e06 <HAL_GPIO_Init+0x232>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a54      	ldr	r2, [pc, #336]	; (8003f10 <HAL_GPIO_Init+0x33c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01f      	beq.n	8003e02 <HAL_GPIO_Init+0x22e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a53      	ldr	r2, [pc, #332]	; (8003f14 <HAL_GPIO_Init+0x340>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d019      	beq.n	8003dfe <HAL_GPIO_Init+0x22a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a52      	ldr	r2, [pc, #328]	; (8003f18 <HAL_GPIO_Init+0x344>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_GPIO_Init+0x226>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a51      	ldr	r2, [pc, #324]	; (8003f1c <HAL_GPIO_Init+0x348>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00d      	beq.n	8003df6 <HAL_GPIO_Init+0x222>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_GPIO_Init+0x34c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <HAL_GPIO_Init+0x21e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_GPIO_Init+0x350>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_GPIO_Init+0x21a>
 8003dea:	2309      	movs	r3, #9
 8003dec:	e012      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003dee:	230a      	movs	r3, #10
 8003df0:	e010      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003df2:	2308      	movs	r3, #8
 8003df4:	e00e      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003df6:	2307      	movs	r3, #7
 8003df8:	e00c      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003dfa:	2306      	movs	r3, #6
 8003dfc:	e00a      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003dfe:	2305      	movs	r3, #5
 8003e00:	e008      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003e02:	2304      	movs	r3, #4
 8003e04:	e006      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003e06:	2303      	movs	r3, #3
 8003e08:	e004      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e002      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_GPIO_Init+0x240>
 8003e12:	2300      	movs	r3, #0
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	f002 0203 	and.w	r2, r2, #3
 8003e1a:	0092      	lsls	r2, r2, #2
 8003e1c:	4093      	lsls	r3, r2
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e24:	4935      	ldr	r1, [pc, #212]	; (8003efc <HAL_GPIO_Init+0x328>)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e32:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e56:	4a34      	ldr	r2, [pc, #208]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e5c:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e80:	4a29      	ldr	r2, [pc, #164]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e86:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ed4:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <HAL_GPIO_Init+0x354>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	f67f ae86 	bls.w	8003bf4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	3724      	adds	r7, #36	; 0x24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40013800 	.word	0x40013800
 8003f00:	40020000 	.word	0x40020000
 8003f04:	40020400 	.word	0x40020400
 8003f08:	40020800 	.word	0x40020800
 8003f0c:	40020c00 	.word	0x40020c00
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40021400 	.word	0x40021400
 8003f18:	40021800 	.word	0x40021800
 8003f1c:	40021c00 	.word	0x40021c00
 8003f20:	40022000 	.word	0x40022000
 8003f24:	40022400 	.word	0x40022400
 8003f28:	40013c00 	.word	0x40013c00

08003f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	807b      	strh	r3, [r7, #2]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f3c:	787b      	ldrb	r3, [r7, #1]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f48:	e003      	b.n	8003f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f4a:	887b      	ldrh	r3, [r7, #2]
 8003f4c:	041a      	lsls	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	619a      	str	r2, [r3, #24]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f70:	887a      	ldrh	r2, [r7, #2]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4013      	ands	r3, r2
 8003f76:	041a      	lsls	r2, r3, #16
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	43d9      	mvns	r1, r3
 8003f7c:	887b      	ldrh	r3, [r7, #2]
 8003f7e:	400b      	ands	r3, r1
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	619a      	str	r2, [r3, #24]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd fda0 	bl	8001af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc6:	b08f      	sub	sp, #60	; 0x3c
 8003fc8:	af0a      	add	r7, sp, #40	; 0x28
 8003fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e116      	b.n	8004204 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fe fccd 	bl	8002990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f003 fad7 	bl	80075c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	687e      	ldr	r6, [r7, #4]
 8004022:	466d      	mov	r5, sp
 8004024:	f106 0410 	add.w	r4, r6, #16
 8004028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800402c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004034:	e885 0003 	stmia.w	r5, {r0, r1}
 8004038:	1d33      	adds	r3, r6, #4
 800403a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800403c:	6838      	ldr	r0, [r7, #0]
 800403e:	f003 fa6b 	bl	8007518 <USB_CoreInit>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0d7      	b.n	8004204 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f003 fac5 	bl	80075ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e04a      	b.n	80040fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	333d      	adds	r3, #61	; 0x3d
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	333c      	adds	r3, #60	; 0x3c
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	b298      	uxth	r0, r3
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	3342      	adds	r3, #66	; 0x42
 80040a2:	4602      	mov	r2, r0
 80040a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	333f      	adds	r3, #63	; 0x3f
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	3344      	adds	r3, #68	; 0x44
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040ce:	7bfa      	ldrb	r2, [r7, #15]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	3348      	adds	r3, #72	; 0x48
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	3350      	adds	r3, #80	; 0x50
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	3301      	adds	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d3af      	bcc.n	8004066 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e044      	b.n	8004196 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	3301      	adds	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3b5      	bcc.n	800410c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	687e      	ldr	r6, [r7, #4]
 80041a8:	466d      	mov	r5, sp
 80041aa:	f106 0410 	add.w	r4, r6, #16
 80041ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80041be:	1d33      	adds	r3, r6, #4
 80041c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041c2:	6838      	ldr	r0, [r7, #0]
 80041c4:	f003 fa5e 	bl	8007684 <USB_DevInit>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e014      	b.n	8004204 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f80a 	bl	800420c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f003 fc18 	bl	8007a32 <USB_DevDisconnect>

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800420c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_PCDEx_ActivateLPM+0x44>)
 800423c:	4313      	orrs	r3, r2
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	10000003 	.word	0x10000003

08004254 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a04      	ldr	r2, [pc, #16]	; (8004270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800425e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004262:	6013      	str	r3, [r2, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40007000 	.word	0x40007000

08004274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <HAL_PWREx_EnableOverDrive+0x98>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a22      	ldr	r2, [pc, #136]	; (800430c <HAL_PWREx_EnableOverDrive+0x98>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <HAL_PWREx_EnableOverDrive+0x98>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a2:	f7fe fc55 	bl	8002b50 <HAL_GetTick>
 80042a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042a8:	e009      	b.n	80042be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042aa:	f7fe fc51 	bl	8002b50 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042b8:	d901      	bls.n	80042be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e022      	b.n	8004304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ca:	d1ee      	bne.n	80042aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d8:	f7fe fc3a 	bl	8002b50 <HAL_GetTick>
 80042dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042de:	e009      	b.n	80042f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042e0:	f7fe fc36 	bl	8002b50 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ee:	d901      	bls.n	80042f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e007      	b.n	8004304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004300:	d1ee      	bne.n	80042e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000

08004314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e29b      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8087 	beq.w	8004446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004338:	4b96      	ldr	r3, [pc, #600]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b04      	cmp	r3, #4
 8004342:	d00c      	beq.n	800435e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004344:	4b93      	ldr	r3, [pc, #588]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
 800434c:	2b08      	cmp	r3, #8
 800434e:	d112      	bne.n	8004376 <HAL_RCC_OscConfig+0x62>
 8004350:	4b90      	ldr	r3, [pc, #576]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435c:	d10b      	bne.n	8004376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435e:	4b8d      	ldr	r3, [pc, #564]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d06c      	beq.n	8004444 <HAL_RCC_OscConfig+0x130>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d168      	bne.n	8004444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e275      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x7a>
 8004380:	4b84      	ldr	r3, [pc, #528]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a83      	ldr	r2, [pc, #524]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e02e      	b.n	80043ec <HAL_RCC_OscConfig+0xd8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x9c>
 8004396:	4b7f      	ldr	r3, [pc, #508]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7e      	ldr	r2, [pc, #504]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800439c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b7c      	ldr	r3, [pc, #496]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7b      	ldr	r2, [pc, #492]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e01d      	b.n	80043ec <HAL_RCC_OscConfig+0xd8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0xc0>
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b73      	ldr	r3, [pc, #460]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a72      	ldr	r2, [pc, #456]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0xd8>
 80043d4:	4b6f      	ldr	r3, [pc, #444]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6e      	ldr	r2, [pc, #440]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a6b      	ldr	r2, [pc, #428]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe fbac 	bl	8002b50 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe fba8 	bl	8002b50 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e229      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0xe8>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe fb98 	bl	8002b50 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fe fb94 	bl	8002b50 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e215      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	4b57      	ldr	r3, [pc, #348]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x110>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d069      	beq.n	8004526 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004452:	4b50      	ldr	r3, [pc, #320]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b4d      	ldr	r3, [pc, #308]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x190>
 800446a:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x17a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e1e9      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b41      	ldr	r3, [pc, #260]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	493d      	ldr	r1, [pc, #244]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e040      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d023      	beq.n	80044f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b39      	ldr	r3, [pc, #228]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a38      	ldr	r2, [pc, #224]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe fb4a 	bl	8002b50 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fe fb46 	bl	8002b50 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e1c7      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d2:	4b30      	ldr	r3, [pc, #192]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4929      	ldr	r1, [pc, #164]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
 80044f2:	e018      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a26      	ldr	r2, [pc, #152]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe fb26 	bl	8002b50 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004508:	f7fe fb22 	bl	8002b50 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e1a3      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d038      	beq.n	80045a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d019      	beq.n	800456e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	4a15      	ldr	r2, [pc, #84]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fe fb03 	bl	8002b50 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe faff 	bl	8002b50 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e180      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x23a>
 800456c:	e01a      	b.n	80045a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fe fae9 	bl	8002b50 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004582:	f7fe fae5 	bl	8002b50 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d903      	bls.n	8004598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e166      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
 8004594:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b92      	ldr	r3, [pc, #584]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ee      	bne.n	8004582 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80a4 	beq.w	80046fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b2:	4b8c      	ldr	r3, [pc, #560]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	4b89      	ldr	r3, [pc, #548]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a88      	ldr	r2, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b86      	ldr	r3, [pc, #536]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045da:	4b83      	ldr	r3, [pc, #524]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d118      	bne.n	8004618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045e6:	4b80      	ldr	r3, [pc, #512]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7f      	ldr	r2, [pc, #508]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f2:	f7fe faad 	bl	8002b50 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fa:	f7fe faa9 	bl	8002b50 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b64      	cmp	r3, #100	; 0x64
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e12a      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460c:	4b76      	ldr	r3, [pc, #472]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x31a>
 8004620:	4b70      	ldr	r3, [pc, #448]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a6f      	ldr	r2, [pc, #444]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	e02d      	b.n	800468a <HAL_RCC_OscConfig+0x376>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0x33c>
 8004636:	4b6b      	ldr	r3, [pc, #428]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a6a      	ldr	r2, [pc, #424]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
 8004642:	4b68      	ldr	r3, [pc, #416]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	4a67      	ldr	r2, [pc, #412]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	6713      	str	r3, [r2, #112]	; 0x70
 800464e:	e01c      	b.n	800468a <HAL_RCC_OscConfig+0x376>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b05      	cmp	r3, #5
 8004656:	d10c      	bne.n	8004672 <HAL_RCC_OscConfig+0x35e>
 8004658:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a61      	ldr	r2, [pc, #388]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800465e:	f043 0304 	orr.w	r3, r3, #4
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
 8004664:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a5e      	ldr	r2, [pc, #376]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	e00b      	b.n	800468a <HAL_RCC_OscConfig+0x376>
 8004672:	4b5c      	ldr	r3, [pc, #368]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a5b      	ldr	r2, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
 800467e:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a58      	ldr	r2, [pc, #352]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004684:	f023 0304 	bic.w	r3, r3, #4
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fe fa5d 	bl	8002b50 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fe fa59 	bl	8002b50 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0d8      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ee      	beq.n	800469a <HAL_RCC_OscConfig+0x386>
 80046bc:	e014      	b.n	80046e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fe fa47 	bl	8002b50 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fe fa43 	bl	8002b50 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0c2      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046dc:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ee      	bne.n	80046c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4a3c      	ldr	r2, [pc, #240]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80ae 	beq.w	8004860 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004704:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d06d      	beq.n	80047ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d14b      	bne.n	80047b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004718:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a31      	ldr	r2, [pc, #196]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fe fa14 	bl	8002b50 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fe fa10 	bl	8002b50 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e091      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	3b01      	subs	r3, #1
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	491b      	ldr	r1, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe f9e2 	bl	8002b50 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fe f9de 	bl	8002b50 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e05f      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x47c>
 80047ae:	e057      	b.n	8004860 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe f9c8 	bl	8002b50 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fe f9c4 	bl	8002b50 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e045      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4b0>
 80047e2:	e03d      	b.n	8004860 <HAL_RCC_OscConfig+0x54c>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047ec:	4b1f      	ldr	r3, [pc, #124]	; (800486c <HAL_RCC_OscConfig+0x558>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d030      	beq.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d129      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d122      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004822:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004824:	4293      	cmp	r3, r2
 8004826:	d119      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d10f      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0d0      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b6a      	ldr	r3, [pc, #424]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d910      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 020f 	bic.w	r2, r3, #15
 800489e:	4965      	ldr	r1, [pc, #404]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b63      	ldr	r3, [pc, #396]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0b8      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a58      	ldr	r2, [pc, #352]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e8:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a52      	ldr	r2, [pc, #328]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f4:	4b50      	ldr	r3, [pc, #320]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	494d      	ldr	r1, [pc, #308]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d040      	beq.n	8004994 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d115      	bne.n	8004952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e07f      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e073      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004942:	4b3d      	ldr	r3, [pc, #244]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e06b      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4936      	ldr	r1, [pc, #216]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fe f8f4 	bl	8002b50 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fe f8f0 	bl	8002b50 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e053      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d210      	bcs.n	80049c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 020f 	bic.w	r2, r3, #15
 80049aa:	4922      	ldr	r1, [pc, #136]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e032      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4916      	ldr	r1, [pc, #88]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	490e      	ldr	r1, [pc, #56]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a02:	f000 f821 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8004a06:	4602      	mov	r2, r0
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	490a      	ldr	r1, [pc, #40]	; (8004a3c <HAL_RCC_ClockConfig+0x1cc>)
 8004a14:	5ccb      	ldrb	r3, [r1, r3]
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_RCC_ClockConfig+0x1d0>)
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCC_ClockConfig+0x1d4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe f850 	bl	8002ac8 <HAL_InitTick>

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023c00 	.word	0x40023c00
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	0800a944 	.word	0x0800a944
 8004a40:	2000001c 	.word	0x2000001c
 8004a44:	20000020 	.word	0x20000020

08004a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a60:	4b67      	ldr	r3, [pc, #412]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d00d      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x40>
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	f200 80bd 	bhi.w	8004bec <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x34>
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a7a:	e0b7      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a7c:	4b61      	ldr	r3, [pc, #388]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a7e:	60bb      	str	r3, [r7, #8]
      break;
 8004a80:	e0b7      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a82:	4b61      	ldr	r3, [pc, #388]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a84:	60bb      	str	r3, [r7, #8]
      break;
 8004a86:	e0b4      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a88:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a90:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a92:	4b5b      	ldr	r3, [pc, #364]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04d      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9e:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	ea02 0800 	and.w	r8, r2, r0
 8004ab6:	ea03 0901 	and.w	r9, r3, r1
 8004aba:	4640      	mov	r0, r8
 8004abc:	4649      	mov	r1, r9
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	014b      	lsls	r3, r1, #5
 8004ac8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004acc:	0142      	lsls	r2, r0, #5
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	ebb0 0008 	subs.w	r0, r0, r8
 8004ad6:	eb61 0109 	sbc.w	r1, r1, r9
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	018b      	lsls	r3, r1, #6
 8004ae4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ae8:	0182      	lsls	r2, r0, #6
 8004aea:	1a12      	subs	r2, r2, r0
 8004aec:	eb63 0301 	sbc.w	r3, r3, r1
 8004af0:	f04f 0000 	mov.w	r0, #0
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	00d9      	lsls	r1, r3, #3
 8004afa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004afe:	00d0      	lsls	r0, r2, #3
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	eb12 0208 	adds.w	r2, r2, r8
 8004b08:	eb43 0309 	adc.w	r3, r3, r9
 8004b0c:	f04f 0000 	mov.w	r0, #0
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	0259      	lsls	r1, r3, #9
 8004b16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b1a:	0250      	lsls	r0, r2, #9
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	f7fb fbe0 	bl	80002f0 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e04a      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	461a      	mov	r2, r3
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	ea02 0400 	and.w	r4, r2, r0
 8004b52:	ea03 0501 	and.w	r5, r3, r1
 8004b56:	4620      	mov	r0, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	014b      	lsls	r3, r1, #5
 8004b64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b68:	0142      	lsls	r2, r0, #5
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	1b00      	subs	r0, r0, r4
 8004b70:	eb61 0105 	sbc.w	r1, r1, r5
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	018b      	lsls	r3, r1, #6
 8004b7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b82:	0182      	lsls	r2, r0, #6
 8004b84:	1a12      	subs	r2, r2, r0
 8004b86:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8a:	f04f 0000 	mov.w	r0, #0
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	00d9      	lsls	r1, r3, #3
 8004b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b98:	00d0      	lsls	r0, r2, #3
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	1912      	adds	r2, r2, r4
 8004ba0:	eb45 0303 	adc.w	r3, r5, r3
 8004ba4:	f04f 0000 	mov.w	r0, #0
 8004ba8:	f04f 0100 	mov.w	r1, #0
 8004bac:	0299      	lsls	r1, r3, #10
 8004bae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bb2:	0290      	lsls	r0, r2, #10
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	f7fb fb94 	bl	80002f0 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4613      	mov	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	60bb      	str	r3, [r7, #8]
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bee:	60bb      	str	r3, [r7, #8]
      break;
 8004bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	2000001c 	.word	0x2000001c

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a9b      	lsrs	r3, r3, #10
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	0800a954 	.word	0x0800a954

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c50:	f7ff ffdc 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0b5b      	lsrs	r3, r3, #13
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	0800a954 	.word	0x0800a954

08004c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d012      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c9c:	4b69      	ldr	r3, [pc, #420]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	4a68      	ldr	r2, [pc, #416]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ca6:	6093      	str	r3, [r2, #8]
 8004ca8:	4b66      	ldr	r3, [pc, #408]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	4964      	ldr	r1, [pc, #400]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d017      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cce:	4b5d      	ldr	r3, [pc, #372]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	4959      	ldr	r1, [pc, #356]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d0a:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	494a      	ldr	r1, [pc, #296]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d28:	d101      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 808b 	beq.w	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d58:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	4a39      	ldr	r2, [pc, #228]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d62:	6413      	str	r3, [r2, #64]	; 0x40
 8004d64:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a34      	ldr	r2, [pc, #208]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7c:	f7fd fee8 	bl	8002b50 <HAL_GetTick>
 8004d80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d84:	f7fd fee4 	bl	8002b50 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e38f      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d96:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da2:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d035      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d02e      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc0:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dca:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004de2:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004de8:	4b16      	ldr	r3, [pc, #88]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d114      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd feac 	bl	8002b50 <HAL_GetTick>
 8004df8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fea8 	bl	8002b50 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e351      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0ee      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e3a:	400b      	ands	r3, r1
 8004e3c:	4901      	ldr	r1, [pc, #4]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
 8004e42:	e00b      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	0ffffcff 	.word	0x0ffffcff
 8004e50:	4bb3      	ldr	r3, [pc, #716]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4ab2      	ldr	r2, [pc, #712]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e5a:	6093      	str	r3, [r2, #8]
 8004e5c:	4bb0      	ldr	r3, [pc, #704]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e68:	49ad      	ldr	r1, [pc, #692]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d010      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e7a:	4ba9      	ldr	r3, [pc, #676]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e80:	4aa7      	ldr	r2, [pc, #668]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e8a:	4ba5      	ldr	r3, [pc, #660]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	49a2      	ldr	r1, [pc, #648]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea8:	4b9d      	ldr	r3, [pc, #628]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb6:	499a      	ldr	r1, [pc, #616]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eca:	4b95      	ldr	r3, [pc, #596]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed8:	4991      	ldr	r1, [pc, #580]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eec:	4b8c      	ldr	r3, [pc, #560]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efa:	4989      	ldr	r1, [pc, #548]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f0e:	4b84      	ldr	r3, [pc, #528]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	4980      	ldr	r1, [pc, #512]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f30:	4b7b      	ldr	r3, [pc, #492]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	f023 0203 	bic.w	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	4978      	ldr	r1, [pc, #480]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f52:	4b73      	ldr	r3, [pc, #460]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	f023 020c 	bic.w	r2, r3, #12
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f60:	496f      	ldr	r1, [pc, #444]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f74:	4b6a      	ldr	r3, [pc, #424]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	4967      	ldr	r1, [pc, #412]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f96:	4b62      	ldr	r3, [pc, #392]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	495e      	ldr	r1, [pc, #376]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	4956      	ldr	r1, [pc, #344]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fda:	4b51      	ldr	r3, [pc, #324]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ffc:	4b48      	ldr	r3, [pc, #288]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	4945      	ldr	r1, [pc, #276]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800501e:	4b40      	ldr	r3, [pc, #256]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502c:	493c      	ldr	r1, [pc, #240]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005040:	4b37      	ldr	r3, [pc, #220]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504e:	4934      	ldr	r1, [pc, #208]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d011      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005062:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005070:	492b      	ldr	r1, [pc, #172]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005080:	d101      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005082:	2301      	movs	r3, #1
 8005084:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050a2:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b0:	491b      	ldr	r1, [pc, #108]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050c4:	4b16      	ldr	r3, [pc, #88]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d4:	4912      	ldr	r1, [pc, #72]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f8:	4909      	ldr	r1, [pc, #36]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00f      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800510e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005112:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	e002      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	4986      	ldr	r1, [pc, #536]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005138:	4b81      	ldr	r3, [pc, #516]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005148:	497d      	ldr	r1, [pc, #500]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d006      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80d6 	beq.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005164:	4b76      	ldr	r3, [pc, #472]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a75      	ldr	r2, [pc, #468]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800516e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005170:	f7fd fcee 	bl	8002b50 <HAL_GetTick>
 8005174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005176:	e008      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005178:	f7fd fcea 	bl	8002b50 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e195      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800518a:	4b6d      	ldr	r3, [pc, #436]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d021      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d11d      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051aa:	4b65      	ldr	r3, [pc, #404]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051b8:	4b61      	ldr	r3, [pc, #388]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051be:	0e1b      	lsrs	r3, r3, #24
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	019a      	lsls	r2, r3, #6
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	071b      	lsls	r3, r3, #28
 80051de:	4958      	ldr	r1, [pc, #352]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005204:	2b00      	cmp	r3, #0
 8005206:	d02e      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005210:	d129      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005212:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005220:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005226:	0f1b      	lsrs	r3, r3, #28
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	019a      	lsls	r2, r3, #6
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	431a      	orrs	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	071b      	lsls	r3, r3, #28
 8005246:	493e      	ldr	r1, [pc, #248]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800524e:	4b3c      	ldr	r3, [pc, #240]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005254:	f023 021f 	bic.w	r2, r3, #31
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	3b01      	subs	r3, #1
 800525e:	4938      	ldr	r1, [pc, #224]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01d      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005272:	4b33      	ldr	r3, [pc, #204]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005286:	0f1b      	lsrs	r3, r3, #28
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	019a      	lsls	r2, r3, #6
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	431a      	orrs	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	061b      	lsls	r3, r3, #24
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	4926      	ldr	r1, [pc, #152]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d011      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	019a      	lsls	r2, r3, #6
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	061b      	lsls	r3, r3, #24
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	071b      	lsls	r3, r3, #28
 80052d6:	491a      	ldr	r1, [pc, #104]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ea:	f7fd fc31 	bl	8002b50 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052f2:	f7fd fc2d 	bl	8002b50 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	; 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e0d8      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b01      	cmp	r3, #1
 8005314:	f040 80ce 	bne.w	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a08      	ldr	r2, [pc, #32]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005324:	f7fd fc14 	bl	8002b50 <HAL_GetTick>
 8005328:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800532a:	e00b      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800532c:	f7fd fc10 	bl	8002b50 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d904      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e0bb      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005344:	4b5e      	ldr	r3, [pc, #376]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005350:	d0ec      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800536e:	2b00      	cmp	r3, #0
 8005370:	d02e      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d12a      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800537a:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005388:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	0f1b      	lsrs	r3, r3, #28
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	019a      	lsls	r2, r3, #6
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	061b      	lsls	r3, r3, #24
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	071b      	lsls	r3, r3, #28
 80053ae:	4944      	ldr	r1, [pc, #272]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053b6:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	3b01      	subs	r3, #1
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	493d      	ldr	r1, [pc, #244]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d022      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e4:	d11d      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	0e1b      	lsrs	r3, r3, #24
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053f4:	4b32      	ldr	r3, [pc, #200]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	0f1b      	lsrs	r3, r3, #28
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	019a      	lsls	r2, r3, #6
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	431a      	orrs	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	071b      	lsls	r3, r3, #28
 800541a:	4929      	ldr	r1, [pc, #164]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d028      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	0e1b      	lsrs	r3, r3, #24
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	019a      	lsls	r2, r3, #6
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	431a      	orrs	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	061b      	lsls	r3, r3, #24
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	071b      	lsls	r3, r3, #28
 8005462:	4917      	ldr	r1, [pc, #92]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4911      	ldr	r1, [pc, #68]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0e      	ldr	r2, [pc, #56]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548c:	f7fd fb60 	bl	8002b50 <HAL_GetTick>
 8005490:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005494:	f7fd fb5c 	bl	8002b50 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e007      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b2:	d1ef      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800

080054c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e049      	b.n	800556a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd f910 	bl	8002710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f000 fb80 	bl	8005c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	f241 1311 	movw	r3, #4369	; 0x1111
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10f      	bne.n	80055aa <HAL_TIM_Base_Stop+0x38>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	f240 4344 	movw	r3, #1092	; 0x444
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d107      	bne.n	80055aa <HAL_TIM_Base_Stop+0x38>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d001      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e054      	b.n	8005682 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <HAL_TIM_Base_Start_IT+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d022      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x80>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d01d      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x80>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a22      	ldr	r2, [pc, #136]	; (8005694 <HAL_TIM_Base_Start_IT+0xd4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x80>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a21      	ldr	r2, [pc, #132]	; (8005698 <HAL_TIM_Base_Start_IT+0xd8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x80>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1f      	ldr	r2, [pc, #124]	; (800569c <HAL_TIM_Base_Start_IT+0xdc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x80>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x80>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x80>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d115      	bne.n	800566c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	4b19      	ldr	r3, [pc, #100]	; (80056ac <HAL_TIM_Base_Start_IT+0xec>)
 8005648:	4013      	ands	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b06      	cmp	r3, #6
 8005650:	d015      	beq.n	800567e <HAL_TIM_Base_Start_IT+0xbe>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005658:	d011      	beq.n	800567e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566a:	e008      	b.n	800567e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e000      	b.n	8005680 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40010400 	.word	0x40010400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800
 80056ac:	00010007 	.word	0x00010007

080056b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10f      	bne.n	80056f8 <HAL_TIM_Base_Stop_IT+0x48>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	f240 4344 	movw	r3, #1092	; 0x444
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_Base_Stop_IT+0x48>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e08f      	b.n	8005844 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fc ff7f 	bl	800263c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b3e      	ldr	r3, [pc, #248]	; (800584c <HAL_TIM_Encoder_Init+0x13c>)
 8005752:	400b      	ands	r3, r1
 8005754:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 fa51 	bl	8005c08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <HAL_TIM_Encoder_Init+0x140>)
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	4313      	orrs	r3, r2
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <HAL_TIM_Encoder_Init+0x144>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <HAL_TIM_Encoder_Init+0x148>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	4313      	orrs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	011a      	lsls	r2, r3, #4
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	031b      	lsls	r3, r3, #12
 80057d0:	4313      	orrs	r3, r2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	4313      	orrs	r3, r2
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	fffebff8 	.word	0xfffebff8
 8005850:	fffffcfc 	.word	0xfffffcfc
 8005854:	fffff3f3 	.word	0xfffff3f3
 8005858:	ffff0f0f 	.word	0xffff0f0f

0800585c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800586c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005874:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800587c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005884:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d110      	bne.n	80058ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d102      	bne.n	8005898 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005892:	7b7b      	ldrb	r3, [r7, #13]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d001      	beq.n	800589c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e069      	b.n	8005970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ac:	e031      	b.n	8005912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d110      	bne.n	80058d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ba:	7b3b      	ldrb	r3, [r7, #12]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e055      	b.n	8005970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058d4:	e01d      	b.n	8005912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d108      	bne.n	80058ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e2:	7b7b      	ldrb	r3, [r7, #13]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d102      	bne.n	80058ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e8:	7b3b      	ldrb	r3, [r7, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e03e      	b.n	8005970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_TIM_Encoder_Start+0xc4>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b04      	cmp	r3, #4
 800591c:	d008      	beq.n	8005930 <HAL_TIM_Encoder_Start+0xd4>
 800591e:	e00f      	b.n	8005940 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2201      	movs	r2, #1
 8005926:	2100      	movs	r1, #0
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa0d 	bl	8005d48 <TIM_CCxChannelCmd>
      break;
 800592e:	e016      	b.n	800595e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2201      	movs	r2, #1
 8005936:	2104      	movs	r1, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fa05 	bl	8005d48 <TIM_CCxChannelCmd>
      break;
 800593e:	e00e      	b.n	800595e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f9fd 	bl	8005d48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	2104      	movs	r1, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f9f6 	bl	8005d48 <TIM_CCxChannelCmd>
      break;
 800595c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d122      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	d11b      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0202 	mvn.w	r2, #2
 80059a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f905 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8f7 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f908 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d122      	bne.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d11b      	bne.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0204 	mvn.w	r2, #4
 80059f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8db 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f8cd 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f8de 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d122      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d11b      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0208 	mvn.w	r2, #8
 8005a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2204      	movs	r2, #4
 8005a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f8b1 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 8005a68:	e005      	b.n	8005a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f8a3 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f8b4 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0210 	mvn.w	r2, #16
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f887 	bl	8005bca <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f879 	bl	8005bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f88a 	bl	8005bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10e      	bne.n	8005afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d107      	bne.n	8005afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0201 	mvn.w	r2, #1
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fb ff5a 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d10e      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b80      	cmp	r3, #128	; 0x80
 8005b16:	d107      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9ce 	bl	8005ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b36:	d10e      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f9c1 	bl	8005ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d10e      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d107      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f838 	bl	8005bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0220 	mvn.w	r2, #32
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f981 	bl	8005eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a40      	ldr	r2, [pc, #256]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c26:	d00f      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3d      	ldr	r2, [pc, #244]	; (8005d20 <TIM_Base_SetConfig+0x118>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3c      	ldr	r2, [pc, #240]	; (8005d24 <TIM_Base_SetConfig+0x11c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3b      	ldr	r2, [pc, #236]	; (8005d28 <TIM_Base_SetConfig+0x120>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3a      	ldr	r2, [pc, #232]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d108      	bne.n	8005c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2f      	ldr	r2, [pc, #188]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d027      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2c      	ldr	r2, [pc, #176]	; (8005d20 <TIM_Base_SetConfig+0x118>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d023      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <TIM_Base_SetConfig+0x11c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01f      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2a      	ldr	r2, [pc, #168]	; (8005d28 <TIM_Base_SetConfig+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d017      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <TIM_Base_SetConfig+0x128>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <TIM_Base_SetConfig+0x12c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00f      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a26      	ldr	r2, [pc, #152]	; (8005d38 <TIM_Base_SetConfig+0x130>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <TIM_Base_SetConfig+0x134>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d007      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <TIM_Base_SetConfig+0x138>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a23      	ldr	r2, [pc, #140]	; (8005d44 <TIM_Base_SetConfig+0x13c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d108      	bne.n	8005ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0xf8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40010400 	.word	0x40010400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	40001800 	.word	0x40001800
 8005d40:	40001c00 	.word	0x40001c00
 8005d44:	40002000 	.word	0x40002000

08005d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1a      	ldr	r2, [r3, #32]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d80:	431a      	orrs	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
	...

08005d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e06d      	b.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d108      	bne.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005de6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a20      	ldr	r2, [pc, #128]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d022      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d01d      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10c      	bne.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40000800 	.word	0x40000800
 8005ea4:	40000c00 	.word	0x40000c00
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40001800 	.word	0x40001800

08005eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e040      	b.n	8005f80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fc fcc4 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2224      	movs	r2, #36	; 0x24
 8005f18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fc18 	bl	8006760 <UART_SetConfig>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e022      	b.n	8005f80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fe6e 	bl	8006c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fef5 	bl	8006d68 <UART_CheckIdleState>
 8005f7e:	4603      	mov	r3, r0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	f040 8081 	bne.w	80060a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_UART_Transmit+0x26>
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e079      	b.n	80060a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Transmit+0x38>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e072      	b.n	80060a6 <HAL_UART_Transmit+0x11e>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2221      	movs	r2, #33	; 0x21
 8005fd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fc fdbb 	bl	8002b50 <HAL_GetTick>
 8005fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff4:	d108      	bne.n	8006008 <HAL_UART_Transmit+0x80>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	e003      	b.n	8006010 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006018:	e02c      	b.n	8006074 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2200      	movs	r2, #0
 8006022:	2180      	movs	r1, #128	; 0x80
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fee8 	bl	8006dfa <UART_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e038      	b.n	80060a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	3302      	adds	r3, #2
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e007      	b.n	8006062 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1cc      	bne.n	800601a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 feb5 	bl	8006dfa <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e005      	b.n	80060a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b08a      	sub	sp, #40	; 0x28
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	4613      	mov	r3, r2
 80060ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d13d      	bne.n	8006140 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Receive_IT+0x22>
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e036      	b.n	8006142 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Receive_IT+0x34>
 80060de:	2302      	movs	r3, #2
 80060e0:	e02f      	b.n	8006142 <HAL_UART_Receive_IT+0x94>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d018      	beq.n	8006130 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	613b      	str	r3, [r7, #16]
   return(result);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	69f9      	ldr	r1, [r7, #28]
 8006122:	6a3a      	ldr	r2, [r7, #32]
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	61bb      	str	r3, [r7, #24]
   return(result);
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e6      	bne.n	80060fe <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	461a      	mov	r2, r3
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 ff24 	bl	8006f84 <UART_Start_Receive_IT>
 800613c:	4603      	mov	r3, r0
 800613e:	e000      	b.n	8006142 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3728      	adds	r7, #40	; 0x28
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b0ba      	sub	sp, #232	; 0xe8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006172:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006176:	f640 030f 	movw	r3, #2063	; 0x80f
 800617a:	4013      	ands	r3, r2
 800617c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d115      	bne.n	80061b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00f      	beq.n	80061b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 82a4 	beq.w	80066f2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
      }
      return;
 80061b2:	e29e      	b.n	80066f2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8117 	beq.w	80063ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061ce:	4b85      	ldr	r3, [pc, #532]	; (80063e4 <HAL_UART_IRQHandler+0x298>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 810a 	beq.w	80063ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <HAL_UART_IRQHandler+0xbc>
 80061e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2201      	movs	r2, #1
 80061f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fe:	f043 0201 	orr.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d011      	beq.n	8006238 <HAL_UART_IRQHandler+0xec>
 8006214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2202      	movs	r2, #2
 8006226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800622e:	f043 0204 	orr.w	r2, r3, #4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d011      	beq.n	8006268 <HAL_UART_IRQHandler+0x11c>
 8006244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2204      	movs	r2, #4
 8006256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800625e:	f043 0202 	orr.w	r2, r3, #2
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d017      	beq.n	80062a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006284:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2208      	movs	r2, #8
 8006292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629a:	f043 0208 	orr.w	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d012      	beq.n	80062d6 <HAL_UART_IRQHandler+0x18a>
 80062b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 820a 	beq.w	80066f6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00d      	beq.n	800630a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d005      	beq.n	800632e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800632a:	2b00      	cmp	r3, #0
 800632c:	d04f      	beq.n	80063ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fef2 	bl	8007118 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d141      	bne.n	80063c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800635c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3308      	adds	r3, #8
 800636a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800636e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800637a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d9      	bne.n	8006342 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	2b00      	cmp	r3, #0
 8006394:	d013      	beq.n	80063be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	4a13      	ldr	r2, [pc, #76]	; (80063e8 <HAL_UART_IRQHandler+0x29c>)
 800639c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fd fbf3 	bl	8003b8e <HAL_DMA_Abort_IT>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d017      	beq.n	80063de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063bc:	e00f      	b.n	80063de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f9ae 	bl	8006720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	e00b      	b.n	80063de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f9aa 	bl	8006720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	e007      	b.n	80063de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f9a6 	bl	8006720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063dc:	e18b      	b.n	80066f6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063de:	bf00      	nop
    return;
 80063e0:	e189      	b.n	80066f6 <HAL_UART_IRQHandler+0x5aa>
 80063e2:	bf00      	nop
 80063e4:	04000120 	.word	0x04000120
 80063e8:	080071df 	.word	0x080071df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	f040 8144 	bne.w	800667e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 813d 	beq.w	800667e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8136 	beq.w	800667e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2210      	movs	r2, #16
 8006418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	f040 80b2 	bne.w	800658e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006436:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 815d 	beq.w	80066fa <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644a:	429a      	cmp	r2, r3
 800644c:	f080 8155 	bcs.w	80066fa <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006464:	f000 8085 	beq.w	8006572 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800647c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006496:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800649e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1da      	bne.n	8006468 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e1      	bne.n	80064b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3308      	adds	r3, #8
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006542:	f023 0310 	bic.w	r3, r3, #16
 8006546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006554:	65bb      	str	r3, [r7, #88]	; 0x58
 8006556:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800655a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e4      	bne.n	8006532 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	4618      	mov	r0, r3
 800656e:	f7fd fa9e 	bl	8003aae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800657e:	b29b      	uxth	r3, r3
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8d4 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800658c:	e0b5      	b.n	80066fa <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800659a:	b29b      	uxth	r3, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80a7 	beq.w	80066fe <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80065b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a2 	beq.w	80066fe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065dc:	647b      	str	r3, [r7, #68]	; 0x44
 80065de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e4      	bne.n	80065ba <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006614:	633a      	str	r2, [r7, #48]	; 0x30
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800661a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e3      	bne.n	80065f0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	60fb      	str	r3, [r7, #12]
   return(result);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0310 	bic.w	r3, r3, #16
 800664e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	617b      	str	r3, [r7, #20]
   return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e4      	bne.n	800663a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f85c 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800667c:	e03f      	b.n	80066fe <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00e      	beq.n	80066a8 <HAL_UART_IRQHandler+0x55c>
 800668a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800668e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800669e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f853 	bl	800674c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066a6:	e02d      	b.n	8006704 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00e      	beq.n	80066d2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01c      	beq.n	8006702 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
    }
    return;
 80066d0:	e017      	b.n	8006702 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d012      	beq.n	8006704 <HAL_UART_IRQHandler+0x5b8>
 80066de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fd8d 	bl	800720a <UART_EndTransmit_IT>
    return;
 80066f0:	e008      	b.n	8006704 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066f2:	bf00      	nop
 80066f4:	e006      	b.n	8006704 <HAL_UART_IRQHandler+0x5b8>
    return;
 80066f6:	bf00      	nop
 80066f8:	e004      	b.n	8006704 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066fa:	bf00      	nop
 80066fc:	e002      	b.n	8006704 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066fe:	bf00      	nop
 8006700:	e000      	b.n	8006704 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006702:	bf00      	nop
  }

}
 8006704:	37e8      	adds	r7, #232	; 0xe8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop

0800670c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4ba7      	ldr	r3, [pc, #668]	; (8006a28 <UART_SetConfig+0x2c8>)
 800678c:	4013      	ands	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	430b      	orrs	r3, r1
 8006796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a95      	ldr	r2, [pc, #596]	; (8006a2c <UART_SetConfig+0x2cc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d120      	bne.n	800681e <UART_SetConfig+0xbe>
 80067dc:	4b94      	ldr	r3, [pc, #592]	; (8006a30 <UART_SetConfig+0x2d0>)
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d816      	bhi.n	8006818 <UART_SetConfig+0xb8>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x90>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006801 	.word	0x08006801
 80067f4:	0800680d 	.word	0x0800680d
 80067f8:	08006807 	.word	0x08006807
 80067fc:	08006813 	.word	0x08006813
 8006800:	2301      	movs	r3, #1
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e14f      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006806:	2302      	movs	r3, #2
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e14c      	b.n	8006aa6 <UART_SetConfig+0x346>
 800680c:	2304      	movs	r3, #4
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e149      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006812:	2308      	movs	r3, #8
 8006814:	77fb      	strb	r3, [r7, #31]
 8006816:	e146      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006818:	2310      	movs	r3, #16
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e143      	b.n	8006aa6 <UART_SetConfig+0x346>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a84      	ldr	r2, [pc, #528]	; (8006a34 <UART_SetConfig+0x2d4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d132      	bne.n	800688e <UART_SetConfig+0x12e>
 8006828:	4b81      	ldr	r3, [pc, #516]	; (8006a30 <UART_SetConfig+0x2d0>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	f003 030c 	and.w	r3, r3, #12
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d828      	bhi.n	8006888 <UART_SetConfig+0x128>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <UART_SetConfig+0xdc>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006871 	.word	0x08006871
 8006840:	08006889 	.word	0x08006889
 8006844:	08006889 	.word	0x08006889
 8006848:	08006889 	.word	0x08006889
 800684c:	0800687d 	.word	0x0800687d
 8006850:	08006889 	.word	0x08006889
 8006854:	08006889 	.word	0x08006889
 8006858:	08006889 	.word	0x08006889
 800685c:	08006877 	.word	0x08006877
 8006860:	08006889 	.word	0x08006889
 8006864:	08006889 	.word	0x08006889
 8006868:	08006889 	.word	0x08006889
 800686c:	08006883 	.word	0x08006883
 8006870:	2300      	movs	r3, #0
 8006872:	77fb      	strb	r3, [r7, #31]
 8006874:	e117      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006876:	2302      	movs	r3, #2
 8006878:	77fb      	strb	r3, [r7, #31]
 800687a:	e114      	b.n	8006aa6 <UART_SetConfig+0x346>
 800687c:	2304      	movs	r3, #4
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	e111      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006882:	2308      	movs	r3, #8
 8006884:	77fb      	strb	r3, [r7, #31]
 8006886:	e10e      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006888:	2310      	movs	r3, #16
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e10b      	b.n	8006aa6 <UART_SetConfig+0x346>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a69      	ldr	r2, [pc, #420]	; (8006a38 <UART_SetConfig+0x2d8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d120      	bne.n	80068da <UART_SetConfig+0x17a>
 8006898:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <UART_SetConfig+0x2d0>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068a2:	2b30      	cmp	r3, #48	; 0x30
 80068a4:	d013      	beq.n	80068ce <UART_SetConfig+0x16e>
 80068a6:	2b30      	cmp	r3, #48	; 0x30
 80068a8:	d814      	bhi.n	80068d4 <UART_SetConfig+0x174>
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d009      	beq.n	80068c2 <UART_SetConfig+0x162>
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d810      	bhi.n	80068d4 <UART_SetConfig+0x174>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <UART_SetConfig+0x15c>
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d006      	beq.n	80068c8 <UART_SetConfig+0x168>
 80068ba:	e00b      	b.n	80068d4 <UART_SetConfig+0x174>
 80068bc:	2300      	movs	r3, #0
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	e0f1      	b.n	8006aa6 <UART_SetConfig+0x346>
 80068c2:	2302      	movs	r3, #2
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e0ee      	b.n	8006aa6 <UART_SetConfig+0x346>
 80068c8:	2304      	movs	r3, #4
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e0eb      	b.n	8006aa6 <UART_SetConfig+0x346>
 80068ce:	2308      	movs	r3, #8
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e0e8      	b.n	8006aa6 <UART_SetConfig+0x346>
 80068d4:	2310      	movs	r3, #16
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e0e5      	b.n	8006aa6 <UART_SetConfig+0x346>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a57      	ldr	r2, [pc, #348]	; (8006a3c <UART_SetConfig+0x2dc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d120      	bne.n	8006926 <UART_SetConfig+0x1c6>
 80068e4:	4b52      	ldr	r3, [pc, #328]	; (8006a30 <UART_SetConfig+0x2d0>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ee:	2bc0      	cmp	r3, #192	; 0xc0
 80068f0:	d013      	beq.n	800691a <UART_SetConfig+0x1ba>
 80068f2:	2bc0      	cmp	r3, #192	; 0xc0
 80068f4:	d814      	bhi.n	8006920 <UART_SetConfig+0x1c0>
 80068f6:	2b80      	cmp	r3, #128	; 0x80
 80068f8:	d009      	beq.n	800690e <UART_SetConfig+0x1ae>
 80068fa:	2b80      	cmp	r3, #128	; 0x80
 80068fc:	d810      	bhi.n	8006920 <UART_SetConfig+0x1c0>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <UART_SetConfig+0x1a8>
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d006      	beq.n	8006914 <UART_SetConfig+0x1b4>
 8006906:	e00b      	b.n	8006920 <UART_SetConfig+0x1c0>
 8006908:	2300      	movs	r3, #0
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e0cb      	b.n	8006aa6 <UART_SetConfig+0x346>
 800690e:	2302      	movs	r3, #2
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e0c8      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006914:	2304      	movs	r3, #4
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e0c5      	b.n	8006aa6 <UART_SetConfig+0x346>
 800691a:	2308      	movs	r3, #8
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e0c2      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006920:	2310      	movs	r3, #16
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e0bf      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a45      	ldr	r2, [pc, #276]	; (8006a40 <UART_SetConfig+0x2e0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d125      	bne.n	800697c <UART_SetConfig+0x21c>
 8006930:	4b3f      	ldr	r3, [pc, #252]	; (8006a30 <UART_SetConfig+0x2d0>)
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800693e:	d017      	beq.n	8006970 <UART_SetConfig+0x210>
 8006940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006944:	d817      	bhi.n	8006976 <UART_SetConfig+0x216>
 8006946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694a:	d00b      	beq.n	8006964 <UART_SetConfig+0x204>
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d811      	bhi.n	8006976 <UART_SetConfig+0x216>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <UART_SetConfig+0x1fe>
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d006      	beq.n	800696a <UART_SetConfig+0x20a>
 800695c:	e00b      	b.n	8006976 <UART_SetConfig+0x216>
 800695e:	2300      	movs	r3, #0
 8006960:	77fb      	strb	r3, [r7, #31]
 8006962:	e0a0      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006964:	2302      	movs	r3, #2
 8006966:	77fb      	strb	r3, [r7, #31]
 8006968:	e09d      	b.n	8006aa6 <UART_SetConfig+0x346>
 800696a:	2304      	movs	r3, #4
 800696c:	77fb      	strb	r3, [r7, #31]
 800696e:	e09a      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006970:	2308      	movs	r3, #8
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e097      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006976:	2310      	movs	r3, #16
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e094      	b.n	8006aa6 <UART_SetConfig+0x346>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a30      	ldr	r2, [pc, #192]	; (8006a44 <UART_SetConfig+0x2e4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d125      	bne.n	80069d2 <UART_SetConfig+0x272>
 8006986:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <UART_SetConfig+0x2d0>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006994:	d017      	beq.n	80069c6 <UART_SetConfig+0x266>
 8006996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800699a:	d817      	bhi.n	80069cc <UART_SetConfig+0x26c>
 800699c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a0:	d00b      	beq.n	80069ba <UART_SetConfig+0x25a>
 80069a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a6:	d811      	bhi.n	80069cc <UART_SetConfig+0x26c>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <UART_SetConfig+0x254>
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b0:	d006      	beq.n	80069c0 <UART_SetConfig+0x260>
 80069b2:	e00b      	b.n	80069cc <UART_SetConfig+0x26c>
 80069b4:	2301      	movs	r3, #1
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e075      	b.n	8006aa6 <UART_SetConfig+0x346>
 80069ba:	2302      	movs	r3, #2
 80069bc:	77fb      	strb	r3, [r7, #31]
 80069be:	e072      	b.n	8006aa6 <UART_SetConfig+0x346>
 80069c0:	2304      	movs	r3, #4
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	e06f      	b.n	8006aa6 <UART_SetConfig+0x346>
 80069c6:	2308      	movs	r3, #8
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e06c      	b.n	8006aa6 <UART_SetConfig+0x346>
 80069cc:	2310      	movs	r3, #16
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e069      	b.n	8006aa6 <UART_SetConfig+0x346>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <UART_SetConfig+0x2e8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d137      	bne.n	8006a4c <UART_SetConfig+0x2ec>
 80069dc:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <UART_SetConfig+0x2d0>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ea:	d017      	beq.n	8006a1c <UART_SetConfig+0x2bc>
 80069ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069f0:	d817      	bhi.n	8006a22 <UART_SetConfig+0x2c2>
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f6:	d00b      	beq.n	8006a10 <UART_SetConfig+0x2b0>
 80069f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fc:	d811      	bhi.n	8006a22 <UART_SetConfig+0x2c2>
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <UART_SetConfig+0x2aa>
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a06:	d006      	beq.n	8006a16 <UART_SetConfig+0x2b6>
 8006a08:	e00b      	b.n	8006a22 <UART_SetConfig+0x2c2>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e04a      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a10:	2302      	movs	r3, #2
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e047      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a16:	2304      	movs	r3, #4
 8006a18:	77fb      	strb	r3, [r7, #31]
 8006a1a:	e044      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	77fb      	strb	r3, [r7, #31]
 8006a20:	e041      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a22:	2310      	movs	r3, #16
 8006a24:	77fb      	strb	r3, [r7, #31]
 8006a26:	e03e      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a28:	efff69f3 	.word	0xefff69f3
 8006a2c:	40011000 	.word	0x40011000
 8006a30:	40023800 	.word	0x40023800
 8006a34:	40004400 	.word	0x40004400
 8006a38:	40004800 	.word	0x40004800
 8006a3c:	40004c00 	.word	0x40004c00
 8006a40:	40005000 	.word	0x40005000
 8006a44:	40011400 	.word	0x40011400
 8006a48:	40007800 	.word	0x40007800
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a71      	ldr	r2, [pc, #452]	; (8006c18 <UART_SetConfig+0x4b8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d125      	bne.n	8006aa2 <UART_SetConfig+0x342>
 8006a56:	4b71      	ldr	r3, [pc, #452]	; (8006c1c <UART_SetConfig+0x4bc>)
 8006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a64:	d017      	beq.n	8006a96 <UART_SetConfig+0x336>
 8006a66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a6a:	d817      	bhi.n	8006a9c <UART_SetConfig+0x33c>
 8006a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a70:	d00b      	beq.n	8006a8a <UART_SetConfig+0x32a>
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a76:	d811      	bhi.n	8006a9c <UART_SetConfig+0x33c>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <UART_SetConfig+0x324>
 8006a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a80:	d006      	beq.n	8006a90 <UART_SetConfig+0x330>
 8006a82:	e00b      	b.n	8006a9c <UART_SetConfig+0x33c>
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e00d      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e00a      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a90:	2304      	movs	r3, #4
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e007      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a96:	2308      	movs	r3, #8
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e004      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e001      	b.n	8006aa6 <UART_SetConfig+0x346>
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aae:	d15a      	bne.n	8006b66 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006ab0:	7ffb      	ldrb	r3, [r7, #31]
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d827      	bhi.n	8006b06 <UART_SetConfig+0x3a6>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0x35c>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006ae9 	.word	0x08006ae9
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	08006b07 	.word	0x08006b07
 8006acc:	08006af7 	.word	0x08006af7
 8006ad0:	08006b07 	.word	0x08006b07
 8006ad4:	08006b07 	.word	0x08006b07
 8006ad8:	08006b07 	.word	0x08006b07
 8006adc:	08006aff 	.word	0x08006aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae0:	f7fe f8a0 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006ae4:	61b8      	str	r0, [r7, #24]
        break;
 8006ae6:	e013      	b.n	8006b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae8:	f7fe f8b0 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8006aec:	61b8      	str	r0, [r7, #24]
        break;
 8006aee:	e00f      	b.n	8006b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af0:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <UART_SetConfig+0x4c0>)
 8006af2:	61bb      	str	r3, [r7, #24]
        break;
 8006af4:	e00c      	b.n	8006b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af6:	f7fd ffa7 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8006afa:	61b8      	str	r0, [r7, #24]
        break;
 8006afc:	e008      	b.n	8006b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b02:	61bb      	str	r3, [r7, #24]
        break;
 8006b04:	e004      	b.n	8006b10 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d074      	beq.n	8006c00 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	005a      	lsls	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	441a      	add	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b0f      	cmp	r3, #15
 8006b30:	d916      	bls.n	8006b60 <UART_SetConfig+0x400>
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b38:	d212      	bcs.n	8006b60 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f023 030f 	bic.w	r3, r3, #15
 8006b42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	89fb      	ldrh	r3, [r7, #14]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	89fa      	ldrh	r2, [r7, #14]
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	e04f      	b.n	8006c00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	77bb      	strb	r3, [r7, #30]
 8006b64:	e04c      	b.n	8006c00 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b66:	7ffb      	ldrb	r3, [r7, #31]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d828      	bhi.n	8006bbe <UART_SetConfig+0x45e>
 8006b6c:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <UART_SetConfig+0x414>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b99 	.word	0x08006b99
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006ba9 	.word	0x08006ba9
 8006b80:	08006bbf 	.word	0x08006bbf
 8006b84:	08006baf 	.word	0x08006baf
 8006b88:	08006bbf 	.word	0x08006bbf
 8006b8c:	08006bbf 	.word	0x08006bbf
 8006b90:	08006bbf 	.word	0x08006bbf
 8006b94:	08006bb7 	.word	0x08006bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b98:	f7fe f844 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006b9c:	61b8      	str	r0, [r7, #24]
        break;
 8006b9e:	e013      	b.n	8006bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba0:	f7fe f854 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8006ba4:	61b8      	str	r0, [r7, #24]
        break;
 8006ba6:	e00f      	b.n	8006bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <UART_SetConfig+0x4c0>)
 8006baa:	61bb      	str	r3, [r7, #24]
        break;
 8006bac:	e00c      	b.n	8006bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bae:	f7fd ff4b 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8006bb2:	61b8      	str	r0, [r7, #24]
        break;
 8006bb4:	e008      	b.n	8006bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bba:	61bb      	str	r3, [r7, #24]
        break;
 8006bbc:	e004      	b.n	8006bc8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8006bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d018      	beq.n	8006c00 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	085a      	lsrs	r2, r3, #1
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	441a      	add	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b0f      	cmp	r3, #15
 8006be6:	d909      	bls.n	8006bfc <UART_SetConfig+0x49c>
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bee:	d205      	bcs.n	8006bfc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	e001      	b.n	8006c00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3720      	adds	r7, #32
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40007c00 	.word	0x40007c00
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	00f42400 	.word	0x00f42400

08006c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01a      	beq.n	8006d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d22:	d10a      	bne.n	8006d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	605a      	str	r2, [r3, #4]
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d78:	f7fb feea 	bl	8002b50 <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d10e      	bne.n	8006daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f82d 	bl	8006dfa <UART_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e023      	b.n	8006df2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d10e      	bne.n	8006dd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f817 	bl	8006dfa <UART_WaitOnFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e00d      	b.n	8006df2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b09c      	sub	sp, #112	; 0x70
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4613      	mov	r3, r2
 8006e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e0a:	e0a5      	b.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	f000 80a1 	beq.w	8006f58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e16:	f7fb fe9b 	bl	8002b50 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d13e      	bne.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e40:	667b      	str	r3, [r7, #100]	; 0x64
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e4c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e6      	bne.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	663b      	str	r3, [r7, #96]	; 0x60
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e5      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e067      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d04f      	beq.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec6:	d147      	bne.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e6      	bne.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	613b      	str	r3, [r7, #16]
   return(result);
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3308      	adds	r3, #8
 8006f22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f24:	623a      	str	r2, [r7, #32]
 8006f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	69f9      	ldr	r1, [r7, #28]
 8006f2a:	6a3a      	ldr	r2, [r7, #32]
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e010      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69da      	ldr	r2, [r3, #28]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4013      	ands	r3, r2
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	bf0c      	ite	eq
 8006f68:	2301      	moveq	r3, #1
 8006f6a:	2300      	movne	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f43f af4a 	beq.w	8006e0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3770      	adds	r7, #112	; 0x70
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b097      	sub	sp, #92	; 0x5c
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb6:	d10e      	bne.n	8006fd6 <UART_Start_Receive_IT+0x52>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <UART_Start_Receive_IT+0x48>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fca:	e02d      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	22ff      	movs	r2, #255	; 0xff
 8006fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fd4:	e028      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10d      	bne.n	8006ffa <UART_Start_Receive_IT+0x76>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <UART_Start_Receive_IT+0x6c>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	22ff      	movs	r2, #255	; 0xff
 8006fea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fee:	e01b      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	227f      	movs	r2, #127	; 0x7f
 8006ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ff8:	e016      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007002:	d10d      	bne.n	8007020 <UART_Start_Receive_IT+0x9c>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <UART_Start_Receive_IT+0x92>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	227f      	movs	r2, #127	; 0x7f
 8007010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007014:	e008      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	223f      	movs	r2, #63	; 0x3f
 800701a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800701e:	e003      	b.n	8007028 <UART_Start_Receive_IT+0xa4>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2222      	movs	r2, #34	; 0x22
 8007034:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	657b      	str	r3, [r7, #84]	; 0x54
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007056:	64ba      	str	r2, [r7, #72]	; 0x48
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800705c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007072:	d107      	bne.n	8007084 <UART_Start_Receive_IT+0x100>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4a24      	ldr	r2, [pc, #144]	; (8007110 <UART_Start_Receive_IT+0x18c>)
 8007080:	665a      	str	r2, [r3, #100]	; 0x64
 8007082:	e002      	b.n	800708a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a23      	ldr	r2, [pc, #140]	; (8007114 <UART_Start_Receive_IT+0x190>)
 8007088:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d019      	beq.n	80070ce <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_Start_Receive_IT+0x116>
 80070cc:	e018      	b.n	8007100 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	613b      	str	r3, [r7, #16]
   return(result);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f043 0320 	orr.w	r3, r3, #32
 80070e2:	653b      	str	r3, [r7, #80]	; 0x50
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69f9      	ldr	r1, [r7, #28]
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	375c      	adds	r7, #92	; 0x5c
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	080073bb 	.word	0x080073bb
 8007114:	0800725f 	.word	0x0800725f

08007118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b095      	sub	sp, #84	; 0x54
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007134:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800713e:	643b      	str	r3, [r7, #64]	; 0x40
 8007140:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007144:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e6      	bne.n	8007120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	61fb      	str	r3, [r7, #28]
   return(result);
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	64bb      	str	r3, [r7, #72]	; 0x48
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e5      	bne.n	8007152 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800718a:	2b01      	cmp	r3, #1
 800718c:	d118      	bne.n	80071c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	60bb      	str	r3, [r7, #8]
   return(result);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f023 0310 	bic.w	r3, r3, #16
 80071a2:	647b      	str	r3, [r7, #68]	; 0x44
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6979      	ldr	r1, [r7, #20]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e6      	bne.n	800718e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2220      	movs	r2, #32
 80071c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071d2:	bf00      	nop
 80071d4:	3754      	adds	r7, #84	; 0x54
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fa8f 	bl	8006720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b088      	sub	sp, #32
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6979      	ldr	r1, [r7, #20]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	613b      	str	r3, [r7, #16]
   return(result);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e6      	bne.n	8007212 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff fa5b 	bl	800670c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007256:	bf00      	nop
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b096      	sub	sp, #88	; 0x58
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800726c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007274:	2b22      	cmp	r3, #34	; 0x22
 8007276:	f040 8094 	bne.w	80073a2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007284:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007288:	b2d9      	uxtb	r1, r3
 800728a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800728e:	b2da      	uxtb	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	400a      	ands	r2, r1
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d177      	bne.n	80073b2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d6:	653b      	str	r3, [r7, #80]	; 0x50
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e0:	647b      	str	r3, [r7, #68]	; 0x44
 80072e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e6      	bne.n	80072c2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	623b      	str	r3, [r7, #32]
   return(result);
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007314:	633a      	str	r2, [r7, #48]	; 0x30
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800731a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e5      	bne.n	80072f4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007338:	2b01      	cmp	r3, #1
 800733a:	d12e      	bne.n	800739a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0310 	bic.w	r3, r3, #16
 8007356:	64bb      	str	r3, [r7, #72]	; 0x48
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007360:	61fb      	str	r3, [r7, #28]
 8007362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	69b9      	ldr	r1, [r7, #24]
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	617b      	str	r3, [r7, #20]
   return(result);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b10      	cmp	r3, #16
 8007380:	d103      	bne.n	800738a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2210      	movs	r2, #16
 8007388:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff f9ce 	bl	8006734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007398:	e00b      	b.n	80073b2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fa fcd4 	bl	8001d48 <HAL_UART_RxCpltCallback>
}
 80073a0:	e007      	b.n	80073b2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0208 	orr.w	r2, r2, #8
 80073b0:	619a      	str	r2, [r3, #24]
}
 80073b2:	bf00      	nop
 80073b4:	3758      	adds	r7, #88	; 0x58
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b096      	sub	sp, #88	; 0x58
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d0:	2b22      	cmp	r3, #34	; 0x22
 80073d2:	f040 8094 	bne.w	80074fe <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073ee:	4013      	ands	r3, r2
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fa:	1c9a      	adds	r2, r3, #2
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d177      	bne.n	800750e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743c:	643b      	str	r3, [r7, #64]	; 0x40
 800743e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e6      	bne.n	800741e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3308      	adds	r3, #8
 8007456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f023 0301 	bic.w	r3, r3, #1
 8007466:	64bb      	str	r3, [r7, #72]	; 0x48
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3308      	adds	r3, #8
 800746e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007470:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e5      	bne.n	8007450 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007494:	2b01      	cmp	r3, #1
 8007496:	d12e      	bne.n	80074f6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0310 	bic.w	r3, r3, #16
 80074b2:	647b      	str	r3, [r7, #68]	; 0x44
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6979      	ldr	r1, [r7, #20]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d103      	bne.n	80074e6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2210      	movs	r2, #16
 80074e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff f920 	bl	8006734 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074f4:	e00b      	b.n	800750e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa fc26 	bl	8001d48 <HAL_UART_RxCpltCallback>
}
 80074fc:	e007      	b.n	800750e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0208 	orr.w	r2, r2, #8
 800750c:	619a      	str	r2, [r3, #24]
}
 800750e:	bf00      	nop
 8007510:	3758      	adds	r7, #88	; 0x58
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007518:	b084      	sub	sp, #16
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	f107 001c 	add.w	r0, r7, #28
 8007526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2b01      	cmp	r3, #1
 800752e:	d120      	bne.n	8007572 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <USB_CoreInit+0xac>)
 8007542:	4013      	ands	r3, r2
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d105      	bne.n	8007566 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa92 	bl	8007a90 <USB_CoreReset>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
 8007570:	e010      	b.n	8007594 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa86 	bl	8007a90 <USB_CoreReset>
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10b      	bne.n	80075b2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f043 0206 	orr.w	r2, r3, #6
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075be:	b004      	add	sp, #16
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	ffbdffbf 	.word	0xffbdffbf

080075c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f023 0201 	bic.w	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d115      	bne.n	8007638 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007618:	2001      	movs	r0, #1
 800761a:	f7fb faa5 	bl	8002b68 <HAL_Delay>
      ms++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa25 	bl	8007a74 <USB_GetMode>
 800762a:	4603      	mov	r3, r0
 800762c:	2b01      	cmp	r3, #1
 800762e:	d01e      	beq.n	800766e <USB_SetCurrentMode+0x84>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b31      	cmp	r3, #49	; 0x31
 8007634:	d9f0      	bls.n	8007618 <USB_SetCurrentMode+0x2e>
 8007636:	e01a      	b.n	800766e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d115      	bne.n	800766a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800764a:	2001      	movs	r0, #1
 800764c:	f7fb fa8c 	bl	8002b68 <HAL_Delay>
      ms++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa0c 	bl	8007a74 <USB_GetMode>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <USB_SetCurrentMode+0x84>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b31      	cmp	r3, #49	; 0x31
 8007666:	d9f0      	bls.n	800764a <USB_SetCurrentMode+0x60>
 8007668:	e001      	b.n	800766e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e005      	b.n	800767a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b32      	cmp	r3, #50	; 0x32
 8007672:	d101      	bne.n	8007678 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e000      	b.n	800767a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007684:	b084      	sub	sp, #16
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	e009      	b.n	80076b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	3340      	adds	r3, #64	; 0x40
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3301      	adds	r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b0e      	cmp	r3, #14
 80076bc:	d9f2      	bls.n	80076a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11c      	bne.n	80076fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d2:	f043 0302 	orr.w	r3, r3, #2
 80076d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	e005      	b.n	800770a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007710:	461a      	mov	r2, r3
 8007712:	2300      	movs	r3, #0
 8007714:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771c:	4619      	mov	r1, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007724:	461a      	mov	r2, r3
 8007726:	680b      	ldr	r3, [r1, #0]
 8007728:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10c      	bne.n	800774a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007736:	2100      	movs	r1, #0
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f961 	bl	8007a00 <USB_SetDevSpeed>
 800773e:	e008      	b.n	8007752 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007740:	2101      	movs	r1, #1
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f95c 	bl	8007a00 <USB_SetDevSpeed>
 8007748:	e003      	b.n	8007752 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800774a:	2103      	movs	r1, #3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f957 	bl	8007a00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007752:	2110      	movs	r1, #16
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f8f3 	bl	8007940 <USB_FlushTxFifo>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f91d 	bl	80079a4 <USB_FlushRxFifo>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777a:	461a      	mov	r2, r3
 800777c:	2300      	movs	r3, #0
 800777e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	461a      	mov	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	461a      	mov	r2, r3
 8007794:	2300      	movs	r3, #0
 8007796:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007798:	2300      	movs	r3, #0
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	e043      	b.n	8007826 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077b4:	d118      	bne.n	80077e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	461a      	mov	r2, r3
 80077ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	e013      	b.n	80077fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077de:	461a      	mov	r2, r3
 80077e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e008      	b.n	80077fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	461a      	mov	r2, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007806:	461a      	mov	r2, r3
 8007808:	2300      	movs	r3, #0
 800780a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007818:	461a      	mov	r2, r3
 800781a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800781e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	3301      	adds	r3, #1
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	429a      	cmp	r2, r3
 800782c:	d3b7      	bcc.n	800779e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	e043      	b.n	80078bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784a:	d118      	bne.n	800787e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	461a      	mov	r2, r3
 8007860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	e013      	b.n	8007890 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007874:	461a      	mov	r2, r3
 8007876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	e008      	b.n	8007890 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	461a      	mov	r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789c:	461a      	mov	r2, r3
 800789e:	2300      	movs	r3, #0
 80078a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ae:	461a      	mov	r2, r3
 80078b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3301      	adds	r3, #1
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d3b7      	bcc.n	8007834 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f043 0210 	orr.w	r2, r3, #16
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <USB_DevInit+0x2b4>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f043 0208 	orr.w	r2, r3, #8
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d105      	bne.n	8007928 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <USB_DevInit+0x2b8>)
 8007922:	4313      	orrs	r3, r2
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007934:	b004      	add	sp, #16
 8007936:	4770      	bx	lr
 8007938:	803c3800 	.word	0x803c3800
 800793c:	40000004 	.word	0x40000004

08007940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3301      	adds	r3, #1
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	4a12      	ldr	r2, [pc, #72]	; (80079a0 <USB_FlushTxFifo+0x60>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d901      	bls.n	800795e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e01a      	b.n	8007994 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	daf3      	bge.n	800794e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	019b      	lsls	r3, r3, #6
 800796e:	f043 0220 	orr.w	r2, r3, #32
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3301      	adds	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	4a08      	ldr	r2, [pc, #32]	; (80079a0 <USB_FlushTxFifo+0x60>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d901      	bls.n	8007986 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e006      	b.n	8007994 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b20      	cmp	r3, #32
 8007990:	d0f1      	beq.n	8007976 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	00030d40 	.word	0x00030d40

080079a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	4a11      	ldr	r2, [pc, #68]	; (80079fc <USB_FlushRxFifo+0x58>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d901      	bls.n	80079c0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e017      	b.n	80079f0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	daf3      	bge.n	80079b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2210      	movs	r2, #16
 80079d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	4a08      	ldr	r2, [pc, #32]	; (80079fc <USB_FlushRxFifo+0x58>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e006      	b.n	80079f0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	d0f1      	beq.n	80079d2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	00030d40 	.word	0x00030d40

08007a00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a20:	4313      	orrs	r3, r2
 8007a22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a4c:	f023 0303 	bic.w	r3, r3, #3
 8007a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a60:	f043 0302 	orr.w	r3, r3, #2
 8007a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0301 	and.w	r3, r3, #1
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <USB_CoreReset+0x60>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d901      	bls.n	8007aac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e01a      	b.n	8007ae2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	daf3      	bge.n	8007a9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f043 0201 	orr.w	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <USB_CoreReset+0x60>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d901      	bls.n	8007ad4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e006      	b.n	8007ae2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d0f1      	beq.n	8007ac4 <USB_CoreReset+0x34>

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	00030d40 	.word	0x00030d40

08007af4 <atoi>:
 8007af4:	220a      	movs	r2, #10
 8007af6:	2100      	movs	r1, #0
 8007af8:	f000 bd2a 	b.w	8008550 <strtol>

08007afc <__errno>:
 8007afc:	4b01      	ldr	r3, [pc, #4]	; (8007b04 <__errno+0x8>)
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000028 	.word	0x20000028

08007b08 <__libc_init_array>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4d0d      	ldr	r5, [pc, #52]	; (8007b40 <__libc_init_array+0x38>)
 8007b0c:	4c0d      	ldr	r4, [pc, #52]	; (8007b44 <__libc_init_array+0x3c>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	2600      	movs	r6, #0
 8007b14:	42a6      	cmp	r6, r4
 8007b16:	d109      	bne.n	8007b2c <__libc_init_array+0x24>
 8007b18:	4d0b      	ldr	r5, [pc, #44]	; (8007b48 <__libc_init_array+0x40>)
 8007b1a:	4c0c      	ldr	r4, [pc, #48]	; (8007b4c <__libc_init_array+0x44>)
 8007b1c:	f002 fec4 	bl	800a8a8 <_init>
 8007b20:	1b64      	subs	r4, r4, r5
 8007b22:	10a4      	asrs	r4, r4, #2
 8007b24:	2600      	movs	r6, #0
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	d105      	bne.n	8007b36 <__libc_init_array+0x2e>
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b30:	4798      	blx	r3
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7ee      	b.n	8007b14 <__libc_init_array+0xc>
 8007b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3a:	4798      	blx	r3
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	e7f2      	b.n	8007b26 <__libc_init_array+0x1e>
 8007b40:	0800ad4c 	.word	0x0800ad4c
 8007b44:	0800ad4c 	.word	0x0800ad4c
 8007b48:	0800ad4c 	.word	0x0800ad4c
 8007b4c:	0800ad50 	.word	0x0800ad50

08007b50 <memset>:
 8007b50:	4402      	add	r2, r0
 8007b52:	4603      	mov	r3, r0
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d100      	bne.n	8007b5a <memset+0xa>
 8007b58:	4770      	bx	lr
 8007b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5e:	e7f9      	b.n	8007b54 <memset+0x4>

08007b60 <__cvt>:
 8007b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b62:	ed2d 8b02 	vpush	{d8}
 8007b66:	eeb0 8b40 	vmov.f64	d8, d0
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	4617      	mov	r7, r2
 8007b6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007b70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b72:	ee18 2a90 	vmov	r2, s17
 8007b76:	f025 0520 	bic.w	r5, r5, #32
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	bfb6      	itet	lt
 8007b7e:	222d      	movlt	r2, #45	; 0x2d
 8007b80:	2200      	movge	r2, #0
 8007b82:	eeb1 8b40 	vneglt.f64	d8, d0
 8007b86:	2d46      	cmp	r5, #70	; 0x46
 8007b88:	460c      	mov	r4, r1
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	d004      	beq.n	8007b98 <__cvt+0x38>
 8007b8e:	2d45      	cmp	r5, #69	; 0x45
 8007b90:	d100      	bne.n	8007b94 <__cvt+0x34>
 8007b92:	3401      	adds	r4, #1
 8007b94:	2102      	movs	r1, #2
 8007b96:	e000      	b.n	8007b9a <__cvt+0x3a>
 8007b98:	2103      	movs	r1, #3
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	ab02      	add	r3, sp, #8
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4633      	mov	r3, r6
 8007ba6:	eeb0 0b48 	vmov.f64	d0, d8
 8007baa:	f000 fd69 	bl	8008680 <_dtoa_r>
 8007bae:	2d47      	cmp	r5, #71	; 0x47
 8007bb0:	d109      	bne.n	8007bc6 <__cvt+0x66>
 8007bb2:	07fb      	lsls	r3, r7, #31
 8007bb4:	d407      	bmi.n	8007bc6 <__cvt+0x66>
 8007bb6:	9b03      	ldr	r3, [sp, #12]
 8007bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bba:	1a1b      	subs	r3, r3, r0
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	b005      	add	sp, #20
 8007bc0:	ecbd 8b02 	vpop	{d8}
 8007bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc6:	2d46      	cmp	r5, #70	; 0x46
 8007bc8:	eb00 0204 	add.w	r2, r0, r4
 8007bcc:	d10c      	bne.n	8007be8 <__cvt+0x88>
 8007bce:	7803      	ldrb	r3, [r0, #0]
 8007bd0:	2b30      	cmp	r3, #48	; 0x30
 8007bd2:	d107      	bne.n	8007be4 <__cvt+0x84>
 8007bd4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bdc:	bf1c      	itt	ne
 8007bde:	f1c4 0401 	rsbne	r4, r4, #1
 8007be2:	6034      	strne	r4, [r6, #0]
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	441a      	add	r2, r3
 8007be8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf0:	bf08      	it	eq
 8007bf2:	9203      	streq	r2, [sp, #12]
 8007bf4:	2130      	movs	r1, #48	; 0x30
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d2dc      	bcs.n	8007bb6 <__cvt+0x56>
 8007bfc:	1c5c      	adds	r4, r3, #1
 8007bfe:	9403      	str	r4, [sp, #12]
 8007c00:	7019      	strb	r1, [r3, #0]
 8007c02:	e7f8      	b.n	8007bf6 <__cvt+0x96>

08007c04 <__exponent>:
 8007c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c06:	4603      	mov	r3, r0
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	bfb8      	it	lt
 8007c0c:	4249      	neglt	r1, r1
 8007c0e:	f803 2b02 	strb.w	r2, [r3], #2
 8007c12:	bfb4      	ite	lt
 8007c14:	222d      	movlt	r2, #45	; 0x2d
 8007c16:	222b      	movge	r2, #43	; 0x2b
 8007c18:	2909      	cmp	r1, #9
 8007c1a:	7042      	strb	r2, [r0, #1]
 8007c1c:	dd2a      	ble.n	8007c74 <__exponent+0x70>
 8007c1e:	f10d 0407 	add.w	r4, sp, #7
 8007c22:	46a4      	mov	ip, r4
 8007c24:	270a      	movs	r7, #10
 8007c26:	46a6      	mov	lr, r4
 8007c28:	460a      	mov	r2, r1
 8007c2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c2e:	fb07 1516 	mls	r5, r7, r6, r1
 8007c32:	3530      	adds	r5, #48	; 0x30
 8007c34:	2a63      	cmp	r2, #99	; 0x63
 8007c36:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c3e:	4631      	mov	r1, r6
 8007c40:	dcf1      	bgt.n	8007c26 <__exponent+0x22>
 8007c42:	3130      	adds	r1, #48	; 0x30
 8007c44:	f1ae 0502 	sub.w	r5, lr, #2
 8007c48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c4c:	1c44      	adds	r4, r0, #1
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4561      	cmp	r1, ip
 8007c52:	d30a      	bcc.n	8007c6a <__exponent+0x66>
 8007c54:	f10d 0209 	add.w	r2, sp, #9
 8007c58:	eba2 020e 	sub.w	r2, r2, lr
 8007c5c:	4565      	cmp	r5, ip
 8007c5e:	bf88      	it	hi
 8007c60:	2200      	movhi	r2, #0
 8007c62:	4413      	add	r3, r2
 8007c64:	1a18      	subs	r0, r3, r0
 8007c66:	b003      	add	sp, #12
 8007c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c72:	e7ed      	b.n	8007c50 <__exponent+0x4c>
 8007c74:	2330      	movs	r3, #48	; 0x30
 8007c76:	3130      	adds	r1, #48	; 0x30
 8007c78:	7083      	strb	r3, [r0, #2]
 8007c7a:	70c1      	strb	r1, [r0, #3]
 8007c7c:	1d03      	adds	r3, r0, #4
 8007c7e:	e7f1      	b.n	8007c64 <__exponent+0x60>

08007c80 <_printf_float>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	b08b      	sub	sp, #44	; 0x2c
 8007c86:	460c      	mov	r4, r1
 8007c88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	461f      	mov	r7, r3
 8007c90:	4605      	mov	r5, r0
 8007c92:	f001 fa77 	bl	8009184 <_localeconv_r>
 8007c96:	f8d0 b000 	ldr.w	fp, [r0]
 8007c9a:	4658      	mov	r0, fp
 8007c9c:	f7f8 fad0 	bl	8000240 <strlen>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007cac:	6822      	ldr	r2, [r4, #0]
 8007cae:	3307      	adds	r3, #7
 8007cb0:	f023 0307 	bic.w	r3, r3, #7
 8007cb4:	f103 0108 	add.w	r1, r3, #8
 8007cb8:	f8c8 1000 	str.w	r1, [r8]
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cc2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007cc6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007f28 <_printf_float+0x2a8>
 8007cca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007cce:	eeb0 6bc0 	vabs.f64	d6, d0
 8007cd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cda:	dd24      	ble.n	8007d26 <_printf_float+0xa6>
 8007cdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce4:	d502      	bpl.n	8007cec <_printf_float+0x6c>
 8007ce6:	232d      	movs	r3, #45	; 0x2d
 8007ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cec:	4b90      	ldr	r3, [pc, #576]	; (8007f30 <_printf_float+0x2b0>)
 8007cee:	4891      	ldr	r0, [pc, #580]	; (8007f34 <_printf_float+0x2b4>)
 8007cf0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007cf4:	bf94      	ite	ls
 8007cf6:	4698      	movls	r8, r3
 8007cf8:	4680      	movhi	r8, r0
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	6123      	str	r3, [r4, #16]
 8007cfe:	f022 0204 	bic.w	r2, r2, #4
 8007d02:	2300      	movs	r3, #0
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	9700      	str	r7, [sp, #0]
 8007d0a:	4633      	mov	r3, r6
 8007d0c:	aa09      	add	r2, sp, #36	; 0x24
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f9d3 	bl	80080bc <_printf_common>
 8007d16:	3001      	adds	r0, #1
 8007d18:	f040 808a 	bne.w	8007e30 <_printf_float+0x1b0>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	b00b      	add	sp, #44	; 0x2c
 8007d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d26:	eeb4 0b40 	vcmp.f64	d0, d0
 8007d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2e:	d709      	bvc.n	8007d44 <_printf_float+0xc4>
 8007d30:	ee10 3a90 	vmov	r3, s1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfbc      	itt	lt
 8007d38:	232d      	movlt	r3, #45	; 0x2d
 8007d3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d3e:	487e      	ldr	r0, [pc, #504]	; (8007f38 <_printf_float+0x2b8>)
 8007d40:	4b7e      	ldr	r3, [pc, #504]	; (8007f3c <_printf_float+0x2bc>)
 8007d42:	e7d5      	b.n	8007cf0 <_printf_float+0x70>
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d4a:	9104      	str	r1, [sp, #16]
 8007d4c:	1c59      	adds	r1, r3, #1
 8007d4e:	d13c      	bne.n	8007dca <_printf_float+0x14a>
 8007d50:	2306      	movs	r3, #6
 8007d52:	6063      	str	r3, [r4, #4]
 8007d54:	2300      	movs	r3, #0
 8007d56:	9303      	str	r3, [sp, #12]
 8007d58:	ab08      	add	r3, sp, #32
 8007d5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007d5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d62:	ab07      	add	r3, sp, #28
 8007d64:	6861      	ldr	r1, [r4, #4]
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	6022      	str	r2, [r4, #0]
 8007d6a:	f10d 031b 	add.w	r3, sp, #27
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f7ff fef6 	bl	8007b60 <__cvt>
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	9907      	ldr	r1, [sp, #28]
 8007d78:	2b47      	cmp	r3, #71	; 0x47
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	d108      	bne.n	8007d90 <_printf_float+0x110>
 8007d7e:	1cc8      	adds	r0, r1, #3
 8007d80:	db02      	blt.n	8007d88 <_printf_float+0x108>
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	4299      	cmp	r1, r3
 8007d86:	dd41      	ble.n	8007e0c <_printf_float+0x18c>
 8007d88:	f1a9 0902 	sub.w	r9, r9, #2
 8007d8c:	fa5f f989 	uxtb.w	r9, r9
 8007d90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d94:	d820      	bhi.n	8007dd8 <_printf_float+0x158>
 8007d96:	3901      	subs	r1, #1
 8007d98:	464a      	mov	r2, r9
 8007d9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d9e:	9107      	str	r1, [sp, #28]
 8007da0:	f7ff ff30 	bl	8007c04 <__exponent>
 8007da4:	9a08      	ldr	r2, [sp, #32]
 8007da6:	9004      	str	r0, [sp, #16]
 8007da8:	1813      	adds	r3, r2, r0
 8007daa:	2a01      	cmp	r2, #1
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	dc02      	bgt.n	8007db6 <_printf_float+0x136>
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	07d2      	lsls	r2, r2, #31
 8007db4:	d501      	bpl.n	8007dba <_printf_float+0x13a>
 8007db6:	3301      	adds	r3, #1
 8007db8:	6123      	str	r3, [r4, #16]
 8007dba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0a2      	beq.n	8007d08 <_printf_float+0x88>
 8007dc2:	232d      	movs	r3, #45	; 0x2d
 8007dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc8:	e79e      	b.n	8007d08 <_printf_float+0x88>
 8007dca:	9904      	ldr	r1, [sp, #16]
 8007dcc:	2947      	cmp	r1, #71	; 0x47
 8007dce:	d1c1      	bne.n	8007d54 <_printf_float+0xd4>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1bf      	bne.n	8007d54 <_printf_float+0xd4>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e7bc      	b.n	8007d52 <_printf_float+0xd2>
 8007dd8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007ddc:	d118      	bne.n	8007e10 <_printf_float+0x190>
 8007dde:	2900      	cmp	r1, #0
 8007de0:	6863      	ldr	r3, [r4, #4]
 8007de2:	dd0b      	ble.n	8007dfc <_printf_float+0x17c>
 8007de4:	6121      	str	r1, [r4, #16]
 8007de6:	b913      	cbnz	r3, 8007dee <_printf_float+0x16e>
 8007de8:	6822      	ldr	r2, [r4, #0]
 8007dea:	07d0      	lsls	r0, r2, #31
 8007dec:	d502      	bpl.n	8007df4 <_printf_float+0x174>
 8007dee:	3301      	adds	r3, #1
 8007df0:	440b      	add	r3, r1
 8007df2:	6123      	str	r3, [r4, #16]
 8007df4:	2300      	movs	r3, #0
 8007df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	e7de      	b.n	8007dba <_printf_float+0x13a>
 8007dfc:	b913      	cbnz	r3, 8007e04 <_printf_float+0x184>
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	07d2      	lsls	r2, r2, #31
 8007e02:	d501      	bpl.n	8007e08 <_printf_float+0x188>
 8007e04:	3302      	adds	r3, #2
 8007e06:	e7f4      	b.n	8007df2 <_printf_float+0x172>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e7f2      	b.n	8007df2 <_printf_float+0x172>
 8007e0c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	4299      	cmp	r1, r3
 8007e14:	db05      	blt.n	8007e22 <_printf_float+0x1a2>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	6121      	str	r1, [r4, #16]
 8007e1a:	07d8      	lsls	r0, r3, #31
 8007e1c:	d5ea      	bpl.n	8007df4 <_printf_float+0x174>
 8007e1e:	1c4b      	adds	r3, r1, #1
 8007e20:	e7e7      	b.n	8007df2 <_printf_float+0x172>
 8007e22:	2900      	cmp	r1, #0
 8007e24:	bfd4      	ite	le
 8007e26:	f1c1 0202 	rsble	r2, r1, #2
 8007e2a:	2201      	movgt	r2, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	e7e0      	b.n	8007df2 <_printf_float+0x172>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	055a      	lsls	r2, r3, #21
 8007e34:	d407      	bmi.n	8007e46 <_printf_float+0x1c6>
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	4642      	mov	r2, r8
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b8      	blx	r7
 8007e40:	3001      	adds	r0, #1
 8007e42:	d12a      	bne.n	8007e9a <_printf_float+0x21a>
 8007e44:	e76a      	b.n	8007d1c <_printf_float+0x9c>
 8007e46:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e4a:	f240 80e2 	bls.w	8008012 <_printf_float+0x392>
 8007e4e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5a:	d133      	bne.n	8007ec4 <_printf_float+0x244>
 8007e5c:	4a38      	ldr	r2, [pc, #224]	; (8007f40 <_printf_float+0x2c0>)
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b8      	blx	r7
 8007e66:	3001      	adds	r0, #1
 8007e68:	f43f af58 	beq.w	8007d1c <_printf_float+0x9c>
 8007e6c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	db02      	blt.n	8007e7a <_printf_float+0x1fa>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	07d8      	lsls	r0, r3, #31
 8007e78:	d50f      	bpl.n	8007e9a <_printf_float+0x21a>
 8007e7a:	4653      	mov	r3, sl
 8007e7c:	465a      	mov	r2, fp
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f af49 	beq.w	8007d1c <_printf_float+0x9c>
 8007e8a:	f04f 0800 	mov.w	r8, #0
 8007e8e:	f104 091a 	add.w	r9, r4, #26
 8007e92:	9b08      	ldr	r3, [sp, #32]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	4543      	cmp	r3, r8
 8007e98:	dc09      	bgt.n	8007eae <_printf_float+0x22e>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	079b      	lsls	r3, r3, #30
 8007e9e:	f100 8108 	bmi.w	80080b2 <_printf_float+0x432>
 8007ea2:	68e0      	ldr	r0, [r4, #12]
 8007ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea6:	4298      	cmp	r0, r3
 8007ea8:	bfb8      	it	lt
 8007eaa:	4618      	movlt	r0, r3
 8007eac:	e738      	b.n	8007d20 <_printf_float+0xa0>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	464a      	mov	r2, r9
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f43f af2f 	beq.w	8007d1c <_printf_float+0x9c>
 8007ebe:	f108 0801 	add.w	r8, r8, #1
 8007ec2:	e7e6      	b.n	8007e92 <_printf_float+0x212>
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dc3c      	bgt.n	8007f44 <_printf_float+0x2c4>
 8007eca:	4a1d      	ldr	r2, [pc, #116]	; (8007f40 <_printf_float+0x2c0>)
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	47b8      	blx	r7
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	f43f af21 	beq.w	8007d1c <_printf_float+0x9c>
 8007eda:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	d102      	bne.n	8007ee8 <_printf_float+0x268>
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	07d9      	lsls	r1, r3, #31
 8007ee6:	d5d8      	bpl.n	8007e9a <_printf_float+0x21a>
 8007ee8:	4653      	mov	r3, sl
 8007eea:	465a      	mov	r2, fp
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f af12 	beq.w	8007d1c <_printf_float+0x9c>
 8007ef8:	f04f 0900 	mov.w	r9, #0
 8007efc:	f104 0a1a 	add.w	sl, r4, #26
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	425b      	negs	r3, r3
 8007f04:	454b      	cmp	r3, r9
 8007f06:	dc01      	bgt.n	8007f0c <_printf_float+0x28c>
 8007f08:	9b08      	ldr	r3, [sp, #32]
 8007f0a:	e795      	b.n	8007e38 <_printf_float+0x1b8>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4652      	mov	r2, sl
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af00 	beq.w	8007d1c <_printf_float+0x9c>
 8007f1c:	f109 0901 	add.w	r9, r9, #1
 8007f20:	e7ee      	b.n	8007f00 <_printf_float+0x280>
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	ffffffff 	.word	0xffffffff
 8007f2c:	7fefffff 	.word	0x7fefffff
 8007f30:	0800a960 	.word	0x0800a960
 8007f34:	0800a964 	.word	0x0800a964
 8007f38:	0800a96c 	.word	0x0800a96c
 8007f3c:	0800a968 	.word	0x0800a968
 8007f40:	0800a970 	.word	0x0800a970
 8007f44:	9a08      	ldr	r2, [sp, #32]
 8007f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	bfa8      	it	ge
 8007f4c:	461a      	movge	r2, r3
 8007f4e:	2a00      	cmp	r2, #0
 8007f50:	4691      	mov	r9, r2
 8007f52:	dc38      	bgt.n	8007fc6 <_printf_float+0x346>
 8007f54:	2300      	movs	r3, #0
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f5c:	f104 021a 	add.w	r2, r4, #26
 8007f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f62:	9905      	ldr	r1, [sp, #20]
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	eba3 0309 	sub.w	r3, r3, r9
 8007f6a:	428b      	cmp	r3, r1
 8007f6c:	dc33      	bgt.n	8007fd6 <_printf_float+0x356>
 8007f6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	db3c      	blt.n	8007ff0 <_printf_float+0x370>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	07da      	lsls	r2, r3, #31
 8007f7a:	d439      	bmi.n	8007ff0 <_printf_float+0x370>
 8007f7c:	9a08      	ldr	r2, [sp, #32]
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	9907      	ldr	r1, [sp, #28]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	eba2 0901 	sub.w	r9, r2, r1
 8007f88:	4599      	cmp	r9, r3
 8007f8a:	bfa8      	it	ge
 8007f8c:	4699      	movge	r9, r3
 8007f8e:	f1b9 0f00 	cmp.w	r9, #0
 8007f92:	dc35      	bgt.n	8008000 <_printf_float+0x380>
 8007f94:	f04f 0800 	mov.w	r8, #0
 8007f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f9c:	f104 0a1a 	add.w	sl, r4, #26
 8007fa0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	eba3 0309 	sub.w	r3, r3, r9
 8007faa:	4543      	cmp	r3, r8
 8007fac:	f77f af75 	ble.w	8007e9a <_printf_float+0x21a>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	47b8      	blx	r7
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f43f aeae 	beq.w	8007d1c <_printf_float+0x9c>
 8007fc0:	f108 0801 	add.w	r8, r8, #1
 8007fc4:	e7ec      	b.n	8007fa0 <_printf_float+0x320>
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4642      	mov	r2, r8
 8007fcc:	4628      	mov	r0, r5
 8007fce:	47b8      	blx	r7
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d1bf      	bne.n	8007f54 <_printf_float+0x2d4>
 8007fd4:	e6a2      	b.n	8007d1c <_printf_float+0x9c>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	9204      	str	r2, [sp, #16]
 8007fde:	47b8      	blx	r7
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f43f ae9b 	beq.w	8007d1c <_printf_float+0x9c>
 8007fe6:	9b05      	ldr	r3, [sp, #20]
 8007fe8:	9a04      	ldr	r2, [sp, #16]
 8007fea:	3301      	adds	r3, #1
 8007fec:	9305      	str	r3, [sp, #20]
 8007fee:	e7b7      	b.n	8007f60 <_printf_float+0x2e0>
 8007ff0:	4653      	mov	r3, sl
 8007ff2:	465a      	mov	r2, fp
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	d1be      	bne.n	8007f7c <_printf_float+0x2fc>
 8007ffe:	e68d      	b.n	8007d1c <_printf_float+0x9c>
 8008000:	9a04      	ldr	r2, [sp, #16]
 8008002:	464b      	mov	r3, r9
 8008004:	4442      	add	r2, r8
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	d1c1      	bne.n	8007f94 <_printf_float+0x314>
 8008010:	e684      	b.n	8007d1c <_printf_float+0x9c>
 8008012:	9a08      	ldr	r2, [sp, #32]
 8008014:	2a01      	cmp	r2, #1
 8008016:	dc01      	bgt.n	800801c <_printf_float+0x39c>
 8008018:	07db      	lsls	r3, r3, #31
 800801a:	d537      	bpl.n	800808c <_printf_float+0x40c>
 800801c:	2301      	movs	r3, #1
 800801e:	4642      	mov	r2, r8
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	47b8      	blx	r7
 8008026:	3001      	adds	r0, #1
 8008028:	f43f ae78 	beq.w	8007d1c <_printf_float+0x9c>
 800802c:	4653      	mov	r3, sl
 800802e:	465a      	mov	r2, fp
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	47b8      	blx	r7
 8008036:	3001      	adds	r0, #1
 8008038:	f43f ae70 	beq.w	8007d1c <_printf_float+0x9c>
 800803c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008040:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008048:	d01b      	beq.n	8008082 <_printf_float+0x402>
 800804a:	9b08      	ldr	r3, [sp, #32]
 800804c:	f108 0201 	add.w	r2, r8, #1
 8008050:	3b01      	subs	r3, #1
 8008052:	4631      	mov	r1, r6
 8008054:	4628      	mov	r0, r5
 8008056:	47b8      	blx	r7
 8008058:	3001      	adds	r0, #1
 800805a:	d10e      	bne.n	800807a <_printf_float+0x3fa>
 800805c:	e65e      	b.n	8007d1c <_printf_float+0x9c>
 800805e:	2301      	movs	r3, #1
 8008060:	464a      	mov	r2, r9
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	47b8      	blx	r7
 8008068:	3001      	adds	r0, #1
 800806a:	f43f ae57 	beq.w	8007d1c <_printf_float+0x9c>
 800806e:	f108 0801 	add.w	r8, r8, #1
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	3b01      	subs	r3, #1
 8008076:	4543      	cmp	r3, r8
 8008078:	dcf1      	bgt.n	800805e <_printf_float+0x3de>
 800807a:	9b04      	ldr	r3, [sp, #16]
 800807c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008080:	e6db      	b.n	8007e3a <_printf_float+0x1ba>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	f104 091a 	add.w	r9, r4, #26
 800808a:	e7f2      	b.n	8008072 <_printf_float+0x3f2>
 800808c:	2301      	movs	r3, #1
 800808e:	4642      	mov	r2, r8
 8008090:	e7df      	b.n	8008052 <_printf_float+0x3d2>
 8008092:	2301      	movs	r3, #1
 8008094:	464a      	mov	r2, r9
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f ae3d 	beq.w	8007d1c <_printf_float+0x9c>
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	68e3      	ldr	r3, [r4, #12]
 80080a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080aa:	1a5b      	subs	r3, r3, r1
 80080ac:	4543      	cmp	r3, r8
 80080ae:	dcf0      	bgt.n	8008092 <_printf_float+0x412>
 80080b0:	e6f7      	b.n	8007ea2 <_printf_float+0x222>
 80080b2:	f04f 0800 	mov.w	r8, #0
 80080b6:	f104 0919 	add.w	r9, r4, #25
 80080ba:	e7f4      	b.n	80080a6 <_printf_float+0x426>

080080bc <_printf_common>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	4616      	mov	r6, r2
 80080c2:	4699      	mov	r9, r3
 80080c4:	688a      	ldr	r2, [r1, #8]
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	bfb8      	it	lt
 80080d0:	4613      	movlt	r3, r2
 80080d2:	6033      	str	r3, [r6, #0]
 80080d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080d8:	4607      	mov	r7, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	b10a      	cbz	r2, 80080e2 <_printf_common+0x26>
 80080de:	3301      	adds	r3, #1
 80080e0:	6033      	str	r3, [r6, #0]
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	0699      	lsls	r1, r3, #26
 80080e6:	bf42      	ittt	mi
 80080e8:	6833      	ldrmi	r3, [r6, #0]
 80080ea:	3302      	addmi	r3, #2
 80080ec:	6033      	strmi	r3, [r6, #0]
 80080ee:	6825      	ldr	r5, [r4, #0]
 80080f0:	f015 0506 	ands.w	r5, r5, #6
 80080f4:	d106      	bne.n	8008104 <_printf_common+0x48>
 80080f6:	f104 0a19 	add.w	sl, r4, #25
 80080fa:	68e3      	ldr	r3, [r4, #12]
 80080fc:	6832      	ldr	r2, [r6, #0]
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	42ab      	cmp	r3, r5
 8008102:	dc26      	bgt.n	8008152 <_printf_common+0x96>
 8008104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008108:	1e13      	subs	r3, r2, #0
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	bf18      	it	ne
 800810e:	2301      	movne	r3, #1
 8008110:	0692      	lsls	r2, r2, #26
 8008112:	d42b      	bmi.n	800816c <_printf_common+0xb0>
 8008114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008118:	4649      	mov	r1, r9
 800811a:	4638      	mov	r0, r7
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d01e      	beq.n	8008160 <_printf_common+0xa4>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	68e5      	ldr	r5, [r4, #12]
 8008126:	6832      	ldr	r2, [r6, #0]
 8008128:	f003 0306 	and.w	r3, r3, #6
 800812c:	2b04      	cmp	r3, #4
 800812e:	bf08      	it	eq
 8008130:	1aad      	subeq	r5, r5, r2
 8008132:	68a3      	ldr	r3, [r4, #8]
 8008134:	6922      	ldr	r2, [r4, #16]
 8008136:	bf0c      	ite	eq
 8008138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800813c:	2500      	movne	r5, #0
 800813e:	4293      	cmp	r3, r2
 8008140:	bfc4      	itt	gt
 8008142:	1a9b      	subgt	r3, r3, r2
 8008144:	18ed      	addgt	r5, r5, r3
 8008146:	2600      	movs	r6, #0
 8008148:	341a      	adds	r4, #26
 800814a:	42b5      	cmp	r5, r6
 800814c:	d11a      	bne.n	8008184 <_printf_common+0xc8>
 800814e:	2000      	movs	r0, #0
 8008150:	e008      	b.n	8008164 <_printf_common+0xa8>
 8008152:	2301      	movs	r3, #1
 8008154:	4652      	mov	r2, sl
 8008156:	4649      	mov	r1, r9
 8008158:	4638      	mov	r0, r7
 800815a:	47c0      	blx	r8
 800815c:	3001      	adds	r0, #1
 800815e:	d103      	bne.n	8008168 <_printf_common+0xac>
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008168:	3501      	adds	r5, #1
 800816a:	e7c6      	b.n	80080fa <_printf_common+0x3e>
 800816c:	18e1      	adds	r1, r4, r3
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	2030      	movs	r0, #48	; 0x30
 8008172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008176:	4422      	add	r2, r4
 8008178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800817c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008180:	3302      	adds	r3, #2
 8008182:	e7c7      	b.n	8008114 <_printf_common+0x58>
 8008184:	2301      	movs	r3, #1
 8008186:	4622      	mov	r2, r4
 8008188:	4649      	mov	r1, r9
 800818a:	4638      	mov	r0, r7
 800818c:	47c0      	blx	r8
 800818e:	3001      	adds	r0, #1
 8008190:	d0e6      	beq.n	8008160 <_printf_common+0xa4>
 8008192:	3601      	adds	r6, #1
 8008194:	e7d9      	b.n	800814a <_printf_common+0x8e>
	...

08008198 <_printf_i>:
 8008198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	460c      	mov	r4, r1
 800819e:	4691      	mov	r9, r2
 80081a0:	7e27      	ldrb	r7, [r4, #24]
 80081a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081a4:	2f78      	cmp	r7, #120	; 0x78
 80081a6:	4680      	mov	r8, r0
 80081a8:	469a      	mov	sl, r3
 80081aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ae:	d807      	bhi.n	80081c0 <_printf_i+0x28>
 80081b0:	2f62      	cmp	r7, #98	; 0x62
 80081b2:	d80a      	bhi.n	80081ca <_printf_i+0x32>
 80081b4:	2f00      	cmp	r7, #0
 80081b6:	f000 80d8 	beq.w	800836a <_printf_i+0x1d2>
 80081ba:	2f58      	cmp	r7, #88	; 0x58
 80081bc:	f000 80a3 	beq.w	8008306 <_printf_i+0x16e>
 80081c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081c8:	e03a      	b.n	8008240 <_printf_i+0xa8>
 80081ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081ce:	2b15      	cmp	r3, #21
 80081d0:	d8f6      	bhi.n	80081c0 <_printf_i+0x28>
 80081d2:	a001      	add	r0, pc, #4	; (adr r0, 80081d8 <_printf_i+0x40>)
 80081d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081d8:	08008231 	.word	0x08008231
 80081dc:	08008245 	.word	0x08008245
 80081e0:	080081c1 	.word	0x080081c1
 80081e4:	080081c1 	.word	0x080081c1
 80081e8:	080081c1 	.word	0x080081c1
 80081ec:	080081c1 	.word	0x080081c1
 80081f0:	08008245 	.word	0x08008245
 80081f4:	080081c1 	.word	0x080081c1
 80081f8:	080081c1 	.word	0x080081c1
 80081fc:	080081c1 	.word	0x080081c1
 8008200:	080081c1 	.word	0x080081c1
 8008204:	08008351 	.word	0x08008351
 8008208:	08008275 	.word	0x08008275
 800820c:	08008333 	.word	0x08008333
 8008210:	080081c1 	.word	0x080081c1
 8008214:	080081c1 	.word	0x080081c1
 8008218:	08008373 	.word	0x08008373
 800821c:	080081c1 	.word	0x080081c1
 8008220:	08008275 	.word	0x08008275
 8008224:	080081c1 	.word	0x080081c1
 8008228:	080081c1 	.word	0x080081c1
 800822c:	0800833b 	.word	0x0800833b
 8008230:	680b      	ldr	r3, [r1, #0]
 8008232:	1d1a      	adds	r2, r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	600a      	str	r2, [r1, #0]
 8008238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800823c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008240:	2301      	movs	r3, #1
 8008242:	e0a3      	b.n	800838c <_printf_i+0x1f4>
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	6808      	ldr	r0, [r1, #0]
 8008248:	062e      	lsls	r6, r5, #24
 800824a:	f100 0304 	add.w	r3, r0, #4
 800824e:	d50a      	bpl.n	8008266 <_printf_i+0xce>
 8008250:	6805      	ldr	r5, [r0, #0]
 8008252:	600b      	str	r3, [r1, #0]
 8008254:	2d00      	cmp	r5, #0
 8008256:	da03      	bge.n	8008260 <_printf_i+0xc8>
 8008258:	232d      	movs	r3, #45	; 0x2d
 800825a:	426d      	negs	r5, r5
 800825c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008260:	485e      	ldr	r0, [pc, #376]	; (80083dc <_printf_i+0x244>)
 8008262:	230a      	movs	r3, #10
 8008264:	e019      	b.n	800829a <_printf_i+0x102>
 8008266:	f015 0f40 	tst.w	r5, #64	; 0x40
 800826a:	6805      	ldr	r5, [r0, #0]
 800826c:	600b      	str	r3, [r1, #0]
 800826e:	bf18      	it	ne
 8008270:	b22d      	sxthne	r5, r5
 8008272:	e7ef      	b.n	8008254 <_printf_i+0xbc>
 8008274:	680b      	ldr	r3, [r1, #0]
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	1d18      	adds	r0, r3, #4
 800827a:	6008      	str	r0, [r1, #0]
 800827c:	0628      	lsls	r0, r5, #24
 800827e:	d501      	bpl.n	8008284 <_printf_i+0xec>
 8008280:	681d      	ldr	r5, [r3, #0]
 8008282:	e002      	b.n	800828a <_printf_i+0xf2>
 8008284:	0669      	lsls	r1, r5, #25
 8008286:	d5fb      	bpl.n	8008280 <_printf_i+0xe8>
 8008288:	881d      	ldrh	r5, [r3, #0]
 800828a:	4854      	ldr	r0, [pc, #336]	; (80083dc <_printf_i+0x244>)
 800828c:	2f6f      	cmp	r7, #111	; 0x6f
 800828e:	bf0c      	ite	eq
 8008290:	2308      	moveq	r3, #8
 8008292:	230a      	movne	r3, #10
 8008294:	2100      	movs	r1, #0
 8008296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800829a:	6866      	ldr	r6, [r4, #4]
 800829c:	60a6      	str	r6, [r4, #8]
 800829e:	2e00      	cmp	r6, #0
 80082a0:	bfa2      	ittt	ge
 80082a2:	6821      	ldrge	r1, [r4, #0]
 80082a4:	f021 0104 	bicge.w	r1, r1, #4
 80082a8:	6021      	strge	r1, [r4, #0]
 80082aa:	b90d      	cbnz	r5, 80082b0 <_printf_i+0x118>
 80082ac:	2e00      	cmp	r6, #0
 80082ae:	d04d      	beq.n	800834c <_printf_i+0x1b4>
 80082b0:	4616      	mov	r6, r2
 80082b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80082b6:	fb03 5711 	mls	r7, r3, r1, r5
 80082ba:	5dc7      	ldrb	r7, [r0, r7]
 80082bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082c0:	462f      	mov	r7, r5
 80082c2:	42bb      	cmp	r3, r7
 80082c4:	460d      	mov	r5, r1
 80082c6:	d9f4      	bls.n	80082b2 <_printf_i+0x11a>
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d10b      	bne.n	80082e4 <_printf_i+0x14c>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	07df      	lsls	r7, r3, #31
 80082d0:	d508      	bpl.n	80082e4 <_printf_i+0x14c>
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	6861      	ldr	r1, [r4, #4]
 80082d6:	4299      	cmp	r1, r3
 80082d8:	bfde      	ittt	le
 80082da:	2330      	movle	r3, #48	; 0x30
 80082dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082e4:	1b92      	subs	r2, r2, r6
 80082e6:	6122      	str	r2, [r4, #16]
 80082e8:	f8cd a000 	str.w	sl, [sp]
 80082ec:	464b      	mov	r3, r9
 80082ee:	aa03      	add	r2, sp, #12
 80082f0:	4621      	mov	r1, r4
 80082f2:	4640      	mov	r0, r8
 80082f4:	f7ff fee2 	bl	80080bc <_printf_common>
 80082f8:	3001      	adds	r0, #1
 80082fa:	d14c      	bne.n	8008396 <_printf_i+0x1fe>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	b004      	add	sp, #16
 8008302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008306:	4835      	ldr	r0, [pc, #212]	; (80083dc <_printf_i+0x244>)
 8008308:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	680e      	ldr	r6, [r1, #0]
 8008310:	061f      	lsls	r7, r3, #24
 8008312:	f856 5b04 	ldr.w	r5, [r6], #4
 8008316:	600e      	str	r6, [r1, #0]
 8008318:	d514      	bpl.n	8008344 <_printf_i+0x1ac>
 800831a:	07d9      	lsls	r1, r3, #31
 800831c:	bf44      	itt	mi
 800831e:	f043 0320 	orrmi.w	r3, r3, #32
 8008322:	6023      	strmi	r3, [r4, #0]
 8008324:	b91d      	cbnz	r5, 800832e <_printf_i+0x196>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	f023 0320 	bic.w	r3, r3, #32
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	2310      	movs	r3, #16
 8008330:	e7b0      	b.n	8008294 <_printf_i+0xfc>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	f043 0320 	orr.w	r3, r3, #32
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	2378      	movs	r3, #120	; 0x78
 800833c:	4828      	ldr	r0, [pc, #160]	; (80083e0 <_printf_i+0x248>)
 800833e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008342:	e7e3      	b.n	800830c <_printf_i+0x174>
 8008344:	065e      	lsls	r6, r3, #25
 8008346:	bf48      	it	mi
 8008348:	b2ad      	uxthmi	r5, r5
 800834a:	e7e6      	b.n	800831a <_printf_i+0x182>
 800834c:	4616      	mov	r6, r2
 800834e:	e7bb      	b.n	80082c8 <_printf_i+0x130>
 8008350:	680b      	ldr	r3, [r1, #0]
 8008352:	6826      	ldr	r6, [r4, #0]
 8008354:	6960      	ldr	r0, [r4, #20]
 8008356:	1d1d      	adds	r5, r3, #4
 8008358:	600d      	str	r5, [r1, #0]
 800835a:	0635      	lsls	r5, r6, #24
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	d501      	bpl.n	8008364 <_printf_i+0x1cc>
 8008360:	6018      	str	r0, [r3, #0]
 8008362:	e002      	b.n	800836a <_printf_i+0x1d2>
 8008364:	0671      	lsls	r1, r6, #25
 8008366:	d5fb      	bpl.n	8008360 <_printf_i+0x1c8>
 8008368:	8018      	strh	r0, [r3, #0]
 800836a:	2300      	movs	r3, #0
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	4616      	mov	r6, r2
 8008370:	e7ba      	b.n	80082e8 <_printf_i+0x150>
 8008372:	680b      	ldr	r3, [r1, #0]
 8008374:	1d1a      	adds	r2, r3, #4
 8008376:	600a      	str	r2, [r1, #0]
 8008378:	681e      	ldr	r6, [r3, #0]
 800837a:	6862      	ldr	r2, [r4, #4]
 800837c:	2100      	movs	r1, #0
 800837e:	4630      	mov	r0, r6
 8008380:	f7f7 ff66 	bl	8000250 <memchr>
 8008384:	b108      	cbz	r0, 800838a <_printf_i+0x1f2>
 8008386:	1b80      	subs	r0, r0, r6
 8008388:	6060      	str	r0, [r4, #4]
 800838a:	6863      	ldr	r3, [r4, #4]
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	2300      	movs	r3, #0
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008394:	e7a8      	b.n	80082e8 <_printf_i+0x150>
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	4632      	mov	r2, r6
 800839a:	4649      	mov	r1, r9
 800839c:	4640      	mov	r0, r8
 800839e:	47d0      	blx	sl
 80083a0:	3001      	adds	r0, #1
 80083a2:	d0ab      	beq.n	80082fc <_printf_i+0x164>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	079b      	lsls	r3, r3, #30
 80083a8:	d413      	bmi.n	80083d2 <_printf_i+0x23a>
 80083aa:	68e0      	ldr	r0, [r4, #12]
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	4298      	cmp	r0, r3
 80083b0:	bfb8      	it	lt
 80083b2:	4618      	movlt	r0, r3
 80083b4:	e7a4      	b.n	8008300 <_printf_i+0x168>
 80083b6:	2301      	movs	r3, #1
 80083b8:	4632      	mov	r2, r6
 80083ba:	4649      	mov	r1, r9
 80083bc:	4640      	mov	r0, r8
 80083be:	47d0      	blx	sl
 80083c0:	3001      	adds	r0, #1
 80083c2:	d09b      	beq.n	80082fc <_printf_i+0x164>
 80083c4:	3501      	adds	r5, #1
 80083c6:	68e3      	ldr	r3, [r4, #12]
 80083c8:	9903      	ldr	r1, [sp, #12]
 80083ca:	1a5b      	subs	r3, r3, r1
 80083cc:	42ab      	cmp	r3, r5
 80083ce:	dcf2      	bgt.n	80083b6 <_printf_i+0x21e>
 80083d0:	e7eb      	b.n	80083aa <_printf_i+0x212>
 80083d2:	2500      	movs	r5, #0
 80083d4:	f104 0619 	add.w	r6, r4, #25
 80083d8:	e7f5      	b.n	80083c6 <_printf_i+0x22e>
 80083da:	bf00      	nop
 80083dc:	0800a972 	.word	0x0800a972
 80083e0:	0800a983 	.word	0x0800a983

080083e4 <siprintf>:
 80083e4:	b40e      	push	{r1, r2, r3}
 80083e6:	b500      	push	{lr}
 80083e8:	b09c      	sub	sp, #112	; 0x70
 80083ea:	ab1d      	add	r3, sp, #116	; 0x74
 80083ec:	9002      	str	r0, [sp, #8]
 80083ee:	9006      	str	r0, [sp, #24]
 80083f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083f4:	4809      	ldr	r0, [pc, #36]	; (800841c <siprintf+0x38>)
 80083f6:	9107      	str	r1, [sp, #28]
 80083f8:	9104      	str	r1, [sp, #16]
 80083fa:	4909      	ldr	r1, [pc, #36]	; (8008420 <siprintf+0x3c>)
 80083fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008400:	9105      	str	r1, [sp, #20]
 8008402:	6800      	ldr	r0, [r0, #0]
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	a902      	add	r1, sp, #8
 8008408:	f001 fb6a 	bl	8009ae0 <_svfiprintf_r>
 800840c:	9b02      	ldr	r3, [sp, #8]
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	b01c      	add	sp, #112	; 0x70
 8008414:	f85d eb04 	ldr.w	lr, [sp], #4
 8008418:	b003      	add	sp, #12
 800841a:	4770      	bx	lr
 800841c:	20000028 	.word	0x20000028
 8008420:	ffff0208 	.word	0xffff0208

08008424 <strncmp>:
 8008424:	b510      	push	{r4, lr}
 8008426:	b16a      	cbz	r2, 8008444 <strncmp+0x20>
 8008428:	3901      	subs	r1, #1
 800842a:	1884      	adds	r4, r0, r2
 800842c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008430:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008434:	4293      	cmp	r3, r2
 8008436:	d103      	bne.n	8008440 <strncmp+0x1c>
 8008438:	42a0      	cmp	r0, r4
 800843a:	d001      	beq.n	8008440 <strncmp+0x1c>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f5      	bne.n	800842c <strncmp+0x8>
 8008440:	1a98      	subs	r0, r3, r2
 8008442:	bd10      	pop	{r4, pc}
 8008444:	4610      	mov	r0, r2
 8008446:	e7fc      	b.n	8008442 <strncmp+0x1e>

08008448 <_strtol_l.isra.0>:
 8008448:	2b01      	cmp	r3, #1
 800844a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800844e:	d001      	beq.n	8008454 <_strtol_l.isra.0+0xc>
 8008450:	2b24      	cmp	r3, #36	; 0x24
 8008452:	d906      	bls.n	8008462 <_strtol_l.isra.0+0x1a>
 8008454:	f7ff fb52 	bl	8007afc <__errno>
 8008458:	2316      	movs	r3, #22
 800845a:	6003      	str	r3, [r0, #0]
 800845c:	2000      	movs	r0, #0
 800845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008462:	4f3a      	ldr	r7, [pc, #232]	; (800854c <_strtol_l.isra.0+0x104>)
 8008464:	468e      	mov	lr, r1
 8008466:	4676      	mov	r6, lr
 8008468:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800846c:	5de5      	ldrb	r5, [r4, r7]
 800846e:	f015 0508 	ands.w	r5, r5, #8
 8008472:	d1f8      	bne.n	8008466 <_strtol_l.isra.0+0x1e>
 8008474:	2c2d      	cmp	r4, #45	; 0x2d
 8008476:	d134      	bne.n	80084e2 <_strtol_l.isra.0+0x9a>
 8008478:	f89e 4000 	ldrb.w	r4, [lr]
 800847c:	f04f 0801 	mov.w	r8, #1
 8008480:	f106 0e02 	add.w	lr, r6, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d05c      	beq.n	8008542 <_strtol_l.isra.0+0xfa>
 8008488:	2b10      	cmp	r3, #16
 800848a:	d10c      	bne.n	80084a6 <_strtol_l.isra.0+0x5e>
 800848c:	2c30      	cmp	r4, #48	; 0x30
 800848e:	d10a      	bne.n	80084a6 <_strtol_l.isra.0+0x5e>
 8008490:	f89e 4000 	ldrb.w	r4, [lr]
 8008494:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008498:	2c58      	cmp	r4, #88	; 0x58
 800849a:	d14d      	bne.n	8008538 <_strtol_l.isra.0+0xf0>
 800849c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80084a0:	2310      	movs	r3, #16
 80084a2:	f10e 0e02 	add.w	lr, lr, #2
 80084a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80084aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084ae:	2600      	movs	r6, #0
 80084b0:	fbbc f9f3 	udiv	r9, ip, r3
 80084b4:	4635      	mov	r5, r6
 80084b6:	fb03 ca19 	mls	sl, r3, r9, ip
 80084ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80084be:	2f09      	cmp	r7, #9
 80084c0:	d818      	bhi.n	80084f4 <_strtol_l.isra.0+0xac>
 80084c2:	463c      	mov	r4, r7
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	dd24      	ble.n	8008512 <_strtol_l.isra.0+0xca>
 80084c8:	2e00      	cmp	r6, #0
 80084ca:	db1f      	blt.n	800850c <_strtol_l.isra.0+0xc4>
 80084cc:	45a9      	cmp	r9, r5
 80084ce:	d31d      	bcc.n	800850c <_strtol_l.isra.0+0xc4>
 80084d0:	d101      	bne.n	80084d6 <_strtol_l.isra.0+0x8e>
 80084d2:	45a2      	cmp	sl, r4
 80084d4:	db1a      	blt.n	800850c <_strtol_l.isra.0+0xc4>
 80084d6:	fb05 4503 	mla	r5, r5, r3, r4
 80084da:	2601      	movs	r6, #1
 80084dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80084e0:	e7eb      	b.n	80084ba <_strtol_l.isra.0+0x72>
 80084e2:	2c2b      	cmp	r4, #43	; 0x2b
 80084e4:	bf08      	it	eq
 80084e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80084ea:	46a8      	mov	r8, r5
 80084ec:	bf08      	it	eq
 80084ee:	f106 0e02 	addeq.w	lr, r6, #2
 80084f2:	e7c7      	b.n	8008484 <_strtol_l.isra.0+0x3c>
 80084f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80084f8:	2f19      	cmp	r7, #25
 80084fa:	d801      	bhi.n	8008500 <_strtol_l.isra.0+0xb8>
 80084fc:	3c37      	subs	r4, #55	; 0x37
 80084fe:	e7e1      	b.n	80084c4 <_strtol_l.isra.0+0x7c>
 8008500:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008504:	2f19      	cmp	r7, #25
 8008506:	d804      	bhi.n	8008512 <_strtol_l.isra.0+0xca>
 8008508:	3c57      	subs	r4, #87	; 0x57
 800850a:	e7db      	b.n	80084c4 <_strtol_l.isra.0+0x7c>
 800850c:	f04f 36ff 	mov.w	r6, #4294967295
 8008510:	e7e4      	b.n	80084dc <_strtol_l.isra.0+0x94>
 8008512:	2e00      	cmp	r6, #0
 8008514:	da05      	bge.n	8008522 <_strtol_l.isra.0+0xda>
 8008516:	2322      	movs	r3, #34	; 0x22
 8008518:	6003      	str	r3, [r0, #0]
 800851a:	4665      	mov	r5, ip
 800851c:	b942      	cbnz	r2, 8008530 <_strtol_l.isra.0+0xe8>
 800851e:	4628      	mov	r0, r5
 8008520:	e79d      	b.n	800845e <_strtol_l.isra.0+0x16>
 8008522:	f1b8 0f00 	cmp.w	r8, #0
 8008526:	d000      	beq.n	800852a <_strtol_l.isra.0+0xe2>
 8008528:	426d      	negs	r5, r5
 800852a:	2a00      	cmp	r2, #0
 800852c:	d0f7      	beq.n	800851e <_strtol_l.isra.0+0xd6>
 800852e:	b10e      	cbz	r6, 8008534 <_strtol_l.isra.0+0xec>
 8008530:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	e7f2      	b.n	800851e <_strtol_l.isra.0+0xd6>
 8008538:	2430      	movs	r4, #48	; 0x30
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1b3      	bne.n	80084a6 <_strtol_l.isra.0+0x5e>
 800853e:	2308      	movs	r3, #8
 8008540:	e7b1      	b.n	80084a6 <_strtol_l.isra.0+0x5e>
 8008542:	2c30      	cmp	r4, #48	; 0x30
 8008544:	d0a4      	beq.n	8008490 <_strtol_l.isra.0+0x48>
 8008546:	230a      	movs	r3, #10
 8008548:	e7ad      	b.n	80084a6 <_strtol_l.isra.0+0x5e>
 800854a:	bf00      	nop
 800854c:	0800a995 	.word	0x0800a995

08008550 <strtol>:
 8008550:	4613      	mov	r3, r2
 8008552:	460a      	mov	r2, r1
 8008554:	4601      	mov	r1, r0
 8008556:	4802      	ldr	r0, [pc, #8]	; (8008560 <strtol+0x10>)
 8008558:	6800      	ldr	r0, [r0, #0]
 800855a:	f7ff bf75 	b.w	8008448 <_strtol_l.isra.0>
 800855e:	bf00      	nop
 8008560:	20000028 	.word	0x20000028

08008564 <quorem>:
 8008564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	6903      	ldr	r3, [r0, #16]
 800856a:	690c      	ldr	r4, [r1, #16]
 800856c:	42a3      	cmp	r3, r4
 800856e:	4607      	mov	r7, r0
 8008570:	f2c0 8081 	blt.w	8008676 <quorem+0x112>
 8008574:	3c01      	subs	r4, #1
 8008576:	f101 0814 	add.w	r8, r1, #20
 800857a:	f100 0514 	add.w	r5, r0, #20
 800857e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800858c:	3301      	adds	r3, #1
 800858e:	429a      	cmp	r2, r3
 8008590:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008598:	fbb2 f6f3 	udiv	r6, r2, r3
 800859c:	d331      	bcc.n	8008602 <quorem+0x9e>
 800859e:	f04f 0e00 	mov.w	lr, #0
 80085a2:	4640      	mov	r0, r8
 80085a4:	46ac      	mov	ip, r5
 80085a6:	46f2      	mov	sl, lr
 80085a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80085ac:	b293      	uxth	r3, r2
 80085ae:	fb06 e303 	mla	r3, r6, r3, lr
 80085b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	ebaa 0303 	sub.w	r3, sl, r3
 80085bc:	0c12      	lsrs	r2, r2, #16
 80085be:	f8dc a000 	ldr.w	sl, [ip]
 80085c2:	fb06 e202 	mla	r2, r6, r2, lr
 80085c6:	fa13 f38a 	uxtah	r3, r3, sl
 80085ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085ce:	fa1f fa82 	uxth.w	sl, r2
 80085d2:	f8dc 2000 	ldr.w	r2, [ip]
 80085d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80085da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085de:	b29b      	uxth	r3, r3
 80085e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085e4:	4581      	cmp	r9, r0
 80085e6:	f84c 3b04 	str.w	r3, [ip], #4
 80085ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085ee:	d2db      	bcs.n	80085a8 <quorem+0x44>
 80085f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80085f4:	b92b      	cbnz	r3, 8008602 <quorem+0x9e>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	3b04      	subs	r3, #4
 80085fa:	429d      	cmp	r5, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	d32e      	bcc.n	800865e <quorem+0xfa>
 8008600:	613c      	str	r4, [r7, #16]
 8008602:	4638      	mov	r0, r7
 8008604:	f001 f856 	bl	80096b4 <__mcmp>
 8008608:	2800      	cmp	r0, #0
 800860a:	db24      	blt.n	8008656 <quorem+0xf2>
 800860c:	3601      	adds	r6, #1
 800860e:	4628      	mov	r0, r5
 8008610:	f04f 0c00 	mov.w	ip, #0
 8008614:	f858 2b04 	ldr.w	r2, [r8], #4
 8008618:	f8d0 e000 	ldr.w	lr, [r0]
 800861c:	b293      	uxth	r3, r2
 800861e:	ebac 0303 	sub.w	r3, ip, r3
 8008622:	0c12      	lsrs	r2, r2, #16
 8008624:	fa13 f38e 	uxtah	r3, r3, lr
 8008628:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800862c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008630:	b29b      	uxth	r3, r3
 8008632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008636:	45c1      	cmp	r9, r8
 8008638:	f840 3b04 	str.w	r3, [r0], #4
 800863c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008640:	d2e8      	bcs.n	8008614 <quorem+0xb0>
 8008642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800864a:	b922      	cbnz	r2, 8008656 <quorem+0xf2>
 800864c:	3b04      	subs	r3, #4
 800864e:	429d      	cmp	r5, r3
 8008650:	461a      	mov	r2, r3
 8008652:	d30a      	bcc.n	800866a <quorem+0x106>
 8008654:	613c      	str	r4, [r7, #16]
 8008656:	4630      	mov	r0, r6
 8008658:	b003      	add	sp, #12
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	6812      	ldr	r2, [r2, #0]
 8008660:	3b04      	subs	r3, #4
 8008662:	2a00      	cmp	r2, #0
 8008664:	d1cc      	bne.n	8008600 <quorem+0x9c>
 8008666:	3c01      	subs	r4, #1
 8008668:	e7c7      	b.n	80085fa <quorem+0x96>
 800866a:	6812      	ldr	r2, [r2, #0]
 800866c:	3b04      	subs	r3, #4
 800866e:	2a00      	cmp	r2, #0
 8008670:	d1f0      	bne.n	8008654 <quorem+0xf0>
 8008672:	3c01      	subs	r4, #1
 8008674:	e7eb      	b.n	800864e <quorem+0xea>
 8008676:	2000      	movs	r0, #0
 8008678:	e7ee      	b.n	8008658 <quorem+0xf4>
 800867a:	0000      	movs	r0, r0
 800867c:	0000      	movs	r0, r0
	...

08008680 <_dtoa_r>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	ec59 8b10 	vmov	r8, r9, d0
 8008688:	b095      	sub	sp, #84	; 0x54
 800868a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800868c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800868e:	9107      	str	r1, [sp, #28]
 8008690:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008694:	4606      	mov	r6, r0
 8008696:	9209      	str	r2, [sp, #36]	; 0x24
 8008698:	9310      	str	r3, [sp, #64]	; 0x40
 800869a:	b975      	cbnz	r5, 80086ba <_dtoa_r+0x3a>
 800869c:	2010      	movs	r0, #16
 800869e:	f000 fd75 	bl	800918c <malloc>
 80086a2:	4602      	mov	r2, r0
 80086a4:	6270      	str	r0, [r6, #36]	; 0x24
 80086a6:	b920      	cbnz	r0, 80086b2 <_dtoa_r+0x32>
 80086a8:	4bab      	ldr	r3, [pc, #684]	; (8008958 <_dtoa_r+0x2d8>)
 80086aa:	21ea      	movs	r1, #234	; 0xea
 80086ac:	48ab      	ldr	r0, [pc, #684]	; (800895c <_dtoa_r+0x2dc>)
 80086ae:	f001 fb27 	bl	8009d00 <__assert_func>
 80086b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086b6:	6005      	str	r5, [r0, #0]
 80086b8:	60c5      	str	r5, [r0, #12]
 80086ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086bc:	6819      	ldr	r1, [r3, #0]
 80086be:	b151      	cbz	r1, 80086d6 <_dtoa_r+0x56>
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	604a      	str	r2, [r1, #4]
 80086c4:	2301      	movs	r3, #1
 80086c6:	4093      	lsls	r3, r2
 80086c8:	608b      	str	r3, [r1, #8]
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 fdb4 	bl	8009238 <_Bfree>
 80086d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	f1b9 0300 	subs.w	r3, r9, #0
 80086da:	bfbb      	ittet	lt
 80086dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80086e0:	9303      	strlt	r3, [sp, #12]
 80086e2:	2300      	movge	r3, #0
 80086e4:	2201      	movlt	r2, #1
 80086e6:	bfac      	ite	ge
 80086e8:	6023      	strge	r3, [r4, #0]
 80086ea:	6022      	strlt	r2, [r4, #0]
 80086ec:	4b9c      	ldr	r3, [pc, #624]	; (8008960 <_dtoa_r+0x2e0>)
 80086ee:	9c03      	ldr	r4, [sp, #12]
 80086f0:	43a3      	bics	r3, r4
 80086f2:	d11a      	bne.n	800872a <_dtoa_r+0xaa>
 80086f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008700:	ea53 0308 	orrs.w	r3, r3, r8
 8008704:	f000 8512 	beq.w	800912c <_dtoa_r+0xaac>
 8008708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800870a:	b953      	cbnz	r3, 8008722 <_dtoa_r+0xa2>
 800870c:	4b95      	ldr	r3, [pc, #596]	; (8008964 <_dtoa_r+0x2e4>)
 800870e:	e01f      	b.n	8008750 <_dtoa_r+0xd0>
 8008710:	4b95      	ldr	r3, [pc, #596]	; (8008968 <_dtoa_r+0x2e8>)
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	3308      	adds	r3, #8
 8008716:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	9800      	ldr	r0, [sp, #0]
 800871c:	b015      	add	sp, #84	; 0x54
 800871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008722:	4b90      	ldr	r3, [pc, #576]	; (8008964 <_dtoa_r+0x2e4>)
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	3303      	adds	r3, #3
 8008728:	e7f5      	b.n	8008716 <_dtoa_r+0x96>
 800872a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800872e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008736:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800873a:	d10b      	bne.n	8008754 <_dtoa_r+0xd4>
 800873c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800873e:	2301      	movs	r3, #1
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 84ee 	beq.w	8009126 <_dtoa_r+0xaa6>
 800874a:	4888      	ldr	r0, [pc, #544]	; (800896c <_dtoa_r+0x2ec>)
 800874c:	6018      	str	r0, [r3, #0]
 800874e:	1e43      	subs	r3, r0, #1
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	e7e2      	b.n	800871a <_dtoa_r+0x9a>
 8008754:	a913      	add	r1, sp, #76	; 0x4c
 8008756:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800875a:	aa12      	add	r2, sp, #72	; 0x48
 800875c:	4630      	mov	r0, r6
 800875e:	f001 f84d 	bl	80097fc <__d2b>
 8008762:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008766:	4605      	mov	r5, r0
 8008768:	9812      	ldr	r0, [sp, #72]	; 0x48
 800876a:	2900      	cmp	r1, #0
 800876c:	d047      	beq.n	80087fe <_dtoa_r+0x17e>
 800876e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008770:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008778:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800877c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008780:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008784:	2400      	movs	r4, #0
 8008786:	ec43 2b16 	vmov	d6, r2, r3
 800878a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800878e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008940 <_dtoa_r+0x2c0>
 8008792:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008796:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008948 <_dtoa_r+0x2c8>
 800879a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800879e:	eeb0 7b46 	vmov.f64	d7, d6
 80087a2:	ee06 1a90 	vmov	s13, r1
 80087a6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80087aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008950 <_dtoa_r+0x2d0>
 80087ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80087b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80087b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80087ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087be:	ee16 ba90 	vmov	fp, s13
 80087c2:	9411      	str	r4, [sp, #68]	; 0x44
 80087c4:	d508      	bpl.n	80087d8 <_dtoa_r+0x158>
 80087c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80087ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80087ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d2:	bf18      	it	ne
 80087d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80087d8:	f1bb 0f16 	cmp.w	fp, #22
 80087dc:	d832      	bhi.n	8008844 <_dtoa_r+0x1c4>
 80087de:	4b64      	ldr	r3, [pc, #400]	; (8008970 <_dtoa_r+0x2f0>)
 80087e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087e4:	ed93 7b00 	vldr	d7, [r3]
 80087e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80087ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f4:	d501      	bpl.n	80087fa <_dtoa_r+0x17a>
 80087f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087fa:	2300      	movs	r3, #0
 80087fc:	e023      	b.n	8008846 <_dtoa_r+0x1c6>
 80087fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008800:	4401      	add	r1, r0
 8008802:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008806:	2b20      	cmp	r3, #32
 8008808:	bfc3      	ittte	gt
 800880a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800880e:	fa04 f303 	lslgt.w	r3, r4, r3
 8008812:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008816:	f1c3 0320 	rsble	r3, r3, #32
 800881a:	bfc6      	itte	gt
 800881c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008820:	ea43 0308 	orrgt.w	r3, r3, r8
 8008824:	fa08 f303 	lslle.w	r3, r8, r3
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008830:	3901      	subs	r1, #1
 8008832:	ed8d 7b00 	vstr	d7, [sp]
 8008836:	9c01      	ldr	r4, [sp, #4]
 8008838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800883c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008840:	2401      	movs	r4, #1
 8008842:	e7a0      	b.n	8008786 <_dtoa_r+0x106>
 8008844:	2301      	movs	r3, #1
 8008846:	930f      	str	r3, [sp, #60]	; 0x3c
 8008848:	1a43      	subs	r3, r0, r1
 800884a:	1e5a      	subs	r2, r3, #1
 800884c:	bf45      	ittet	mi
 800884e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008852:	9305      	strmi	r3, [sp, #20]
 8008854:	2300      	movpl	r3, #0
 8008856:	2300      	movmi	r3, #0
 8008858:	9206      	str	r2, [sp, #24]
 800885a:	bf54      	ite	pl
 800885c:	9305      	strpl	r3, [sp, #20]
 800885e:	9306      	strmi	r3, [sp, #24]
 8008860:	f1bb 0f00 	cmp.w	fp, #0
 8008864:	db18      	blt.n	8008898 <_dtoa_r+0x218>
 8008866:	9b06      	ldr	r3, [sp, #24]
 8008868:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800886c:	445b      	add	r3, fp
 800886e:	9306      	str	r3, [sp, #24]
 8008870:	2300      	movs	r3, #0
 8008872:	9a07      	ldr	r2, [sp, #28]
 8008874:	2a09      	cmp	r2, #9
 8008876:	d849      	bhi.n	800890c <_dtoa_r+0x28c>
 8008878:	2a05      	cmp	r2, #5
 800887a:	bfc4      	itt	gt
 800887c:	3a04      	subgt	r2, #4
 800887e:	9207      	strgt	r2, [sp, #28]
 8008880:	9a07      	ldr	r2, [sp, #28]
 8008882:	f1a2 0202 	sub.w	r2, r2, #2
 8008886:	bfcc      	ite	gt
 8008888:	2400      	movgt	r4, #0
 800888a:	2401      	movle	r4, #1
 800888c:	2a03      	cmp	r2, #3
 800888e:	d848      	bhi.n	8008922 <_dtoa_r+0x2a2>
 8008890:	e8df f002 	tbb	[pc, r2]
 8008894:	3a2c2e0b 	.word	0x3a2c2e0b
 8008898:	9b05      	ldr	r3, [sp, #20]
 800889a:	2200      	movs	r2, #0
 800889c:	eba3 030b 	sub.w	r3, r3, fp
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	920e      	str	r2, [sp, #56]	; 0x38
 80088a4:	f1cb 0300 	rsb	r3, fp, #0
 80088a8:	e7e3      	b.n	8008872 <_dtoa_r+0x1f2>
 80088aa:	2200      	movs	r2, #0
 80088ac:	9208      	str	r2, [sp, #32]
 80088ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088b0:	2a00      	cmp	r2, #0
 80088b2:	dc39      	bgt.n	8008928 <_dtoa_r+0x2a8>
 80088b4:	f04f 0a01 	mov.w	sl, #1
 80088b8:	46d1      	mov	r9, sl
 80088ba:	4652      	mov	r2, sl
 80088bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80088c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80088c2:	2100      	movs	r1, #0
 80088c4:	6079      	str	r1, [r7, #4]
 80088c6:	2004      	movs	r0, #4
 80088c8:	f100 0c14 	add.w	ip, r0, #20
 80088cc:	4594      	cmp	ip, r2
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	d92f      	bls.n	8008932 <_dtoa_r+0x2b2>
 80088d2:	4630      	mov	r0, r6
 80088d4:	930c      	str	r3, [sp, #48]	; 0x30
 80088d6:	f000 fc6f 	bl	80091b8 <_Balloc>
 80088da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088dc:	9000      	str	r0, [sp, #0]
 80088de:	4602      	mov	r2, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d149      	bne.n	8008978 <_dtoa_r+0x2f8>
 80088e4:	4b23      	ldr	r3, [pc, #140]	; (8008974 <_dtoa_r+0x2f4>)
 80088e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088ea:	e6df      	b.n	80086ac <_dtoa_r+0x2c>
 80088ec:	2201      	movs	r2, #1
 80088ee:	e7dd      	b.n	80088ac <_dtoa_r+0x22c>
 80088f0:	2200      	movs	r2, #0
 80088f2:	9208      	str	r2, [sp, #32]
 80088f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f6:	eb0b 0a02 	add.w	sl, fp, r2
 80088fa:	f10a 0901 	add.w	r9, sl, #1
 80088fe:	464a      	mov	r2, r9
 8008900:	2a01      	cmp	r2, #1
 8008902:	bfb8      	it	lt
 8008904:	2201      	movlt	r2, #1
 8008906:	e7db      	b.n	80088c0 <_dtoa_r+0x240>
 8008908:	2201      	movs	r2, #1
 800890a:	e7f2      	b.n	80088f2 <_dtoa_r+0x272>
 800890c:	2401      	movs	r4, #1
 800890e:	2200      	movs	r2, #0
 8008910:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008914:	f04f 3aff 	mov.w	sl, #4294967295
 8008918:	2100      	movs	r1, #0
 800891a:	46d1      	mov	r9, sl
 800891c:	2212      	movs	r2, #18
 800891e:	9109      	str	r1, [sp, #36]	; 0x24
 8008920:	e7ce      	b.n	80088c0 <_dtoa_r+0x240>
 8008922:	2201      	movs	r2, #1
 8008924:	9208      	str	r2, [sp, #32]
 8008926:	e7f5      	b.n	8008914 <_dtoa_r+0x294>
 8008928:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800892c:	46d1      	mov	r9, sl
 800892e:	4652      	mov	r2, sl
 8008930:	e7c6      	b.n	80088c0 <_dtoa_r+0x240>
 8008932:	3101      	adds	r1, #1
 8008934:	6079      	str	r1, [r7, #4]
 8008936:	0040      	lsls	r0, r0, #1
 8008938:	e7c6      	b.n	80088c8 <_dtoa_r+0x248>
 800893a:	bf00      	nop
 800893c:	f3af 8000 	nop.w
 8008940:	636f4361 	.word	0x636f4361
 8008944:	3fd287a7 	.word	0x3fd287a7
 8008948:	8b60c8b3 	.word	0x8b60c8b3
 800894c:	3fc68a28 	.word	0x3fc68a28
 8008950:	509f79fb 	.word	0x509f79fb
 8008954:	3fd34413 	.word	0x3fd34413
 8008958:	0800aaa2 	.word	0x0800aaa2
 800895c:	0800aab9 	.word	0x0800aab9
 8008960:	7ff00000 	.word	0x7ff00000
 8008964:	0800aa9e 	.word	0x0800aa9e
 8008968:	0800aa95 	.word	0x0800aa95
 800896c:	0800a971 	.word	0x0800a971
 8008970:	0800abb8 	.word	0x0800abb8
 8008974:	0800ab18 	.word	0x0800ab18
 8008978:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800897a:	9900      	ldr	r1, [sp, #0]
 800897c:	6011      	str	r1, [r2, #0]
 800897e:	f1b9 0f0e 	cmp.w	r9, #14
 8008982:	d872      	bhi.n	8008a6a <_dtoa_r+0x3ea>
 8008984:	2c00      	cmp	r4, #0
 8008986:	d070      	beq.n	8008a6a <_dtoa_r+0x3ea>
 8008988:	f1bb 0f00 	cmp.w	fp, #0
 800898c:	f340 80a6 	ble.w	8008adc <_dtoa_r+0x45c>
 8008990:	49ca      	ldr	r1, [pc, #808]	; (8008cbc <_dtoa_r+0x63c>)
 8008992:	f00b 020f 	and.w	r2, fp, #15
 8008996:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800899a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800899e:	ed92 7b00 	vldr	d7, [r2]
 80089a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80089a6:	f000 808d 	beq.w	8008ac4 <_dtoa_r+0x444>
 80089aa:	4ac5      	ldr	r2, [pc, #788]	; (8008cc0 <_dtoa_r+0x640>)
 80089ac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80089b0:	ed92 6b08 	vldr	d6, [r2, #32]
 80089b4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80089b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80089bc:	f001 010f 	and.w	r1, r1, #15
 80089c0:	2203      	movs	r2, #3
 80089c2:	48bf      	ldr	r0, [pc, #764]	; (8008cc0 <_dtoa_r+0x640>)
 80089c4:	2900      	cmp	r1, #0
 80089c6:	d17f      	bne.n	8008ac8 <_dtoa_r+0x448>
 80089c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80089cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80089d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80089d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089d6:	2900      	cmp	r1, #0
 80089d8:	f000 80b2 	beq.w	8008b40 <_dtoa_r+0x4c0>
 80089dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80089e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80089e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ec:	f140 80a8 	bpl.w	8008b40 <_dtoa_r+0x4c0>
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	f000 80a4 	beq.w	8008b40 <_dtoa_r+0x4c0>
 80089f8:	f1ba 0f00 	cmp.w	sl, #0
 80089fc:	dd31      	ble.n	8008a62 <_dtoa_r+0x3e2>
 80089fe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008a02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a0a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a0e:	3201      	adds	r2, #1
 8008a10:	4650      	mov	r0, sl
 8008a12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008a1a:	ee07 2a90 	vmov	s15, r2
 8008a1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008a26:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008a2a:	9c03      	ldr	r4, [sp, #12]
 8008a2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008a30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008a34:	2800      	cmp	r0, #0
 8008a36:	f040 8086 	bne.w	8008b46 <_dtoa_r+0x4c6>
 8008a3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008a42:	ec42 1b17 	vmov	d7, r1, r2
 8008a46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4e:	f300 8272 	bgt.w	8008f36 <_dtoa_r+0x8b6>
 8008a52:	eeb1 7b47 	vneg.f64	d7, d7
 8008a56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5e:	f100 8267 	bmi.w	8008f30 <_dtoa_r+0x8b0>
 8008a62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008a66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008a6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f2c0 8129 	blt.w	8008cc4 <_dtoa_r+0x644>
 8008a72:	f1bb 0f0e 	cmp.w	fp, #14
 8008a76:	f300 8125 	bgt.w	8008cc4 <_dtoa_r+0x644>
 8008a7a:	4b90      	ldr	r3, [pc, #576]	; (8008cbc <_dtoa_r+0x63c>)
 8008a7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a80:	ed93 6b00 	vldr	d6, [r3]
 8008a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f280 80c3 	bge.w	8008c12 <_dtoa_r+0x592>
 8008a8c:	f1b9 0f00 	cmp.w	r9, #0
 8008a90:	f300 80bf 	bgt.w	8008c12 <_dtoa_r+0x592>
 8008a94:	f040 824c 	bne.w	8008f30 <_dtoa_r+0x8b0>
 8008a98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008aa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aac:	464c      	mov	r4, r9
 8008aae:	464f      	mov	r7, r9
 8008ab0:	f280 8222 	bge.w	8008ef8 <_dtoa_r+0x878>
 8008ab4:	f8dd 8000 	ldr.w	r8, [sp]
 8008ab8:	2331      	movs	r3, #49	; 0x31
 8008aba:	f808 3b01 	strb.w	r3, [r8], #1
 8008abe:	f10b 0b01 	add.w	fp, fp, #1
 8008ac2:	e21e      	b.n	8008f02 <_dtoa_r+0x882>
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	e77c      	b.n	80089c2 <_dtoa_r+0x342>
 8008ac8:	07cc      	lsls	r4, r1, #31
 8008aca:	d504      	bpl.n	8008ad6 <_dtoa_r+0x456>
 8008acc:	ed90 6b00 	vldr	d6, [r0]
 8008ad0:	3201      	adds	r2, #1
 8008ad2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ad6:	1049      	asrs	r1, r1, #1
 8008ad8:	3008      	adds	r0, #8
 8008ada:	e773      	b.n	80089c4 <_dtoa_r+0x344>
 8008adc:	d02e      	beq.n	8008b3c <_dtoa_r+0x4bc>
 8008ade:	f1cb 0100 	rsb	r1, fp, #0
 8008ae2:	4a76      	ldr	r2, [pc, #472]	; (8008cbc <_dtoa_r+0x63c>)
 8008ae4:	f001 000f 	and.w	r0, r1, #15
 8008ae8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008aec:	ed92 7b00 	vldr	d7, [r2]
 8008af0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008af4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008af8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008afc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008b00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008b04:	486e      	ldr	r0, [pc, #440]	; (8008cc0 <_dtoa_r+0x640>)
 8008b06:	1109      	asrs	r1, r1, #4
 8008b08:	2400      	movs	r4, #0
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	b939      	cbnz	r1, 8008b1e <_dtoa_r+0x49e>
 8008b0e:	2c00      	cmp	r4, #0
 8008b10:	f43f af60 	beq.w	80089d4 <_dtoa_r+0x354>
 8008b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b1c:	e75a      	b.n	80089d4 <_dtoa_r+0x354>
 8008b1e:	07cf      	lsls	r7, r1, #31
 8008b20:	d509      	bpl.n	8008b36 <_dtoa_r+0x4b6>
 8008b22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008b26:	ed90 7b00 	vldr	d7, [r0]
 8008b2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008b32:	3201      	adds	r2, #1
 8008b34:	2401      	movs	r4, #1
 8008b36:	1049      	asrs	r1, r1, #1
 8008b38:	3008      	adds	r0, #8
 8008b3a:	e7e7      	b.n	8008b0c <_dtoa_r+0x48c>
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	e749      	b.n	80089d4 <_dtoa_r+0x354>
 8008b40:	465f      	mov	r7, fp
 8008b42:	4648      	mov	r0, r9
 8008b44:	e765      	b.n	8008a12 <_dtoa_r+0x392>
 8008b46:	ec42 1b17 	vmov	d7, r1, r2
 8008b4a:	4a5c      	ldr	r2, [pc, #368]	; (8008cbc <_dtoa_r+0x63c>)
 8008b4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b50:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008b54:	9a00      	ldr	r2, [sp, #0]
 8008b56:	1814      	adds	r4, r2, r0
 8008b58:	9a08      	ldr	r2, [sp, #32]
 8008b5a:	b352      	cbz	r2, 8008bb2 <_dtoa_r+0x532>
 8008b5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008b60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008b64:	f8dd 8000 	ldr.w	r8, [sp]
 8008b68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008b6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008b70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008b74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008b78:	ee14 2a90 	vmov	r2, s9
 8008b7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008b80:	3230      	adds	r2, #48	; 0x30
 8008b82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008b86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b8e:	f808 2b01 	strb.w	r2, [r8], #1
 8008b92:	d439      	bmi.n	8008c08 <_dtoa_r+0x588>
 8008b94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008b98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba0:	d472      	bmi.n	8008c88 <_dtoa_r+0x608>
 8008ba2:	45a0      	cmp	r8, r4
 8008ba4:	f43f af5d 	beq.w	8008a62 <_dtoa_r+0x3e2>
 8008ba8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008bac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008bb0:	e7e0      	b.n	8008b74 <_dtoa_r+0x4f4>
 8008bb2:	f8dd 8000 	ldr.w	r8, [sp]
 8008bb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008bba:	4621      	mov	r1, r4
 8008bbc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008bc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008bc4:	ee14 2a90 	vmov	r2, s9
 8008bc8:	3230      	adds	r2, #48	; 0x30
 8008bca:	f808 2b01 	strb.w	r2, [r8], #1
 8008bce:	45a0      	cmp	r8, r4
 8008bd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008bd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008bd8:	d118      	bne.n	8008c0c <_dtoa_r+0x58c>
 8008bda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008bde:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008be2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bea:	dc4d      	bgt.n	8008c88 <_dtoa_r+0x608>
 8008bec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008bf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	f57f af33 	bpl.w	8008a62 <_dtoa_r+0x3e2>
 8008bfc:	4688      	mov	r8, r1
 8008bfe:	3901      	subs	r1, #1
 8008c00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008c04:	2b30      	cmp	r3, #48	; 0x30
 8008c06:	d0f9      	beq.n	8008bfc <_dtoa_r+0x57c>
 8008c08:	46bb      	mov	fp, r7
 8008c0a:	e02a      	b.n	8008c62 <_dtoa_r+0x5e2>
 8008c0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008c10:	e7d6      	b.n	8008bc0 <_dtoa_r+0x540>
 8008c12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008c1a:	f8dd 8000 	ldr.w	r8, [sp]
 8008c1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008c22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008c26:	ee15 3a10 	vmov	r3, s10
 8008c2a:	3330      	adds	r3, #48	; 0x30
 8008c2c:	f808 3b01 	strb.w	r3, [r8], #1
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	eba8 0303 	sub.w	r3, r8, r3
 8008c36:	4599      	cmp	r9, r3
 8008c38:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008c3c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008c40:	d133      	bne.n	8008caa <_dtoa_r+0x62a>
 8008c42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008c46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c4e:	dc1a      	bgt.n	8008c86 <_dtoa_r+0x606>
 8008c50:	eeb4 7b46 	vcmp.f64	d7, d6
 8008c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c58:	d103      	bne.n	8008c62 <_dtoa_r+0x5e2>
 8008c5a:	ee15 3a10 	vmov	r3, s10
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	d411      	bmi.n	8008c86 <_dtoa_r+0x606>
 8008c62:	4629      	mov	r1, r5
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 fae7 	bl	8009238 <_Bfree>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c6e:	f888 3000 	strb.w	r3, [r8]
 8008c72:	f10b 0301 	add.w	r3, fp, #1
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f43f ad4d 	beq.w	800871a <_dtoa_r+0x9a>
 8008c80:	f8c3 8000 	str.w	r8, [r3]
 8008c84:	e549      	b.n	800871a <_dtoa_r+0x9a>
 8008c86:	465f      	mov	r7, fp
 8008c88:	4643      	mov	r3, r8
 8008c8a:	4698      	mov	r8, r3
 8008c8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c90:	2a39      	cmp	r2, #57	; 0x39
 8008c92:	d106      	bne.n	8008ca2 <_dtoa_r+0x622>
 8008c94:	9a00      	ldr	r2, [sp, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d1f7      	bne.n	8008c8a <_dtoa_r+0x60a>
 8008c9a:	9900      	ldr	r1, [sp, #0]
 8008c9c:	2230      	movs	r2, #48	; 0x30
 8008c9e:	3701      	adds	r7, #1
 8008ca0:	700a      	strb	r2, [r1, #0]
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	701a      	strb	r2, [r3, #0]
 8008ca8:	e7ae      	b.n	8008c08 <_dtoa_r+0x588>
 8008caa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008cae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb6:	d1b2      	bne.n	8008c1e <_dtoa_r+0x59e>
 8008cb8:	e7d3      	b.n	8008c62 <_dtoa_r+0x5e2>
 8008cba:	bf00      	nop
 8008cbc:	0800abb8 	.word	0x0800abb8
 8008cc0:	0800ab90 	.word	0x0800ab90
 8008cc4:	9908      	ldr	r1, [sp, #32]
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	f000 80d1 	beq.w	8008e6e <_dtoa_r+0x7ee>
 8008ccc:	9907      	ldr	r1, [sp, #28]
 8008cce:	2901      	cmp	r1, #1
 8008cd0:	f300 80b4 	bgt.w	8008e3c <_dtoa_r+0x7bc>
 8008cd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	f000 80ac 	beq.w	8008e34 <_dtoa_r+0x7b4>
 8008cdc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ce0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008ce4:	461c      	mov	r4, r3
 8008ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce8:	9b05      	ldr	r3, [sp, #20]
 8008cea:	4413      	add	r3, r2
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	4413      	add	r3, r2
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	9306      	str	r3, [sp, #24]
 8008cf8:	f000 fb5a 	bl	80093b0 <__i2b>
 8008cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfe:	4607      	mov	r7, r0
 8008d00:	f1b8 0f00 	cmp.w	r8, #0
 8008d04:	dd0d      	ble.n	8008d22 <_dtoa_r+0x6a2>
 8008d06:	9a06      	ldr	r2, [sp, #24]
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	dd0a      	ble.n	8008d22 <_dtoa_r+0x6a2>
 8008d0c:	4542      	cmp	r2, r8
 8008d0e:	9905      	ldr	r1, [sp, #20]
 8008d10:	bfa8      	it	ge
 8008d12:	4642      	movge	r2, r8
 8008d14:	1a89      	subs	r1, r1, r2
 8008d16:	9105      	str	r1, [sp, #20]
 8008d18:	9906      	ldr	r1, [sp, #24]
 8008d1a:	eba8 0802 	sub.w	r8, r8, r2
 8008d1e:	1a8a      	subs	r2, r1, r2
 8008d20:	9206      	str	r2, [sp, #24]
 8008d22:	b303      	cbz	r3, 8008d66 <_dtoa_r+0x6e6>
 8008d24:	9a08      	ldr	r2, [sp, #32]
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	f000 80a6 	beq.w	8008e78 <_dtoa_r+0x7f8>
 8008d2c:	2c00      	cmp	r4, #0
 8008d2e:	dd13      	ble.n	8008d58 <_dtoa_r+0x6d8>
 8008d30:	4639      	mov	r1, r7
 8008d32:	4622      	mov	r2, r4
 8008d34:	4630      	mov	r0, r6
 8008d36:	930c      	str	r3, [sp, #48]	; 0x30
 8008d38:	f000 fbf6 	bl	8009528 <__pow5mult>
 8008d3c:	462a      	mov	r2, r5
 8008d3e:	4601      	mov	r1, r0
 8008d40:	4607      	mov	r7, r0
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 fb4a 	bl	80093dc <__multiply>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	900a      	str	r0, [sp, #40]	; 0x28
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f000 fa73 	bl	8009238 <_Bfree>
 8008d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d56:	4615      	mov	r5, r2
 8008d58:	1b1a      	subs	r2, r3, r4
 8008d5a:	d004      	beq.n	8008d66 <_dtoa_r+0x6e6>
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 fbe2 	bl	8009528 <__pow5mult>
 8008d64:	4605      	mov	r5, r0
 8008d66:	2101      	movs	r1, #1
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f000 fb21 	bl	80093b0 <__i2b>
 8008d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	f340 8082 	ble.w	8008e7c <_dtoa_r+0x7fc>
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 fbd3 	bl	8009528 <__pow5mult>
 8008d82:	9b07      	ldr	r3, [sp, #28]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	4604      	mov	r4, r0
 8008d88:	dd7b      	ble.n	8008e82 <_dtoa_r+0x802>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d8e:	6922      	ldr	r2, [r4, #16]
 8008d90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d94:	6910      	ldr	r0, [r2, #16]
 8008d96:	f000 fabb 	bl	8009310 <__hi0bits>
 8008d9a:	f1c0 0020 	rsb	r0, r0, #32
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	4418      	add	r0, r3
 8008da2:	f010 001f 	ands.w	r0, r0, #31
 8008da6:	f000 808d 	beq.w	8008ec4 <_dtoa_r+0x844>
 8008daa:	f1c0 0220 	rsb	r2, r0, #32
 8008dae:	2a04      	cmp	r2, #4
 8008db0:	f340 8086 	ble.w	8008ec0 <_dtoa_r+0x840>
 8008db4:	f1c0 001c 	rsb	r0, r0, #28
 8008db8:	9b05      	ldr	r3, [sp, #20]
 8008dba:	4403      	add	r3, r0
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	9b06      	ldr	r3, [sp, #24]
 8008dc0:	4403      	add	r3, r0
 8008dc2:	4480      	add	r8, r0
 8008dc4:	9306      	str	r3, [sp, #24]
 8008dc6:	9b05      	ldr	r3, [sp, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dd05      	ble.n	8008dd8 <_dtoa_r+0x758>
 8008dcc:	4629      	mov	r1, r5
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 fc03 	bl	80095dc <__lshift>
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dd05      	ble.n	8008dea <_dtoa_r+0x76a>
 8008dde:	4621      	mov	r1, r4
 8008de0:	461a      	mov	r2, r3
 8008de2:	4630      	mov	r0, r6
 8008de4:	f000 fbfa 	bl	80095dc <__lshift>
 8008de8:	4604      	mov	r4, r0
 8008dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d06b      	beq.n	8008ec8 <_dtoa_r+0x848>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 fc5e 	bl	80096b4 <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	da65      	bge.n	8008ec8 <_dtoa_r+0x848>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4629      	mov	r1, r5
 8008e00:	220a      	movs	r2, #10
 8008e02:	4630      	mov	r0, r6
 8008e04:	f000 fa3a 	bl	800927c <__multadd>
 8008e08:	9b08      	ldr	r3, [sp, #32]
 8008e0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e0e:	4605      	mov	r5, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8192 	beq.w	800913a <_dtoa_r+0xaba>
 8008e16:	4639      	mov	r1, r7
 8008e18:	2300      	movs	r3, #0
 8008e1a:	220a      	movs	r2, #10
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 fa2d 	bl	800927c <__multadd>
 8008e22:	f1ba 0f00 	cmp.w	sl, #0
 8008e26:	4607      	mov	r7, r0
 8008e28:	f300 808e 	bgt.w	8008f48 <_dtoa_r+0x8c8>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	dc51      	bgt.n	8008ed6 <_dtoa_r+0x856>
 8008e32:	e089      	b.n	8008f48 <_dtoa_r+0x8c8>
 8008e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e3a:	e751      	b.n	8008ce0 <_dtoa_r+0x660>
 8008e3c:	f109 34ff 	add.w	r4, r9, #4294967295
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	bfbf      	itttt	lt
 8008e44:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008e46:	1ae3      	sublt	r3, r4, r3
 8008e48:	18d2      	addlt	r2, r2, r3
 8008e4a:	4613      	movlt	r3, r2
 8008e4c:	bfb7      	itett	lt
 8008e4e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e50:	1b1c      	subge	r4, r3, r4
 8008e52:	4623      	movlt	r3, r4
 8008e54:	2400      	movlt	r4, #0
 8008e56:	f1b9 0f00 	cmp.w	r9, #0
 8008e5a:	bfb5      	itete	lt
 8008e5c:	9a05      	ldrlt	r2, [sp, #20]
 8008e5e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008e62:	eba2 0809 	sublt.w	r8, r2, r9
 8008e66:	464a      	movge	r2, r9
 8008e68:	bfb8      	it	lt
 8008e6a:	2200      	movlt	r2, #0
 8008e6c:	e73b      	b.n	8008ce6 <_dtoa_r+0x666>
 8008e6e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008e72:	9f08      	ldr	r7, [sp, #32]
 8008e74:	461c      	mov	r4, r3
 8008e76:	e743      	b.n	8008d00 <_dtoa_r+0x680>
 8008e78:	461a      	mov	r2, r3
 8008e7a:	e76f      	b.n	8008d5c <_dtoa_r+0x6dc>
 8008e7c:	9b07      	ldr	r3, [sp, #28]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	dc18      	bgt.n	8008eb4 <_dtoa_r+0x834>
 8008e82:	9b02      	ldr	r3, [sp, #8]
 8008e84:	b9b3      	cbnz	r3, 8008eb4 <_dtoa_r+0x834>
 8008e86:	9b03      	ldr	r3, [sp, #12]
 8008e88:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008e8c:	b9a2      	cbnz	r2, 8008eb8 <_dtoa_r+0x838>
 8008e8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e92:	0d12      	lsrs	r2, r2, #20
 8008e94:	0512      	lsls	r2, r2, #20
 8008e96:	b18a      	cbz	r2, 8008ebc <_dtoa_r+0x83c>
 8008e98:	9b05      	ldr	r3, [sp, #20]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	9306      	str	r3, [sp, #24]
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f47f af6f 	bne.w	8008d8e <_dtoa_r+0x70e>
 8008eb0:	2001      	movs	r0, #1
 8008eb2:	e774      	b.n	8008d9e <_dtoa_r+0x71e>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e7f6      	b.n	8008ea6 <_dtoa_r+0x826>
 8008eb8:	9b02      	ldr	r3, [sp, #8]
 8008eba:	e7f4      	b.n	8008ea6 <_dtoa_r+0x826>
 8008ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8008ebe:	e7f3      	b.n	8008ea8 <_dtoa_r+0x828>
 8008ec0:	d081      	beq.n	8008dc6 <_dtoa_r+0x746>
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	301c      	adds	r0, #28
 8008ec6:	e777      	b.n	8008db8 <_dtoa_r+0x738>
 8008ec8:	f1b9 0f00 	cmp.w	r9, #0
 8008ecc:	dc37      	bgt.n	8008f3e <_dtoa_r+0x8be>
 8008ece:	9b07      	ldr	r3, [sp, #28]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	dd34      	ble.n	8008f3e <_dtoa_r+0x8be>
 8008ed4:	46ca      	mov	sl, r9
 8008ed6:	f1ba 0f00 	cmp.w	sl, #0
 8008eda:	d10d      	bne.n	8008ef8 <_dtoa_r+0x878>
 8008edc:	4621      	mov	r1, r4
 8008ede:	4653      	mov	r3, sl
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f000 f9ca 	bl	800927c <__multadd>
 8008ee8:	4601      	mov	r1, r0
 8008eea:	4604      	mov	r4, r0
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 fbe1 	bl	80096b4 <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f73f adde 	bgt.w	8008ab4 <_dtoa_r+0x434>
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	f8dd 8000 	ldr.w	r8, [sp]
 8008efe:	ea6f 0b03 	mvn.w	fp, r3
 8008f02:	f04f 0900 	mov.w	r9, #0
 8008f06:	4621      	mov	r1, r4
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f000 f995 	bl	8009238 <_Bfree>
 8008f0e:	2f00      	cmp	r7, #0
 8008f10:	f43f aea7 	beq.w	8008c62 <_dtoa_r+0x5e2>
 8008f14:	f1b9 0f00 	cmp.w	r9, #0
 8008f18:	d005      	beq.n	8008f26 <_dtoa_r+0x8a6>
 8008f1a:	45b9      	cmp	r9, r7
 8008f1c:	d003      	beq.n	8008f26 <_dtoa_r+0x8a6>
 8008f1e:	4649      	mov	r1, r9
 8008f20:	4630      	mov	r0, r6
 8008f22:	f000 f989 	bl	8009238 <_Bfree>
 8008f26:	4639      	mov	r1, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f000 f985 	bl	8009238 <_Bfree>
 8008f2e:	e698      	b.n	8008c62 <_dtoa_r+0x5e2>
 8008f30:	2400      	movs	r4, #0
 8008f32:	4627      	mov	r7, r4
 8008f34:	e7e0      	b.n	8008ef8 <_dtoa_r+0x878>
 8008f36:	46bb      	mov	fp, r7
 8008f38:	4604      	mov	r4, r0
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	e5ba      	b.n	8008ab4 <_dtoa_r+0x434>
 8008f3e:	9b08      	ldr	r3, [sp, #32]
 8008f40:	46ca      	mov	sl, r9
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 8100 	beq.w	8009148 <_dtoa_r+0xac8>
 8008f48:	f1b8 0f00 	cmp.w	r8, #0
 8008f4c:	dd05      	ble.n	8008f5a <_dtoa_r+0x8da>
 8008f4e:	4639      	mov	r1, r7
 8008f50:	4642      	mov	r2, r8
 8008f52:	4630      	mov	r0, r6
 8008f54:	f000 fb42 	bl	80095dc <__lshift>
 8008f58:	4607      	mov	r7, r0
 8008f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d05d      	beq.n	800901c <_dtoa_r+0x99c>
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4630      	mov	r0, r6
 8008f64:	f000 f928 	bl	80091b8 <_Balloc>
 8008f68:	4680      	mov	r8, r0
 8008f6a:	b928      	cbnz	r0, 8008f78 <_dtoa_r+0x8f8>
 8008f6c:	4b82      	ldr	r3, [pc, #520]	; (8009178 <_dtoa_r+0xaf8>)
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f74:	f7ff bb9a 	b.w	80086ac <_dtoa_r+0x2c>
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	3202      	adds	r2, #2
 8008f7c:	0092      	lsls	r2, r2, #2
 8008f7e:	f107 010c 	add.w	r1, r7, #12
 8008f82:	300c      	adds	r0, #12
 8008f84:	f000 f90a 	bl	800919c <memcpy>
 8008f88:	2201      	movs	r2, #1
 8008f8a:	4641      	mov	r1, r8
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f000 fb25 	bl	80095dc <__lshift>
 8008f92:	9b00      	ldr	r3, [sp, #0]
 8008f94:	3301      	adds	r3, #1
 8008f96:	9305      	str	r3, [sp, #20]
 8008f98:	9b00      	ldr	r3, [sp, #0]
 8008f9a:	4453      	add	r3, sl
 8008f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9e:	9b02      	ldr	r3, [sp, #8]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	46b9      	mov	r9, r7
 8008fa6:	9308      	str	r3, [sp, #32]
 8008fa8:	4607      	mov	r7, r0
 8008faa:	9b05      	ldr	r3, [sp, #20]
 8008fac:	4621      	mov	r1, r4
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	f7ff fad6 	bl	8008564 <quorem>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	3330      	adds	r3, #48	; 0x30
 8008fbc:	9006      	str	r0, [sp, #24]
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc4:	f000 fb76 	bl	80096b4 <__mcmp>
 8008fc8:	463a      	mov	r2, r7
 8008fca:	4682      	mov	sl, r0
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f000 fb8c 	bl	80096ec <__mdiff>
 8008fd4:	68c2      	ldr	r2, [r0, #12]
 8008fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd8:	4680      	mov	r8, r0
 8008fda:	bb0a      	cbnz	r2, 8009020 <_dtoa_r+0x9a0>
 8008fdc:	4601      	mov	r1, r0
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 fb68 	bl	80096b4 <__mcmp>
 8008fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4641      	mov	r1, r8
 8008fea:	4630      	mov	r0, r6
 8008fec:	920e      	str	r2, [sp, #56]	; 0x38
 8008fee:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff0:	f000 f922 	bl	8009238 <_Bfree>
 8008ff4:	9b07      	ldr	r3, [sp, #28]
 8008ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008ffc:	ea43 0102 	orr.w	r1, r3, r2
 8009000:	9b08      	ldr	r3, [sp, #32]
 8009002:	430b      	orrs	r3, r1
 8009004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009006:	d10d      	bne.n	8009024 <_dtoa_r+0x9a4>
 8009008:	2b39      	cmp	r3, #57	; 0x39
 800900a:	d029      	beq.n	8009060 <_dtoa_r+0x9e0>
 800900c:	f1ba 0f00 	cmp.w	sl, #0
 8009010:	dd01      	ble.n	8009016 <_dtoa_r+0x996>
 8009012:	9b06      	ldr	r3, [sp, #24]
 8009014:	3331      	adds	r3, #49	; 0x31
 8009016:	9a02      	ldr	r2, [sp, #8]
 8009018:	7013      	strb	r3, [r2, #0]
 800901a:	e774      	b.n	8008f06 <_dtoa_r+0x886>
 800901c:	4638      	mov	r0, r7
 800901e:	e7b8      	b.n	8008f92 <_dtoa_r+0x912>
 8009020:	2201      	movs	r2, #1
 8009022:	e7e1      	b.n	8008fe8 <_dtoa_r+0x968>
 8009024:	f1ba 0f00 	cmp.w	sl, #0
 8009028:	db06      	blt.n	8009038 <_dtoa_r+0x9b8>
 800902a:	9907      	ldr	r1, [sp, #28]
 800902c:	ea41 0a0a 	orr.w	sl, r1, sl
 8009030:	9908      	ldr	r1, [sp, #32]
 8009032:	ea5a 0101 	orrs.w	r1, sl, r1
 8009036:	d120      	bne.n	800907a <_dtoa_r+0x9fa>
 8009038:	2a00      	cmp	r2, #0
 800903a:	ddec      	ble.n	8009016 <_dtoa_r+0x996>
 800903c:	4629      	mov	r1, r5
 800903e:	2201      	movs	r2, #1
 8009040:	4630      	mov	r0, r6
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	f000 faca 	bl	80095dc <__lshift>
 8009048:	4621      	mov	r1, r4
 800904a:	4605      	mov	r5, r0
 800904c:	f000 fb32 	bl	80096b4 <__mcmp>
 8009050:	2800      	cmp	r0, #0
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	dc02      	bgt.n	800905c <_dtoa_r+0x9dc>
 8009056:	d1de      	bne.n	8009016 <_dtoa_r+0x996>
 8009058:	07da      	lsls	r2, r3, #31
 800905a:	d5dc      	bpl.n	8009016 <_dtoa_r+0x996>
 800905c:	2b39      	cmp	r3, #57	; 0x39
 800905e:	d1d8      	bne.n	8009012 <_dtoa_r+0x992>
 8009060:	9a02      	ldr	r2, [sp, #8]
 8009062:	2339      	movs	r3, #57	; 0x39
 8009064:	7013      	strb	r3, [r2, #0]
 8009066:	4643      	mov	r3, r8
 8009068:	4698      	mov	r8, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009070:	2a39      	cmp	r2, #57	; 0x39
 8009072:	d051      	beq.n	8009118 <_dtoa_r+0xa98>
 8009074:	3201      	adds	r2, #1
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	e745      	b.n	8008f06 <_dtoa_r+0x886>
 800907a:	2a00      	cmp	r2, #0
 800907c:	dd03      	ble.n	8009086 <_dtoa_r+0xa06>
 800907e:	2b39      	cmp	r3, #57	; 0x39
 8009080:	d0ee      	beq.n	8009060 <_dtoa_r+0x9e0>
 8009082:	3301      	adds	r3, #1
 8009084:	e7c7      	b.n	8009016 <_dtoa_r+0x996>
 8009086:	9a05      	ldr	r2, [sp, #20]
 8009088:	9909      	ldr	r1, [sp, #36]	; 0x24
 800908a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800908e:	428a      	cmp	r2, r1
 8009090:	d02b      	beq.n	80090ea <_dtoa_r+0xa6a>
 8009092:	4629      	mov	r1, r5
 8009094:	2300      	movs	r3, #0
 8009096:	220a      	movs	r2, #10
 8009098:	4630      	mov	r0, r6
 800909a:	f000 f8ef 	bl	800927c <__multadd>
 800909e:	45b9      	cmp	r9, r7
 80090a0:	4605      	mov	r5, r0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	f04f 020a 	mov.w	r2, #10
 80090aa:	4649      	mov	r1, r9
 80090ac:	4630      	mov	r0, r6
 80090ae:	d107      	bne.n	80090c0 <_dtoa_r+0xa40>
 80090b0:	f000 f8e4 	bl	800927c <__multadd>
 80090b4:	4681      	mov	r9, r0
 80090b6:	4607      	mov	r7, r0
 80090b8:	9b05      	ldr	r3, [sp, #20]
 80090ba:	3301      	adds	r3, #1
 80090bc:	9305      	str	r3, [sp, #20]
 80090be:	e774      	b.n	8008faa <_dtoa_r+0x92a>
 80090c0:	f000 f8dc 	bl	800927c <__multadd>
 80090c4:	4639      	mov	r1, r7
 80090c6:	4681      	mov	r9, r0
 80090c8:	2300      	movs	r3, #0
 80090ca:	220a      	movs	r2, #10
 80090cc:	4630      	mov	r0, r6
 80090ce:	f000 f8d5 	bl	800927c <__multadd>
 80090d2:	4607      	mov	r7, r0
 80090d4:	e7f0      	b.n	80090b8 <_dtoa_r+0xa38>
 80090d6:	f1ba 0f00 	cmp.w	sl, #0
 80090da:	9a00      	ldr	r2, [sp, #0]
 80090dc:	bfcc      	ite	gt
 80090de:	46d0      	movgt	r8, sl
 80090e0:	f04f 0801 	movle.w	r8, #1
 80090e4:	4490      	add	r8, r2
 80090e6:	f04f 0900 	mov.w	r9, #0
 80090ea:	4629      	mov	r1, r5
 80090ec:	2201      	movs	r2, #1
 80090ee:	4630      	mov	r0, r6
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	f000 fa73 	bl	80095dc <__lshift>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4605      	mov	r5, r0
 80090fa:	f000 fadb 	bl	80096b4 <__mcmp>
 80090fe:	2800      	cmp	r0, #0
 8009100:	dcb1      	bgt.n	8009066 <_dtoa_r+0x9e6>
 8009102:	d102      	bne.n	800910a <_dtoa_r+0xa8a>
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	07db      	lsls	r3, r3, #31
 8009108:	d4ad      	bmi.n	8009066 <_dtoa_r+0x9e6>
 800910a:	4643      	mov	r3, r8
 800910c:	4698      	mov	r8, r3
 800910e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009112:	2a30      	cmp	r2, #48	; 0x30
 8009114:	d0fa      	beq.n	800910c <_dtoa_r+0xa8c>
 8009116:	e6f6      	b.n	8008f06 <_dtoa_r+0x886>
 8009118:	9a00      	ldr	r2, [sp, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d1a4      	bne.n	8009068 <_dtoa_r+0x9e8>
 800911e:	f10b 0b01 	add.w	fp, fp, #1
 8009122:	2331      	movs	r3, #49	; 0x31
 8009124:	e778      	b.n	8009018 <_dtoa_r+0x998>
 8009126:	4b15      	ldr	r3, [pc, #84]	; (800917c <_dtoa_r+0xafc>)
 8009128:	f7ff bb12 	b.w	8008750 <_dtoa_r+0xd0>
 800912c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800912e:	2b00      	cmp	r3, #0
 8009130:	f47f aaee 	bne.w	8008710 <_dtoa_r+0x90>
 8009134:	4b12      	ldr	r3, [pc, #72]	; (8009180 <_dtoa_r+0xb00>)
 8009136:	f7ff bb0b 	b.w	8008750 <_dtoa_r+0xd0>
 800913a:	f1ba 0f00 	cmp.w	sl, #0
 800913e:	dc03      	bgt.n	8009148 <_dtoa_r+0xac8>
 8009140:	9b07      	ldr	r3, [sp, #28]
 8009142:	2b02      	cmp	r3, #2
 8009144:	f73f aec7 	bgt.w	8008ed6 <_dtoa_r+0x856>
 8009148:	f8dd 8000 	ldr.w	r8, [sp]
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f7ff fa08 	bl	8008564 <quorem>
 8009154:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009158:	f808 3b01 	strb.w	r3, [r8], #1
 800915c:	9a00      	ldr	r2, [sp, #0]
 800915e:	eba8 0202 	sub.w	r2, r8, r2
 8009162:	4592      	cmp	sl, r2
 8009164:	ddb7      	ble.n	80090d6 <_dtoa_r+0xa56>
 8009166:	4629      	mov	r1, r5
 8009168:	2300      	movs	r3, #0
 800916a:	220a      	movs	r2, #10
 800916c:	4630      	mov	r0, r6
 800916e:	f000 f885 	bl	800927c <__multadd>
 8009172:	4605      	mov	r5, r0
 8009174:	e7ea      	b.n	800914c <_dtoa_r+0xacc>
 8009176:	bf00      	nop
 8009178:	0800ab18 	.word	0x0800ab18
 800917c:	0800a970 	.word	0x0800a970
 8009180:	0800aa95 	.word	0x0800aa95

08009184 <_localeconv_r>:
 8009184:	4800      	ldr	r0, [pc, #0]	; (8009188 <_localeconv_r+0x4>)
 8009186:	4770      	bx	lr
 8009188:	2000017c 	.word	0x2000017c

0800918c <malloc>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <malloc+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f000 bbef 	b.w	8009974 <_malloc_r>
 8009196:	bf00      	nop
 8009198:	20000028 	.word	0x20000028

0800919c <memcpy>:
 800919c:	440a      	add	r2, r1
 800919e:	4291      	cmp	r1, r2
 80091a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a4:	d100      	bne.n	80091a8 <memcpy+0xc>
 80091a6:	4770      	bx	lr
 80091a8:	b510      	push	{r4, lr}
 80091aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b2:	4291      	cmp	r1, r2
 80091b4:	d1f9      	bne.n	80091aa <memcpy+0xe>
 80091b6:	bd10      	pop	{r4, pc}

080091b8 <_Balloc>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091bc:	4604      	mov	r4, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	b976      	cbnz	r6, 80091e0 <_Balloc+0x28>
 80091c2:	2010      	movs	r0, #16
 80091c4:	f7ff ffe2 	bl	800918c <malloc>
 80091c8:	4602      	mov	r2, r0
 80091ca:	6260      	str	r0, [r4, #36]	; 0x24
 80091cc:	b920      	cbnz	r0, 80091d8 <_Balloc+0x20>
 80091ce:	4b18      	ldr	r3, [pc, #96]	; (8009230 <_Balloc+0x78>)
 80091d0:	4818      	ldr	r0, [pc, #96]	; (8009234 <_Balloc+0x7c>)
 80091d2:	2166      	movs	r1, #102	; 0x66
 80091d4:	f000 fd94 	bl	8009d00 <__assert_func>
 80091d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091dc:	6006      	str	r6, [r0, #0]
 80091de:	60c6      	str	r6, [r0, #12]
 80091e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091e2:	68f3      	ldr	r3, [r6, #12]
 80091e4:	b183      	cbz	r3, 8009208 <_Balloc+0x50>
 80091e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091ee:	b9b8      	cbnz	r0, 8009220 <_Balloc+0x68>
 80091f0:	2101      	movs	r1, #1
 80091f2:	fa01 f605 	lsl.w	r6, r1, r5
 80091f6:	1d72      	adds	r2, r6, #5
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fb5a 	bl	80098b4 <_calloc_r>
 8009200:	b160      	cbz	r0, 800921c <_Balloc+0x64>
 8009202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009206:	e00e      	b.n	8009226 <_Balloc+0x6e>
 8009208:	2221      	movs	r2, #33	; 0x21
 800920a:	2104      	movs	r1, #4
 800920c:	4620      	mov	r0, r4
 800920e:	f000 fb51 	bl	80098b4 <_calloc_r>
 8009212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009214:	60f0      	str	r0, [r6, #12]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <_Balloc+0x2e>
 800921c:	2000      	movs	r0, #0
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	6802      	ldr	r2, [r0, #0]
 8009222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009226:	2300      	movs	r3, #0
 8009228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800922c:	e7f7      	b.n	800921e <_Balloc+0x66>
 800922e:	bf00      	nop
 8009230:	0800aaa2 	.word	0x0800aaa2
 8009234:	0800ab29 	.word	0x0800ab29

08009238 <_Bfree>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800923c:	4605      	mov	r5, r0
 800923e:	460c      	mov	r4, r1
 8009240:	b976      	cbnz	r6, 8009260 <_Bfree+0x28>
 8009242:	2010      	movs	r0, #16
 8009244:	f7ff ffa2 	bl	800918c <malloc>
 8009248:	4602      	mov	r2, r0
 800924a:	6268      	str	r0, [r5, #36]	; 0x24
 800924c:	b920      	cbnz	r0, 8009258 <_Bfree+0x20>
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <_Bfree+0x3c>)
 8009250:	4809      	ldr	r0, [pc, #36]	; (8009278 <_Bfree+0x40>)
 8009252:	218a      	movs	r1, #138	; 0x8a
 8009254:	f000 fd54 	bl	8009d00 <__assert_func>
 8009258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800925c:	6006      	str	r6, [r0, #0]
 800925e:	60c6      	str	r6, [r0, #12]
 8009260:	b13c      	cbz	r4, 8009272 <_Bfree+0x3a>
 8009262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009264:	6862      	ldr	r2, [r4, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800926c:	6021      	str	r1, [r4, #0]
 800926e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	0800aaa2 	.word	0x0800aaa2
 8009278:	0800ab29 	.word	0x0800ab29

0800927c <__multadd>:
 800927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009280:	690e      	ldr	r6, [r1, #16]
 8009282:	4607      	mov	r7, r0
 8009284:	4698      	mov	r8, r3
 8009286:	460c      	mov	r4, r1
 8009288:	f101 0014 	add.w	r0, r1, #20
 800928c:	2300      	movs	r3, #0
 800928e:	6805      	ldr	r5, [r0, #0]
 8009290:	b2a9      	uxth	r1, r5
 8009292:	fb02 8101 	mla	r1, r2, r1, r8
 8009296:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800929a:	0c2d      	lsrs	r5, r5, #16
 800929c:	fb02 c505 	mla	r5, r2, r5, ip
 80092a0:	b289      	uxth	r1, r1
 80092a2:	3301      	adds	r3, #1
 80092a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80092a8:	429e      	cmp	r6, r3
 80092aa:	f840 1b04 	str.w	r1, [r0], #4
 80092ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80092b2:	dcec      	bgt.n	800928e <__multadd+0x12>
 80092b4:	f1b8 0f00 	cmp.w	r8, #0
 80092b8:	d022      	beq.n	8009300 <__multadd+0x84>
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	42b3      	cmp	r3, r6
 80092be:	dc19      	bgt.n	80092f4 <__multadd+0x78>
 80092c0:	6861      	ldr	r1, [r4, #4]
 80092c2:	4638      	mov	r0, r7
 80092c4:	3101      	adds	r1, #1
 80092c6:	f7ff ff77 	bl	80091b8 <_Balloc>
 80092ca:	4605      	mov	r5, r0
 80092cc:	b928      	cbnz	r0, 80092da <__multadd+0x5e>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <__multadd+0x8c>)
 80092d2:	480e      	ldr	r0, [pc, #56]	; (800930c <__multadd+0x90>)
 80092d4:	21b5      	movs	r1, #181	; 0xb5
 80092d6:	f000 fd13 	bl	8009d00 <__assert_func>
 80092da:	6922      	ldr	r2, [r4, #16]
 80092dc:	3202      	adds	r2, #2
 80092de:	f104 010c 	add.w	r1, r4, #12
 80092e2:	0092      	lsls	r2, r2, #2
 80092e4:	300c      	adds	r0, #12
 80092e6:	f7ff ff59 	bl	800919c <memcpy>
 80092ea:	4621      	mov	r1, r4
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff ffa3 	bl	8009238 <_Bfree>
 80092f2:	462c      	mov	r4, r5
 80092f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80092f8:	3601      	adds	r6, #1
 80092fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80092fe:	6126      	str	r6, [r4, #16]
 8009300:	4620      	mov	r0, r4
 8009302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009306:	bf00      	nop
 8009308:	0800ab18 	.word	0x0800ab18
 800930c:	0800ab29 	.word	0x0800ab29

08009310 <__hi0bits>:
 8009310:	0c03      	lsrs	r3, r0, #16
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	b9d3      	cbnz	r3, 800934c <__hi0bits+0x3c>
 8009316:	0400      	lsls	r0, r0, #16
 8009318:	2310      	movs	r3, #16
 800931a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800931e:	bf04      	itt	eq
 8009320:	0200      	lsleq	r0, r0, #8
 8009322:	3308      	addeq	r3, #8
 8009324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009328:	bf04      	itt	eq
 800932a:	0100      	lsleq	r0, r0, #4
 800932c:	3304      	addeq	r3, #4
 800932e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009332:	bf04      	itt	eq
 8009334:	0080      	lsleq	r0, r0, #2
 8009336:	3302      	addeq	r3, #2
 8009338:	2800      	cmp	r0, #0
 800933a:	db05      	blt.n	8009348 <__hi0bits+0x38>
 800933c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009340:	f103 0301 	add.w	r3, r3, #1
 8009344:	bf08      	it	eq
 8009346:	2320      	moveq	r3, #32
 8009348:	4618      	mov	r0, r3
 800934a:	4770      	bx	lr
 800934c:	2300      	movs	r3, #0
 800934e:	e7e4      	b.n	800931a <__hi0bits+0xa>

08009350 <__lo0bits>:
 8009350:	6803      	ldr	r3, [r0, #0]
 8009352:	f013 0207 	ands.w	r2, r3, #7
 8009356:	4601      	mov	r1, r0
 8009358:	d00b      	beq.n	8009372 <__lo0bits+0x22>
 800935a:	07da      	lsls	r2, r3, #31
 800935c:	d424      	bmi.n	80093a8 <__lo0bits+0x58>
 800935e:	0798      	lsls	r0, r3, #30
 8009360:	bf49      	itett	mi
 8009362:	085b      	lsrmi	r3, r3, #1
 8009364:	089b      	lsrpl	r3, r3, #2
 8009366:	2001      	movmi	r0, #1
 8009368:	600b      	strmi	r3, [r1, #0]
 800936a:	bf5c      	itt	pl
 800936c:	600b      	strpl	r3, [r1, #0]
 800936e:	2002      	movpl	r0, #2
 8009370:	4770      	bx	lr
 8009372:	b298      	uxth	r0, r3
 8009374:	b9b0      	cbnz	r0, 80093a4 <__lo0bits+0x54>
 8009376:	0c1b      	lsrs	r3, r3, #16
 8009378:	2010      	movs	r0, #16
 800937a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800937e:	bf04      	itt	eq
 8009380:	0a1b      	lsreq	r3, r3, #8
 8009382:	3008      	addeq	r0, #8
 8009384:	071a      	lsls	r2, r3, #28
 8009386:	bf04      	itt	eq
 8009388:	091b      	lsreq	r3, r3, #4
 800938a:	3004      	addeq	r0, #4
 800938c:	079a      	lsls	r2, r3, #30
 800938e:	bf04      	itt	eq
 8009390:	089b      	lsreq	r3, r3, #2
 8009392:	3002      	addeq	r0, #2
 8009394:	07da      	lsls	r2, r3, #31
 8009396:	d403      	bmi.n	80093a0 <__lo0bits+0x50>
 8009398:	085b      	lsrs	r3, r3, #1
 800939a:	f100 0001 	add.w	r0, r0, #1
 800939e:	d005      	beq.n	80093ac <__lo0bits+0x5c>
 80093a0:	600b      	str	r3, [r1, #0]
 80093a2:	4770      	bx	lr
 80093a4:	4610      	mov	r0, r2
 80093a6:	e7e8      	b.n	800937a <__lo0bits+0x2a>
 80093a8:	2000      	movs	r0, #0
 80093aa:	4770      	bx	lr
 80093ac:	2020      	movs	r0, #32
 80093ae:	4770      	bx	lr

080093b0 <__i2b>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	460c      	mov	r4, r1
 80093b4:	2101      	movs	r1, #1
 80093b6:	f7ff feff 	bl	80091b8 <_Balloc>
 80093ba:	4602      	mov	r2, r0
 80093bc:	b928      	cbnz	r0, 80093ca <__i2b+0x1a>
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <__i2b+0x24>)
 80093c0:	4805      	ldr	r0, [pc, #20]	; (80093d8 <__i2b+0x28>)
 80093c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093c6:	f000 fc9b 	bl	8009d00 <__assert_func>
 80093ca:	2301      	movs	r3, #1
 80093cc:	6144      	str	r4, [r0, #20]
 80093ce:	6103      	str	r3, [r0, #16]
 80093d0:	bd10      	pop	{r4, pc}
 80093d2:	bf00      	nop
 80093d4:	0800ab18 	.word	0x0800ab18
 80093d8:	0800ab29 	.word	0x0800ab29

080093dc <__multiply>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	4614      	mov	r4, r2
 80093e2:	690a      	ldr	r2, [r1, #16]
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	bfb8      	it	lt
 80093ea:	460b      	movlt	r3, r1
 80093ec:	460d      	mov	r5, r1
 80093ee:	bfbc      	itt	lt
 80093f0:	4625      	movlt	r5, r4
 80093f2:	461c      	movlt	r4, r3
 80093f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80093f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80093fc:	68ab      	ldr	r3, [r5, #8]
 80093fe:	6869      	ldr	r1, [r5, #4]
 8009400:	eb0a 0709 	add.w	r7, sl, r9
 8009404:	42bb      	cmp	r3, r7
 8009406:	b085      	sub	sp, #20
 8009408:	bfb8      	it	lt
 800940a:	3101      	addlt	r1, #1
 800940c:	f7ff fed4 	bl	80091b8 <_Balloc>
 8009410:	b930      	cbnz	r0, 8009420 <__multiply+0x44>
 8009412:	4602      	mov	r2, r0
 8009414:	4b42      	ldr	r3, [pc, #264]	; (8009520 <__multiply+0x144>)
 8009416:	4843      	ldr	r0, [pc, #268]	; (8009524 <__multiply+0x148>)
 8009418:	f240 115d 	movw	r1, #349	; 0x15d
 800941c:	f000 fc70 	bl	8009d00 <__assert_func>
 8009420:	f100 0614 	add.w	r6, r0, #20
 8009424:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009428:	4633      	mov	r3, r6
 800942a:	2200      	movs	r2, #0
 800942c:	4543      	cmp	r3, r8
 800942e:	d31e      	bcc.n	800946e <__multiply+0x92>
 8009430:	f105 0c14 	add.w	ip, r5, #20
 8009434:	f104 0314 	add.w	r3, r4, #20
 8009438:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800943c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009440:	9202      	str	r2, [sp, #8]
 8009442:	ebac 0205 	sub.w	r2, ip, r5
 8009446:	3a15      	subs	r2, #21
 8009448:	f022 0203 	bic.w	r2, r2, #3
 800944c:	3204      	adds	r2, #4
 800944e:	f105 0115 	add.w	r1, r5, #21
 8009452:	458c      	cmp	ip, r1
 8009454:	bf38      	it	cc
 8009456:	2204      	movcc	r2, #4
 8009458:	9201      	str	r2, [sp, #4]
 800945a:	9a02      	ldr	r2, [sp, #8]
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	429a      	cmp	r2, r3
 8009460:	d808      	bhi.n	8009474 <__multiply+0x98>
 8009462:	2f00      	cmp	r7, #0
 8009464:	dc55      	bgt.n	8009512 <__multiply+0x136>
 8009466:	6107      	str	r7, [r0, #16]
 8009468:	b005      	add	sp, #20
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946e:	f843 2b04 	str.w	r2, [r3], #4
 8009472:	e7db      	b.n	800942c <__multiply+0x50>
 8009474:	f8b3 a000 	ldrh.w	sl, [r3]
 8009478:	f1ba 0f00 	cmp.w	sl, #0
 800947c:	d020      	beq.n	80094c0 <__multiply+0xe4>
 800947e:	f105 0e14 	add.w	lr, r5, #20
 8009482:	46b1      	mov	r9, r6
 8009484:	2200      	movs	r2, #0
 8009486:	f85e 4b04 	ldr.w	r4, [lr], #4
 800948a:	f8d9 b000 	ldr.w	fp, [r9]
 800948e:	b2a1      	uxth	r1, r4
 8009490:	fa1f fb8b 	uxth.w	fp, fp
 8009494:	fb0a b101 	mla	r1, sl, r1, fp
 8009498:	4411      	add	r1, r2
 800949a:	f8d9 2000 	ldr.w	r2, [r9]
 800949e:	0c24      	lsrs	r4, r4, #16
 80094a0:	0c12      	lsrs	r2, r2, #16
 80094a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80094a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80094aa:	b289      	uxth	r1, r1
 80094ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094b0:	45f4      	cmp	ip, lr
 80094b2:	f849 1b04 	str.w	r1, [r9], #4
 80094b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80094ba:	d8e4      	bhi.n	8009486 <__multiply+0xaa>
 80094bc:	9901      	ldr	r1, [sp, #4]
 80094be:	5072      	str	r2, [r6, r1]
 80094c0:	9a03      	ldr	r2, [sp, #12]
 80094c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094c6:	3304      	adds	r3, #4
 80094c8:	f1b9 0f00 	cmp.w	r9, #0
 80094cc:	d01f      	beq.n	800950e <__multiply+0x132>
 80094ce:	6834      	ldr	r4, [r6, #0]
 80094d0:	f105 0114 	add.w	r1, r5, #20
 80094d4:	46b6      	mov	lr, r6
 80094d6:	f04f 0a00 	mov.w	sl, #0
 80094da:	880a      	ldrh	r2, [r1, #0]
 80094dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80094e0:	fb09 b202 	mla	r2, r9, r2, fp
 80094e4:	4492      	add	sl, r2
 80094e6:	b2a4      	uxth	r4, r4
 80094e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80094ec:	f84e 4b04 	str.w	r4, [lr], #4
 80094f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80094f4:	f8be 2000 	ldrh.w	r2, [lr]
 80094f8:	0c24      	lsrs	r4, r4, #16
 80094fa:	fb09 2404 	mla	r4, r9, r4, r2
 80094fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009502:	458c      	cmp	ip, r1
 8009504:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009508:	d8e7      	bhi.n	80094da <__multiply+0xfe>
 800950a:	9a01      	ldr	r2, [sp, #4]
 800950c:	50b4      	str	r4, [r6, r2]
 800950e:	3604      	adds	r6, #4
 8009510:	e7a3      	b.n	800945a <__multiply+0x7e>
 8009512:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1a5      	bne.n	8009466 <__multiply+0x8a>
 800951a:	3f01      	subs	r7, #1
 800951c:	e7a1      	b.n	8009462 <__multiply+0x86>
 800951e:	bf00      	nop
 8009520:	0800ab18 	.word	0x0800ab18
 8009524:	0800ab29 	.word	0x0800ab29

08009528 <__pow5mult>:
 8009528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800952c:	4615      	mov	r5, r2
 800952e:	f012 0203 	ands.w	r2, r2, #3
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	d007      	beq.n	8009548 <__pow5mult+0x20>
 8009538:	4c25      	ldr	r4, [pc, #148]	; (80095d0 <__pow5mult+0xa8>)
 800953a:	3a01      	subs	r2, #1
 800953c:	2300      	movs	r3, #0
 800953e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009542:	f7ff fe9b 	bl	800927c <__multadd>
 8009546:	4607      	mov	r7, r0
 8009548:	10ad      	asrs	r5, r5, #2
 800954a:	d03d      	beq.n	80095c8 <__pow5mult+0xa0>
 800954c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800954e:	b97c      	cbnz	r4, 8009570 <__pow5mult+0x48>
 8009550:	2010      	movs	r0, #16
 8009552:	f7ff fe1b 	bl	800918c <malloc>
 8009556:	4602      	mov	r2, r0
 8009558:	6270      	str	r0, [r6, #36]	; 0x24
 800955a:	b928      	cbnz	r0, 8009568 <__pow5mult+0x40>
 800955c:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <__pow5mult+0xac>)
 800955e:	481e      	ldr	r0, [pc, #120]	; (80095d8 <__pow5mult+0xb0>)
 8009560:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009564:	f000 fbcc 	bl	8009d00 <__assert_func>
 8009568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800956c:	6004      	str	r4, [r0, #0]
 800956e:	60c4      	str	r4, [r0, #12]
 8009570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009578:	b94c      	cbnz	r4, 800958e <__pow5mult+0x66>
 800957a:	f240 2171 	movw	r1, #625	; 0x271
 800957e:	4630      	mov	r0, r6
 8009580:	f7ff ff16 	bl	80093b0 <__i2b>
 8009584:	2300      	movs	r3, #0
 8009586:	f8c8 0008 	str.w	r0, [r8, #8]
 800958a:	4604      	mov	r4, r0
 800958c:	6003      	str	r3, [r0, #0]
 800958e:	f04f 0900 	mov.w	r9, #0
 8009592:	07eb      	lsls	r3, r5, #31
 8009594:	d50a      	bpl.n	80095ac <__pow5mult+0x84>
 8009596:	4639      	mov	r1, r7
 8009598:	4622      	mov	r2, r4
 800959a:	4630      	mov	r0, r6
 800959c:	f7ff ff1e 	bl	80093dc <__multiply>
 80095a0:	4639      	mov	r1, r7
 80095a2:	4680      	mov	r8, r0
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff fe47 	bl	8009238 <_Bfree>
 80095aa:	4647      	mov	r7, r8
 80095ac:	106d      	asrs	r5, r5, #1
 80095ae:	d00b      	beq.n	80095c8 <__pow5mult+0xa0>
 80095b0:	6820      	ldr	r0, [r4, #0]
 80095b2:	b938      	cbnz	r0, 80095c4 <__pow5mult+0x9c>
 80095b4:	4622      	mov	r2, r4
 80095b6:	4621      	mov	r1, r4
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7ff ff0f 	bl	80093dc <__multiply>
 80095be:	6020      	str	r0, [r4, #0]
 80095c0:	f8c0 9000 	str.w	r9, [r0]
 80095c4:	4604      	mov	r4, r0
 80095c6:	e7e4      	b.n	8009592 <__pow5mult+0x6a>
 80095c8:	4638      	mov	r0, r7
 80095ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ce:	bf00      	nop
 80095d0:	0800ac80 	.word	0x0800ac80
 80095d4:	0800aaa2 	.word	0x0800aaa2
 80095d8:	0800ab29 	.word	0x0800ab29

080095dc <__lshift>:
 80095dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e0:	460c      	mov	r4, r1
 80095e2:	6849      	ldr	r1, [r1, #4]
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	4607      	mov	r7, r0
 80095ee:	4691      	mov	r9, r2
 80095f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095f4:	f108 0601 	add.w	r6, r8, #1
 80095f8:	42b3      	cmp	r3, r6
 80095fa:	db0b      	blt.n	8009614 <__lshift+0x38>
 80095fc:	4638      	mov	r0, r7
 80095fe:	f7ff fddb 	bl	80091b8 <_Balloc>
 8009602:	4605      	mov	r5, r0
 8009604:	b948      	cbnz	r0, 800961a <__lshift+0x3e>
 8009606:	4602      	mov	r2, r0
 8009608:	4b28      	ldr	r3, [pc, #160]	; (80096ac <__lshift+0xd0>)
 800960a:	4829      	ldr	r0, [pc, #164]	; (80096b0 <__lshift+0xd4>)
 800960c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009610:	f000 fb76 	bl	8009d00 <__assert_func>
 8009614:	3101      	adds	r1, #1
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	e7ee      	b.n	80095f8 <__lshift+0x1c>
 800961a:	2300      	movs	r3, #0
 800961c:	f100 0114 	add.w	r1, r0, #20
 8009620:	f100 0210 	add.w	r2, r0, #16
 8009624:	4618      	mov	r0, r3
 8009626:	4553      	cmp	r3, sl
 8009628:	db33      	blt.n	8009692 <__lshift+0xb6>
 800962a:	6920      	ldr	r0, [r4, #16]
 800962c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009630:	f104 0314 	add.w	r3, r4, #20
 8009634:	f019 091f 	ands.w	r9, r9, #31
 8009638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800963c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009640:	d02b      	beq.n	800969a <__lshift+0xbe>
 8009642:	f1c9 0e20 	rsb	lr, r9, #32
 8009646:	468a      	mov	sl, r1
 8009648:	2200      	movs	r2, #0
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	fa00 f009 	lsl.w	r0, r0, r9
 8009650:	4302      	orrs	r2, r0
 8009652:	f84a 2b04 	str.w	r2, [sl], #4
 8009656:	f853 2b04 	ldr.w	r2, [r3], #4
 800965a:	459c      	cmp	ip, r3
 800965c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009660:	d8f3      	bhi.n	800964a <__lshift+0x6e>
 8009662:	ebac 0304 	sub.w	r3, ip, r4
 8009666:	3b15      	subs	r3, #21
 8009668:	f023 0303 	bic.w	r3, r3, #3
 800966c:	3304      	adds	r3, #4
 800966e:	f104 0015 	add.w	r0, r4, #21
 8009672:	4584      	cmp	ip, r0
 8009674:	bf38      	it	cc
 8009676:	2304      	movcc	r3, #4
 8009678:	50ca      	str	r2, [r1, r3]
 800967a:	b10a      	cbz	r2, 8009680 <__lshift+0xa4>
 800967c:	f108 0602 	add.w	r6, r8, #2
 8009680:	3e01      	subs	r6, #1
 8009682:	4638      	mov	r0, r7
 8009684:	612e      	str	r6, [r5, #16]
 8009686:	4621      	mov	r1, r4
 8009688:	f7ff fdd6 	bl	8009238 <_Bfree>
 800968c:	4628      	mov	r0, r5
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	f842 0f04 	str.w	r0, [r2, #4]!
 8009696:	3301      	adds	r3, #1
 8009698:	e7c5      	b.n	8009626 <__lshift+0x4a>
 800969a:	3904      	subs	r1, #4
 800969c:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096a4:	459c      	cmp	ip, r3
 80096a6:	d8f9      	bhi.n	800969c <__lshift+0xc0>
 80096a8:	e7ea      	b.n	8009680 <__lshift+0xa4>
 80096aa:	bf00      	nop
 80096ac:	0800ab18 	.word	0x0800ab18
 80096b0:	0800ab29 	.word	0x0800ab29

080096b4 <__mcmp>:
 80096b4:	b530      	push	{r4, r5, lr}
 80096b6:	6902      	ldr	r2, [r0, #16]
 80096b8:	690c      	ldr	r4, [r1, #16]
 80096ba:	1b12      	subs	r2, r2, r4
 80096bc:	d10e      	bne.n	80096dc <__mcmp+0x28>
 80096be:	f100 0314 	add.w	r3, r0, #20
 80096c2:	3114      	adds	r1, #20
 80096c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096d4:	42a5      	cmp	r5, r4
 80096d6:	d003      	beq.n	80096e0 <__mcmp+0x2c>
 80096d8:	d305      	bcc.n	80096e6 <__mcmp+0x32>
 80096da:	2201      	movs	r2, #1
 80096dc:	4610      	mov	r0, r2
 80096de:	bd30      	pop	{r4, r5, pc}
 80096e0:	4283      	cmp	r3, r0
 80096e2:	d3f3      	bcc.n	80096cc <__mcmp+0x18>
 80096e4:	e7fa      	b.n	80096dc <__mcmp+0x28>
 80096e6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ea:	e7f7      	b.n	80096dc <__mcmp+0x28>

080096ec <__mdiff>:
 80096ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	4606      	mov	r6, r0
 80096f4:	4611      	mov	r1, r2
 80096f6:	4620      	mov	r0, r4
 80096f8:	4617      	mov	r7, r2
 80096fa:	f7ff ffdb 	bl	80096b4 <__mcmp>
 80096fe:	1e05      	subs	r5, r0, #0
 8009700:	d110      	bne.n	8009724 <__mdiff+0x38>
 8009702:	4629      	mov	r1, r5
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff fd57 	bl	80091b8 <_Balloc>
 800970a:	b930      	cbnz	r0, 800971a <__mdiff+0x2e>
 800970c:	4b39      	ldr	r3, [pc, #228]	; (80097f4 <__mdiff+0x108>)
 800970e:	4602      	mov	r2, r0
 8009710:	f240 2132 	movw	r1, #562	; 0x232
 8009714:	4838      	ldr	r0, [pc, #224]	; (80097f8 <__mdiff+0x10c>)
 8009716:	f000 faf3 	bl	8009d00 <__assert_func>
 800971a:	2301      	movs	r3, #1
 800971c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009724:	bfa4      	itt	ge
 8009726:	463b      	movge	r3, r7
 8009728:	4627      	movge	r7, r4
 800972a:	4630      	mov	r0, r6
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	bfa6      	itte	ge
 8009730:	461c      	movge	r4, r3
 8009732:	2500      	movge	r5, #0
 8009734:	2501      	movlt	r5, #1
 8009736:	f7ff fd3f 	bl	80091b8 <_Balloc>
 800973a:	b920      	cbnz	r0, 8009746 <__mdiff+0x5a>
 800973c:	4b2d      	ldr	r3, [pc, #180]	; (80097f4 <__mdiff+0x108>)
 800973e:	4602      	mov	r2, r0
 8009740:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009744:	e7e6      	b.n	8009714 <__mdiff+0x28>
 8009746:	693e      	ldr	r6, [r7, #16]
 8009748:	60c5      	str	r5, [r0, #12]
 800974a:	6925      	ldr	r5, [r4, #16]
 800974c:	f107 0114 	add.w	r1, r7, #20
 8009750:	f104 0914 	add.w	r9, r4, #20
 8009754:	f100 0e14 	add.w	lr, r0, #20
 8009758:	f107 0210 	add.w	r2, r7, #16
 800975c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009760:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009764:	46f2      	mov	sl, lr
 8009766:	2700      	movs	r7, #0
 8009768:	f859 3b04 	ldr.w	r3, [r9], #4
 800976c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009770:	fa1f f883 	uxth.w	r8, r3
 8009774:	fa17 f78b 	uxtah	r7, r7, fp
 8009778:	0c1b      	lsrs	r3, r3, #16
 800977a:	eba7 0808 	sub.w	r8, r7, r8
 800977e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009786:	fa1f f888 	uxth.w	r8, r8
 800978a:	141f      	asrs	r7, r3, #16
 800978c:	454d      	cmp	r5, r9
 800978e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009792:	f84a 3b04 	str.w	r3, [sl], #4
 8009796:	d8e7      	bhi.n	8009768 <__mdiff+0x7c>
 8009798:	1b2b      	subs	r3, r5, r4
 800979a:	3b15      	subs	r3, #21
 800979c:	f023 0303 	bic.w	r3, r3, #3
 80097a0:	3304      	adds	r3, #4
 80097a2:	3415      	adds	r4, #21
 80097a4:	42a5      	cmp	r5, r4
 80097a6:	bf38      	it	cc
 80097a8:	2304      	movcc	r3, #4
 80097aa:	4419      	add	r1, r3
 80097ac:	4473      	add	r3, lr
 80097ae:	469e      	mov	lr, r3
 80097b0:	460d      	mov	r5, r1
 80097b2:	4565      	cmp	r5, ip
 80097b4:	d30e      	bcc.n	80097d4 <__mdiff+0xe8>
 80097b6:	f10c 0203 	add.w	r2, ip, #3
 80097ba:	1a52      	subs	r2, r2, r1
 80097bc:	f022 0203 	bic.w	r2, r2, #3
 80097c0:	3903      	subs	r1, #3
 80097c2:	458c      	cmp	ip, r1
 80097c4:	bf38      	it	cc
 80097c6:	2200      	movcc	r2, #0
 80097c8:	441a      	add	r2, r3
 80097ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097ce:	b17b      	cbz	r3, 80097f0 <__mdiff+0x104>
 80097d0:	6106      	str	r6, [r0, #16]
 80097d2:	e7a5      	b.n	8009720 <__mdiff+0x34>
 80097d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80097d8:	fa17 f488 	uxtah	r4, r7, r8
 80097dc:	1422      	asrs	r2, r4, #16
 80097de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80097e2:	b2a4      	uxth	r4, r4
 80097e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80097e8:	f84e 4b04 	str.w	r4, [lr], #4
 80097ec:	1417      	asrs	r7, r2, #16
 80097ee:	e7e0      	b.n	80097b2 <__mdiff+0xc6>
 80097f0:	3e01      	subs	r6, #1
 80097f2:	e7ea      	b.n	80097ca <__mdiff+0xde>
 80097f4:	0800ab18 	.word	0x0800ab18
 80097f8:	0800ab29 	.word	0x0800ab29

080097fc <__d2b>:
 80097fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009800:	4689      	mov	r9, r1
 8009802:	2101      	movs	r1, #1
 8009804:	ec57 6b10 	vmov	r6, r7, d0
 8009808:	4690      	mov	r8, r2
 800980a:	f7ff fcd5 	bl	80091b8 <_Balloc>
 800980e:	4604      	mov	r4, r0
 8009810:	b930      	cbnz	r0, 8009820 <__d2b+0x24>
 8009812:	4602      	mov	r2, r0
 8009814:	4b25      	ldr	r3, [pc, #148]	; (80098ac <__d2b+0xb0>)
 8009816:	4826      	ldr	r0, [pc, #152]	; (80098b0 <__d2b+0xb4>)
 8009818:	f240 310a 	movw	r1, #778	; 0x30a
 800981c:	f000 fa70 	bl	8009d00 <__assert_func>
 8009820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009828:	bb35      	cbnz	r5, 8009878 <__d2b+0x7c>
 800982a:	2e00      	cmp	r6, #0
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	d028      	beq.n	8009882 <__d2b+0x86>
 8009830:	4668      	mov	r0, sp
 8009832:	9600      	str	r6, [sp, #0]
 8009834:	f7ff fd8c 	bl	8009350 <__lo0bits>
 8009838:	9900      	ldr	r1, [sp, #0]
 800983a:	b300      	cbz	r0, 800987e <__d2b+0x82>
 800983c:	9a01      	ldr	r2, [sp, #4]
 800983e:	f1c0 0320 	rsb	r3, r0, #32
 8009842:	fa02 f303 	lsl.w	r3, r2, r3
 8009846:	430b      	orrs	r3, r1
 8009848:	40c2      	lsrs	r2, r0
 800984a:	6163      	str	r3, [r4, #20]
 800984c:	9201      	str	r2, [sp, #4]
 800984e:	9b01      	ldr	r3, [sp, #4]
 8009850:	61a3      	str	r3, [r4, #24]
 8009852:	2b00      	cmp	r3, #0
 8009854:	bf14      	ite	ne
 8009856:	2202      	movne	r2, #2
 8009858:	2201      	moveq	r2, #1
 800985a:	6122      	str	r2, [r4, #16]
 800985c:	b1d5      	cbz	r5, 8009894 <__d2b+0x98>
 800985e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009862:	4405      	add	r5, r0
 8009864:	f8c9 5000 	str.w	r5, [r9]
 8009868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800986c:	f8c8 0000 	str.w	r0, [r8]
 8009870:	4620      	mov	r0, r4
 8009872:	b003      	add	sp, #12
 8009874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800987c:	e7d5      	b.n	800982a <__d2b+0x2e>
 800987e:	6161      	str	r1, [r4, #20]
 8009880:	e7e5      	b.n	800984e <__d2b+0x52>
 8009882:	a801      	add	r0, sp, #4
 8009884:	f7ff fd64 	bl	8009350 <__lo0bits>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	6163      	str	r3, [r4, #20]
 800988c:	2201      	movs	r2, #1
 800988e:	6122      	str	r2, [r4, #16]
 8009890:	3020      	adds	r0, #32
 8009892:	e7e3      	b.n	800985c <__d2b+0x60>
 8009894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800989c:	f8c9 0000 	str.w	r0, [r9]
 80098a0:	6918      	ldr	r0, [r3, #16]
 80098a2:	f7ff fd35 	bl	8009310 <__hi0bits>
 80098a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098aa:	e7df      	b.n	800986c <__d2b+0x70>
 80098ac:	0800ab18 	.word	0x0800ab18
 80098b0:	0800ab29 	.word	0x0800ab29

080098b4 <_calloc_r>:
 80098b4:	b513      	push	{r0, r1, r4, lr}
 80098b6:	434a      	muls	r2, r1
 80098b8:	4611      	mov	r1, r2
 80098ba:	9201      	str	r2, [sp, #4]
 80098bc:	f000 f85a 	bl	8009974 <_malloc_r>
 80098c0:	4604      	mov	r4, r0
 80098c2:	b118      	cbz	r0, 80098cc <_calloc_r+0x18>
 80098c4:	9a01      	ldr	r2, [sp, #4]
 80098c6:	2100      	movs	r1, #0
 80098c8:	f7fe f942 	bl	8007b50 <memset>
 80098cc:	4620      	mov	r0, r4
 80098ce:	b002      	add	sp, #8
 80098d0:	bd10      	pop	{r4, pc}
	...

080098d4 <_free_r>:
 80098d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098d6:	2900      	cmp	r1, #0
 80098d8:	d048      	beq.n	800996c <_free_r+0x98>
 80098da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098de:	9001      	str	r0, [sp, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f1a1 0404 	sub.w	r4, r1, #4
 80098e6:	bfb8      	it	lt
 80098e8:	18e4      	addlt	r4, r4, r3
 80098ea:	f000 fa65 	bl	8009db8 <__malloc_lock>
 80098ee:	4a20      	ldr	r2, [pc, #128]	; (8009970 <_free_r+0x9c>)
 80098f0:	9801      	ldr	r0, [sp, #4]
 80098f2:	6813      	ldr	r3, [r2, #0]
 80098f4:	4615      	mov	r5, r2
 80098f6:	b933      	cbnz	r3, 8009906 <_free_r+0x32>
 80098f8:	6063      	str	r3, [r4, #4]
 80098fa:	6014      	str	r4, [r2, #0]
 80098fc:	b003      	add	sp, #12
 80098fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009902:	f000 ba5f 	b.w	8009dc4 <__malloc_unlock>
 8009906:	42a3      	cmp	r3, r4
 8009908:	d90b      	bls.n	8009922 <_free_r+0x4e>
 800990a:	6821      	ldr	r1, [r4, #0]
 800990c:	1862      	adds	r2, r4, r1
 800990e:	4293      	cmp	r3, r2
 8009910:	bf04      	itt	eq
 8009912:	681a      	ldreq	r2, [r3, #0]
 8009914:	685b      	ldreq	r3, [r3, #4]
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	bf04      	itt	eq
 800991a:	1852      	addeq	r2, r2, r1
 800991c:	6022      	streq	r2, [r4, #0]
 800991e:	602c      	str	r4, [r5, #0]
 8009920:	e7ec      	b.n	80098fc <_free_r+0x28>
 8009922:	461a      	mov	r2, r3
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	b10b      	cbz	r3, 800992c <_free_r+0x58>
 8009928:	42a3      	cmp	r3, r4
 800992a:	d9fa      	bls.n	8009922 <_free_r+0x4e>
 800992c:	6811      	ldr	r1, [r2, #0]
 800992e:	1855      	adds	r5, r2, r1
 8009930:	42a5      	cmp	r5, r4
 8009932:	d10b      	bne.n	800994c <_free_r+0x78>
 8009934:	6824      	ldr	r4, [r4, #0]
 8009936:	4421      	add	r1, r4
 8009938:	1854      	adds	r4, r2, r1
 800993a:	42a3      	cmp	r3, r4
 800993c:	6011      	str	r1, [r2, #0]
 800993e:	d1dd      	bne.n	80098fc <_free_r+0x28>
 8009940:	681c      	ldr	r4, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	6053      	str	r3, [r2, #4]
 8009946:	4421      	add	r1, r4
 8009948:	6011      	str	r1, [r2, #0]
 800994a:	e7d7      	b.n	80098fc <_free_r+0x28>
 800994c:	d902      	bls.n	8009954 <_free_r+0x80>
 800994e:	230c      	movs	r3, #12
 8009950:	6003      	str	r3, [r0, #0]
 8009952:	e7d3      	b.n	80098fc <_free_r+0x28>
 8009954:	6825      	ldr	r5, [r4, #0]
 8009956:	1961      	adds	r1, r4, r5
 8009958:	428b      	cmp	r3, r1
 800995a:	bf04      	itt	eq
 800995c:	6819      	ldreq	r1, [r3, #0]
 800995e:	685b      	ldreq	r3, [r3, #4]
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	bf04      	itt	eq
 8009964:	1949      	addeq	r1, r1, r5
 8009966:	6021      	streq	r1, [r4, #0]
 8009968:	6054      	str	r4, [r2, #4]
 800996a:	e7c7      	b.n	80098fc <_free_r+0x28>
 800996c:	b003      	add	sp, #12
 800996e:	bd30      	pop	{r4, r5, pc}
 8009970:	20000224 	.word	0x20000224

08009974 <_malloc_r>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	1ccd      	adds	r5, r1, #3
 8009978:	f025 0503 	bic.w	r5, r5, #3
 800997c:	3508      	adds	r5, #8
 800997e:	2d0c      	cmp	r5, #12
 8009980:	bf38      	it	cc
 8009982:	250c      	movcc	r5, #12
 8009984:	2d00      	cmp	r5, #0
 8009986:	4606      	mov	r6, r0
 8009988:	db01      	blt.n	800998e <_malloc_r+0x1a>
 800998a:	42a9      	cmp	r1, r5
 800998c:	d903      	bls.n	8009996 <_malloc_r+0x22>
 800998e:	230c      	movs	r3, #12
 8009990:	6033      	str	r3, [r6, #0]
 8009992:	2000      	movs	r0, #0
 8009994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009996:	f000 fa0f 	bl	8009db8 <__malloc_lock>
 800999a:	4921      	ldr	r1, [pc, #132]	; (8009a20 <_malloc_r+0xac>)
 800999c:	680a      	ldr	r2, [r1, #0]
 800999e:	4614      	mov	r4, r2
 80099a0:	b99c      	cbnz	r4, 80099ca <_malloc_r+0x56>
 80099a2:	4f20      	ldr	r7, [pc, #128]	; (8009a24 <_malloc_r+0xb0>)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	b923      	cbnz	r3, 80099b2 <_malloc_r+0x3e>
 80099a8:	4621      	mov	r1, r4
 80099aa:	4630      	mov	r0, r6
 80099ac:	f000 f998 	bl	8009ce0 <_sbrk_r>
 80099b0:	6038      	str	r0, [r7, #0]
 80099b2:	4629      	mov	r1, r5
 80099b4:	4630      	mov	r0, r6
 80099b6:	f000 f993 	bl	8009ce0 <_sbrk_r>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d123      	bne.n	8009a06 <_malloc_r+0x92>
 80099be:	230c      	movs	r3, #12
 80099c0:	6033      	str	r3, [r6, #0]
 80099c2:	4630      	mov	r0, r6
 80099c4:	f000 f9fe 	bl	8009dc4 <__malloc_unlock>
 80099c8:	e7e3      	b.n	8009992 <_malloc_r+0x1e>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	1b5b      	subs	r3, r3, r5
 80099ce:	d417      	bmi.n	8009a00 <_malloc_r+0x8c>
 80099d0:	2b0b      	cmp	r3, #11
 80099d2:	d903      	bls.n	80099dc <_malloc_r+0x68>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	441c      	add	r4, r3
 80099d8:	6025      	str	r5, [r4, #0]
 80099da:	e004      	b.n	80099e6 <_malloc_r+0x72>
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	42a2      	cmp	r2, r4
 80099e0:	bf0c      	ite	eq
 80099e2:	600b      	streq	r3, [r1, #0]
 80099e4:	6053      	strne	r3, [r2, #4]
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f9ec 	bl	8009dc4 <__malloc_unlock>
 80099ec:	f104 000b 	add.w	r0, r4, #11
 80099f0:	1d23      	adds	r3, r4, #4
 80099f2:	f020 0007 	bic.w	r0, r0, #7
 80099f6:	1ac2      	subs	r2, r0, r3
 80099f8:	d0cc      	beq.n	8009994 <_malloc_r+0x20>
 80099fa:	1a1b      	subs	r3, r3, r0
 80099fc:	50a3      	str	r3, [r4, r2]
 80099fe:	e7c9      	b.n	8009994 <_malloc_r+0x20>
 8009a00:	4622      	mov	r2, r4
 8009a02:	6864      	ldr	r4, [r4, #4]
 8009a04:	e7cc      	b.n	80099a0 <_malloc_r+0x2c>
 8009a06:	1cc4      	adds	r4, r0, #3
 8009a08:	f024 0403 	bic.w	r4, r4, #3
 8009a0c:	42a0      	cmp	r0, r4
 8009a0e:	d0e3      	beq.n	80099d8 <_malloc_r+0x64>
 8009a10:	1a21      	subs	r1, r4, r0
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 f964 	bl	8009ce0 <_sbrk_r>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d1dd      	bne.n	80099d8 <_malloc_r+0x64>
 8009a1c:	e7cf      	b.n	80099be <_malloc_r+0x4a>
 8009a1e:	bf00      	nop
 8009a20:	20000224 	.word	0x20000224
 8009a24:	20000228 	.word	0x20000228

08009a28 <__ssputs_r>:
 8009a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2c:	688e      	ldr	r6, [r1, #8]
 8009a2e:	429e      	cmp	r6, r3
 8009a30:	4682      	mov	sl, r0
 8009a32:	460c      	mov	r4, r1
 8009a34:	4690      	mov	r8, r2
 8009a36:	461f      	mov	r7, r3
 8009a38:	d838      	bhi.n	8009aac <__ssputs_r+0x84>
 8009a3a:	898a      	ldrh	r2, [r1, #12]
 8009a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a40:	d032      	beq.n	8009aa8 <__ssputs_r+0x80>
 8009a42:	6825      	ldr	r5, [r4, #0]
 8009a44:	6909      	ldr	r1, [r1, #16]
 8009a46:	eba5 0901 	sub.w	r9, r5, r1
 8009a4a:	6965      	ldr	r5, [r4, #20]
 8009a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a54:	3301      	adds	r3, #1
 8009a56:	444b      	add	r3, r9
 8009a58:	106d      	asrs	r5, r5, #1
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	bf38      	it	cc
 8009a5e:	461d      	movcc	r5, r3
 8009a60:	0553      	lsls	r3, r2, #21
 8009a62:	d531      	bpl.n	8009ac8 <__ssputs_r+0xa0>
 8009a64:	4629      	mov	r1, r5
 8009a66:	f7ff ff85 	bl	8009974 <_malloc_r>
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	b950      	cbnz	r0, 8009a84 <__ssputs_r+0x5c>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	f8ca 3000 	str.w	r3, [sl]
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a84:	6921      	ldr	r1, [r4, #16]
 8009a86:	464a      	mov	r2, r9
 8009a88:	f7ff fb88 	bl	800919c <memcpy>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	6126      	str	r6, [r4, #16]
 8009a9a:	6165      	str	r5, [r4, #20]
 8009a9c:	444e      	add	r6, r9
 8009a9e:	eba5 0509 	sub.w	r5, r5, r9
 8009aa2:	6026      	str	r6, [r4, #0]
 8009aa4:	60a5      	str	r5, [r4, #8]
 8009aa6:	463e      	mov	r6, r7
 8009aa8:	42be      	cmp	r6, r7
 8009aaa:	d900      	bls.n	8009aae <__ssputs_r+0x86>
 8009aac:	463e      	mov	r6, r7
 8009aae:	4632      	mov	r2, r6
 8009ab0:	6820      	ldr	r0, [r4, #0]
 8009ab2:	4641      	mov	r1, r8
 8009ab4:	f000 f966 	bl	8009d84 <memmove>
 8009ab8:	68a3      	ldr	r3, [r4, #8]
 8009aba:	6822      	ldr	r2, [r4, #0]
 8009abc:	1b9b      	subs	r3, r3, r6
 8009abe:	4432      	add	r2, r6
 8009ac0:	60a3      	str	r3, [r4, #8]
 8009ac2:	6022      	str	r2, [r4, #0]
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e7db      	b.n	8009a80 <__ssputs_r+0x58>
 8009ac8:	462a      	mov	r2, r5
 8009aca:	f000 f981 	bl	8009dd0 <_realloc_r>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1e1      	bne.n	8009a98 <__ssputs_r+0x70>
 8009ad4:	6921      	ldr	r1, [r4, #16]
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	f7ff fefc 	bl	80098d4 <_free_r>
 8009adc:	e7c7      	b.n	8009a6e <__ssputs_r+0x46>
	...

08009ae0 <_svfiprintf_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	4698      	mov	r8, r3
 8009ae6:	898b      	ldrh	r3, [r1, #12]
 8009ae8:	061b      	lsls	r3, r3, #24
 8009aea:	b09d      	sub	sp, #116	; 0x74
 8009aec:	4607      	mov	r7, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	4614      	mov	r4, r2
 8009af2:	d50e      	bpl.n	8009b12 <_svfiprintf_r+0x32>
 8009af4:	690b      	ldr	r3, [r1, #16]
 8009af6:	b963      	cbnz	r3, 8009b12 <_svfiprintf_r+0x32>
 8009af8:	2140      	movs	r1, #64	; 0x40
 8009afa:	f7ff ff3b 	bl	8009974 <_malloc_r>
 8009afe:	6028      	str	r0, [r5, #0]
 8009b00:	6128      	str	r0, [r5, #16]
 8009b02:	b920      	cbnz	r0, 8009b0e <_svfiprintf_r+0x2e>
 8009b04:	230c      	movs	r3, #12
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	e0d1      	b.n	8009cb2 <_svfiprintf_r+0x1d2>
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	616b      	str	r3, [r5, #20]
 8009b12:	2300      	movs	r3, #0
 8009b14:	9309      	str	r3, [sp, #36]	; 0x24
 8009b16:	2320      	movs	r3, #32
 8009b18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b20:	2330      	movs	r3, #48	; 0x30
 8009b22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ccc <_svfiprintf_r+0x1ec>
 8009b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b2a:	f04f 0901 	mov.w	r9, #1
 8009b2e:	4623      	mov	r3, r4
 8009b30:	469a      	mov	sl, r3
 8009b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b36:	b10a      	cbz	r2, 8009b3c <_svfiprintf_r+0x5c>
 8009b38:	2a25      	cmp	r2, #37	; 0x25
 8009b3a:	d1f9      	bne.n	8009b30 <_svfiprintf_r+0x50>
 8009b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b40:	d00b      	beq.n	8009b5a <_svfiprintf_r+0x7a>
 8009b42:	465b      	mov	r3, fp
 8009b44:	4622      	mov	r2, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7ff ff6d 	bl	8009a28 <__ssputs_r>
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f000 80aa 	beq.w	8009ca8 <_svfiprintf_r+0x1c8>
 8009b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b56:	445a      	add	r2, fp
 8009b58:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 80a2 	beq.w	8009ca8 <_svfiprintf_r+0x1c8>
 8009b64:	2300      	movs	r3, #0
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b6e:	f10a 0a01 	add.w	sl, sl, #1
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b7c:	4654      	mov	r4, sl
 8009b7e:	2205      	movs	r2, #5
 8009b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b84:	4851      	ldr	r0, [pc, #324]	; (8009ccc <_svfiprintf_r+0x1ec>)
 8009b86:	f7f6 fb63 	bl	8000250 <memchr>
 8009b8a:	9a04      	ldr	r2, [sp, #16]
 8009b8c:	b9d8      	cbnz	r0, 8009bc6 <_svfiprintf_r+0xe6>
 8009b8e:	06d0      	lsls	r0, r2, #27
 8009b90:	bf44      	itt	mi
 8009b92:	2320      	movmi	r3, #32
 8009b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b98:	0711      	lsls	r1, r2, #28
 8009b9a:	bf44      	itt	mi
 8009b9c:	232b      	movmi	r3, #43	; 0x2b
 8009b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba8:	d015      	beq.n	8009bd6 <_svfiprintf_r+0xf6>
 8009baa:	9a07      	ldr	r2, [sp, #28]
 8009bac:	4654      	mov	r4, sl
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bba:	3b30      	subs	r3, #48	; 0x30
 8009bbc:	2b09      	cmp	r3, #9
 8009bbe:	d94e      	bls.n	8009c5e <_svfiprintf_r+0x17e>
 8009bc0:	b1b0      	cbz	r0, 8009bf0 <_svfiprintf_r+0x110>
 8009bc2:	9207      	str	r2, [sp, #28]
 8009bc4:	e014      	b.n	8009bf0 <_svfiprintf_r+0x110>
 8009bc6:	eba0 0308 	sub.w	r3, r0, r8
 8009bca:	fa09 f303 	lsl.w	r3, r9, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	46a2      	mov	sl, r4
 8009bd4:	e7d2      	b.n	8009b7c <_svfiprintf_r+0x9c>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	1d19      	adds	r1, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	9103      	str	r1, [sp, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfbb      	ittet	lt
 8009be2:	425b      	neglt	r3, r3
 8009be4:	f042 0202 	orrlt.w	r2, r2, #2
 8009be8:	9307      	strge	r3, [sp, #28]
 8009bea:	9307      	strlt	r3, [sp, #28]
 8009bec:	bfb8      	it	lt
 8009bee:	9204      	strlt	r2, [sp, #16]
 8009bf0:	7823      	ldrb	r3, [r4, #0]
 8009bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf4:	d10c      	bne.n	8009c10 <_svfiprintf_r+0x130>
 8009bf6:	7863      	ldrb	r3, [r4, #1]
 8009bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfa:	d135      	bne.n	8009c68 <_svfiprintf_r+0x188>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	1d1a      	adds	r2, r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	9203      	str	r2, [sp, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bfb8      	it	lt
 8009c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c0c:	3402      	adds	r4, #2
 8009c0e:	9305      	str	r3, [sp, #20]
 8009c10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009cdc <_svfiprintf_r+0x1fc>
 8009c14:	7821      	ldrb	r1, [r4, #0]
 8009c16:	2203      	movs	r2, #3
 8009c18:	4650      	mov	r0, sl
 8009c1a:	f7f6 fb19 	bl	8000250 <memchr>
 8009c1e:	b140      	cbz	r0, 8009c32 <_svfiprintf_r+0x152>
 8009c20:	2340      	movs	r3, #64	; 0x40
 8009c22:	eba0 000a 	sub.w	r0, r0, sl
 8009c26:	fa03 f000 	lsl.w	r0, r3, r0
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	4303      	orrs	r3, r0
 8009c2e:	3401      	adds	r4, #1
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c36:	4826      	ldr	r0, [pc, #152]	; (8009cd0 <_svfiprintf_r+0x1f0>)
 8009c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c3c:	2206      	movs	r2, #6
 8009c3e:	f7f6 fb07 	bl	8000250 <memchr>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d038      	beq.n	8009cb8 <_svfiprintf_r+0x1d8>
 8009c46:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <_svfiprintf_r+0x1f4>)
 8009c48:	bb1b      	cbnz	r3, 8009c92 <_svfiprintf_r+0x1b2>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	3307      	adds	r3, #7
 8009c4e:	f023 0307 	bic.w	r3, r3, #7
 8009c52:	3308      	adds	r3, #8
 8009c54:	9303      	str	r3, [sp, #12]
 8009c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c58:	4433      	add	r3, r6
 8009c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5c:	e767      	b.n	8009b2e <_svfiprintf_r+0x4e>
 8009c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c62:	460c      	mov	r4, r1
 8009c64:	2001      	movs	r0, #1
 8009c66:	e7a5      	b.n	8009bb4 <_svfiprintf_r+0xd4>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	3401      	adds	r4, #1
 8009c6c:	9305      	str	r3, [sp, #20]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	f04f 0c0a 	mov.w	ip, #10
 8009c74:	4620      	mov	r0, r4
 8009c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c7a:	3a30      	subs	r2, #48	; 0x30
 8009c7c:	2a09      	cmp	r2, #9
 8009c7e:	d903      	bls.n	8009c88 <_svfiprintf_r+0x1a8>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d0c5      	beq.n	8009c10 <_svfiprintf_r+0x130>
 8009c84:	9105      	str	r1, [sp, #20]
 8009c86:	e7c3      	b.n	8009c10 <_svfiprintf_r+0x130>
 8009c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e7f0      	b.n	8009c74 <_svfiprintf_r+0x194>
 8009c92:	ab03      	add	r3, sp, #12
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	462a      	mov	r2, r5
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <_svfiprintf_r+0x1f8>)
 8009c9a:	a904      	add	r1, sp, #16
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7fd ffef 	bl	8007c80 <_printf_float>
 8009ca2:	1c42      	adds	r2, r0, #1
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	d1d6      	bne.n	8009c56 <_svfiprintf_r+0x176>
 8009ca8:	89ab      	ldrh	r3, [r5, #12]
 8009caa:	065b      	lsls	r3, r3, #25
 8009cac:	f53f af2c 	bmi.w	8009b08 <_svfiprintf_r+0x28>
 8009cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb2:	b01d      	add	sp, #116	; 0x74
 8009cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb8:	ab03      	add	r3, sp, #12
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <_svfiprintf_r+0x1f8>)
 8009cc0:	a904      	add	r1, sp, #16
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f7fe fa68 	bl	8008198 <_printf_i>
 8009cc8:	e7eb      	b.n	8009ca2 <_svfiprintf_r+0x1c2>
 8009cca:	bf00      	nop
 8009ccc:	0800ac8c 	.word	0x0800ac8c
 8009cd0:	0800ac96 	.word	0x0800ac96
 8009cd4:	08007c81 	.word	0x08007c81
 8009cd8:	08009a29 	.word	0x08009a29
 8009cdc:	0800ac92 	.word	0x0800ac92

08009ce0 <_sbrk_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d06      	ldr	r5, [pc, #24]	; (8009cfc <_sbrk_r+0x1c>)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	602b      	str	r3, [r5, #0]
 8009cec:	f7f8 fb2c 	bl	8002348 <_sbrk>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_sbrk_r+0x1a>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_sbrk_r+0x1a>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	20000938 	.word	0x20000938

08009d00 <__assert_func>:
 8009d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d02:	4614      	mov	r4, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <__assert_func+0x2c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	68d8      	ldr	r0, [r3, #12]
 8009d0e:	b14c      	cbz	r4, 8009d24 <__assert_func+0x24>
 8009d10:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <__assert_func+0x30>)
 8009d12:	9100      	str	r1, [sp, #0]
 8009d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d18:	4906      	ldr	r1, [pc, #24]	; (8009d34 <__assert_func+0x34>)
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	f000 f80e 	bl	8009d3c <fiprintf>
 8009d20:	f000 faa4 	bl	800a26c <abort>
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <__assert_func+0x38>)
 8009d26:	461c      	mov	r4, r3
 8009d28:	e7f3      	b.n	8009d12 <__assert_func+0x12>
 8009d2a:	bf00      	nop
 8009d2c:	20000028 	.word	0x20000028
 8009d30:	0800ac9d 	.word	0x0800ac9d
 8009d34:	0800acaa 	.word	0x0800acaa
 8009d38:	0800acd8 	.word	0x0800acd8

08009d3c <fiprintf>:
 8009d3c:	b40e      	push	{r1, r2, r3}
 8009d3e:	b503      	push	{r0, r1, lr}
 8009d40:	4601      	mov	r1, r0
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <fiprintf+0x20>)
 8009d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f000 f88f 	bl	8009e70 <_vfiprintf_r>
 8009d52:	b002      	add	sp, #8
 8009d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	20000028 	.word	0x20000028

08009d60 <__ascii_mbtowc>:
 8009d60:	b082      	sub	sp, #8
 8009d62:	b901      	cbnz	r1, 8009d66 <__ascii_mbtowc+0x6>
 8009d64:	a901      	add	r1, sp, #4
 8009d66:	b142      	cbz	r2, 8009d7a <__ascii_mbtowc+0x1a>
 8009d68:	b14b      	cbz	r3, 8009d7e <__ascii_mbtowc+0x1e>
 8009d6a:	7813      	ldrb	r3, [r2, #0]
 8009d6c:	600b      	str	r3, [r1, #0]
 8009d6e:	7812      	ldrb	r2, [r2, #0]
 8009d70:	1e10      	subs	r0, r2, #0
 8009d72:	bf18      	it	ne
 8009d74:	2001      	movne	r0, #1
 8009d76:	b002      	add	sp, #8
 8009d78:	4770      	bx	lr
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	e7fb      	b.n	8009d76 <__ascii_mbtowc+0x16>
 8009d7e:	f06f 0001 	mvn.w	r0, #1
 8009d82:	e7f8      	b.n	8009d76 <__ascii_mbtowc+0x16>

08009d84 <memmove>:
 8009d84:	4288      	cmp	r0, r1
 8009d86:	b510      	push	{r4, lr}
 8009d88:	eb01 0402 	add.w	r4, r1, r2
 8009d8c:	d902      	bls.n	8009d94 <memmove+0x10>
 8009d8e:	4284      	cmp	r4, r0
 8009d90:	4623      	mov	r3, r4
 8009d92:	d807      	bhi.n	8009da4 <memmove+0x20>
 8009d94:	1e43      	subs	r3, r0, #1
 8009d96:	42a1      	cmp	r1, r4
 8009d98:	d008      	beq.n	8009dac <memmove+0x28>
 8009d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009da2:	e7f8      	b.n	8009d96 <memmove+0x12>
 8009da4:	4402      	add	r2, r0
 8009da6:	4601      	mov	r1, r0
 8009da8:	428a      	cmp	r2, r1
 8009daa:	d100      	bne.n	8009dae <memmove+0x2a>
 8009dac:	bd10      	pop	{r4, pc}
 8009dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009db6:	e7f7      	b.n	8009da8 <memmove+0x24>

08009db8 <__malloc_lock>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__malloc_lock+0x8>)
 8009dba:	f000 bc17 	b.w	800a5ec <__retarget_lock_acquire_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	20000940 	.word	0x20000940

08009dc4 <__malloc_unlock>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__malloc_unlock+0x8>)
 8009dc6:	f000 bc12 	b.w	800a5ee <__retarget_lock_release_recursive>
 8009dca:	bf00      	nop
 8009dcc:	20000940 	.word	0x20000940

08009dd0 <_realloc_r>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	460e      	mov	r6, r1
 8009dd8:	b921      	cbnz	r1, 8009de4 <_realloc_r+0x14>
 8009dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009dde:	4611      	mov	r1, r2
 8009de0:	f7ff bdc8 	b.w	8009974 <_malloc_r>
 8009de4:	b922      	cbnz	r2, 8009df0 <_realloc_r+0x20>
 8009de6:	f7ff fd75 	bl	80098d4 <_free_r>
 8009dea:	4625      	mov	r5, r4
 8009dec:	4628      	mov	r0, r5
 8009dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df0:	f000 fc62 	bl	800a6b8 <_malloc_usable_size_r>
 8009df4:	42a0      	cmp	r0, r4
 8009df6:	d20f      	bcs.n	8009e18 <_realloc_r+0x48>
 8009df8:	4621      	mov	r1, r4
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f7ff fdba 	bl	8009974 <_malloc_r>
 8009e00:	4605      	mov	r5, r0
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d0f2      	beq.n	8009dec <_realloc_r+0x1c>
 8009e06:	4631      	mov	r1, r6
 8009e08:	4622      	mov	r2, r4
 8009e0a:	f7ff f9c7 	bl	800919c <memcpy>
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4638      	mov	r0, r7
 8009e12:	f7ff fd5f 	bl	80098d4 <_free_r>
 8009e16:	e7e9      	b.n	8009dec <_realloc_r+0x1c>
 8009e18:	4635      	mov	r5, r6
 8009e1a:	e7e7      	b.n	8009dec <_realloc_r+0x1c>

08009e1c <__sfputc_r>:
 8009e1c:	6893      	ldr	r3, [r2, #8]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	b410      	push	{r4}
 8009e24:	6093      	str	r3, [r2, #8]
 8009e26:	da08      	bge.n	8009e3a <__sfputc_r+0x1e>
 8009e28:	6994      	ldr	r4, [r2, #24]
 8009e2a:	42a3      	cmp	r3, r4
 8009e2c:	db01      	blt.n	8009e32 <__sfputc_r+0x16>
 8009e2e:	290a      	cmp	r1, #10
 8009e30:	d103      	bne.n	8009e3a <__sfputc_r+0x1e>
 8009e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e36:	f000 b94b 	b.w	800a0d0 <__swbuf_r>
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	1c58      	adds	r0, r3, #1
 8009e3e:	6010      	str	r0, [r2, #0]
 8009e40:	7019      	strb	r1, [r3, #0]
 8009e42:	4608      	mov	r0, r1
 8009e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <__sfputs_r>:
 8009e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	460f      	mov	r7, r1
 8009e50:	4614      	mov	r4, r2
 8009e52:	18d5      	adds	r5, r2, r3
 8009e54:	42ac      	cmp	r4, r5
 8009e56:	d101      	bne.n	8009e5c <__sfputs_r+0x12>
 8009e58:	2000      	movs	r0, #0
 8009e5a:	e007      	b.n	8009e6c <__sfputs_r+0x22>
 8009e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e60:	463a      	mov	r2, r7
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff ffda 	bl	8009e1c <__sfputc_r>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d1f3      	bne.n	8009e54 <__sfputs_r+0xa>
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e70 <_vfiprintf_r>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	460d      	mov	r5, r1
 8009e76:	b09d      	sub	sp, #116	; 0x74
 8009e78:	4614      	mov	r4, r2
 8009e7a:	4698      	mov	r8, r3
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	b118      	cbz	r0, 8009e88 <_vfiprintf_r+0x18>
 8009e80:	6983      	ldr	r3, [r0, #24]
 8009e82:	b90b      	cbnz	r3, 8009e88 <_vfiprintf_r+0x18>
 8009e84:	f000 fb14 	bl	800a4b0 <__sinit>
 8009e88:	4b89      	ldr	r3, [pc, #548]	; (800a0b0 <_vfiprintf_r+0x240>)
 8009e8a:	429d      	cmp	r5, r3
 8009e8c:	d11b      	bne.n	8009ec6 <_vfiprintf_r+0x56>
 8009e8e:	6875      	ldr	r5, [r6, #4]
 8009e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e92:	07d9      	lsls	r1, r3, #31
 8009e94:	d405      	bmi.n	8009ea2 <_vfiprintf_r+0x32>
 8009e96:	89ab      	ldrh	r3, [r5, #12]
 8009e98:	059a      	lsls	r2, r3, #22
 8009e9a:	d402      	bmi.n	8009ea2 <_vfiprintf_r+0x32>
 8009e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e9e:	f000 fba5 	bl	800a5ec <__retarget_lock_acquire_recursive>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	071b      	lsls	r3, r3, #28
 8009ea6:	d501      	bpl.n	8009eac <_vfiprintf_r+0x3c>
 8009ea8:	692b      	ldr	r3, [r5, #16]
 8009eaa:	b9eb      	cbnz	r3, 8009ee8 <_vfiprintf_r+0x78>
 8009eac:	4629      	mov	r1, r5
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f000 f96e 	bl	800a190 <__swsetup_r>
 8009eb4:	b1c0      	cbz	r0, 8009ee8 <_vfiprintf_r+0x78>
 8009eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eb8:	07dc      	lsls	r4, r3, #31
 8009eba:	d50e      	bpl.n	8009eda <_vfiprintf_r+0x6a>
 8009ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec0:	b01d      	add	sp, #116	; 0x74
 8009ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec6:	4b7b      	ldr	r3, [pc, #492]	; (800a0b4 <_vfiprintf_r+0x244>)
 8009ec8:	429d      	cmp	r5, r3
 8009eca:	d101      	bne.n	8009ed0 <_vfiprintf_r+0x60>
 8009ecc:	68b5      	ldr	r5, [r6, #8]
 8009ece:	e7df      	b.n	8009e90 <_vfiprintf_r+0x20>
 8009ed0:	4b79      	ldr	r3, [pc, #484]	; (800a0b8 <_vfiprintf_r+0x248>)
 8009ed2:	429d      	cmp	r5, r3
 8009ed4:	bf08      	it	eq
 8009ed6:	68f5      	ldreq	r5, [r6, #12]
 8009ed8:	e7da      	b.n	8009e90 <_vfiprintf_r+0x20>
 8009eda:	89ab      	ldrh	r3, [r5, #12]
 8009edc:	0598      	lsls	r0, r3, #22
 8009ede:	d4ed      	bmi.n	8009ebc <_vfiprintf_r+0x4c>
 8009ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ee2:	f000 fb84 	bl	800a5ee <__retarget_lock_release_recursive>
 8009ee6:	e7e9      	b.n	8009ebc <_vfiprintf_r+0x4c>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	9309      	str	r3, [sp, #36]	; 0x24
 8009eec:	2320      	movs	r3, #32
 8009eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef6:	2330      	movs	r3, #48	; 0x30
 8009ef8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0bc <_vfiprintf_r+0x24c>
 8009efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f00:	f04f 0901 	mov.w	r9, #1
 8009f04:	4623      	mov	r3, r4
 8009f06:	469a      	mov	sl, r3
 8009f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f0c:	b10a      	cbz	r2, 8009f12 <_vfiprintf_r+0xa2>
 8009f0e:	2a25      	cmp	r2, #37	; 0x25
 8009f10:	d1f9      	bne.n	8009f06 <_vfiprintf_r+0x96>
 8009f12:	ebba 0b04 	subs.w	fp, sl, r4
 8009f16:	d00b      	beq.n	8009f30 <_vfiprintf_r+0xc0>
 8009f18:	465b      	mov	r3, fp
 8009f1a:	4622      	mov	r2, r4
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff ff93 	bl	8009e4a <__sfputs_r>
 8009f24:	3001      	adds	r0, #1
 8009f26:	f000 80aa 	beq.w	800a07e <_vfiprintf_r+0x20e>
 8009f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f2c:	445a      	add	r2, fp
 8009f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f30:	f89a 3000 	ldrb.w	r3, [sl]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 80a2 	beq.w	800a07e <_vfiprintf_r+0x20e>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f44:	f10a 0a01 	add.w	sl, sl, #1
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	9307      	str	r3, [sp, #28]
 8009f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f50:	931a      	str	r3, [sp, #104]	; 0x68
 8009f52:	4654      	mov	r4, sl
 8009f54:	2205      	movs	r2, #5
 8009f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5a:	4858      	ldr	r0, [pc, #352]	; (800a0bc <_vfiprintf_r+0x24c>)
 8009f5c:	f7f6 f978 	bl	8000250 <memchr>
 8009f60:	9a04      	ldr	r2, [sp, #16]
 8009f62:	b9d8      	cbnz	r0, 8009f9c <_vfiprintf_r+0x12c>
 8009f64:	06d1      	lsls	r1, r2, #27
 8009f66:	bf44      	itt	mi
 8009f68:	2320      	movmi	r3, #32
 8009f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f6e:	0713      	lsls	r3, r2, #28
 8009f70:	bf44      	itt	mi
 8009f72:	232b      	movmi	r3, #43	; 0x2b
 8009f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f78:	f89a 3000 	ldrb.w	r3, [sl]
 8009f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7e:	d015      	beq.n	8009fac <_vfiprintf_r+0x13c>
 8009f80:	9a07      	ldr	r2, [sp, #28]
 8009f82:	4654      	mov	r4, sl
 8009f84:	2000      	movs	r0, #0
 8009f86:	f04f 0c0a 	mov.w	ip, #10
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f90:	3b30      	subs	r3, #48	; 0x30
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d94e      	bls.n	800a034 <_vfiprintf_r+0x1c4>
 8009f96:	b1b0      	cbz	r0, 8009fc6 <_vfiprintf_r+0x156>
 8009f98:	9207      	str	r2, [sp, #28]
 8009f9a:	e014      	b.n	8009fc6 <_vfiprintf_r+0x156>
 8009f9c:	eba0 0308 	sub.w	r3, r0, r8
 8009fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	46a2      	mov	sl, r4
 8009faa:	e7d2      	b.n	8009f52 <_vfiprintf_r+0xe2>
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	1d19      	adds	r1, r3, #4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	9103      	str	r1, [sp, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bfbb      	ittet	lt
 8009fb8:	425b      	neglt	r3, r3
 8009fba:	f042 0202 	orrlt.w	r2, r2, #2
 8009fbe:	9307      	strge	r3, [sp, #28]
 8009fc0:	9307      	strlt	r3, [sp, #28]
 8009fc2:	bfb8      	it	lt
 8009fc4:	9204      	strlt	r2, [sp, #16]
 8009fc6:	7823      	ldrb	r3, [r4, #0]
 8009fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8009fca:	d10c      	bne.n	8009fe6 <_vfiprintf_r+0x176>
 8009fcc:	7863      	ldrb	r3, [r4, #1]
 8009fce:	2b2a      	cmp	r3, #42	; 0x2a
 8009fd0:	d135      	bne.n	800a03e <_vfiprintf_r+0x1ce>
 8009fd2:	9b03      	ldr	r3, [sp, #12]
 8009fd4:	1d1a      	adds	r2, r3, #4
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	9203      	str	r2, [sp, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	bfb8      	it	lt
 8009fde:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fe2:	3402      	adds	r4, #2
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0cc <_vfiprintf_r+0x25c>
 8009fea:	7821      	ldrb	r1, [r4, #0]
 8009fec:	2203      	movs	r2, #3
 8009fee:	4650      	mov	r0, sl
 8009ff0:	f7f6 f92e 	bl	8000250 <memchr>
 8009ff4:	b140      	cbz	r0, 800a008 <_vfiprintf_r+0x198>
 8009ff6:	2340      	movs	r3, #64	; 0x40
 8009ff8:	eba0 000a 	sub.w	r0, r0, sl
 8009ffc:	fa03 f000 	lsl.w	r0, r3, r0
 800a000:	9b04      	ldr	r3, [sp, #16]
 800a002:	4303      	orrs	r3, r0
 800a004:	3401      	adds	r4, #1
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00c:	482c      	ldr	r0, [pc, #176]	; (800a0c0 <_vfiprintf_r+0x250>)
 800a00e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a012:	2206      	movs	r2, #6
 800a014:	f7f6 f91c 	bl	8000250 <memchr>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d03f      	beq.n	800a09c <_vfiprintf_r+0x22c>
 800a01c:	4b29      	ldr	r3, [pc, #164]	; (800a0c4 <_vfiprintf_r+0x254>)
 800a01e:	bb1b      	cbnz	r3, 800a068 <_vfiprintf_r+0x1f8>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	3307      	adds	r3, #7
 800a024:	f023 0307 	bic.w	r3, r3, #7
 800a028:	3308      	adds	r3, #8
 800a02a:	9303      	str	r3, [sp, #12]
 800a02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02e:	443b      	add	r3, r7
 800a030:	9309      	str	r3, [sp, #36]	; 0x24
 800a032:	e767      	b.n	8009f04 <_vfiprintf_r+0x94>
 800a034:	fb0c 3202 	mla	r2, ip, r2, r3
 800a038:	460c      	mov	r4, r1
 800a03a:	2001      	movs	r0, #1
 800a03c:	e7a5      	b.n	8009f8a <_vfiprintf_r+0x11a>
 800a03e:	2300      	movs	r3, #0
 800a040:	3401      	adds	r4, #1
 800a042:	9305      	str	r3, [sp, #20]
 800a044:	4619      	mov	r1, r3
 800a046:	f04f 0c0a 	mov.w	ip, #10
 800a04a:	4620      	mov	r0, r4
 800a04c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a050:	3a30      	subs	r2, #48	; 0x30
 800a052:	2a09      	cmp	r2, #9
 800a054:	d903      	bls.n	800a05e <_vfiprintf_r+0x1ee>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d0c5      	beq.n	8009fe6 <_vfiprintf_r+0x176>
 800a05a:	9105      	str	r1, [sp, #20]
 800a05c:	e7c3      	b.n	8009fe6 <_vfiprintf_r+0x176>
 800a05e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a062:	4604      	mov	r4, r0
 800a064:	2301      	movs	r3, #1
 800a066:	e7f0      	b.n	800a04a <_vfiprintf_r+0x1da>
 800a068:	ab03      	add	r3, sp, #12
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	462a      	mov	r2, r5
 800a06e:	4b16      	ldr	r3, [pc, #88]	; (800a0c8 <_vfiprintf_r+0x258>)
 800a070:	a904      	add	r1, sp, #16
 800a072:	4630      	mov	r0, r6
 800a074:	f7fd fe04 	bl	8007c80 <_printf_float>
 800a078:	4607      	mov	r7, r0
 800a07a:	1c78      	adds	r0, r7, #1
 800a07c:	d1d6      	bne.n	800a02c <_vfiprintf_r+0x1bc>
 800a07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a080:	07d9      	lsls	r1, r3, #31
 800a082:	d405      	bmi.n	800a090 <_vfiprintf_r+0x220>
 800a084:	89ab      	ldrh	r3, [r5, #12]
 800a086:	059a      	lsls	r2, r3, #22
 800a088:	d402      	bmi.n	800a090 <_vfiprintf_r+0x220>
 800a08a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a08c:	f000 faaf 	bl	800a5ee <__retarget_lock_release_recursive>
 800a090:	89ab      	ldrh	r3, [r5, #12]
 800a092:	065b      	lsls	r3, r3, #25
 800a094:	f53f af12 	bmi.w	8009ebc <_vfiprintf_r+0x4c>
 800a098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a09a:	e711      	b.n	8009ec0 <_vfiprintf_r+0x50>
 800a09c:	ab03      	add	r3, sp, #12
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	462a      	mov	r2, r5
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <_vfiprintf_r+0x258>)
 800a0a4:	a904      	add	r1, sp, #16
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f7fe f876 	bl	8008198 <_printf_i>
 800a0ac:	e7e4      	b.n	800a078 <_vfiprintf_r+0x208>
 800a0ae:	bf00      	nop
 800a0b0:	0800ad04 	.word	0x0800ad04
 800a0b4:	0800ad24 	.word	0x0800ad24
 800a0b8:	0800ace4 	.word	0x0800ace4
 800a0bc:	0800ac8c 	.word	0x0800ac8c
 800a0c0:	0800ac96 	.word	0x0800ac96
 800a0c4:	08007c81 	.word	0x08007c81
 800a0c8:	08009e4b 	.word	0x08009e4b
 800a0cc:	0800ac92 	.word	0x0800ac92

0800a0d0 <__swbuf_r>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	460e      	mov	r6, r1
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	b118      	cbz	r0, 800a0e2 <__swbuf_r+0x12>
 800a0da:	6983      	ldr	r3, [r0, #24]
 800a0dc:	b90b      	cbnz	r3, 800a0e2 <__swbuf_r+0x12>
 800a0de:	f000 f9e7 	bl	800a4b0 <__sinit>
 800a0e2:	4b21      	ldr	r3, [pc, #132]	; (800a168 <__swbuf_r+0x98>)
 800a0e4:	429c      	cmp	r4, r3
 800a0e6:	d12b      	bne.n	800a140 <__swbuf_r+0x70>
 800a0e8:	686c      	ldr	r4, [r5, #4]
 800a0ea:	69a3      	ldr	r3, [r4, #24]
 800a0ec:	60a3      	str	r3, [r4, #8]
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	071a      	lsls	r2, r3, #28
 800a0f2:	d52f      	bpl.n	800a154 <__swbuf_r+0x84>
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	b36b      	cbz	r3, 800a154 <__swbuf_r+0x84>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	6820      	ldr	r0, [r4, #0]
 800a0fc:	1ac0      	subs	r0, r0, r3
 800a0fe:	6963      	ldr	r3, [r4, #20]
 800a100:	b2f6      	uxtb	r6, r6
 800a102:	4283      	cmp	r3, r0
 800a104:	4637      	mov	r7, r6
 800a106:	dc04      	bgt.n	800a112 <__swbuf_r+0x42>
 800a108:	4621      	mov	r1, r4
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 f93c 	bl	800a388 <_fflush_r>
 800a110:	bb30      	cbnz	r0, 800a160 <__swbuf_r+0x90>
 800a112:	68a3      	ldr	r3, [r4, #8]
 800a114:	3b01      	subs	r3, #1
 800a116:	60a3      	str	r3, [r4, #8]
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	6022      	str	r2, [r4, #0]
 800a11e:	701e      	strb	r6, [r3, #0]
 800a120:	6963      	ldr	r3, [r4, #20]
 800a122:	3001      	adds	r0, #1
 800a124:	4283      	cmp	r3, r0
 800a126:	d004      	beq.n	800a132 <__swbuf_r+0x62>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	07db      	lsls	r3, r3, #31
 800a12c:	d506      	bpl.n	800a13c <__swbuf_r+0x6c>
 800a12e:	2e0a      	cmp	r6, #10
 800a130:	d104      	bne.n	800a13c <__swbuf_r+0x6c>
 800a132:	4621      	mov	r1, r4
 800a134:	4628      	mov	r0, r5
 800a136:	f000 f927 	bl	800a388 <_fflush_r>
 800a13a:	b988      	cbnz	r0, 800a160 <__swbuf_r+0x90>
 800a13c:	4638      	mov	r0, r7
 800a13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a140:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <__swbuf_r+0x9c>)
 800a142:	429c      	cmp	r4, r3
 800a144:	d101      	bne.n	800a14a <__swbuf_r+0x7a>
 800a146:	68ac      	ldr	r4, [r5, #8]
 800a148:	e7cf      	b.n	800a0ea <__swbuf_r+0x1a>
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <__swbuf_r+0xa0>)
 800a14c:	429c      	cmp	r4, r3
 800a14e:	bf08      	it	eq
 800a150:	68ec      	ldreq	r4, [r5, #12]
 800a152:	e7ca      	b.n	800a0ea <__swbuf_r+0x1a>
 800a154:	4621      	mov	r1, r4
 800a156:	4628      	mov	r0, r5
 800a158:	f000 f81a 	bl	800a190 <__swsetup_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d0cb      	beq.n	800a0f8 <__swbuf_r+0x28>
 800a160:	f04f 37ff 	mov.w	r7, #4294967295
 800a164:	e7ea      	b.n	800a13c <__swbuf_r+0x6c>
 800a166:	bf00      	nop
 800a168:	0800ad04 	.word	0x0800ad04
 800a16c:	0800ad24 	.word	0x0800ad24
 800a170:	0800ace4 	.word	0x0800ace4

0800a174 <__ascii_wctomb>:
 800a174:	b149      	cbz	r1, 800a18a <__ascii_wctomb+0x16>
 800a176:	2aff      	cmp	r2, #255	; 0xff
 800a178:	bf85      	ittet	hi
 800a17a:	238a      	movhi	r3, #138	; 0x8a
 800a17c:	6003      	strhi	r3, [r0, #0]
 800a17e:	700a      	strbls	r2, [r1, #0]
 800a180:	f04f 30ff 	movhi.w	r0, #4294967295
 800a184:	bf98      	it	ls
 800a186:	2001      	movls	r0, #1
 800a188:	4770      	bx	lr
 800a18a:	4608      	mov	r0, r1
 800a18c:	4770      	bx	lr
	...

0800a190 <__swsetup_r>:
 800a190:	4b32      	ldr	r3, [pc, #200]	; (800a25c <__swsetup_r+0xcc>)
 800a192:	b570      	push	{r4, r5, r6, lr}
 800a194:	681d      	ldr	r5, [r3, #0]
 800a196:	4606      	mov	r6, r0
 800a198:	460c      	mov	r4, r1
 800a19a:	b125      	cbz	r5, 800a1a6 <__swsetup_r+0x16>
 800a19c:	69ab      	ldr	r3, [r5, #24]
 800a19e:	b913      	cbnz	r3, 800a1a6 <__swsetup_r+0x16>
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f000 f985 	bl	800a4b0 <__sinit>
 800a1a6:	4b2e      	ldr	r3, [pc, #184]	; (800a260 <__swsetup_r+0xd0>)
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	d10f      	bne.n	800a1cc <__swsetup_r+0x3c>
 800a1ac:	686c      	ldr	r4, [r5, #4]
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1b4:	0719      	lsls	r1, r3, #28
 800a1b6:	d42c      	bmi.n	800a212 <__swsetup_r+0x82>
 800a1b8:	06dd      	lsls	r5, r3, #27
 800a1ba:	d411      	bmi.n	800a1e0 <__swsetup_r+0x50>
 800a1bc:	2309      	movs	r3, #9
 800a1be:	6033      	str	r3, [r6, #0]
 800a1c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ca:	e03e      	b.n	800a24a <__swsetup_r+0xba>
 800a1cc:	4b25      	ldr	r3, [pc, #148]	; (800a264 <__swsetup_r+0xd4>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <__swsetup_r+0x46>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7eb      	b.n	800a1ae <__swsetup_r+0x1e>
 800a1d6:	4b24      	ldr	r3, [pc, #144]	; (800a268 <__swsetup_r+0xd8>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	bf08      	it	eq
 800a1dc:	68ec      	ldreq	r4, [r5, #12]
 800a1de:	e7e6      	b.n	800a1ae <__swsetup_r+0x1e>
 800a1e0:	0758      	lsls	r0, r3, #29
 800a1e2:	d512      	bpl.n	800a20a <__swsetup_r+0x7a>
 800a1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1e6:	b141      	cbz	r1, 800a1fa <__swsetup_r+0x6a>
 800a1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	d002      	beq.n	800a1f6 <__swsetup_r+0x66>
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f7ff fb6f 	bl	80098d4 <_free_r>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6363      	str	r3, [r4, #52]	; 0x34
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	2300      	movs	r3, #0
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	f043 0308 	orr.w	r3, r3, #8
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	b94b      	cbnz	r3, 800a22a <__swsetup_r+0x9a>
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a21c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a220:	d003      	beq.n	800a22a <__swsetup_r+0x9a>
 800a222:	4621      	mov	r1, r4
 800a224:	4630      	mov	r0, r6
 800a226:	f000 fa07 	bl	800a638 <__smakebuf_r>
 800a22a:	89a0      	ldrh	r0, [r4, #12]
 800a22c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a230:	f010 0301 	ands.w	r3, r0, #1
 800a234:	d00a      	beq.n	800a24c <__swsetup_r+0xbc>
 800a236:	2300      	movs	r3, #0
 800a238:	60a3      	str	r3, [r4, #8]
 800a23a:	6963      	ldr	r3, [r4, #20]
 800a23c:	425b      	negs	r3, r3
 800a23e:	61a3      	str	r3, [r4, #24]
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	b943      	cbnz	r3, 800a256 <__swsetup_r+0xc6>
 800a244:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a248:	d1ba      	bne.n	800a1c0 <__swsetup_r+0x30>
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	0781      	lsls	r1, r0, #30
 800a24e:	bf58      	it	pl
 800a250:	6963      	ldrpl	r3, [r4, #20]
 800a252:	60a3      	str	r3, [r4, #8]
 800a254:	e7f4      	b.n	800a240 <__swsetup_r+0xb0>
 800a256:	2000      	movs	r0, #0
 800a258:	e7f7      	b.n	800a24a <__swsetup_r+0xba>
 800a25a:	bf00      	nop
 800a25c:	20000028 	.word	0x20000028
 800a260:	0800ad04 	.word	0x0800ad04
 800a264:	0800ad24 	.word	0x0800ad24
 800a268:	0800ace4 	.word	0x0800ace4

0800a26c <abort>:
 800a26c:	b508      	push	{r3, lr}
 800a26e:	2006      	movs	r0, #6
 800a270:	f000 fa52 	bl	800a718 <raise>
 800a274:	2001      	movs	r0, #1
 800a276:	f7f7 ffef 	bl	8002258 <_exit>
	...

0800a27c <__sflush_r>:
 800a27c:	898a      	ldrh	r2, [r1, #12]
 800a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	4605      	mov	r5, r0
 800a284:	0710      	lsls	r0, r2, #28
 800a286:	460c      	mov	r4, r1
 800a288:	d458      	bmi.n	800a33c <__sflush_r+0xc0>
 800a28a:	684b      	ldr	r3, [r1, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dc05      	bgt.n	800a29c <__sflush_r+0x20>
 800a290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a292:	2b00      	cmp	r3, #0
 800a294:	dc02      	bgt.n	800a29c <__sflush_r+0x20>
 800a296:	2000      	movs	r0, #0
 800a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a29e:	2e00      	cmp	r6, #0
 800a2a0:	d0f9      	beq.n	800a296 <__sflush_r+0x1a>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2a8:	682f      	ldr	r7, [r5, #0]
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	d032      	beq.n	800a314 <__sflush_r+0x98>
 800a2ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	075a      	lsls	r2, r3, #29
 800a2b4:	d505      	bpl.n	800a2c2 <__sflush_r+0x46>
 800a2b6:	6863      	ldr	r3, [r4, #4]
 800a2b8:	1ac0      	subs	r0, r0, r3
 800a2ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2bc:	b10b      	cbz	r3, 800a2c2 <__sflush_r+0x46>
 800a2be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2c0:	1ac0      	subs	r0, r0, r3
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c8:	6a21      	ldr	r1, [r4, #32]
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b0      	blx	r6
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	d106      	bne.n	800a2e2 <__sflush_r+0x66>
 800a2d4:	6829      	ldr	r1, [r5, #0]
 800a2d6:	291d      	cmp	r1, #29
 800a2d8:	d82c      	bhi.n	800a334 <__sflush_r+0xb8>
 800a2da:	4a2a      	ldr	r2, [pc, #168]	; (800a384 <__sflush_r+0x108>)
 800a2dc:	40ca      	lsrs	r2, r1
 800a2de:	07d6      	lsls	r6, r2, #31
 800a2e0:	d528      	bpl.n	800a334 <__sflush_r+0xb8>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	6062      	str	r2, [r4, #4]
 800a2e6:	04d9      	lsls	r1, r3, #19
 800a2e8:	6922      	ldr	r2, [r4, #16]
 800a2ea:	6022      	str	r2, [r4, #0]
 800a2ec:	d504      	bpl.n	800a2f8 <__sflush_r+0x7c>
 800a2ee:	1c42      	adds	r2, r0, #1
 800a2f0:	d101      	bne.n	800a2f6 <__sflush_r+0x7a>
 800a2f2:	682b      	ldr	r3, [r5, #0]
 800a2f4:	b903      	cbnz	r3, 800a2f8 <__sflush_r+0x7c>
 800a2f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2fa:	602f      	str	r7, [r5, #0]
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	d0ca      	beq.n	800a296 <__sflush_r+0x1a>
 800a300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a304:	4299      	cmp	r1, r3
 800a306:	d002      	beq.n	800a30e <__sflush_r+0x92>
 800a308:	4628      	mov	r0, r5
 800a30a:	f7ff fae3 	bl	80098d4 <_free_r>
 800a30e:	2000      	movs	r0, #0
 800a310:	6360      	str	r0, [r4, #52]	; 0x34
 800a312:	e7c1      	b.n	800a298 <__sflush_r+0x1c>
 800a314:	6a21      	ldr	r1, [r4, #32]
 800a316:	2301      	movs	r3, #1
 800a318:	4628      	mov	r0, r5
 800a31a:	47b0      	blx	r6
 800a31c:	1c41      	adds	r1, r0, #1
 800a31e:	d1c7      	bne.n	800a2b0 <__sflush_r+0x34>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0c4      	beq.n	800a2b0 <__sflush_r+0x34>
 800a326:	2b1d      	cmp	r3, #29
 800a328:	d001      	beq.n	800a32e <__sflush_r+0xb2>
 800a32a:	2b16      	cmp	r3, #22
 800a32c:	d101      	bne.n	800a332 <__sflush_r+0xb6>
 800a32e:	602f      	str	r7, [r5, #0]
 800a330:	e7b1      	b.n	800a296 <__sflush_r+0x1a>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	e7ad      	b.n	800a298 <__sflush_r+0x1c>
 800a33c:	690f      	ldr	r7, [r1, #16]
 800a33e:	2f00      	cmp	r7, #0
 800a340:	d0a9      	beq.n	800a296 <__sflush_r+0x1a>
 800a342:	0793      	lsls	r3, r2, #30
 800a344:	680e      	ldr	r6, [r1, #0]
 800a346:	bf08      	it	eq
 800a348:	694b      	ldreq	r3, [r1, #20]
 800a34a:	600f      	str	r7, [r1, #0]
 800a34c:	bf18      	it	ne
 800a34e:	2300      	movne	r3, #0
 800a350:	eba6 0807 	sub.w	r8, r6, r7
 800a354:	608b      	str	r3, [r1, #8]
 800a356:	f1b8 0f00 	cmp.w	r8, #0
 800a35a:	dd9c      	ble.n	800a296 <__sflush_r+0x1a>
 800a35c:	6a21      	ldr	r1, [r4, #32]
 800a35e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a360:	4643      	mov	r3, r8
 800a362:	463a      	mov	r2, r7
 800a364:	4628      	mov	r0, r5
 800a366:	47b0      	blx	r6
 800a368:	2800      	cmp	r0, #0
 800a36a:	dc06      	bgt.n	800a37a <__sflush_r+0xfe>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	e78e      	b.n	800a298 <__sflush_r+0x1c>
 800a37a:	4407      	add	r7, r0
 800a37c:	eba8 0800 	sub.w	r8, r8, r0
 800a380:	e7e9      	b.n	800a356 <__sflush_r+0xda>
 800a382:	bf00      	nop
 800a384:	20400001 	.word	0x20400001

0800a388 <_fflush_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	690b      	ldr	r3, [r1, #16]
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b913      	cbnz	r3, 800a398 <_fflush_r+0x10>
 800a392:	2500      	movs	r5, #0
 800a394:	4628      	mov	r0, r5
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	b118      	cbz	r0, 800a3a2 <_fflush_r+0x1a>
 800a39a:	6983      	ldr	r3, [r0, #24]
 800a39c:	b90b      	cbnz	r3, 800a3a2 <_fflush_r+0x1a>
 800a39e:	f000 f887 	bl	800a4b0 <__sinit>
 800a3a2:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <_fflush_r+0x6c>)
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	d11b      	bne.n	800a3e0 <_fflush_r+0x58>
 800a3a8:	686c      	ldr	r4, [r5, #4]
 800a3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0ef      	beq.n	800a392 <_fflush_r+0xa>
 800a3b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3b4:	07d0      	lsls	r0, r2, #31
 800a3b6:	d404      	bmi.n	800a3c2 <_fflush_r+0x3a>
 800a3b8:	0599      	lsls	r1, r3, #22
 800a3ba:	d402      	bmi.n	800a3c2 <_fflush_r+0x3a>
 800a3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3be:	f000 f915 	bl	800a5ec <__retarget_lock_acquire_recursive>
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	f7ff ff59 	bl	800a27c <__sflush_r>
 800a3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3cc:	07da      	lsls	r2, r3, #31
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	d4e0      	bmi.n	800a394 <_fflush_r+0xc>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	059b      	lsls	r3, r3, #22
 800a3d6:	d4dd      	bmi.n	800a394 <_fflush_r+0xc>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3da:	f000 f908 	bl	800a5ee <__retarget_lock_release_recursive>
 800a3de:	e7d9      	b.n	800a394 <_fflush_r+0xc>
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <_fflush_r+0x70>)
 800a3e2:	429c      	cmp	r4, r3
 800a3e4:	d101      	bne.n	800a3ea <_fflush_r+0x62>
 800a3e6:	68ac      	ldr	r4, [r5, #8]
 800a3e8:	e7df      	b.n	800a3aa <_fflush_r+0x22>
 800a3ea:	4b04      	ldr	r3, [pc, #16]	; (800a3fc <_fflush_r+0x74>)
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	bf08      	it	eq
 800a3f0:	68ec      	ldreq	r4, [r5, #12]
 800a3f2:	e7da      	b.n	800a3aa <_fflush_r+0x22>
 800a3f4:	0800ad04 	.word	0x0800ad04
 800a3f8:	0800ad24 	.word	0x0800ad24
 800a3fc:	0800ace4 	.word	0x0800ace4

0800a400 <std>:
 800a400:	2300      	movs	r3, #0
 800a402:	b510      	push	{r4, lr}
 800a404:	4604      	mov	r4, r0
 800a406:	e9c0 3300 	strd	r3, r3, [r0]
 800a40a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a40e:	6083      	str	r3, [r0, #8]
 800a410:	8181      	strh	r1, [r0, #12]
 800a412:	6643      	str	r3, [r0, #100]	; 0x64
 800a414:	81c2      	strh	r2, [r0, #14]
 800a416:	6183      	str	r3, [r0, #24]
 800a418:	4619      	mov	r1, r3
 800a41a:	2208      	movs	r2, #8
 800a41c:	305c      	adds	r0, #92	; 0x5c
 800a41e:	f7fd fb97 	bl	8007b50 <memset>
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <std+0x38>)
 800a424:	6263      	str	r3, [r4, #36]	; 0x24
 800a426:	4b05      	ldr	r3, [pc, #20]	; (800a43c <std+0x3c>)
 800a428:	62a3      	str	r3, [r4, #40]	; 0x28
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <std+0x40>)
 800a42c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <std+0x44>)
 800a430:	6224      	str	r4, [r4, #32]
 800a432:	6323      	str	r3, [r4, #48]	; 0x30
 800a434:	bd10      	pop	{r4, pc}
 800a436:	bf00      	nop
 800a438:	0800a751 	.word	0x0800a751
 800a43c:	0800a773 	.word	0x0800a773
 800a440:	0800a7ab 	.word	0x0800a7ab
 800a444:	0800a7cf 	.word	0x0800a7cf

0800a448 <_cleanup_r>:
 800a448:	4901      	ldr	r1, [pc, #4]	; (800a450 <_cleanup_r+0x8>)
 800a44a:	f000 b8af 	b.w	800a5ac <_fwalk_reent>
 800a44e:	bf00      	nop
 800a450:	0800a389 	.word	0x0800a389

0800a454 <__sfmoreglue>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	1e4a      	subs	r2, r1, #1
 800a458:	2568      	movs	r5, #104	; 0x68
 800a45a:	4355      	muls	r5, r2
 800a45c:	460e      	mov	r6, r1
 800a45e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a462:	f7ff fa87 	bl	8009974 <_malloc_r>
 800a466:	4604      	mov	r4, r0
 800a468:	b140      	cbz	r0, 800a47c <__sfmoreglue+0x28>
 800a46a:	2100      	movs	r1, #0
 800a46c:	e9c0 1600 	strd	r1, r6, [r0]
 800a470:	300c      	adds	r0, #12
 800a472:	60a0      	str	r0, [r4, #8]
 800a474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a478:	f7fd fb6a 	bl	8007b50 <memset>
 800a47c:	4620      	mov	r0, r4
 800a47e:	bd70      	pop	{r4, r5, r6, pc}

0800a480 <__sfp_lock_acquire>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__sfp_lock_acquire+0x8>)
 800a482:	f000 b8b3 	b.w	800a5ec <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	20000944 	.word	0x20000944

0800a48c <__sfp_lock_release>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__sfp_lock_release+0x8>)
 800a48e:	f000 b8ae 	b.w	800a5ee <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	20000944 	.word	0x20000944

0800a498 <__sinit_lock_acquire>:
 800a498:	4801      	ldr	r0, [pc, #4]	; (800a4a0 <__sinit_lock_acquire+0x8>)
 800a49a:	f000 b8a7 	b.w	800a5ec <__retarget_lock_acquire_recursive>
 800a49e:	bf00      	nop
 800a4a0:	2000093f 	.word	0x2000093f

0800a4a4 <__sinit_lock_release>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <__sinit_lock_release+0x8>)
 800a4a6:	f000 b8a2 	b.w	800a5ee <__retarget_lock_release_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	2000093f 	.word	0x2000093f

0800a4b0 <__sinit>:
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	f7ff fff0 	bl	800a498 <__sinit_lock_acquire>
 800a4b8:	69a3      	ldr	r3, [r4, #24]
 800a4ba:	b11b      	cbz	r3, 800a4c4 <__sinit+0x14>
 800a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c0:	f7ff bff0 	b.w	800a4a4 <__sinit_lock_release>
 800a4c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a4ca:	4b13      	ldr	r3, [pc, #76]	; (800a518 <__sinit+0x68>)
 800a4cc:	4a13      	ldr	r2, [pc, #76]	; (800a51c <__sinit+0x6c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4d2:	42a3      	cmp	r3, r4
 800a4d4:	bf04      	itt	eq
 800a4d6:	2301      	moveq	r3, #1
 800a4d8:	61a3      	streq	r3, [r4, #24]
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f820 	bl	800a520 <__sfp>
 800a4e0:	6060      	str	r0, [r4, #4]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f81c 	bl	800a520 <__sfp>
 800a4e8:	60a0      	str	r0, [r4, #8]
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 f818 	bl	800a520 <__sfp>
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	60e0      	str	r0, [r4, #12]
 800a4f4:	2104      	movs	r1, #4
 800a4f6:	6860      	ldr	r0, [r4, #4]
 800a4f8:	f7ff ff82 	bl	800a400 <std>
 800a4fc:	68a0      	ldr	r0, [r4, #8]
 800a4fe:	2201      	movs	r2, #1
 800a500:	2109      	movs	r1, #9
 800a502:	f7ff ff7d 	bl	800a400 <std>
 800a506:	68e0      	ldr	r0, [r4, #12]
 800a508:	2202      	movs	r2, #2
 800a50a:	2112      	movs	r1, #18
 800a50c:	f7ff ff78 	bl	800a400 <std>
 800a510:	2301      	movs	r3, #1
 800a512:	61a3      	str	r3, [r4, #24]
 800a514:	e7d2      	b.n	800a4bc <__sinit+0xc>
 800a516:	bf00      	nop
 800a518:	0800a95c 	.word	0x0800a95c
 800a51c:	0800a449 	.word	0x0800a449

0800a520 <__sfp>:
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	4607      	mov	r7, r0
 800a524:	f7ff ffac 	bl	800a480 <__sfp_lock_acquire>
 800a528:	4b1e      	ldr	r3, [pc, #120]	; (800a5a4 <__sfp+0x84>)
 800a52a:	681e      	ldr	r6, [r3, #0]
 800a52c:	69b3      	ldr	r3, [r6, #24]
 800a52e:	b913      	cbnz	r3, 800a536 <__sfp+0x16>
 800a530:	4630      	mov	r0, r6
 800a532:	f7ff ffbd 	bl	800a4b0 <__sinit>
 800a536:	3648      	adds	r6, #72	; 0x48
 800a538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	d503      	bpl.n	800a548 <__sfp+0x28>
 800a540:	6833      	ldr	r3, [r6, #0]
 800a542:	b30b      	cbz	r3, 800a588 <__sfp+0x68>
 800a544:	6836      	ldr	r6, [r6, #0]
 800a546:	e7f7      	b.n	800a538 <__sfp+0x18>
 800a548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a54c:	b9d5      	cbnz	r5, 800a584 <__sfp+0x64>
 800a54e:	4b16      	ldr	r3, [pc, #88]	; (800a5a8 <__sfp+0x88>)
 800a550:	60e3      	str	r3, [r4, #12]
 800a552:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a556:	6665      	str	r5, [r4, #100]	; 0x64
 800a558:	f000 f847 	bl	800a5ea <__retarget_lock_init_recursive>
 800a55c:	f7ff ff96 	bl	800a48c <__sfp_lock_release>
 800a560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a568:	6025      	str	r5, [r4, #0]
 800a56a:	61a5      	str	r5, [r4, #24]
 800a56c:	2208      	movs	r2, #8
 800a56e:	4629      	mov	r1, r5
 800a570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a574:	f7fd faec 	bl	8007b50 <memset>
 800a578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a57c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a580:	4620      	mov	r0, r4
 800a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a584:	3468      	adds	r4, #104	; 0x68
 800a586:	e7d9      	b.n	800a53c <__sfp+0x1c>
 800a588:	2104      	movs	r1, #4
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7ff ff62 	bl	800a454 <__sfmoreglue>
 800a590:	4604      	mov	r4, r0
 800a592:	6030      	str	r0, [r6, #0]
 800a594:	2800      	cmp	r0, #0
 800a596:	d1d5      	bne.n	800a544 <__sfp+0x24>
 800a598:	f7ff ff78 	bl	800a48c <__sfp_lock_release>
 800a59c:	230c      	movs	r3, #12
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	e7ee      	b.n	800a580 <__sfp+0x60>
 800a5a2:	bf00      	nop
 800a5a4:	0800a95c 	.word	0x0800a95c
 800a5a8:	ffff0001 	.word	0xffff0001

0800a5ac <_fwalk_reent>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	4688      	mov	r8, r1
 800a5b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5b8:	2700      	movs	r7, #0
 800a5ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5be:	f1b9 0901 	subs.w	r9, r9, #1
 800a5c2:	d505      	bpl.n	800a5d0 <_fwalk_reent+0x24>
 800a5c4:	6824      	ldr	r4, [r4, #0]
 800a5c6:	2c00      	cmp	r4, #0
 800a5c8:	d1f7      	bne.n	800a5ba <_fwalk_reent+0xe>
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d0:	89ab      	ldrh	r3, [r5, #12]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d907      	bls.n	800a5e6 <_fwalk_reent+0x3a>
 800a5d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	d003      	beq.n	800a5e6 <_fwalk_reent+0x3a>
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	47c0      	blx	r8
 800a5e4:	4307      	orrs	r7, r0
 800a5e6:	3568      	adds	r5, #104	; 0x68
 800a5e8:	e7e9      	b.n	800a5be <_fwalk_reent+0x12>

0800a5ea <__retarget_lock_init_recursive>:
 800a5ea:	4770      	bx	lr

0800a5ec <__retarget_lock_acquire_recursive>:
 800a5ec:	4770      	bx	lr

0800a5ee <__retarget_lock_release_recursive>:
 800a5ee:	4770      	bx	lr

0800a5f0 <__swhatbuf_r>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	460e      	mov	r6, r1
 800a5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	b096      	sub	sp, #88	; 0x58
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	461d      	mov	r5, r3
 800a600:	da07      	bge.n	800a612 <__swhatbuf_r+0x22>
 800a602:	2300      	movs	r3, #0
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	89b3      	ldrh	r3, [r6, #12]
 800a608:	061a      	lsls	r2, r3, #24
 800a60a:	d410      	bmi.n	800a62e <__swhatbuf_r+0x3e>
 800a60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a610:	e00e      	b.n	800a630 <__swhatbuf_r+0x40>
 800a612:	466a      	mov	r2, sp
 800a614:	f000 f902 	bl	800a81c <_fstat_r>
 800a618:	2800      	cmp	r0, #0
 800a61a:	dbf2      	blt.n	800a602 <__swhatbuf_r+0x12>
 800a61c:	9a01      	ldr	r2, [sp, #4]
 800a61e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a622:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a626:	425a      	negs	r2, r3
 800a628:	415a      	adcs	r2, r3
 800a62a:	602a      	str	r2, [r5, #0]
 800a62c:	e7ee      	b.n	800a60c <__swhatbuf_r+0x1c>
 800a62e:	2340      	movs	r3, #64	; 0x40
 800a630:	2000      	movs	r0, #0
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	b016      	add	sp, #88	; 0x58
 800a636:	bd70      	pop	{r4, r5, r6, pc}

0800a638 <__smakebuf_r>:
 800a638:	898b      	ldrh	r3, [r1, #12]
 800a63a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a63c:	079d      	lsls	r5, r3, #30
 800a63e:	4606      	mov	r6, r0
 800a640:	460c      	mov	r4, r1
 800a642:	d507      	bpl.n	800a654 <__smakebuf_r+0x1c>
 800a644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	2301      	movs	r3, #1
 800a64e:	6163      	str	r3, [r4, #20]
 800a650:	b002      	add	sp, #8
 800a652:	bd70      	pop	{r4, r5, r6, pc}
 800a654:	ab01      	add	r3, sp, #4
 800a656:	466a      	mov	r2, sp
 800a658:	f7ff ffca 	bl	800a5f0 <__swhatbuf_r>
 800a65c:	9900      	ldr	r1, [sp, #0]
 800a65e:	4605      	mov	r5, r0
 800a660:	4630      	mov	r0, r6
 800a662:	f7ff f987 	bl	8009974 <_malloc_r>
 800a666:	b948      	cbnz	r0, 800a67c <__smakebuf_r+0x44>
 800a668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66c:	059a      	lsls	r2, r3, #22
 800a66e:	d4ef      	bmi.n	800a650 <__smakebuf_r+0x18>
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	f043 0302 	orr.w	r3, r3, #2
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	e7e3      	b.n	800a644 <__smakebuf_r+0xc>
 800a67c:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <__smakebuf_r+0x7c>)
 800a67e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	6020      	str	r0, [r4, #0]
 800a684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	9b00      	ldr	r3, [sp, #0]
 800a68c:	6163      	str	r3, [r4, #20]
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	6120      	str	r0, [r4, #16]
 800a692:	b15b      	cbz	r3, 800a6ac <__smakebuf_r+0x74>
 800a694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a698:	4630      	mov	r0, r6
 800a69a:	f000 f8d1 	bl	800a840 <_isatty_r>
 800a69e:	b128      	cbz	r0, 800a6ac <__smakebuf_r+0x74>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	f023 0303 	bic.w	r3, r3, #3
 800a6a6:	f043 0301 	orr.w	r3, r3, #1
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	89a0      	ldrh	r0, [r4, #12]
 800a6ae:	4305      	orrs	r5, r0
 800a6b0:	81a5      	strh	r5, [r4, #12]
 800a6b2:	e7cd      	b.n	800a650 <__smakebuf_r+0x18>
 800a6b4:	0800a449 	.word	0x0800a449

0800a6b8 <_malloc_usable_size_r>:
 800a6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6bc:	1f18      	subs	r0, r3, #4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfbc      	itt	lt
 800a6c2:	580b      	ldrlt	r3, [r1, r0]
 800a6c4:	18c0      	addlt	r0, r0, r3
 800a6c6:	4770      	bx	lr

0800a6c8 <_raise_r>:
 800a6c8:	291f      	cmp	r1, #31
 800a6ca:	b538      	push	{r3, r4, r5, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	d904      	bls.n	800a6dc <_raise_r+0x14>
 800a6d2:	2316      	movs	r3, #22
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6de:	b112      	cbz	r2, 800a6e6 <_raise_r+0x1e>
 800a6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6e4:	b94b      	cbnz	r3, 800a6fa <_raise_r+0x32>
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 f830 	bl	800a74c <_getpid_r>
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6f6:	f000 b817 	b.w	800a728 <_kill_r>
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d00a      	beq.n	800a714 <_raise_r+0x4c>
 800a6fe:	1c59      	adds	r1, r3, #1
 800a700:	d103      	bne.n	800a70a <_raise_r+0x42>
 800a702:	2316      	movs	r3, #22
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	2001      	movs	r0, #1
 800a708:	e7e7      	b.n	800a6da <_raise_r+0x12>
 800a70a:	2400      	movs	r4, #0
 800a70c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a710:	4628      	mov	r0, r5
 800a712:	4798      	blx	r3
 800a714:	2000      	movs	r0, #0
 800a716:	e7e0      	b.n	800a6da <_raise_r+0x12>

0800a718 <raise>:
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <raise+0xc>)
 800a71a:	4601      	mov	r1, r0
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f7ff bfd3 	b.w	800a6c8 <_raise_r>
 800a722:	bf00      	nop
 800a724:	20000028 	.word	0x20000028

0800a728 <_kill_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_kill_r+0x20>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	4611      	mov	r1, r2
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	f7f7 fd7f 	bl	8002238 <_kill>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d102      	bne.n	800a744 <_kill_r+0x1c>
 800a73e:	682b      	ldr	r3, [r5, #0]
 800a740:	b103      	cbz	r3, 800a744 <_kill_r+0x1c>
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop
 800a748:	20000938 	.word	0x20000938

0800a74c <_getpid_r>:
 800a74c:	f7f7 bd6c 	b.w	8002228 <_getpid>

0800a750 <__sread>:
 800a750:	b510      	push	{r4, lr}
 800a752:	460c      	mov	r4, r1
 800a754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a758:	f000 f894 	bl	800a884 <_read_r>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	bfab      	itete	ge
 800a760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a762:	89a3      	ldrhlt	r3, [r4, #12]
 800a764:	181b      	addge	r3, r3, r0
 800a766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a76a:	bfac      	ite	ge
 800a76c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a76e:	81a3      	strhlt	r3, [r4, #12]
 800a770:	bd10      	pop	{r4, pc}

0800a772 <__swrite>:
 800a772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a776:	461f      	mov	r7, r3
 800a778:	898b      	ldrh	r3, [r1, #12]
 800a77a:	05db      	lsls	r3, r3, #23
 800a77c:	4605      	mov	r5, r0
 800a77e:	460c      	mov	r4, r1
 800a780:	4616      	mov	r6, r2
 800a782:	d505      	bpl.n	800a790 <__swrite+0x1e>
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	2302      	movs	r3, #2
 800a78a:	2200      	movs	r2, #0
 800a78c:	f000 f868 	bl	800a860 <_lseek_r>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	4632      	mov	r2, r6
 800a79e:	463b      	mov	r3, r7
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	f000 b817 	b.w	800a7d8 <_write_r>

0800a7aa <__sseek>:
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b2:	f000 f855 	bl	800a860 <_lseek_r>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	bf15      	itete	ne
 800a7bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7c6:	81a3      	strheq	r3, [r4, #12]
 800a7c8:	bf18      	it	ne
 800a7ca:	81a3      	strhne	r3, [r4, #12]
 800a7cc:	bd10      	pop	{r4, pc}

0800a7ce <__sclose>:
 800a7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d2:	f000 b813 	b.w	800a7fc <_close_r>
	...

0800a7d8 <_write_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d07      	ldr	r5, [pc, #28]	; (800a7f8 <_write_r+0x20>)
 800a7dc:	4604      	mov	r4, r0
 800a7de:	4608      	mov	r0, r1
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	602a      	str	r2, [r5, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f7f7 fd5d 	bl	80022a6 <_write>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d102      	bne.n	800a7f6 <_write_r+0x1e>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	b103      	cbz	r3, 800a7f6 <_write_r+0x1e>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
 800a7f8:	20000938 	.word	0x20000938

0800a7fc <_close_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4d06      	ldr	r5, [pc, #24]	; (800a818 <_close_r+0x1c>)
 800a800:	2300      	movs	r3, #0
 800a802:	4604      	mov	r4, r0
 800a804:	4608      	mov	r0, r1
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	f7f7 fd69 	bl	80022de <_close>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_close_r+0x1a>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	b103      	cbz	r3, 800a816 <_close_r+0x1a>
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	20000938 	.word	0x20000938

0800a81c <_fstat_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	; (800a83c <_fstat_r+0x20>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f7f7 fd64 	bl	80022f6 <_fstat>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d102      	bne.n	800a838 <_fstat_r+0x1c>
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	b103      	cbz	r3, 800a838 <_fstat_r+0x1c>
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	bf00      	nop
 800a83c:	20000938 	.word	0x20000938

0800a840 <_isatty_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d06      	ldr	r5, [pc, #24]	; (800a85c <_isatty_r+0x1c>)
 800a844:	2300      	movs	r3, #0
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	602b      	str	r3, [r5, #0]
 800a84c:	f7f7 fd63 	bl	8002316 <_isatty>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d102      	bne.n	800a85a <_isatty_r+0x1a>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	b103      	cbz	r3, 800a85a <_isatty_r+0x1a>
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	20000938 	.word	0x20000938

0800a860 <_lseek_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d07      	ldr	r5, [pc, #28]	; (800a880 <_lseek_r+0x20>)
 800a864:	4604      	mov	r4, r0
 800a866:	4608      	mov	r0, r1
 800a868:	4611      	mov	r1, r2
 800a86a:	2200      	movs	r2, #0
 800a86c:	602a      	str	r2, [r5, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f7f7 fd5c 	bl	800232c <_lseek>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_lseek_r+0x1e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_lseek_r+0x1e>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20000938 	.word	0x20000938

0800a884 <_read_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d07      	ldr	r5, [pc, #28]	; (800a8a4 <_read_r+0x20>)
 800a888:	4604      	mov	r4, r0
 800a88a:	4608      	mov	r0, r1
 800a88c:	4611      	mov	r1, r2
 800a88e:	2200      	movs	r2, #0
 800a890:	602a      	str	r2, [r5, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	f7f7 fcea 	bl	800226c <_read>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_read_r+0x1e>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_read_r+0x1e>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20000938 	.word	0x20000938

0800a8a8 <_init>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	bf00      	nop
 800a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ae:	bc08      	pop	{r3}
 800a8b0:	469e      	mov	lr, r3
 800a8b2:	4770      	bx	lr

0800a8b4 <_fini>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	bf00      	nop
 800a8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ba:	bc08      	pop	{r3}
 800a8bc:	469e      	mov	lr, r3
 800a8be:	4770      	bx	lr
