
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a770  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800a970  0800a970  0001a970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adec  0800adec  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf4  0800adf4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adf8  0800adf8  0001adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800adfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  200001f8  0800aff4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800aff4  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019992  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ce  00000000  00000000  00039bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9e2  00000000  00000000  0003f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001995d  00000000  00000000  0006a2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010223e  00000000  00000000  00083c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  00185ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a958 	.word	0x0800a958

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800a958 	.word	0x0800a958

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_CAN1_Init+0x68>)
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <MX_CAN1_Init+0x6c>)
 80005fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_CAN1_Init+0x68>)
 8000600:	2210      	movs	r2, #16
 8000602:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_CAN1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_CAN1_Init+0x68>)
 800060c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000610:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_CAN1_Init+0x68>)
 8000614:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000618:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_CAN1_Init+0x68>)
 800061c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000620:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_CAN1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_CAN1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_CAN1_Init+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_CAN1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_CAN1_Init+0x68>)
 8000648:	f002 faaa 	bl	8002ba0 <HAL_CAN_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000652:	f001 fd35 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000214 	.word	0x20000214
 8000660:	40006400 	.word	0x40006400

08000664 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <HAL_CAN_MspInit+0x8c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d12f      	bne.n	80006e6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 800068c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006a4:	f043 0308 	orr.w	r3, r3, #8
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0308 	and.w	r3, r3, #8
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006b6:	2303      	movs	r3, #3
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006c6:	2309      	movs	r3, #9
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_CAN_MspInit+0x94>)
 80006d2:	f003 fa77 	bl	8003bc4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2014      	movs	r0, #20
 80006dc:	f003 f9a9 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006e0:	2014      	movs	r0, #20
 80006e2:	f003 f9c2 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40006400 	.word	0x40006400
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020c00 	.word	0x40020c00

080006fc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a6b      	ldr	r2, [pc, #428]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a65      	ldr	r2, [pc, #404]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a5f      	ldr	r2, [pc, #380]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a59      	ldr	r2, [pc, #356]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a53      	ldr	r2, [pc, #332]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4d      	ldr	r2, [pc, #308]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a8:	4847      	ldr	r0, [pc, #284]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 80007aa:	f003 fbb7 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4846      	ldr	r0, [pc, #280]	; (80008cc <MX_GPIO_Init+0x1d0>)
 80007b4:	f003 fbb2 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4840      	ldr	r0, [pc, #256]	; (80008d0 <MX_GPIO_Init+0x1d4>)
 80007d0:	f003 f9f8 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d4:	2332      	movs	r3, #50	; 0x32
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_GPIO_Init+0x1d4>)
 80007f0:	f003 f9e8 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f4:	2386      	movs	r3, #134	; 0x86
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4831      	ldr	r0, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x1d8>)
 8000810:	f003 f9d8 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000814:	f244 0381 	movw	r3, #16513	; 0x4081
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4826      	ldr	r0, [pc, #152]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 800082e:	f003 f9c9 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000844:	230b      	movs	r3, #11
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 8000850:	f003 f9b8 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <MX_GPIO_Init+0x1d0>)
 800086c:	f003 f9aa 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0x1d0>)
 8000884:	f003 f99e 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000888:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089a:	230b      	movs	r3, #11
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_GPIO_Init+0x1d0>)
 80008a6:	f003 f98d 	bl	8003bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f003 f8bf 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f003 f8d8 	bl	8003a6a <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021800 	.word	0x40021800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <fnLEDsErrorState+0x28>)
 80008e2:	f003 fb1b 	bl	8003f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <fnLEDsErrorState+0x28>)
 80008ec:	f003 fb16 	bl	8003f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <fnLEDsErrorState+0x28>)
 80008f8:	f003 fb10 	bl	8003f1c <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020400 	.word	0x40020400

08000904 <fnInit>:


//INIT FUNCTION
void fnInit(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

	switch(iMachineStatus){
 8000908:	4bb2      	ldr	r3, [pc, #712]	; (8000bd4 <fnInit+0x2d0>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b50      	cmp	r3, #80	; 0x50
 800090e:	f200 8327 	bhi.w	8000f60 <fnInit+0x65c>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <fnInit+0x14>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000a5d 	.word	0x08000a5d
 800091c:	08000f61 	.word	0x08000f61
 8000920:	08000f61 	.word	0x08000f61
 8000924:	08000f61 	.word	0x08000f61
 8000928:	08000f61 	.word	0x08000f61
 800092c:	08000aa9 	.word	0x08000aa9
 8000930:	08000f61 	.word	0x08000f61
 8000934:	08000f61 	.word	0x08000f61
 8000938:	08000f61 	.word	0x08000f61
 800093c:	08000f61 	.word	0x08000f61
 8000940:	08000ae5 	.word	0x08000ae5
 8000944:	08000f61 	.word	0x08000f61
 8000948:	08000f61 	.word	0x08000f61
 800094c:	08000f61 	.word	0x08000f61
 8000950:	08000f61 	.word	0x08000f61
 8000954:	08000f61 	.word	0x08000f61
 8000958:	08000f61 	.word	0x08000f61
 800095c:	08000f61 	.word	0x08000f61
 8000960:	08000f61 	.word	0x08000f61
 8000964:	08000f61 	.word	0x08000f61
 8000968:	08000b71 	.word	0x08000b71
 800096c:	08000f61 	.word	0x08000f61
 8000970:	08000f61 	.word	0x08000f61
 8000974:	08000f61 	.word	0x08000f61
 8000978:	08000f61 	.word	0x08000f61
 800097c:	08000c11 	.word	0x08000c11
 8000980:	08000f61 	.word	0x08000f61
 8000984:	08000f61 	.word	0x08000f61
 8000988:	08000f61 	.word	0x08000f61
 800098c:	08000f61 	.word	0x08000f61
 8000990:	08000c73 	.word	0x08000c73
 8000994:	08000f61 	.word	0x08000f61
 8000998:	08000f61 	.word	0x08000f61
 800099c:	08000f61 	.word	0x08000f61
 80009a0:	08000f61 	.word	0x08000f61
 80009a4:	08000f61 	.word	0x08000f61
 80009a8:	08000f61 	.word	0x08000f61
 80009ac:	08000f61 	.word	0x08000f61
 80009b0:	08000f61 	.word	0x08000f61
 80009b4:	08000f61 	.word	0x08000f61
 80009b8:	08000cd5 	.word	0x08000cd5
 80009bc:	08000f61 	.word	0x08000f61
 80009c0:	08000f61 	.word	0x08000f61
 80009c4:	08000f61 	.word	0x08000f61
 80009c8:	08000f61 	.word	0x08000f61
 80009cc:	08000f61 	.word	0x08000f61
 80009d0:	08000f61 	.word	0x08000f61
 80009d4:	08000f61 	.word	0x08000f61
 80009d8:	08000f61 	.word	0x08000f61
 80009dc:	08000f61 	.word	0x08000f61
 80009e0:	08000d37 	.word	0x08000d37
 80009e4:	08000f61 	.word	0x08000f61
 80009e8:	08000f61 	.word	0x08000f61
 80009ec:	08000f61 	.word	0x08000f61
 80009f0:	08000f61 	.word	0x08000f61
 80009f4:	08000d99 	.word	0x08000d99
 80009f8:	08000f61 	.word	0x08000f61
 80009fc:	08000f61 	.word	0x08000f61
 8000a00:	08000f61 	.word	0x08000f61
 8000a04:	08000f61 	.word	0x08000f61
 8000a08:	08000e09 	.word	0x08000e09
 8000a0c:	08000f61 	.word	0x08000f61
 8000a10:	08000f61 	.word	0x08000f61
 8000a14:	08000f61 	.word	0x08000f61
 8000a18:	08000f61 	.word	0x08000f61
 8000a1c:	08000f61 	.word	0x08000f61
 8000a20:	08000f61 	.word	0x08000f61
 8000a24:	08000f61 	.word	0x08000f61
 8000a28:	08000f61 	.word	0x08000f61
 8000a2c:	08000f61 	.word	0x08000f61
 8000a30:	08000e6b 	.word	0x08000e6b
 8000a34:	08000f61 	.word	0x08000f61
 8000a38:	08000f61 	.word	0x08000f61
 8000a3c:	08000f61 	.word	0x08000f61
 8000a40:	08000f61 	.word	0x08000f61
 8000a44:	08000f61 	.word	0x08000f61
 8000a48:	08000f61 	.word	0x08000f61
 8000a4c:	08000f61 	.word	0x08000f61
 8000a50:	08000f61 	.word	0x08000f61
 8000a54:	08000f61 	.word	0x08000f61
 8000a58:	08000f01 	.word	0x08000f01

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000a5c:	4b5e      	ldr	r3, [pc, #376]	; (8000bd8 <fnInit+0x2d4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000a62:	4b5d      	ldr	r3, [pc, #372]	; (8000bd8 <fnInit+0x2d4>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 8000a68:	4b5c      	ldr	r3, [pc, #368]	; (8000bdc <fnInit+0x2d8>)
 8000a6a:	2282      	movs	r2, #130	; 0x82
 8000a6c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000a6e:	4b5b      	ldr	r3, [pc, #364]	; (8000bdc <fnInit+0x2d8>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a74:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <fnInit+0x2dc>)
 8000a76:	4a59      	ldr	r2, [pc, #356]	; (8000bdc <fnInit+0x2d8>)
 8000a78:	4957      	ldr	r1, [pc, #348]	; (8000bd8 <fnInit+0x2d4>)
 8000a7a:	485a      	ldr	r0, [pc, #360]	; (8000be4 <fnInit+0x2e0>)
 8000a7c:	f002 fabc 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <fnInit+0x18c>
			fnLEDsErrorState();
 8000a86:	f7ff ff27 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000a8a:	f001 fb19 	bl	80020c0 <Error_Handler>
		else{
			iMachineStatus = 5;
			//SEND INFO THAT ENGINE IS INITIALIZING
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
		}
		break;
 8000a8e:	e267      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 5;
 8000a90:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <fnInit+0x2d0>)
 8000a92:	2205      	movs	r2, #5
 8000a94:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
 8000a96:	4b54      	ldr	r3, [pc, #336]	; (8000be8 <fnInit+0x2e4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	4953      	ldr	r1, [pc, #332]	; (8000bec <fnInit+0x2e8>)
 8000aa0:	4853      	ldr	r0, [pc, #332]	; (8000bf0 <fnInit+0x2ec>)
 8000aa2:	f005 fa8d 	bl	8005fc0 <HAL_UART_Transmit>
		break;
 8000aa6:	e25b      	b.n	8000f60 <fnInit+0x65c>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 8000aa8:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <fnInit+0x2d4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000aae:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <fnInit+0x2d4>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 8000ab4:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <fnInit+0x2d8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000aba:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <fnInit+0x2d8>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ac0:	4b47      	ldr	r3, [pc, #284]	; (8000be0 <fnInit+0x2dc>)
 8000ac2:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <fnInit+0x2d8>)
 8000ac4:	4944      	ldr	r1, [pc, #272]	; (8000bd8 <fnInit+0x2d4>)
 8000ac6:	4847      	ldr	r0, [pc, #284]	; (8000be4 <fnInit+0x2e0>)
 8000ac8:	f002 fa96 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <fnInit+0x1d8>
			fnLEDsErrorState();
 8000ad2:	f7ff ff01 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000ad6:	f001 faf3 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
		}
		break;
 8000ada:	e241      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 10;
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <fnInit+0x2d0>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	701a      	strb	r2, [r3, #0]
		break;
 8000ae2:	e23d      	b.n	8000f60 <fnInit+0x65c>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <fnInit+0x2d4>)
 8000ae6:	f240 620a 	movw	r2, #1546	; 0x60a
 8000aea:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <fnInit+0x2d4>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <fnInit+0x2d8>)
 8000af4:	2222      	movs	r2, #34	; 0x22
 8000af6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <fnInit+0x2d8>)
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <fnInit+0x2d8>)
 8000b00:	2260      	movs	r2, #96	; 0x60
 8000b02:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <fnInit+0x2d8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <fnInit+0x2d8>)
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <fnInit+0x2d8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <fnInit+0x2d8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <fnInit+0x2d8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	71da      	strb	r2, [r3, #7]

		//RESET ALL VARIABLES TO INITIAL CONDITIONS
		iMode = 100;
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <fnInit+0x2f0>)
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	701a      	strb	r2, [r3, #0]
		iSelected_leg = 100;
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <fnInit+0x2f4>)
 8000b2a:	2264      	movs	r2, #100	; 0x64
 8000b2c:	701a      	strb	r2, [r3, #0]

		iSerialMachineStatus = 100;
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <fnInit+0x2f8>)
 8000b30:	2264      	movs	r2, #100	; 0x64
 8000b32:	701a      	strb	r2, [r3, #0]
		iSerialRange = 0;
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <fnInit+0x2fc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
		iSerialReps = 0;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <fnInit+0x300>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]

		iSingleMachineStatus = 100;
 8000b40:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <fnInit+0x304>)
 8000b42:	2264      	movs	r2, #100	; 0x64
 8000b44:	701a      	strb	r2, [r3, #0]
		iPosition = 0;
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <fnInit+0x308>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <fnInit+0x2dc>)
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <fnInit+0x2d8>)
 8000b50:	4921      	ldr	r1, [pc, #132]	; (8000bd8 <fnInit+0x2d4>)
 8000b52:	4824      	ldr	r0, [pc, #144]	; (8000be4 <fnInit+0x2e0>)
 8000b54:	f002 fa50 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <fnInit+0x264>
			fnLEDsErrorState();
 8000b5e:	f7ff febb 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000b62:	f001 faad 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
		}
		break;
 8000b66:	e1fb      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 20;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <fnInit+0x2d0>)
 8000b6a:	2214      	movs	r2, #20
 8000b6c:	701a      	strb	r2, [r3, #0]
		break;
 8000b6e:	e1f7      	b.n	8000f60 <fnInit+0x65c>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <fnInit+0x2d4>)
 8000b72:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b76:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <fnInit+0x2d4>)
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <fnInit+0x2d8>)
 8000b80:	2222      	movs	r2, #34	; 0x22
 8000b82:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <fnInit+0x2d8>)
 8000b86:	2240      	movs	r2, #64	; 0x40
 8000b88:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <fnInit+0x2d8>)
 8000b8c:	2260      	movs	r2, #96	; 0x60
 8000b8e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <fnInit+0x2d8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <fnInit+0x2d8>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <fnInit+0x2d8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <fnInit+0x2d8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <fnInit+0x2d8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <fnInit+0x2dc>)
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <fnInit+0x2d8>)
 8000bb2:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <fnInit+0x2d4>)
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <fnInit+0x2e0>)
 8000bb6:	f002 fa1f 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <fnInit+0x2c6>
			fnLEDsErrorState();
 8000bc0:	f7ff fe8a 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000bc4:	f001 fa7c 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
		}
		break;
 8000bc8:	e1ca      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 25;
 8000bca:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <fnInit+0x2d0>)
 8000bcc:	2219      	movs	r2, #25
 8000bce:	701a      	strb	r2, [r3, #0]
		break;
 8000bd0:	e1c6      	b.n	8000f60 <fnInit+0x65c>
 8000bd2:	bf00      	nop
 8000bd4:	20000006 	.word	0x20000006
 8000bd8:	20000254 	.word	0x20000254
 8000bdc:	2000026c 	.word	0x2000026c
 8000be0:	20000274 	.word	0x20000274
 8000be4:	20000214 	.word	0x20000214
 8000be8:	20000000 	.word	0x20000000
 8000bec:	0800a9b4 	.word	0x0800a9b4
 8000bf0:	200004a0 	.word	0x200004a0
 8000bf4:	20000004 	.word	0x20000004
 8000bf8:	20000005 	.word	0x20000005
 8000bfc:	20000009 	.word	0x20000009
 8000c00:	20000014 	.word	0x20000014
 8000c04:	20000018 	.word	0x20000018
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	200002d0 	.word	0x200002d0

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000c10:	4bac      	ldr	r3, [pc, #688]	; (8000ec4 <fnInit+0x5c0>)
 8000c12:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c16:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c18:	4baa      	ldr	r3, [pc, #680]	; (8000ec4 <fnInit+0x5c0>)
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c1e:	4baa      	ldr	r3, [pc, #680]	; (8000ec8 <fnInit+0x5c4>)
 8000c20:	2222      	movs	r2, #34	; 0x22
 8000c22:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c24:	4ba8      	ldr	r3, [pc, #672]	; (8000ec8 <fnInit+0x5c4>)
 8000c26:	2240      	movs	r2, #64	; 0x40
 8000c28:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c2a:	4ba7      	ldr	r3, [pc, #668]	; (8000ec8 <fnInit+0x5c4>)
 8000c2c:	2260      	movs	r2, #96	; 0x60
 8000c2e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c30:	4ba5      	ldr	r3, [pc, #660]	; (8000ec8 <fnInit+0x5c4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000c36:	4ba4      	ldr	r3, [pc, #656]	; (8000ec8 <fnInit+0x5c4>)
 8000c38:	220f      	movs	r2, #15
 8000c3a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c3c:	4ba2      	ldr	r3, [pc, #648]	; (8000ec8 <fnInit+0x5c4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c42:	4ba1      	ldr	r3, [pc, #644]	; (8000ec8 <fnInit+0x5c4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c48:	4b9f      	ldr	r3, [pc, #636]	; (8000ec8 <fnInit+0x5c4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c4e:	4b9f      	ldr	r3, [pc, #636]	; (8000ecc <fnInit+0x5c8>)
 8000c50:	4a9d      	ldr	r2, [pc, #628]	; (8000ec8 <fnInit+0x5c4>)
 8000c52:	499c      	ldr	r1, [pc, #624]	; (8000ec4 <fnInit+0x5c0>)
 8000c54:	489e      	ldr	r0, [pc, #632]	; (8000ed0 <fnInit+0x5cc>)
 8000c56:	f002 f9cf 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <fnInit+0x366>
			fnLEDsErrorState();
 8000c60:	f7ff fe3a 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000c64:	f001 fa2c 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
		}
		break;
 8000c68:	e17a      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 30;
 8000c6a:	4b9a      	ldr	r3, [pc, #616]	; (8000ed4 <fnInit+0x5d0>)
 8000c6c:	221e      	movs	r2, #30
 8000c6e:	701a      	strb	r2, [r3, #0]
		break;
 8000c70:	e176      	b.n	8000f60 <fnInit+0x65c>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000c72:	4b94      	ldr	r3, [pc, #592]	; (8000ec4 <fnInit+0x5c0>)
 8000c74:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c78:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c7a:	4b92      	ldr	r3, [pc, #584]	; (8000ec4 <fnInit+0x5c0>)
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c80:	4b91      	ldr	r3, [pc, #580]	; (8000ec8 <fnInit+0x5c4>)
 8000c82:	2222      	movs	r2, #34	; 0x22
 8000c84:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000c86:	4b90      	ldr	r3, [pc, #576]	; (8000ec8 <fnInit+0x5c4>)
 8000c88:	2260      	movs	r2, #96	; 0x60
 8000c8a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c8c:	4b8e      	ldr	r3, [pc, #568]	; (8000ec8 <fnInit+0x5c4>)
 8000c8e:	2260      	movs	r2, #96	; 0x60
 8000c90:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c92:	4b8d      	ldr	r3, [pc, #564]	; (8000ec8 <fnInit+0x5c4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000c98:	4b8b      	ldr	r3, [pc, #556]	; (8000ec8 <fnInit+0x5c4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c9e:	4b8a      	ldr	r3, [pc, #552]	; (8000ec8 <fnInit+0x5c4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ca4:	4b88      	ldr	r3, [pc, #544]	; (8000ec8 <fnInit+0x5c4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000caa:	4b87      	ldr	r3, [pc, #540]	; (8000ec8 <fnInit+0x5c4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cb0:	4b86      	ldr	r3, [pc, #536]	; (8000ecc <fnInit+0x5c8>)
 8000cb2:	4a85      	ldr	r2, [pc, #532]	; (8000ec8 <fnInit+0x5c4>)
 8000cb4:	4983      	ldr	r1, [pc, #524]	; (8000ec4 <fnInit+0x5c0>)
 8000cb6:	4886      	ldr	r0, [pc, #536]	; (8000ed0 <fnInit+0x5cc>)
 8000cb8:	f002 f99e 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <fnInit+0x3c8>
			fnLEDsErrorState();
 8000cc2:	f7ff fe09 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000cc6:	f001 f9fb 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
		}
		break;
 8000cca:	e149      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 40;
 8000ccc:	4b81      	ldr	r3, [pc, #516]	; (8000ed4 <fnInit+0x5d0>)
 8000cce:	2228      	movs	r2, #40	; 0x28
 8000cd0:	701a      	strb	r2, [r3, #0]
		break;
 8000cd2:	e145      	b.n	8000f60 <fnInit+0x65c>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000cd4:	4b7b      	ldr	r3, [pc, #492]	; (8000ec4 <fnInit+0x5c0>)
 8000cd6:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cda:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cdc:	4b79      	ldr	r3, [pc, #484]	; (8000ec4 <fnInit+0x5c0>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000ce2:	4b79      	ldr	r3, [pc, #484]	; (8000ec8 <fnInit+0x5c4>)
 8000ce4:	2222      	movs	r2, #34	; 0x22
 8000ce6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000ce8:	4b77      	ldr	r3, [pc, #476]	; (8000ec8 <fnInit+0x5c4>)
 8000cea:	227a      	movs	r2, #122	; 0x7a
 8000cec:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000cee:	4b76      	ldr	r3, [pc, #472]	; (8000ec8 <fnInit+0x5c4>)
 8000cf0:	2260      	movs	r2, #96	; 0x60
 8000cf2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000cf4:	4b74      	ldr	r3, [pc, #464]	; (8000ec8 <fnInit+0x5c4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000cfa:	4b73      	ldr	r3, [pc, #460]	; (8000ec8 <fnInit+0x5c4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d00:	4b71      	ldr	r3, [pc, #452]	; (8000ec8 <fnInit+0x5c4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d06:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <fnInit+0x5c4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d0c:	4b6e      	ldr	r3, [pc, #440]	; (8000ec8 <fnInit+0x5c4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d12:	4b6e      	ldr	r3, [pc, #440]	; (8000ecc <fnInit+0x5c8>)
 8000d14:	4a6c      	ldr	r2, [pc, #432]	; (8000ec8 <fnInit+0x5c4>)
 8000d16:	496b      	ldr	r1, [pc, #428]	; (8000ec4 <fnInit+0x5c0>)
 8000d18:	486d      	ldr	r0, [pc, #436]	; (8000ed0 <fnInit+0x5cc>)
 8000d1a:	f002 f96d 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d004      	beq.n	8000d2e <fnInit+0x42a>
			fnLEDsErrorState();
 8000d24:	f7ff fdd8 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000d28:	f001 f9ca 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
		}
		break;
 8000d2c:	e118      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 50;
 8000d2e:	4b69      	ldr	r3, [pc, #420]	; (8000ed4 <fnInit+0x5d0>)
 8000d30:	2232      	movs	r2, #50	; 0x32
 8000d32:	701a      	strb	r2, [r3, #0]
		break;
 8000d34:	e114      	b.n	8000f60 <fnInit+0x65c>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000d36:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <fnInit+0x5c0>)
 8000d38:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d3c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d3e:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <fnInit+0x5c0>)
 8000d40:	2208      	movs	r2, #8
 8000d42:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d44:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <fnInit+0x5c4>)
 8000d46:	2222      	movs	r2, #34	; 0x22
 8000d48:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <fnInit+0x5c4>)
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <fnInit+0x5c4>)
 8000d52:	2260      	movs	r2, #96	; 0x60
 8000d54:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d56:	4b5c      	ldr	r3, [pc, #368]	; (8000ec8 <fnInit+0x5c4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000d5c:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <fnInit+0x5c4>)
 8000d5e:	221f      	movs	r2, #31
 8000d60:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d62:	4b59      	ldr	r3, [pc, #356]	; (8000ec8 <fnInit+0x5c4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d68:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <fnInit+0x5c4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d6e:	4b56      	ldr	r3, [pc, #344]	; (8000ec8 <fnInit+0x5c4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d74:	4b55      	ldr	r3, [pc, #340]	; (8000ecc <fnInit+0x5c8>)
 8000d76:	4a54      	ldr	r2, [pc, #336]	; (8000ec8 <fnInit+0x5c4>)
 8000d78:	4952      	ldr	r1, [pc, #328]	; (8000ec4 <fnInit+0x5c0>)
 8000d7a:	4855      	ldr	r0, [pc, #340]	; (8000ed0 <fnInit+0x5cc>)
 8000d7c:	f002 f93c 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d004      	beq.n	8000d90 <fnInit+0x48c>
			fnLEDsErrorState();
 8000d86:	f7ff fda7 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000d8a:	f001 f999 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 55;
		}
		break;
 8000d8e:	e0e7      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 55;
 8000d90:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <fnInit+0x5d0>)
 8000d92:	2237      	movs	r2, #55	; 0x37
 8000d94:	701a      	strb	r2, [r3, #0]
		break;
 8000d96:	e0e3      	b.n	8000f60 <fnInit+0x65c>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000d98:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <fnInit+0x5c0>)
 8000d9a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d9e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000da0:	4b48      	ldr	r3, [pc, #288]	; (8000ec4 <fnInit+0x5c0>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000da6:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <fnInit+0x5c4>)
 8000da8:	2240      	movs	r2, #64	; 0x40
 8000daa:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <fnInit+0x5c4>)
 8000dae:	2241      	movs	r2, #65	; 0x41
 8000db0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000db2:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <fnInit+0x5c4>)
 8000db4:	2260      	movs	r2, #96	; 0x60
 8000db6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000db8:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <fnInit+0x5c4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000dbe:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <fnInit+0x5c4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <fnInit+0x5c4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <fnInit+0x5c4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000dd0:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <fnInit+0x5c4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <fnInit+0x5c8>)
 8000dd8:	4a3b      	ldr	r2, [pc, #236]	; (8000ec8 <fnInit+0x5c4>)
 8000dda:	493a      	ldr	r1, [pc, #232]	; (8000ec4 <fnInit+0x5c0>)
 8000ddc:	483c      	ldr	r0, [pc, #240]	; (8000ed0 <fnInit+0x5cc>)
 8000dde:	f002 f90b 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <fnInit+0x4ee>
			fnLEDsErrorState();
 8000de8:	f7ff fd76 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000dec:	f001 f968 	bl	80020c0 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
		}
		break;
 8000df0:	e0b3      	b.n	8000f5a <fnInit+0x656>
		else if (RxData[5] & 0b10000) {
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <fnInit+0x5d4>)
 8000df4:	795b      	ldrb	r3, [r3, #5]
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 80ad 	beq.w	8000f5a <fnInit+0x656>
			iMachineStatus = 60;
 8000e00:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <fnInit+0x5d0>)
 8000e02:	223c      	movs	r2, #60	; 0x3c
 8000e04:	701a      	strb	r2, [r3, #0]
		break;
 8000e06:	e0a8      	b.n	8000f5a <fnInit+0x656>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <fnInit+0x5c0>)
 8000e0a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e0e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <fnInit+0x5c0>)
 8000e12:	2208      	movs	r2, #8
 8000e14:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <fnInit+0x5c4>)
 8000e18:	2222      	movs	r2, #34	; 0x22
 8000e1a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <fnInit+0x5c4>)
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <fnInit+0x5c4>)
 8000e24:	2260      	movs	r2, #96	; 0x60
 8000e26:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <fnInit+0x5c4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <fnInit+0x5c4>)
 8000e30:	220f      	movs	r2, #15
 8000e32:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <fnInit+0x5c4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <fnInit+0x5c4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <fnInit+0x5c4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <fnInit+0x5c8>)
 8000e48:	4a1f      	ldr	r2, [pc, #124]	; (8000ec8 <fnInit+0x5c4>)
 8000e4a:	491e      	ldr	r1, [pc, #120]	; (8000ec4 <fnInit+0x5c0>)
 8000e4c:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <fnInit+0x5cc>)
 8000e4e:	f002 f8d3 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <fnInit+0x55e>
			fnLEDsErrorState();
 8000e58:	f7ff fd3e 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000e5c:	f001 f930 	bl	80020c0 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
		}
		break;
 8000e60:	e07e      	b.n	8000f60 <fnInit+0x65c>
			iMachineStatus = 70;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <fnInit+0x5d0>)
 8000e64:	2246      	movs	r2, #70	; 0x46
 8000e66:	701a      	strb	r2, [r3, #0]
		break;
 8000e68:	e07a      	b.n	8000f60 <fnInit+0x65c>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <fnInit+0x5c0>)
 8000e6c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e70:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <fnInit+0x5c0>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <fnInit+0x5c4>)
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <fnInit+0x5c4>)
 8000e80:	2241      	movs	r2, #65	; 0x41
 8000e82:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <fnInit+0x5c4>)
 8000e86:	2260      	movs	r2, #96	; 0x60
 8000e88:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <fnInit+0x5c4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <fnInit+0x5c4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <fnInit+0x5c4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <fnInit+0x5c4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <fnInit+0x5c4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <fnInit+0x5c8>)
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <fnInit+0x5c4>)
 8000eac:	4905      	ldr	r1, [pc, #20]	; (8000ec4 <fnInit+0x5c0>)
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <fnInit+0x5cc>)
 8000eb0:	f002 f8a2 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d010      	beq.n	8000edc <fnInit+0x5d8>
			fnLEDsErrorState();
 8000eba:	f7ff fd0d 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000ebe:	f001 f8ff 	bl	80020c0 <Error_Handler>
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 8000ec2:	e04c      	b.n	8000f5e <fnInit+0x65a>
 8000ec4:	20000254 	.word	0x20000254
 8000ec8:	2000026c 	.word	0x2000026c
 8000ecc:	20000274 	.word	0x20000274
 8000ed0:	20000214 	.word	0x20000214
 8000ed4:	20000006 	.word	0x20000006
 8000ed8:	20000294 	.word	0x20000294
		else if (RxData[5] & 0b00100) {
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <fnInit+0x660>)
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d03a      	beq.n	8000f5e <fnInit+0x65a>
			iMachineStatus = 80;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <fnInit+0x664>)
 8000eea:	2250      	movs	r2, #80	; 0x50
 8000eec:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <fnInit+0x668>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	491e      	ldr	r1, [pc, #120]	; (8000f70 <fnInit+0x66c>)
 8000ef8:	481e      	ldr	r0, [pc, #120]	; (8000f74 <fnInit+0x670>)
 8000efa:	f005 f861 	bl	8005fc0 <HAL_UART_Transmit>
		break;
 8000efe:	e02e      	b.n	8000f5e <fnInit+0x65a>

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <fnInit+0x660>)
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	2b27      	cmp	r3, #39	; 0x27
 8000f06:	d123      	bne.n	8000f50 <fnInit+0x64c>
			iMachineStatus = 1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <fnInit+0x664>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <fnInit+0x674>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000f14:	213c      	movs	r1, #60	; 0x3c
 8000f16:	4819      	ldr	r0, [pc, #100]	; (8000f7c <fnInit+0x678>)
 8000f18:	f004 fcbc 	bl	8005894 <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000f1c:	f000 f9c2 	bl	80012a4 <fnEncCalibration>

			//SEND ENCODER VALUE AFTER INIT
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <fnInit+0x67c>)
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2a:	ec53 2b17 	vmov	r2, r3, d7
 8000f2e:	4915      	ldr	r1, [pc, #84]	; (8000f84 <fnInit+0x680>)
 8000f30:	4815      	ldr	r0, [pc, #84]	; (8000f88 <fnInit+0x684>)
 8000f32:	f007 fa77 	bl	8008424 <siprintf>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <fnInit+0x688>)
 8000f3a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <fnInit+0x688>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f46:	4910      	ldr	r1, [pc, #64]	; (8000f88 <fnInit+0x684>)
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <fnInit+0x670>)
 8000f4a:	f005 f839 	bl	8005fc0 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000f4e:	e007      	b.n	8000f60 <fnInit+0x65c>
			fnLEDsErrorState();
 8000f50:	f7ff fcc2 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000f54:	f001 f8b4 	bl	80020c0 <Error_Handler>
		break;
 8000f58:	e002      	b.n	8000f60 <fnInit+0x65c>
		break;
 8000f5a:	bf00      	nop
 8000f5c:	e000      	b.n	8000f60 <fnInit+0x65c>
		break;
 8000f5e:	bf00      	nop
	}
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000294 	.word	0x20000294
 8000f68:	20000006 	.word	0x20000006
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	0800a9c4 	.word	0x0800a9c4
 8000f74:	200004a0 	.word	0x200004a0
 8000f78:	20000007 	.word	0x20000007
 8000f7c:	200002d8 	.word	0x200002d8
 8000f80:	200002c8 	.word	0x200002c8
 8000f84:	0800a970 	.word	0x0800a970
 8000f88:	20000244 	.word	0x20000244
 8000f8c:	20000240 	.word	0x20000240

08000f90 <fnReset>:

void fnReset(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000f94:	4b8b      	ldr	r3, [pc, #556]	; (80011c4 <fnReset+0x234>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b50      	cmp	r3, #80	; 0x50
 8000f9a:	f000 80d7 	beq.w	800114c <fnReset+0x1bc>
 8000f9e:	2b50      	cmp	r3, #80	; 0x50
 8000fa0:	f300 810d 	bgt.w	80011be <fnReset+0x22e>
 8000fa4:	2b46      	cmp	r3, #70	; 0x46
 8000fa6:	f000 80a0 	beq.w	80010ea <fnReset+0x15a>
 8000faa:	2b46      	cmp	r3, #70	; 0x46
 8000fac:	f300 8107 	bgt.w	80011be <fnReset+0x22e>
 8000fb0:	2b19      	cmp	r3, #25
 8000fb2:	d069      	beq.n	8001088 <fnReset+0xf8>
 8000fb4:	2b19      	cmp	r3, #25
 8000fb6:	f300 8102 	bgt.w	80011be <fnReset+0x22e>
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d002      	beq.n	8000fc4 <fnReset+0x34>
 8000fbe:	2b14      	cmp	r3, #20
 8000fc0:	d031      	beq.n	8001026 <fnReset+0x96>
			Error_Handler();
		}

		break;
	}
}
 8000fc2:	e0fc      	b.n	80011be <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8000fc4:	4b80      	ldr	r3, [pc, #512]	; (80011c8 <fnReset+0x238>)
 8000fc6:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fca:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000fcc:	4b7e      	ldr	r3, [pc, #504]	; (80011c8 <fnReset+0x238>)
 8000fce:	2208      	movs	r2, #8
 8000fd0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000fd2:	4b7e      	ldr	r3, [pc, #504]	; (80011cc <fnReset+0x23c>)
 8000fd4:	2222      	movs	r2, #34	; 0x22
 8000fd6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000fd8:	4b7c      	ldr	r3, [pc, #496]	; (80011cc <fnReset+0x23c>)
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000fde:	4b7b      	ldr	r3, [pc, #492]	; (80011cc <fnReset+0x23c>)
 8000fe0:	2260      	movs	r2, #96	; 0x60
 8000fe2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000fe4:	4b79      	ldr	r3, [pc, #484]	; (80011cc <fnReset+0x23c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000fea:	4b78      	ldr	r3, [pc, #480]	; (80011cc <fnReset+0x23c>)
 8000fec:	2206      	movs	r2, #6
 8000fee:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ff0:	4b76      	ldr	r3, [pc, #472]	; (80011cc <fnReset+0x23c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ff6:	4b75      	ldr	r3, [pc, #468]	; (80011cc <fnReset+0x23c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ffc:	4b73      	ldr	r3, [pc, #460]	; (80011cc <fnReset+0x23c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <fnReset+0x240>)
 8001004:	4a71      	ldr	r2, [pc, #452]	; (80011cc <fnReset+0x23c>)
 8001006:	4970      	ldr	r1, [pc, #448]	; (80011c8 <fnReset+0x238>)
 8001008:	4872      	ldr	r0, [pc, #456]	; (80011d4 <fnReset+0x244>)
 800100a:	f001 fff5 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <fnReset+0x8e>
			fnLEDsErrorState();
 8001014:	f7ff fc60 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001018:	f001 f852 	bl	80020c0 <Error_Handler>
		break;
 800101c:	e0cf      	b.n	80011be <fnReset+0x22e>
			iMachineStatus = 20;
 800101e:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <fnReset+0x234>)
 8001020:	2214      	movs	r2, #20
 8001022:	701a      	strb	r2, [r3, #0]
		break;
 8001024:	e0cb      	b.n	80011be <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8001026:	4b68      	ldr	r3, [pc, #416]	; (80011c8 <fnReset+0x238>)
 8001028:	f240 620a 	movw	r2, #1546	; 0x60a
 800102c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800102e:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <fnReset+0x238>)
 8001030:	2208      	movs	r2, #8
 8001032:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001034:	4b65      	ldr	r3, [pc, #404]	; (80011cc <fnReset+0x23c>)
 8001036:	2222      	movs	r2, #34	; 0x22
 8001038:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800103a:	4b64      	ldr	r3, [pc, #400]	; (80011cc <fnReset+0x23c>)
 800103c:	2240      	movs	r2, #64	; 0x40
 800103e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001040:	4b62      	ldr	r3, [pc, #392]	; (80011cc <fnReset+0x23c>)
 8001042:	2260      	movs	r2, #96	; 0x60
 8001044:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001046:	4b61      	ldr	r3, [pc, #388]	; (80011cc <fnReset+0x23c>)
 8001048:	2200      	movs	r2, #0
 800104a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 800104c:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <fnReset+0x23c>)
 800104e:	2207      	movs	r2, #7
 8001050:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001052:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <fnReset+0x23c>)
 8001054:	2200      	movs	r2, #0
 8001056:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001058:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <fnReset+0x23c>)
 800105a:	2200      	movs	r2, #0
 800105c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800105e:	4b5b      	ldr	r3, [pc, #364]	; (80011cc <fnReset+0x23c>)
 8001060:	2200      	movs	r2, #0
 8001062:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001064:	4b5a      	ldr	r3, [pc, #360]	; (80011d0 <fnReset+0x240>)
 8001066:	4a59      	ldr	r2, [pc, #356]	; (80011cc <fnReset+0x23c>)
 8001068:	4957      	ldr	r1, [pc, #348]	; (80011c8 <fnReset+0x238>)
 800106a:	485a      	ldr	r0, [pc, #360]	; (80011d4 <fnReset+0x244>)
 800106c:	f001 ffc4 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <fnReset+0xf0>
			fnLEDsErrorState();
 8001076:	f7ff fc2f 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800107a:	f001 f821 	bl	80020c0 <Error_Handler>
		break;
 800107e:	e09e      	b.n	80011be <fnReset+0x22e>
			iMachineStatus = 25;
 8001080:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <fnReset+0x234>)
 8001082:	2219      	movs	r2, #25
 8001084:	701a      	strb	r2, [r3, #0]
		break;
 8001086:	e09a      	b.n	80011be <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <fnReset+0x238>)
 800108a:	f240 620a 	movw	r2, #1546	; 0x60a
 800108e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001090:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <fnReset+0x238>)
 8001092:	2208      	movs	r2, #8
 8001094:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <fnReset+0x23c>)
 8001098:	2222      	movs	r2, #34	; 0x22
 800109a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800109c:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <fnReset+0x23c>)
 800109e:	2240      	movs	r2, #64	; 0x40
 80010a0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010a2:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <fnReset+0x23c>)
 80010a4:	2260      	movs	r2, #96	; 0x60
 80010a6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010a8:	4b48      	ldr	r3, [pc, #288]	; (80011cc <fnReset+0x23c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <fnReset+0x23c>)
 80010b0:	220f      	movs	r2, #15
 80010b2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <fnReset+0x23c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010ba:	4b44      	ldr	r3, [pc, #272]	; (80011cc <fnReset+0x23c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010c0:	4b42      	ldr	r3, [pc, #264]	; (80011cc <fnReset+0x23c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010c6:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <fnReset+0x240>)
 80010c8:	4a40      	ldr	r2, [pc, #256]	; (80011cc <fnReset+0x23c>)
 80010ca:	493f      	ldr	r1, [pc, #252]	; (80011c8 <fnReset+0x238>)
 80010cc:	4841      	ldr	r0, [pc, #260]	; (80011d4 <fnReset+0x244>)
 80010ce:	f001 ff93 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <fnReset+0x152>
			fnLEDsErrorState();
 80010d8:	f7ff fbfe 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80010dc:	f000 fff0 	bl	80020c0 <Error_Handler>
		break;
 80010e0:	e06d      	b.n	80011be <fnReset+0x22e>
			iMachineStatus = 70;
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <fnReset+0x234>)
 80010e4:	2246      	movs	r2, #70	; 0x46
 80010e6:	701a      	strb	r2, [r3, #0]
		break;
 80010e8:	e069      	b.n	80011be <fnReset+0x22e>
		TxHeader.StdId = 0x60A;
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <fnReset+0x238>)
 80010ec:	f240 620a 	movw	r2, #1546	; 0x60a
 80010f0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <fnReset+0x238>)
 80010f4:	2208      	movs	r2, #8
 80010f6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <fnReset+0x23c>)
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <fnReset+0x23c>)
 8001100:	2241      	movs	r2, #65	; 0x41
 8001102:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <fnReset+0x23c>)
 8001106:	2260      	movs	r2, #96	; 0x60
 8001108:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <fnReset+0x23c>)
 800110c:	2200      	movs	r2, #0
 800110e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <fnReset+0x23c>)
 8001112:	2200      	movs	r2, #0
 8001114:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <fnReset+0x23c>)
 8001118:	2200      	movs	r2, #0
 800111a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <fnReset+0x23c>)
 800111e:	2200      	movs	r2, #0
 8001120:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <fnReset+0x23c>)
 8001124:	2200      	movs	r2, #0
 8001126:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <fnReset+0x240>)
 800112a:	4a28      	ldr	r2, [pc, #160]	; (80011cc <fnReset+0x23c>)
 800112c:	4926      	ldr	r1, [pc, #152]	; (80011c8 <fnReset+0x238>)
 800112e:	4829      	ldr	r0, [pc, #164]	; (80011d4 <fnReset+0x244>)
 8001130:	f001 ff62 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <fnReset+0x1b4>
			fnLEDsErrorState();
 800113a:	f7ff fbcd 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800113e:	f000 ffbf 	bl	80020c0 <Error_Handler>
		break;
 8001142:	e03c      	b.n	80011be <fnReset+0x22e>
			iMachineStatus = 80;
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <fnReset+0x234>)
 8001146:	2250      	movs	r2, #80	; 0x50
 8001148:	701a      	strb	r2, [r3, #0]
		break;
 800114a:	e038      	b.n	80011be <fnReset+0x22e>
		if (RxData[4] == 39) {
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <fnReset+0x248>)
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	2b27      	cmp	r3, #39	; 0x27
 8001152:	d12f      	bne.n	80011b4 <fnReset+0x224>
			iMachineStatus = 1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <fnReset+0x234>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
			if (iMode == 0 && iSingleMachineStatus != 100) {
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <fnReset+0x24c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <fnReset+0x1e4>
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <fnReset+0x250>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b64      	cmp	r3, #100	; 0x64
 800116a:	d003      	beq.n	8001174 <fnReset+0x1e4>
				iSingleMachineStatus = 10;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <fnReset+0x250>)
 800116e:	220a      	movs	r2, #10
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e015      	b.n	80011a0 <fnReset+0x210>
			else if (iMode == 1 && iSerialMachineStatus != 100) {
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <fnReset+0x24c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d110      	bne.n	80011a0 <fnReset+0x210>
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <fnReset+0x254>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d00c      	beq.n	80011a0 <fnReset+0x210>
				if (iSerialMachineStatus == 40) {
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <fnReset+0x254>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b28      	cmp	r3, #40	; 0x28
 800118c:	d105      	bne.n	800119a <fnReset+0x20a>
					iSerialCounter--;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <fnReset+0x258>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <fnReset+0x258>)
 8001198:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <fnReset+0x254>)
 800119c:	220a      	movs	r2, #10
 800119e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <fnReset+0x25c>)
 80011a8:	f002 feb8 	bl	8003f1c <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim14);
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <fnReset+0x260>)
 80011ae:	f004 fa9b 	bl	80056e8 <HAL_TIM_Base_Stop_IT>
		break;
 80011b2:	e003      	b.n	80011bc <fnReset+0x22c>
			fnLEDsErrorState();
 80011b4:	f7ff fb90 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80011b8:	f000 ff82 	bl	80020c0 <Error_Handler>
		break;
 80011bc:	bf00      	nop
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000006 	.word	0x20000006
 80011c8:	20000254 	.word	0x20000254
 80011cc:	2000026c 	.word	0x2000026c
 80011d0:	20000274 	.word	0x20000274
 80011d4:	20000214 	.word	0x20000214
 80011d8:	20000294 	.word	0x20000294
 80011dc:	20000004 	.word	0x20000004
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000009 	.word	0x20000009
 80011e8:	20000010 	.word	0x20000010
 80011ec:	40020400 	.word	0x40020400
 80011f0:	20000454 	.word	0x20000454

080011f4 <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <fnEncCounts2Angle+0x3c>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <fnEncCounts2Angle+0x40>)
 8001214:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <fnEncCounts2Angle+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	ee07 3a90 	vmov	s15, r3
}
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2000000c 	.word	0x2000000c
 8001234:	200002cc 	.word	0x200002cc

08001238 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <fnEncReadCount+0x5c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <fnEncReadCount+0x60>)
 8001246:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <fnEncReadCount+0x60>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d208      	bcs.n	800126a <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8001258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <fnEncReadCount+0x60>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <fnEncReadCount+0x64>)
 8001266:	801a      	strh	r2, [r3, #0]
 8001268:	e003      	b.n	8001272 <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <fnEncReadCount+0x60>)
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <fnEncReadCount+0x64>)
 8001270:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount)/2;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <fnEncReadCount+0x64>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffbc 	bl	80011f4 <fnEncCounts2Angle>
 800127c:	eeb0 7a40 	vmov.f32	s14, s0
 8001280:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001284:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <fnEncReadCount+0x68>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002d8 	.word	0x200002d8
 8001298:	200002c4 	.word	0x200002c4
 800129c:	200002c6 	.word	0x200002c6
 80012a0:	200002c8 	.word	0x200002c8

080012a4 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <fnEncCalibration+0x14>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 80012ae:	f7ff ffc3 	bl	8001238 <fnEncReadCount>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40000400 	.word	0x40000400

080012bc <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b5a      	cmp	r3, #90	; 0x5a
 80012cc:	d901      	bls.n	80012d2 <fnMoveAbsolute+0x16>
		iNumber = 90;
 80012ce:	235a      	movs	r3, #90	; 0x5a
 80012d0:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 80012d2:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <fnMoveAbsolute+0xc4>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d108      	bne.n	80012ee <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e00e      	b.n	800130c <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <fnMoveAbsolute+0xc4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d107      	bne.n	8001308 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <fnMoveAbsolute+0xc8>)
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e001      	b.n	800130c <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d132      	bne.n	8001378 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <fnMoveAbsolute+0xcc>)
 8001314:	f240 620a 	movw	r2, #1546	; 0x60a
 8001318:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <fnMoveAbsolute+0xcc>)
 800131c:	2208      	movs	r2, #8
 800131e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <fnMoveAbsolute+0xd0>)
 8001322:	2222      	movs	r2, #34	; 0x22
 8001324:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <fnMoveAbsolute+0xd0>)
 8001328:	227a      	movs	r2, #122	; 0x7a
 800132a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <fnMoveAbsolute+0xd0>)
 800132e:	2260      	movs	r2, #96	; 0x60
 8001330:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <fnMoveAbsolute+0xd0>)
 8001334:	2200      	movs	r2, #0
 8001336:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <fnMoveAbsolute+0xd0>)
 800133e:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <fnMoveAbsolute+0xd0>)
 8001348:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <fnMoveAbsolute+0xd0>)
 8001352:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	0e1b      	lsrs	r3, r3, #24
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <fnMoveAbsolute+0xd0>)
 800135c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <fnMoveAbsolute+0xd4>)
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <fnMoveAbsolute+0xd0>)
 8001362:	4909      	ldr	r1, [pc, #36]	; (8001388 <fnMoveAbsolute+0xcc>)
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <fnMoveAbsolute+0xd8>)
 8001366:	f001 fe47 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 8001370:	f7ff fab2 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001374:	f000 fea4 	bl	80020c0 <Error_Handler>
		}

	}
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000005 	.word	0x20000005
 8001384:	fffffc18 	.word	0xfffffc18
 8001388:	20000254 	.word	0x20000254
 800138c:	2000026c 	.word	0x2000026c
 8001390:	20000274 	.word	0x20000274
 8001394:	20000214 	.word	0x20000214

08001398 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	switch (iSingleMachineStatus){
 800139c:	4b97      	ldr	r3, [pc, #604]	; (80015fc <fnSingleMotionAction+0x264>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3b0a      	subs	r3, #10
 80013a2:	2b19      	cmp	r3, #25
 80013a4:	f200 8127 	bhi.w	80015f6 <fnSingleMotionAction+0x25e>
 80013a8:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <fnSingleMotionAction+0x18>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	08001419 	.word	0x08001419
 80013b4:	080015f7 	.word	0x080015f7
 80013b8:	080015f7 	.word	0x080015f7
 80013bc:	080015f7 	.word	0x080015f7
 80013c0:	080015f7 	.word	0x080015f7
 80013c4:	080015f7 	.word	0x080015f7
 80013c8:	080015f7 	.word	0x080015f7
 80013cc:	080015f7 	.word	0x080015f7
 80013d0:	080015f7 	.word	0x080015f7
 80013d4:	080015f7 	.word	0x080015f7
 80013d8:	0800148b 	.word	0x0800148b
 80013dc:	080015f7 	.word	0x080015f7
 80013e0:	080015f7 	.word	0x080015f7
 80013e4:	080015f7 	.word	0x080015f7
 80013e8:	080015f7 	.word	0x080015f7
 80013ec:	0800149d 	.word	0x0800149d
 80013f0:	080015f7 	.word	0x080015f7
 80013f4:	080015f7 	.word	0x080015f7
 80013f8:	080015f7 	.word	0x080015f7
 80013fc:	080015f7 	.word	0x080015f7
 8001400:	0800150b 	.word	0x0800150b
 8001404:	080015f7 	.word	0x080015f7
 8001408:	080015f7 	.word	0x080015f7
 800140c:	080015f7 	.word	0x080015f7
 8001410:	080015f7 	.word	0x080015f7
 8001414:	0800156d 	.word	0x0800156d
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001418:	4b79      	ldr	r3, [pc, #484]	; (8001600 <fnSingleMotionAction+0x268>)
 800141a:	f240 620a 	movw	r2, #1546	; 0x60a
 800141e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001420:	4b77      	ldr	r3, [pc, #476]	; (8001600 <fnSingleMotionAction+0x268>)
 8001422:	2208      	movs	r2, #8
 8001424:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001428:	2222      	movs	r2, #34	; 0x22
 800142a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800142c:	4b75      	ldr	r3, [pc, #468]	; (8001604 <fnSingleMotionAction+0x26c>)
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001432:	4b74      	ldr	r3, [pc, #464]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001434:	2260      	movs	r2, #96	; 0x60
 8001436:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001438:	4b72      	ldr	r3, [pc, #456]	; (8001604 <fnSingleMotionAction+0x26c>)
 800143a:	2200      	movs	r2, #0
 800143c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800143e:	4b71      	ldr	r3, [pc, #452]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001440:	221f      	movs	r2, #31
 8001442:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001444:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001446:	2200      	movs	r2, #0
 8001448:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800144a:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <fnSingleMotionAction+0x26c>)
 800144c:	2200      	movs	r2, #0
 800144e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001450:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001452:	2200      	movs	r2, #0
 8001454:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <fnSingleMotionAction+0x270>)
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <fnSingleMotionAction+0x26c>)
 800145a:	4969      	ldr	r1, [pc, #420]	; (8001600 <fnSingleMotionAction+0x268>)
 800145c:	486b      	ldr	r0, [pc, #428]	; (800160c <fnSingleMotionAction+0x274>)
 800145e:	f001 fdcb 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <fnSingleMotionAction+0xda>
			fnLEDsErrorState();
 8001468:	f7ff fa36 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800146c:	f000 fe28 	bl	80020c0 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 20;
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
		}
		break;
 8001470:	e0c1      	b.n	80015f6 <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 20;
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <fnSingleMotionAction+0x264>)
 8001474:	2214      	movs	r2, #20
 8001476:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 8001478:	4b65      	ldr	r3, [pc, #404]	; (8001610 <fnSingleMotionAction+0x278>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29a      	uxth	r2, r3
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	4964      	ldr	r1, [pc, #400]	; (8001614 <fnSingleMotionAction+0x27c>)
 8001482:	4865      	ldr	r0, [pc, #404]	; (8001618 <fnSingleMotionAction+0x280>)
 8001484:	f004 fd9c 	bl	8005fc0 <HAL_UART_Transmit>
		break;
 8001488:	e0b5      	b.n	80015f6 <fnSingleMotionAction+0x25e>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <fnSingleMotionAction+0x284>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff14 	bl	80012bc <fnMoveAbsolute>
		iSingleMachineStatus = 25;
 8001494:	4b59      	ldr	r3, [pc, #356]	; (80015fc <fnSingleMotionAction+0x264>)
 8001496:	2219      	movs	r2, #25
 8001498:	701a      	strb	r2, [r3, #0]
		break;
 800149a:	e0ac      	b.n	80015f6 <fnSingleMotionAction+0x25e>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 800149c:	4b58      	ldr	r3, [pc, #352]	; (8001600 <fnSingleMotionAction+0x268>)
 800149e:	f240 620a 	movw	r2, #1546	; 0x60a
 80014a2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80014a4:	4b56      	ldr	r3, [pc, #344]	; (8001600 <fnSingleMotionAction+0x268>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80014aa:	4b56      	ldr	r3, [pc, #344]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80014b0:	4b54      	ldr	r3, [pc, #336]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014b2:	2241      	movs	r2, #65	; 0x41
 80014b4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80014b6:	4b53      	ldr	r3, [pc, #332]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014b8:	2260      	movs	r2, #96	; 0x60
 80014ba:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80014bc:	4b51      	ldr	r3, [pc, #324]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80014c2:	4b50      	ldr	r3, [pc, #320]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80014c8:	4b4e      	ldr	r3, [pc, #312]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80014ce:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80014d4:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80014da:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <fnSingleMotionAction+0x270>)
 80014dc:	4a49      	ldr	r2, [pc, #292]	; (8001604 <fnSingleMotionAction+0x26c>)
 80014de:	4948      	ldr	r1, [pc, #288]	; (8001600 <fnSingleMotionAction+0x268>)
 80014e0:	484a      	ldr	r0, [pc, #296]	; (800160c <fnSingleMotionAction+0x274>)
 80014e2:	f001 fd89 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <fnSingleMotionAction+0x15e>
			fnLEDsErrorState();
 80014ec:	f7ff f9f4 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80014f0:	f000 fde6 	bl	80020c0 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSingleMachineStatus = 30;
		}
		break;
 80014f4:	e07c      	b.n	80015f0 <fnSingleMotionAction+0x258>
		else if (RxData[5] & 0b10000) {
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <fnSingleMotionAction+0x288>)
 80014f8:	795b      	ldrb	r3, [r3, #5]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d076      	beq.n	80015f0 <fnSingleMotionAction+0x258>
			iSingleMachineStatus = 30;
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <fnSingleMotionAction+0x264>)
 8001504:	221e      	movs	r2, #30
 8001506:	701a      	strb	r2, [r3, #0]
		break;
 8001508:	e072      	b.n	80015f0 <fnSingleMotionAction+0x258>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <fnSingleMotionAction+0x268>)
 800150c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001510:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <fnSingleMotionAction+0x268>)
 8001514:	2208      	movs	r2, #8
 8001516:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <fnSingleMotionAction+0x26c>)
 800151a:	2222      	movs	r2, #34	; 0x22
 800151c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001520:	2240      	movs	r2, #64	; 0x40
 8001522:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001526:	2260      	movs	r2, #96	; 0x60
 8001528:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <fnSingleMotionAction+0x26c>)
 800152c:	2200      	movs	r2, #0
 800152e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001532:	220f      	movs	r2, #15
 8001534:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001538:	2200      	movs	r2, #0
 800153a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800153c:	4b31      	ldr	r3, [pc, #196]	; (8001604 <fnSingleMotionAction+0x26c>)
 800153e:	2200      	movs	r2, #0
 8001540:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001544:	2200      	movs	r2, #0
 8001546:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <fnSingleMotionAction+0x270>)
 800154a:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <fnSingleMotionAction+0x26c>)
 800154c:	492c      	ldr	r1, [pc, #176]	; (8001600 <fnSingleMotionAction+0x268>)
 800154e:	482f      	ldr	r0, [pc, #188]	; (800160c <fnSingleMotionAction+0x274>)
 8001550:	f001 fd52 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <fnSingleMotionAction+0x1cc>
			fnLEDsErrorState();
 800155a:	f7ff f9bd 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800155e:	f000 fdaf 	bl	80020c0 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 35;
		}
		break;
 8001562:	e048      	b.n	80015f6 <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 35;
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <fnSingleMotionAction+0x264>)
 8001566:	2223      	movs	r2, #35	; 0x23
 8001568:	701a      	strb	r2, [r3, #0]
		break;
 800156a:	e044      	b.n	80015f6 <fnSingleMotionAction+0x25e>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <fnSingleMotionAction+0x268>)
 800156e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001572:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <fnSingleMotionAction+0x268>)
 8001576:	2208      	movs	r2, #8
 8001578:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <fnSingleMotionAction+0x26c>)
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001582:	2241      	movs	r2, #65	; 0x41
 8001584:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001588:	2260      	movs	r2, #96	; 0x60
 800158a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <fnSingleMotionAction+0x26c>)
 800158e:	2200      	movs	r2, #0
 8001590:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <fnSingleMotionAction+0x26c>)
 8001594:	2200      	movs	r2, #0
 8001596:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <fnSingleMotionAction+0x26c>)
 800159a:	2200      	movs	r2, #0
 800159c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <fnSingleMotionAction+0x26c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <fnSingleMotionAction+0x26c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <fnSingleMotionAction+0x270>)
 80015ac:	4a15      	ldr	r2, [pc, #84]	; (8001604 <fnSingleMotionAction+0x26c>)
 80015ae:	4914      	ldr	r1, [pc, #80]	; (8001600 <fnSingleMotionAction+0x268>)
 80015b0:	4816      	ldr	r0, [pc, #88]	; (800160c <fnSingleMotionAction+0x274>)
 80015b2:	f001 fd21 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <fnSingleMotionAction+0x22e>
			fnLEDsErrorState();
 80015bc:	f7ff f98c 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80015c0:	f000 fd7e 	bl	80020c0 <Error_Handler>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 80015c4:	e016      	b.n	80015f4 <fnSingleMotionAction+0x25c>
		else if (RxData[5] & 0b00100) {
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <fnSingleMotionAction+0x288>)
 80015c8:	795b      	ldrb	r3, [r3, #5]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <fnSingleMotionAction+0x25c>
			iSingleMachineStatus = 100;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <fnSingleMotionAction+0x264>)
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <fnSingleMotionAction+0x28c>)
 80015da:	f004 f885 	bl	80056e8 <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <fnSingleMotionAction+0x278>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	4910      	ldr	r1, [pc, #64]	; (8001628 <fnSingleMotionAction+0x290>)
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <fnSingleMotionAction+0x280>)
 80015ea:	f004 fce9 	bl	8005fc0 <HAL_UART_Transmit>
		break;
 80015ee:	e001      	b.n	80015f4 <fnSingleMotionAction+0x25c>
		break;
 80015f0:	bf00      	nop
 80015f2:	e000      	b.n	80015f6 <fnSingleMotionAction+0x25e>
		break;
 80015f4:	bf00      	nop
	}
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000254 	.word	0x20000254
 8001604:	2000026c 	.word	0x2000026c
 8001608:	20000274 	.word	0x20000274
 800160c:	20000214 	.word	0x20000214
 8001610:	20000000 	.word	0x20000000
 8001614:	0800a9bc 	.word	0x0800a9bc
 8001618:	200004a0 	.word	0x200004a0
 800161c:	200002d0 	.word	0x200002d0
 8001620:	20000294 	.word	0x20000294
 8001624:	20000370 	.word	0x20000370
 8001628:	0800a9c4 	.word	0x0800a9c4

0800162c <fnSerialMotionAction>:

void fnSerialMotionAction(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0


	switch (iSerialMachineStatus){
 8001630:	4bb3      	ldr	r3, [pc, #716]	; (8001900 <fnSerialMotionAction+0x2d4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	3b0a      	subs	r3, #10
 8001636:	2b1e      	cmp	r3, #30
 8001638:	f200 8160 	bhi.w	80018fc <fnSerialMotionAction+0x2d0>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <fnSerialMotionAction+0x18>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	080016c1 	.word	0x080016c1
 8001648:	080018fd 	.word	0x080018fd
 800164c:	080018fd 	.word	0x080018fd
 8001650:	080018fd 	.word	0x080018fd
 8001654:	080018fd 	.word	0x080018fd
 8001658:	080018fd 	.word	0x080018fd
 800165c:	080018fd 	.word	0x080018fd
 8001660:	080018fd 	.word	0x080018fd
 8001664:	080018fd 	.word	0x080018fd
 8001668:	080018fd 	.word	0x080018fd
 800166c:	08001733 	.word	0x08001733
 8001670:	080018fd 	.word	0x080018fd
 8001674:	080018fd 	.word	0x080018fd
 8001678:	080018fd 	.word	0x080018fd
 800167c:	080018fd 	.word	0x080018fd
 8001680:	08001745 	.word	0x08001745
 8001684:	080018fd 	.word	0x080018fd
 8001688:	080018fd 	.word	0x080018fd
 800168c:	080018fd 	.word	0x080018fd
 8001690:	080018fd 	.word	0x080018fd
 8001694:	080017b5 	.word	0x080017b5
 8001698:	080018fd 	.word	0x080018fd
 800169c:	080018fd 	.word	0x080018fd
 80016a0:	080018fd 	.word	0x080018fd
 80016a4:	080018fd 	.word	0x080018fd
 80016a8:	08001817 	.word	0x08001817
 80016ac:	080018fd 	.word	0x080018fd
 80016b0:	080018fd 	.word	0x080018fd
 80016b4:	080018fd 	.word	0x080018fd
 80016b8:	080018fd 	.word	0x080018fd
 80016bc:	08001891 	.word	0x08001891
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 80016c0:	4b90      	ldr	r3, [pc, #576]	; (8001904 <fnSerialMotionAction+0x2d8>)
 80016c2:	f240 620a 	movw	r2, #1546	; 0x60a
 80016c6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80016c8:	4b8e      	ldr	r3, [pc, #568]	; (8001904 <fnSerialMotionAction+0x2d8>)
 80016ca:	2208      	movs	r2, #8
 80016cc:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80016ce:	4b8e      	ldr	r3, [pc, #568]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016d0:	2222      	movs	r2, #34	; 0x22
 80016d2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80016d4:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016d6:	2240      	movs	r2, #64	; 0x40
 80016d8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80016da:	4b8b      	ldr	r3, [pc, #556]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016dc:	2260      	movs	r2, #96	; 0x60
 80016de:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80016e0:	4b89      	ldr	r3, [pc, #548]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016e8:	221f      	movs	r2, #31
 80016ea:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80016ec:	4b86      	ldr	r3, [pc, #536]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80016f2:	4b85      	ldr	r3, [pc, #532]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80016f8:	4b83      	ldr	r3, [pc, #524]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80016fe:	4b83      	ldr	r3, [pc, #524]	; (800190c <fnSerialMotionAction+0x2e0>)
 8001700:	4a81      	ldr	r2, [pc, #516]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001702:	4980      	ldr	r1, [pc, #512]	; (8001904 <fnSerialMotionAction+0x2d8>)
 8001704:	4882      	ldr	r0, [pc, #520]	; (8001910 <fnSerialMotionAction+0x2e4>)
 8001706:	f001 fc77 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <fnSerialMotionAction+0xee>
			fnLEDsErrorState();
 8001710:	f7ff f8e2 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001714:	f000 fcd4 	bl	80020c0 <Error_Handler>
		else{
			iSerialMachineStatus = 20;
			//SEND INFO THAT ENGINE IS WORKING
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
		}
		break;
 8001718:	e0f0      	b.n	80018fc <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 20;
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <fnSerialMotionAction+0x2d4>)
 800171c:	2214      	movs	r2, #20
 800171e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 8001720:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <fnSerialMotionAction+0x2e8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29a      	uxth	r2, r3
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	497b      	ldr	r1, [pc, #492]	; (8001918 <fnSerialMotionAction+0x2ec>)
 800172a:	487c      	ldr	r0, [pc, #496]	; (800191c <fnSerialMotionAction+0x2f0>)
 800172c:	f004 fc48 	bl	8005fc0 <HAL_UART_Transmit>
		break;
 8001730:	e0e4      	b.n	80018fc <fnSerialMotionAction+0x2d0>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <fnSerialMotionAction+0x2f4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fdc0 	bl	80012bc <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 800173c:	4b70      	ldr	r3, [pc, #448]	; (8001900 <fnSerialMotionAction+0x2d4>)
 800173e:	2219      	movs	r2, #25
 8001740:	701a      	strb	r2, [r3, #0]
		break;
 8001742:	e0db      	b.n	80018fc <fnSerialMotionAction+0x2d0>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8001744:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <fnSerialMotionAction+0x2d8>)
 8001746:	f240 620a 	movw	r2, #1546	; 0x60a
 800174a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800174c:	4b6d      	ldr	r3, [pc, #436]	; (8001904 <fnSerialMotionAction+0x2d8>)
 800174e:	2208      	movs	r2, #8
 8001750:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001752:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001758:	4b6b      	ldr	r3, [pc, #428]	; (8001908 <fnSerialMotionAction+0x2dc>)
 800175a:	2241      	movs	r2, #65	; 0x41
 800175c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800175e:	4b6a      	ldr	r3, [pc, #424]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001760:	2260      	movs	r2, #96	; 0x60
 8001762:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001766:	2200      	movs	r2, #0
 8001768:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800176a:	4b67      	ldr	r3, [pc, #412]	; (8001908 <fnSerialMotionAction+0x2dc>)
 800176c:	2200      	movs	r2, #0
 800176e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001770:	4b65      	ldr	r3, [pc, #404]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001772:	2200      	movs	r2, #0
 8001774:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001776:	4b64      	ldr	r3, [pc, #400]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001778:	2200      	movs	r2, #0
 800177a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800177c:	4b62      	ldr	r3, [pc, #392]	; (8001908 <fnSerialMotionAction+0x2dc>)
 800177e:	2200      	movs	r2, #0
 8001780:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <fnSerialMotionAction+0x2e0>)
 8001784:	4a60      	ldr	r2, [pc, #384]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001786:	495f      	ldr	r1, [pc, #380]	; (8001904 <fnSerialMotionAction+0x2d8>)
 8001788:	4861      	ldr	r0, [pc, #388]	; (8001910 <fnSerialMotionAction+0x2e4>)
 800178a:	f001 fc35 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <fnSerialMotionAction+0x172>
			fnLEDsErrorState();
 8001794:	f7ff f8a0 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001798:	f000 fc92 	bl	80020c0 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 800179c:	e0ab      	b.n	80018f6 <fnSerialMotionAction+0x2ca>
		else if (RxData[5] & 0b10000) {
 800179e:	4b61      	ldr	r3, [pc, #388]	; (8001924 <fnSerialMotionAction+0x2f8>)
 80017a0:	795b      	ldrb	r3, [r3, #5]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80a5 	beq.w	80018f6 <fnSerialMotionAction+0x2ca>
			iSerialMachineStatus = 30;
 80017ac:	4b54      	ldr	r3, [pc, #336]	; (8001900 <fnSerialMotionAction+0x2d4>)
 80017ae:	221e      	movs	r2, #30
 80017b0:	701a      	strb	r2, [r3, #0]
		break;
 80017b2:	e0a0      	b.n	80018f6 <fnSerialMotionAction+0x2ca>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 80017b4:	4b53      	ldr	r3, [pc, #332]	; (8001904 <fnSerialMotionAction+0x2d8>)
 80017b6:	f240 620a 	movw	r2, #1546	; 0x60a
 80017ba:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80017bc:	4b51      	ldr	r3, [pc, #324]	; (8001904 <fnSerialMotionAction+0x2d8>)
 80017be:	2208      	movs	r2, #8
 80017c0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80017c2:	4b51      	ldr	r3, [pc, #324]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017c4:	2222      	movs	r2, #34	; 0x22
 80017c6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80017c8:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017d0:	2260      	movs	r2, #96	; 0x60
 80017d2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80017da:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017dc:	220f      	movs	r2, #15
 80017de:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80017e0:	4b49      	ldr	r3, [pc, #292]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80017e6:	4b48      	ldr	r3, [pc, #288]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80017ec:	4b46      	ldr	r3, [pc, #280]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <fnSerialMotionAction+0x2e0>)
 80017f4:	4a44      	ldr	r2, [pc, #272]	; (8001908 <fnSerialMotionAction+0x2dc>)
 80017f6:	4943      	ldr	r1, [pc, #268]	; (8001904 <fnSerialMotionAction+0x2d8>)
 80017f8:	4845      	ldr	r0, [pc, #276]	; (8001910 <fnSerialMotionAction+0x2e4>)
 80017fa:	f001 fbfd 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <fnSerialMotionAction+0x1e2>
			fnLEDsErrorState();
 8001804:	f7ff f868 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001808:	f000 fc5a 	bl	80020c0 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 800180c:	e076      	b.n	80018fc <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 35;
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <fnSerialMotionAction+0x2d4>)
 8001810:	2223      	movs	r2, #35	; 0x23
 8001812:	701a      	strb	r2, [r3, #0]
		break;
 8001814:	e072      	b.n	80018fc <fnSerialMotionAction+0x2d0>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <fnSerialMotionAction+0x2d8>)
 8001818:	f240 620a 	movw	r2, #1546	; 0x60a
 800181c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <fnSerialMotionAction+0x2d8>)
 8001820:	2208      	movs	r2, #8
 8001822:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001824:	4b38      	ldr	r3, [pc, #224]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <fnSerialMotionAction+0x2dc>)
 800182c:	2241      	movs	r2, #65	; 0x41
 800182e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001830:	4b35      	ldr	r3, [pc, #212]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001832:	2260      	movs	r2, #96	; 0x60
 8001834:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001838:	2200      	movs	r2, #0
 800183a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <fnSerialMotionAction+0x2dc>)
 800183e:	2200      	movs	r2, #0
 8001840:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001844:	2200      	movs	r2, #0
 8001846:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <fnSerialMotionAction+0x2dc>)
 800184a:	2200      	movs	r2, #0
 800184c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001850:	2200      	movs	r2, #0
 8001852:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <fnSerialMotionAction+0x2e0>)
 8001856:	4a2c      	ldr	r2, [pc, #176]	; (8001908 <fnSerialMotionAction+0x2dc>)
 8001858:	492a      	ldr	r1, [pc, #168]	; (8001904 <fnSerialMotionAction+0x2d8>)
 800185a:	482d      	ldr	r0, [pc, #180]	; (8001910 <fnSerialMotionAction+0x2e4>)
 800185c:	f001 fbcc 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <fnSerialMotionAction+0x244>
			fnLEDsErrorState();
 8001866:	f7ff f837 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800186a:	f000 fc29 	bl	80020c0 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 800186e:	e044      	b.n	80018fa <fnSerialMotionAction+0x2ce>
		else if (RxData[5] & 0b00100) {
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <fnSerialMotionAction+0x2f8>)
 8001872:	795b      	ldrb	r3, [r3, #5]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d03e      	beq.n	80018fa <fnSerialMotionAction+0x2ce>
			iSerialCounter++;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <fnSerialMotionAction+0x2fc>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <fnSerialMotionAction+0x2fc>)
 8001886:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <fnSerialMotionAction+0x2d4>)
 800188a:	2228      	movs	r2, #40	; 0x28
 800188c:	701a      	strb	r2, [r3, #0]
		break;
 800188e:	e034      	b.n	80018fa <fnSerialMotionAction+0x2ce>

	case 40:
		//REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <fnSerialMotionAction+0x2fc>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <fnSerialMotionAction+0x300>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d114      	bne.n	80018ca <fnSerialMotionAction+0x29e>
			iSerialMachineStatus = 100;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <fnSerialMotionAction+0x2d4>)
 80018a2:	2264      	movs	r2, #100	; 0x64
 80018a4:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <fnSerialMotionAction+0x304>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <fnSerialMotionAction+0x300>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 80018b2:	4820      	ldr	r0, [pc, #128]	; (8001934 <fnSerialMotionAction+0x308>)
 80018b4:	f003 fe79 	bl	80055aa <HAL_TIM_Base_Stop>
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <fnSerialMotionAction+0x2e8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	491d      	ldr	r1, [pc, #116]	; (8001938 <fnSerialMotionAction+0x30c>)
 80018c2:	4816      	ldr	r0, [pc, #88]	; (800191c <fnSerialMotionAction+0x2f0>)
 80018c4:	f004 fb7c 	bl	8005fc0 <HAL_UART_Transmit>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 80018c8:	e018      	b.n	80018fc <fnSerialMotionAction+0x2d0>
		else if (iSerialCounter % 2 == 0) {
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <fnSerialMotionAction+0x2fc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <fnSerialMotionAction+0x2bc>
			iPosition = iSerialRange;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <fnSerialMotionAction+0x304>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <fnSerialMotionAction+0x2f4>)
 80018de:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <fnSerialMotionAction+0x2d4>)
 80018e2:	220a      	movs	r2, #10
 80018e4:	701a      	strb	r2, [r3, #0]
		break;
 80018e6:	e009      	b.n	80018fc <fnSerialMotionAction+0x2d0>
			iPosition = 0;
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <fnSerialMotionAction+0x2f4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <fnSerialMotionAction+0x2d4>)
 80018f0:	220a      	movs	r2, #10
 80018f2:	701a      	strb	r2, [r3, #0]
		break;
 80018f4:	e002      	b.n	80018fc <fnSerialMotionAction+0x2d0>
		break;
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <fnSerialMotionAction+0x2d0>
		break;
 80018fa:	bf00      	nop
	}
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000009 	.word	0x20000009
 8001904:	20000254 	.word	0x20000254
 8001908:	2000026c 	.word	0x2000026c
 800190c:	20000274 	.word	0x20000274
 8001910:	20000214 	.word	0x20000214
 8001914:	20000000 	.word	0x20000000
 8001918:	0800a9bc 	.word	0x0800a9bc
 800191c:	200004a0 	.word	0x200004a0
 8001920:	200002d0 	.word	0x200002d0
 8001924:	20000294 	.word	0x20000294
 8001928:	20000010 	.word	0x20000010
 800192c:	20000018 	.word	0x20000018
 8001930:	20000014 	.word	0x20000014
 8001934:	200003bc 	.word	0x200003bc
 8001938:	0800a9c4 	.word	0x0800a9c4

0800193c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d112      	bne.n	8001974 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (iHomingStatus != 1) {
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d006      	beq.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 8001956:	f7fe ffd5 	bl	8000904 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800195a:	2101      	movs	r1, #1
 800195c:	483c      	ldr	r0, [pc, #240]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800195e:	f002 faf6 	bl	8003f4e <HAL_GPIO_TogglePin>
	else if(htim -> Instance == TIM14){
		fnReset();
	}


}
 8001962:	e06d      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	2101      	movs	r1, #1
 8001968:	4839      	ldr	r0, [pc, #228]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800196a:	f002 fad7 	bl	8003f1c <HAL_GPIO_WritePin>
			fnEncReadCount();
 800196e:	f7ff fc63 	bl	8001238 <fnEncReadCount>
}
 8001972:	e065      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM7){
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a36      	ldr	r2, [pc, #216]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d106      	bne.n	800198c <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 800197e:	f7ff fd0b 	bl	8001398 <fnSingleMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	4832      	ldr	r0, [pc, #200]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001986:	f002 fae2 	bl	8003f4e <HAL_GPIO_TogglePin>
}
 800198a:	e059      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM10){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d106      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x68>
		fnSerialMotionAction();
 8001996:	f7ff fe49 	bl	800162c <fnSerialMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	482c      	ldr	r0, [pc, #176]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800199e:	f002 fad6 	bl	8003f4e <HAL_GPIO_TogglePin>
}
 80019a2:	e04d      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM11){
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2c      	ldr	r2, [pc, #176]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d141      	bne.n	8001a32 <HAL_TIM_PeriodElapsedCallback+0xf6>
		if (iMode == 0 && iSingleMachineStatus != 100) {
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d11b      	bne.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d017      	beq.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0xb4>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ca:	ec53 2b17 	vmov	r2, r3, d7
 80019ce:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80019d0:	4827      	ldr	r0, [pc, #156]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019d2:	f006 fd27 	bl	8008424 <siprintf>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019da:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e6:	4922      	ldr	r1, [pc, #136]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019e8:	4823      	ldr	r0, [pc, #140]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80019ea:	f004 fae9 	bl	8005fc0 <HAL_UART_Transmit>
}
 80019ee:	e027      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
		else if (iMode == 1 && iSerialMachineStatus != 100) {
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d122      	bne.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d01e      	beq.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a0c:	ec53 2b17 	vmov	r2, r3, d7
 8001a10:	4916      	ldr	r1, [pc, #88]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a12:	4817      	ldr	r0, [pc, #92]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a14:	f006 fd06 	bl	8008424 <siprintf>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a1c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a28:	4911      	ldr	r1, [pc, #68]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a2a:	4813      	ldr	r0, [pc, #76]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a2c:	f004 fac8 	bl	8005fc0 <HAL_UART_Transmit>
}
 8001a30:	e006      	b.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM14){
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x104>
		fnReset();
 8001a3c:	f7ff faa8 	bl	8000f90 <fnReset>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40001000 	.word	0x40001000
 8001a4c:	20000007 	.word	0x20000007
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40001400 	.word	0x40001400
 8001a58:	40014400 	.word	0x40014400
 8001a5c:	40014800 	.word	0x40014800
 8001a60:	20000004 	.word	0x20000004
 8001a64:	20000008 	.word	0x20000008
 8001a68:	200002c8 	.word	0x200002c8
 8001a6c:	0800a970 	.word	0x0800a970
 8001a70:	20000244 	.word	0x20000244
 8001a74:	20000240 	.word	0x20000240
 8001a78:	200004a0 	.word	0x200004a0
 8001a7c:	20000009 	.word	0x20000009
 8001a80:	40002000 	.word	0x40002000

08001a84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a94:	d129      	bne.n	8001aea <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001a98:	f240 620a 	movw	r2, #1546	; 0x60a
 8001a9c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aac:	2241      	movs	r2, #65	; 0x41
 8001aae:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ab2:	2260      	movs	r2, #96	; 0x60
 8001ab4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_GPIO_EXTI_Callback+0x78>)
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ad8:	4906      	ldr	r1, [pc, #24]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ada:	4809      	ldr	r0, [pc, #36]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001adc:	f001 fa8c 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8001ae6:	f000 faeb 	bl	80020c0 <Error_Handler>

		}
	}
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000254 	.word	0x20000254
 8001af8:	2000026c 	.word	0x2000026c
 8001afc:	20000274 	.word	0x20000274
 8001b00:	20000214 	.word	0x20000214

08001b04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b08:	f000 ffc0 	bl	8002a8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b0c:	f000 f874 	bl	8001bf8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b10:	f7fe fdf4 	bl	80006fc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001b14:	f000 fe8a 	bl	800282c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001b18:	f000 ff04 	bl	8002924 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001b1c:	f7fe fd6a 	bl	80005f4 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001b20:	f000 fca8 	bl	8002474 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001b24:	f000 fc50 	bl	80023c8 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001b28:	f000 fcdc 	bl	80024e4 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001b2c:	f000 fd12 	bl	8002554 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001b30:	f000 fd34 	bl	800259c <MX_TIM11_Init>
	MX_TIM14_Init();
 8001b34:	f000 fd56 	bl	80025e4 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b38:	f7fe fde0 	bl	80006fc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001b3c:	f000 fe76 	bl	800282c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001b40:	f000 fef0 	bl	8002924 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001b44:	f7fe fd56 	bl	80005f4 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001b48:	f000 fc94 	bl	8002474 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001b4c:	f000 fc3c 	bl	80023c8 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001b50:	f000 fcc8 	bl	80024e4 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001b54:	f000 fcfe 	bl	8002554 <MX_TIM10_Init>
	MX_TIM14_Init();
 8001b58:	f000 fd44 	bl	80025e4 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	4921      	ldr	r1, [pc, #132]	; (8001be4 <main+0xe0>)
 8001b60:	4821      	ldr	r0, [pc, #132]	; (8001be8 <main+0xe4>)
 8001b62:	f004 fac0 	bl	80060e6 <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8001b66:	4821      	ldr	r0, [pc, #132]	; (8001bec <main+0xe8>)
 8001b68:	f001 fa02 	bl	8002f70 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <main+0xec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <main+0xec>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <main+0xec>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <main+0xec>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <main+0xec>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <main+0xec>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <main+0xf0>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <main+0xf0>)
 8001b98:	2212      	movs	r2, #18
 8001b9a:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <main+0xf0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <main+0xf0>)
 8001ba4:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001ba8:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <main+0xf0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <main+0xf0>)
 8001bb2:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001bb6:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <main+0xf0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <main+0xf0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <main+0xf0>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <main+0xf0>)
 8001bcc:	2214      	movs	r2, #20
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001bd0:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <main+0xf0>)
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <main+0xe8>)
 8001bd4:	f001 f8e0 	bl	8002d98 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <main+0xe8>)
 8001bdc:	f001 fbf9 	bl	80033d2 <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001be0:	e7fe      	b.n	8001be0 <main+0xdc>
 8001be2:	bf00      	nop
 8001be4:	2000023c 	.word	0x2000023c
 8001be8:	200004a0 	.word	0x200004a0
 8001bec:	20000214 	.word	0x20000214
 8001bf0:	20000254 	.word	0x20000254
 8001bf4:	2000029c 	.word	0x2000029c

08001bf8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0b8      	sub	sp, #224	; 0xe0
 8001bfc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c02:	2234      	movs	r2, #52	; 0x34
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f005 ffc0 	bl	8007b8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	2290      	movs	r2, #144	; 0x90
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 ffb1 	bl	8007b8c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001c2a:	f002 fb0b 	bl	8004244 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b3c      	ldr	r3, [pc, #240]	; (8001d20 <SystemClock_Config+0x128>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a3b      	ldr	r2, [pc, #236]	; (8001d20 <SystemClock_Config+0x128>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <SystemClock_Config+0x128>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <SystemClock_Config+0x12c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c4e:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <SystemClock_Config+0x12c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <SystemClock_Config+0x12c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001c84:	2360      	movs	r3, #96	; 0x60
 8001c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c90:	2304      	movs	r3, #4
 8001c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fb2f 	bl	8004304 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001cac:	f000 fa08 	bl	80020c0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cb0:	f002 fad8 	bl	8004264 <HAL_PWREx_EnableOverDrive>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001cba:	f000 fa01 	bl	80020c0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cde:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ce2:	2103      	movs	r1, #3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fdbb 	bl	8004860 <HAL_RCC_ClockConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001cf0:	f000 f9e6 	bl	80020c0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <SystemClock_Config+0x130>)
 8001cf6:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 ffd0 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8001d12:	f000 f9d5 	bl	80020c0 <Error_Handler>
	}
}
 8001d16:	bf00      	nop
 8001d18:	37e0      	adds	r7, #224	; 0xe0
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000
 8001d28:	00200100 	.word	0x00200100

08001d2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4aab      	ldr	r2, [pc, #684]	; (8001fe8 <HAL_UART_RxCpltCallback+0x2bc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	f040 8198 	bne.w	8002070 <HAL_UART_RxCpltCallback+0x344>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001d40:	2204      	movs	r2, #4
 8001d42:	49aa      	ldr	r1, [pc, #680]	; (8001fec <HAL_UART_RxCpltCallback+0x2c0>)
 8001d44:	48aa      	ldr	r0, [pc, #680]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d46:	f006 fb8d 	bl	8008464 <strncmp>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 8001d50:	4ba8      	ldr	r3, [pc, #672]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 8001d56:	4ba8      	ldr	r3, [pc, #672]	; (8001ff8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8001d5c:	48a7      	ldr	r0, [pc, #668]	; (8001ffc <HAL_UART_RxCpltCallback+0x2d0>)
 8001d5e:	f003 fc4b 	bl	80055f8 <HAL_TIM_Base_Start_IT>
 8001d62:	e18b      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 8001d64:	2204      	movs	r2, #4
 8001d66:	49a6      	ldr	r1, [pc, #664]	; (8002000 <HAL_UART_RxCpltCallback+0x2d4>)
 8001d68:	48a1      	ldr	r0, [pc, #644]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d6a:	f006 fb7b 	bl	8008464 <strncmp>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 8001d74:	4ba3      	ldr	r3, [pc, #652]	; (8002004 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	48a2      	ldr	r0, [pc, #648]	; (8002008 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d7e:	f002 f8e6 	bl	8003f4e <HAL_GPIO_TogglePin>
 8001d82:	e17b      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 8001d84:	2204      	movs	r2, #4
 8001d86:	49a1      	ldr	r1, [pc, #644]	; (800200c <HAL_UART_RxCpltCallback+0x2e0>)
 8001d88:	4899      	ldr	r0, [pc, #612]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d8a:	f006 fb6b 	bl	8008464 <strncmp>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 8001d94:	4b9b      	ldr	r3, [pc, #620]	; (8002004 <HAL_UART_RxCpltCallback+0x2d8>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	489a      	ldr	r0, [pc, #616]	; (8002008 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d9e:	f002 f8d6 	bl	8003f4e <HAL_GPIO_TogglePin>
 8001da2:	e16b      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 8001da4:	2204      	movs	r2, #4
 8001da6:	499a      	ldr	r1, [pc, #616]	; (8002010 <HAL_UART_RxCpltCallback+0x2e4>)
 8001da8:	4891      	ldr	r0, [pc, #580]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001daa:	f006 fb5b 	bl	8008464 <strncmp>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <HAL_UART_RxCpltCallback+0x96>
			iSelected_leg = 0;
 8001db4:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_UART_RxCpltCallback+0x2e8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001dba:	4897      	ldr	r0, [pc, #604]	; (8002018 <HAL_UART_RxCpltCallback+0x2ec>)
 8001dbc:	f003 fc1c 	bl	80055f8 <HAL_TIM_Base_Start_IT>
 8001dc0:	e15c      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4995      	ldr	r1, [pc, #596]	; (800201c <HAL_UART_RxCpltCallback+0x2f0>)
 8001dc6:	488a      	ldr	r0, [pc, #552]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dc8:	f006 fb4c 	bl	8008464 <strncmp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_UART_RxCpltCallback+0xb4>
			iSelected_leg = 1;
 8001dd2:	4b90      	ldr	r3, [pc, #576]	; (8002014 <HAL_UART_RxCpltCallback+0x2e8>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001dd8:	488f      	ldr	r0, [pc, #572]	; (8002018 <HAL_UART_RxCpltCallback+0x2ec>)
 8001dda:	f003 fc0d 	bl	80055f8 <HAL_TIM_Base_Start_IT>
 8001dde:	e14d      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001de0:	4b83      	ldr	r3, [pc, #524]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001de2:	78db      	ldrb	r3, [r3, #3]
 8001de4:	2b50      	cmp	r3, #80	; 0x50
 8001de6:	d113      	bne.n	8001e10 <HAL_UART_RxCpltCallback+0xe4>

			if(iMode == 0){
 8001de8:	4b86      	ldr	r3, [pc, #536]	; (8002004 <HAL_UART_RxCpltCallback+0x2d8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8144 	bne.w	800207c <HAL_UART_RxCpltCallback+0x350>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001df4:	487e      	ldr	r0, [pc, #504]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001df6:	f005 fe9b 	bl	8007b30 <atoi>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e00:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001e02:	4b88      	ldr	r3, [pc, #544]	; (8002024 <HAL_UART_RxCpltCallback+0x2f8>)
 8001e04:	220a      	movs	r2, #10
 8001e06:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001e08:	4887      	ldr	r0, [pc, #540]	; (8002028 <HAL_UART_RxCpltCallback+0x2fc>)
 8001e0a:	f003 fbf5 	bl	80055f8 <HAL_TIM_Base_Start_IT>
 8001e0e:	e135      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001e10:	2204      	movs	r2, #4
 8001e12:	4986      	ldr	r1, [pc, #536]	; (800202c <HAL_UART_RxCpltCallback+0x300>)
 8001e14:	4876      	ldr	r0, [pc, #472]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001e16:	f006 fb25 	bl	8008464 <strncmp>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11f      	bne.n	8001e60 <HAL_UART_RxCpltCallback+0x134>

			if(iMode == 1 && iSelected_leg != 100 && iSerialReps != 0 && iSerialRange != 0){
 8001e20:	4b78      	ldr	r3, [pc, #480]	; (8002004 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	f040 8128 	bne.w	800207c <HAL_UART_RxCpltCallback+0x350>
 8001e2c:	4b79      	ldr	r3, [pc, #484]	; (8002014 <HAL_UART_RxCpltCallback+0x2e8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	f000 8122 	beq.w	800207c <HAL_UART_RxCpltCallback+0x350>
 8001e38:	4b7d      	ldr	r3, [pc, #500]	; (8002030 <HAL_UART_RxCpltCallback+0x304>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 811d 	beq.w	800207c <HAL_UART_RxCpltCallback+0x350>
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <HAL_UART_RxCpltCallback+0x308>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8118 	beq.w	800207c <HAL_UART_RxCpltCallback+0x350>
				iSerialCounter = 0;
 8001e4c:	4b7a      	ldr	r3, [pc, #488]	; (8002038 <HAL_UART_RxCpltCallback+0x30c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_UART_RxCpltCallback+0x310>)
 8001e54:	220a      	movs	r2, #10
 8001e56:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 8001e58:	4879      	ldr	r0, [pc, #484]	; (8002040 <HAL_UART_RxCpltCallback+0x314>)
 8001e5a:	f003 fbcd 	bl	80055f8 <HAL_TIM_Base_Start_IT>
 8001e5e:	e10d      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001e62:	78db      	ldrb	r3, [r3, #3]
 8001e64:	2b4e      	cmp	r3, #78	; 0x4e
 8001e66:	d10d      	bne.n	8001e84 <HAL_UART_RxCpltCallback+0x158>
			if(iMode == 1){
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	f040 8104 	bne.w	800207c <HAL_UART_RxCpltCallback+0x350>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 8001e74:	485e      	ldr	r0, [pc, #376]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001e76:	f005 fe5b 	bl	8007b30 <atoi>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_UART_RxCpltCallback+0x304>)
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e0fb      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 8001e84:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001e86:	78db      	ldrb	r3, [r3, #3]
 8001e88:	2b52      	cmp	r3, #82	; 0x52
 8001e8a:	d111      	bne.n	8001eb0 <HAL_UART_RxCpltCallback+0x184>
			if(iMode == 1){
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	f040 80f2 	bne.w	800207c <HAL_UART_RxCpltCallback+0x350>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 8001e98:	4855      	ldr	r0, [pc, #340]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001e9a:	f005 fe49 	bl	8007b30 <atoi>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_UART_RxCpltCallback+0x308>)
 8001ea4:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_UART_RxCpltCallback+0x308>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <HAL_UART_RxCpltCallback+0x2f4>)
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e0e5      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
			}
		}

		//GENERAL STOP COMMAND [HALT]
		else if(strncmp(sUserMessage, sGeneralStop, 4) == 0){
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	4964      	ldr	r1, [pc, #400]	; (8002044 <HAL_UART_RxCpltCallback+0x318>)
 8001eb4:	484e      	ldr	r0, [pc, #312]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001eb6:	f006 fad5 	bl	8008464 <strncmp>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d168      	bne.n	8001f92 <HAL_UART_RxCpltCallback+0x266>

			//QUICK STOP
			TxHeader.StdId = 0x60A;
 8001ec0:	4b61      	ldr	r3, [pc, #388]	; (8002048 <HAL_UART_RxCpltCallback+0x31c>)
 8001ec2:	f240 620a 	movw	r2, #1546	; 0x60a
 8001ec6:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001ec8:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <HAL_UART_RxCpltCallback+0x31c>)
 8001eca:	2208      	movs	r2, #8
 8001ecc:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001ed0:	2222      	movs	r2, #34	; 0x22
 8001ed2:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001ed4:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001ed6:	2240      	movs	r2, #64	; 0x40
 8001ed8:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001edc:	2260      	movs	r2, #96	; 0x60
 8001ede:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001ee0:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x02;
 8001ee6:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001eec:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001ef8:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001efe:	4b54      	ldr	r3, [pc, #336]	; (8002050 <HAL_UART_RxCpltCallback+0x324>)
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f02:	4951      	ldr	r1, [pc, #324]	; (8002048 <HAL_UART_RxCpltCallback+0x31c>)
 8001f04:	4853      	ldr	r0, [pc, #332]	; (8002054 <HAL_UART_RxCpltCallback+0x328>)
 8001f06:	f001 f877 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <HAL_UART_RxCpltCallback+0x1ee>
				fnLEDsErrorState();
 8001f10:	f7fe fce2 	bl	80008d8 <fnLEDsErrorState>
				Error_Handler();
 8001f14:	f000 f8d4 	bl	80020c0 <Error_Handler>
 8001f18:	e0b0      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
			}
			else{
				//DISBALE VOLTAGE
				TxHeader.StdId = 0x60A;
 8001f1a:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_UART_RxCpltCallback+0x31c>)
 8001f1c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001f20:	601a      	str	r2, [r3, #0]
				TxHeader.DLC = 8;
 8001f22:	4b49      	ldr	r3, [pc, #292]	; (8002048 <HAL_UART_RxCpltCallback+0x31c>)
 8001f24:	2208      	movs	r2, #8
 8001f26:	611a      	str	r2, [r3, #16]
				TxData[0] = 0x22;
 8001f28:	4b48      	ldr	r3, [pc, #288]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f2a:	2222      	movs	r2, #34	; 0x22
 8001f2c:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x40;
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0x60;
 8001f34:	4b45      	ldr	r3, [pc, #276]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f36:	2260      	movs	r2, #96	; 0x60
 8001f38:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0x00;
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0x00;
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	711a      	strb	r2, [r3, #4]
				TxData[5] = 0x00;
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	715a      	strb	r2, [r3, #5]
				TxData[6] = 0x00;
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	719a      	strb	r2, [r3, #6]
				TxData[7] = 0x00;
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	71da      	strb	r2, [r3, #7]

				if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001f58:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_UART_RxCpltCallback+0x324>)
 8001f5a:	4a3c      	ldr	r2, [pc, #240]	; (800204c <HAL_UART_RxCpltCallback+0x320>)
 8001f5c:	493a      	ldr	r1, [pc, #232]	; (8002048 <HAL_UART_RxCpltCallback+0x31c>)
 8001f5e:	483d      	ldr	r0, [pc, #244]	; (8002054 <HAL_UART_RxCpltCallback+0x328>)
 8001f60:	f001 f84a 	bl	8002ff8 <HAL_CAN_AddTxMessage>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <HAL_UART_RxCpltCallback+0x248>
					fnLEDsErrorState();
 8001f6a:	f7fe fcb5 	bl	80008d8 <fnLEDsErrorState>
					Error_Handler();
 8001f6e:	f000 f8a7 	bl	80020c0 <Error_Handler>
 8001f72:	e083      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
				}
				else {
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7a:	4823      	ldr	r0, [pc, #140]	; (8002008 <HAL_UART_RxCpltCallback+0x2dc>)
 8001f7c:	f001 ffce 	bl	8003f1c <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart3, sStopState, iLengthOut, 100);
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_UART_RxCpltCallback+0x32c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	2364      	movs	r3, #100	; 0x64
 8001f88:	4934      	ldr	r1, [pc, #208]	; (800205c <HAL_UART_RxCpltCallback+0x330>)
 8001f8a:	4835      	ldr	r0, [pc, #212]	; (8002060 <HAL_UART_RxCpltCallback+0x334>)
 8001f8c:	f004 f818 	bl	8005fc0 <HAL_UART_Transmit>
 8001f90:	e074      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
				}
			}
		}

		//RESET COMMAND [RSET]
		else if(strncmp(sUserMessage, sReset, 4) == 0){
 8001f92:	2204      	movs	r2, #4
 8001f94:	4933      	ldr	r1, [pc, #204]	; (8002064 <HAL_UART_RxCpltCallback+0x338>)
 8001f96:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001f98:	f006 fa64 	bl	8008464 <strncmp>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d112      	bne.n	8001fc8 <HAL_UART_RxCpltCallback+0x29c>
			iMachineStatus = 10;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 100;
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001faa:	2264      	movs	r2, #100	; 0x64
 8001fac:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim7);
 8001fae:	481e      	ldr	r0, [pc, #120]	; (8002028 <HAL_UART_RxCpltCallback+0x2fc>)
 8001fb0:	f003 fb9a 	bl	80056e8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim10);
 8001fb4:	4822      	ldr	r0, [pc, #136]	; (8002040 <HAL_UART_RxCpltCallback+0x314>)
 8001fb6:	f003 fb97 	bl	80056e8 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <HAL_UART_RxCpltCallback+0x2dc>)
 8001fc2:	f001 ffab 	bl	8003f1c <HAL_GPIO_WritePin>
 8001fc6:	e059      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
		}

		//CONTINUE COMMAND [CONT]
		else if(strncmp(sUserMessage, sContinue, 4) == 0){
 8001fc8:	2204      	movs	r2, #4
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_UART_RxCpltCallback+0x33c>)
 8001fcc:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001fce:	f006 fa49 	bl	8008464 <strncmp>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d151      	bne.n	800207c <HAL_UART_RxCpltCallback+0x350>
			iMachineStatus=10;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001fda:	220a      	movs	r2, #10
 8001fdc:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim14);
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <HAL_UART_RxCpltCallback+0x340>)
 8001fe0:	f003 fb0a 	bl	80055f8 <HAL_TIM_Base_Start_IT>
 8001fe4:	e04a      	b.n	800207c <HAL_UART_RxCpltCallback+0x350>
 8001fe6:	bf00      	nop
 8001fe8:	40004800 	.word	0x40004800
 8001fec:	0800a97c 	.word	0x0800a97c
 8001ff0:	2000023c 	.word	0x2000023c
 8001ff4:	20000006 	.word	0x20000006
 8001ff8:	20000007 	.word	0x20000007
 8001ffc:	20000324 	.word	0x20000324
 8002000:	0800a9d4 	.word	0x0800a9d4
 8002004:	20000004 	.word	0x20000004
 8002008:	40020400 	.word	0x40020400
 800200c:	0800a9dc 	.word	0x0800a9dc
 8002010:	0800a9ec 	.word	0x0800a9ec
 8002014:	20000005 	.word	0x20000005
 8002018:	20000408 	.word	0x20000408
 800201c:	0800a9e4 	.word	0x0800a9e4
 8002020:	200002d0 	.word	0x200002d0
 8002024:	20000008 	.word	0x20000008
 8002028:	20000370 	.word	0x20000370
 800202c:	0800a994 	.word	0x0800a994
 8002030:	20000018 	.word	0x20000018
 8002034:	20000014 	.word	0x20000014
 8002038:	20000010 	.word	0x20000010
 800203c:	20000009 	.word	0x20000009
 8002040:	200003bc 	.word	0x200003bc
 8002044:	0800a99c 	.word	0x0800a99c
 8002048:	20000254 	.word	0x20000254
 800204c:	2000026c 	.word	0x2000026c
 8002050:	20000274 	.word	0x20000274
 8002054:	20000214 	.word	0x20000214
 8002058:	20000000 	.word	0x20000000
 800205c:	0800a9cc 	.word	0x0800a9cc
 8002060:	200004a0 	.word	0x200004a0
 8002064:	0800a9a4 	.word	0x0800a9a4
 8002068:	0800a9ac 	.word	0x0800a9ac
 800206c:	20000454 	.word	0x20000454
		}


	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 8002070:	2364      	movs	r3, #100	; 0x64
 8002072:	220c      	movs	r2, #12
 8002074:	4906      	ldr	r1, [pc, #24]	; (8002090 <HAL_UART_RxCpltCallback+0x364>)
 8002076:	4807      	ldr	r0, [pc, #28]	; (8002094 <HAL_UART_RxCpltCallback+0x368>)
 8002078:	f003 ffa2 	bl	8005fc0 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 800207c:	2204      	movs	r2, #4
 800207e:	4906      	ldr	r1, [pc, #24]	; (8002098 <HAL_UART_RxCpltCallback+0x36c>)
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <HAL_UART_RxCpltCallback+0x368>)
 8002082:	f004 f830 	bl	80060e6 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	0800a984 	.word	0x0800a984
 8002094:	200004a0 	.word	0x200004a0
 8002098:	2000023c 	.word	0x2000023c

0800209c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f001 f87f 	bl	80031ae <HAL_CAN_GetRxMessage>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000294 	.word	0x20000294
 80020bc:	20000278 	.word	0x20000278

080020c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020c8:	e7fe      	b.n	80020c8 <Error_Handler+0x8>
	...

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_MspInit+0x44>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_MspInit+0x44>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_MspInit+0x44>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_MspInit+0x44>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_MspInit+0x44>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_MspInit+0x44>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <NMI_Handler+0x4>

0800211a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler+0x4>

08002126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler+0x4>

08002132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002160:	f000 fcda 	bl	8002b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <CAN1_RX0_IRQHandler+0x10>)
 800216e:	f001 f956 	bl	800341e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000214 	.word	0x20000214

0800217c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002182:	f003 fc15 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200003bc 	.word	0x200003bc

08002190 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002196:	f003 fc0b 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000408 	.word	0x20000408

080021a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM3_IRQHandler+0x10>)
 80021aa:	f003 fc01 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200002d8 	.word	0x200002d8

080021b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <USART3_IRQHandler+0x10>)
 80021be:	f003 ffe1 	bl	8006184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200004a0 	.word	0x200004a0

080021cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021d4:	f001 fed6 	bl	8003f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80021e2:	f003 fbe5 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000454 	.word	0x20000454

080021f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM6_DAC_IRQHandler+0x10>)
 80021f6:	f003 fbdb 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000324 	.word	0x20000324

08002204 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <TIM7_IRQHandler+0x10>)
 800220a:	f003 fbd1 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000370 	.word	0x20000370

08002218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
	return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_kill>:

int _kill(int pid, int sig)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002232:	f005 fc81 	bl	8007b38 <__errno>
 8002236:	4603      	mov	r3, r0
 8002238:	2216      	movs	r2, #22
 800223a:	601a      	str	r2, [r3, #0]
	return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_exit>:

void _exit (int status)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffe7 	bl	8002228 <_kill>
	while (1) {}		/* Make sure we hang here */
 800225a:	e7fe      	b.n	800225a <_exit+0x12>

0800225c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e00a      	b.n	8002284 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800226e:	f3af 8000 	nop.w
 8002272:	4601      	mov	r1, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	b2ca      	uxtb	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf0      	blt.n	800226e <_read+0x12>
	}

return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e009      	b.n	80022bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf1      	blt.n	80022a8 <_write+0x12>
	}
	return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_close>:

int _close(int file)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f6:	605a      	str	r2, [r3, #4]
	return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_isatty>:

int _isatty(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return 1;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f005 fbe6 	bl	8007b38 <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20080000 	.word	0x20080000
 8002398:	00000400 	.word	0x00000400
 800239c:	200002d4 	.word	0x200002d4
 80023a0:	20000940 	.word	0x20000940

080023a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <SystemInit+0x20>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <SystemInit+0x20>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 fbd8 	bl	8007b8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023dc:	463b      	mov	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <MX_TIM3_Init+0xa4>)
 80023e8:	4a21      	ldr	r2, [pc, #132]	; (8002470 <MX_TIM3_Init+0xa8>)
 80023ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <MX_TIM3_Init+0xa4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <MX_TIM3_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <MX_TIM3_Init+0xa4>)
 80023fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_TIM3_Init+0xa4>)
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <MX_TIM3_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800240c:	2301      	movs	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002414:	2301      	movs	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002424:	2301      	movs	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4619      	mov	r1, r3
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <MX_TIM3_Init+0xa4>)
 8002438:	f003 f986 	bl	8005748 <HAL_TIM_Encoder_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002442:	f7ff fe3d 	bl	80020c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800244e:	463b      	mov	r3, r7
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <MX_TIM3_Init+0xa4>)
 8002454:	f003 fcba 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800245e:	f7ff fe2f 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	3730      	adds	r7, #48	; 0x30
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200002d8 	.word	0x200002d8
 8002470:	40000400 	.word	0x40000400

08002474 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <MX_TIM6_Init+0x68>)
 8002486:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <MX_TIM6_Init+0x6c>)
 8002488:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_TIM6_Init+0x68>)
 800248c:	f242 527f 	movw	r2, #9599	; 0x257f
 8002490:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <MX_TIM6_Init+0x68>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <MX_TIM6_Init+0x68>)
 800249a:	f241 3287 	movw	r2, #4999	; 0x1387
 800249e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_TIM6_Init+0x68>)
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024a6:	480d      	ldr	r0, [pc, #52]	; (80024dc <MX_TIM6_Init+0x68>)
 80024a8:	f003 f828 	bl	80054fc <HAL_TIM_Base_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80024b2:	f7ff fe05 	bl	80020c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4806      	ldr	r0, [pc, #24]	; (80024dc <MX_TIM6_Init+0x68>)
 80024c4:	f003 fc82 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80024ce:	f7ff fdf7 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000324 	.word	0x20000324
 80024e0:	40001000 	.word	0x40001000

080024e4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <MX_TIM7_Init+0x68>)
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <MX_TIM7_Init+0x6c>)
 80024f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <MX_TIM7_Init+0x68>)
 80024fc:	f242 527f 	movw	r2, #9599	; 0x257f
 8002500:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_TIM7_Init+0x68>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <MX_TIM7_Init+0x68>)
 800250a:	f241 3287 	movw	r2, #4999	; 0x1387
 800250e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_TIM7_Init+0x68>)
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002516:	480d      	ldr	r0, [pc, #52]	; (800254c <MX_TIM7_Init+0x68>)
 8002518:	f002 fff0 	bl	80054fc <HAL_TIM_Base_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002522:	f7ff fdcd 	bl	80020c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	4619      	mov	r1, r3
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <MX_TIM7_Init+0x68>)
 8002534:	f003 fc4a 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800253e:	f7ff fdbf 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000370 	.word	0x20000370
 8002550:	40001400 	.word	0x40001400

08002554 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_TIM10_Init+0x40>)
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <MX_TIM10_Init+0x44>)
 800255c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <MX_TIM10_Init+0x40>)
 8002560:	f242 527f 	movw	r2, #9599	; 0x257f
 8002564:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <MX_TIM10_Init+0x40>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_TIM10_Init+0x40>)
 800256e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002572:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <MX_TIM10_Init+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_TIM10_Init+0x40>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <MX_TIM10_Init+0x40>)
 8002582:	f002 ffbb 	bl	80054fc <HAL_TIM_Base_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800258c:	f7ff fd98 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200003bc 	.word	0x200003bc
 8002598:	40014400 	.word	0x40014400

0800259c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_TIM11_Init+0x40>)
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <MX_TIM11_Init+0x44>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9600-1;
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <MX_TIM11_Init+0x40>)
 80025a8:	f242 527f 	movw	r2, #9599	; 0x257f
 80025ac:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_TIM11_Init+0x40>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_TIM11_Init+0x40>)
 80025b6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025ba:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <MX_TIM11_Init+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_TIM11_Init+0x40>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_TIM11_Init+0x40>)
 80025ca:	f002 ff97 	bl	80054fc <HAL_TIM_Base_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80025d4:	f7ff fd74 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000408 	.word	0x20000408
 80025e0:	40014800 	.word	0x40014800

080025e4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_TIM14_Init+0x40>)
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <MX_TIM14_Init+0x44>)
 80025ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9599;
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <MX_TIM14_Init+0x40>)
 80025f0:	f242 527f 	movw	r2, #9599	; 0x257f
 80025f4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_TIM14_Init+0x40>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_TIM14_Init+0x40>)
 80025fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8002602:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <MX_TIM14_Init+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_TIM14_Init+0x40>)
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	; (8002624 <MX_TIM14_Init+0x40>)
 8002612:	f002 ff73 	bl	80054fc <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800261c:	f7ff fd50 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000454 	.word	0x20000454
 8002628:	40002000 	.word	0x40002000

0800262c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_TIM_Encoder_MspInit+0xc4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d14b      	bne.n	80026e6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002696:	2340      	movs	r3, #64	; 0x40
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026a6:	2302      	movs	r3, #2
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4811      	ldr	r0, [pc, #68]	; (80026f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80026b2:	f001 fa87 	bl	8003bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026c6:	2302      	movs	r3, #2
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	480a      	ldr	r0, [pc, #40]	; (80026fc <HAL_TIM_Encoder_MspInit+0xd0>)
 80026d2:	f001 fa77 	bl	8003bc4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	201d      	movs	r0, #29
 80026dc:	f001 f9a9 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026e0:	201d      	movs	r0, #29
 80026e2:	f001 f9c2 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020800 	.word	0x40020800

08002700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a41      	ldr	r2, [pc, #260]	; (8002814 <HAL_TIM_Base_MspInit+0x114>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d114      	bne.n	800273c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a40      	ldr	r2, [pc, #256]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 8002718:	f043 0310 	orr.w	r3, r3, #16
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	2036      	movs	r0, #54	; 0x36
 8002730:	f001 f97f 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002734:	2036      	movs	r0, #54	; 0x36
 8002736:	f001 f998 	bl	8003a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800273a:	e066      	b.n	800280a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM7)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a36      	ldr	r2, [pc, #216]	; (800281c <HAL_TIM_Base_MspInit+0x11c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d114      	bne.n	8002770 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002746:	4b34      	ldr	r3, [pc, #208]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a33      	ldr	r2, [pc, #204]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 800274c:	f043 0320 	orr.w	r3, r3, #32
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2037      	movs	r0, #55	; 0x37
 8002764:	f001 f965 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002768:	2037      	movs	r0, #55	; 0x37
 800276a:	f001 f97e 	bl	8003a6a <HAL_NVIC_EnableIRQ>
}
 800276e:	e04c      	b.n	800280a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM10)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <HAL_TIM_Base_MspInit+0x120>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d114      	bne.n	80027a4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	2019      	movs	r0, #25
 8002798:	f001 f94b 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800279c:	2019      	movs	r0, #25
 800279e:	f001 f964 	bl	8003a6a <HAL_NVIC_EnableIRQ>
}
 80027a2:	e032      	b.n	800280a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM11)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <HAL_TIM_Base_MspInit+0x124>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d114      	bne.n	80027d8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	201a      	movs	r0, #26
 80027cc:	f001 f931 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027d0:	201a      	movs	r0, #26
 80027d2:	f001 f94a 	bl	8003a6a <HAL_NVIC_EnableIRQ>
}
 80027d6:	e018      	b.n	800280a <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM14)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_TIM_Base_MspInit+0x128>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d113      	bne.n	800280a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_TIM_Base_MspInit+0x118>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	202d      	movs	r0, #45	; 0x2d
 8002800:	f001 f917 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002804:	202d      	movs	r0, #45	; 0x2d
 8002806:	f001 f930 	bl	8003a6a <HAL_NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40001000 	.word	0x40001000
 8002818:	40023800 	.word	0x40023800
 800281c:	40001400 	.word	0x40001400
 8002820:	40014400 	.word	0x40014400
 8002824:	40014800 	.word	0x40014800
 8002828:	40002000 	.word	0x40002000

0800282c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <MX_USART3_UART_Init+0x5c>)
 8002834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002836:	4b13      	ldr	r3, [pc, #76]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002838:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800283c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_USART3_UART_Init+0x58>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <MX_USART3_UART_Init+0x58>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <MX_USART3_UART_Init+0x58>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <MX_USART3_UART_Init+0x58>)
 8002870:	f003 fb58 	bl	8005f24 <HAL_UART_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800287a:	f7ff fc21 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200004a0 	.word	0x200004a0
 8002888:	40004800 	.word	0x40004800

0800288c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_UART_MspInit+0x8c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d130      	bne.n	8002910 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_UART_MspInit+0x90>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_UART_MspInit+0x90>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_UART_MspInit+0x90>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_UART_MspInit+0x90>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_UART_MspInit+0x90>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_UART_MspInit+0x90>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028f0:	2307      	movs	r3, #7
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4619      	mov	r1, r3
 80028fa:	4809      	ldr	r0, [pc, #36]	; (8002920 <HAL_UART_MspInit+0x94>)
 80028fc:	f001 f962 	bl	8003bc4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	2027      	movs	r0, #39	; 0x27
 8002906:	f001 f894 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800290a:	2027      	movs	r0, #39	; 0x27
 800290c:	f001 f8ad 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002910:	bf00      	nop
 8002912:	3728      	adds	r7, #40	; 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40004800 	.word	0x40004800
 800291c:	40023800 	.word	0x40023800
 8002920:	40020c00 	.word	0x40020c00

08002924 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800292a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800292e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002932:	2206      	movs	r2, #6
 8002934:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002938:	2202      	movs	r2, #2
 800293a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002944:	2202      	movs	r2, #2
 8002946:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800294a:	2201      	movs	r2, #1
 800294c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800295c:	2201      	movs	r2, #1
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002968:	f001 fb24 	bl	8003fb4 <HAL_PCD_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002972:	f7ff fba5 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000524 	.word	0x20000524

08002980 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a0:	d141      	bne.n	8002a26 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029ba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029cc:	230a      	movs	r3, #10
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4619      	mov	r1, r3
 80029d6:	4817      	ldr	r0, [pc, #92]	; (8002a34 <HAL_PCD_MspInit+0xb4>)
 80029d8:	f001 f8f4 	bl	8003bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	4810      	ldr	r0, [pc, #64]	; (8002a34 <HAL_PCD_MspInit+0xb4>)
 80029f2:	f001 f8e7 	bl	8003bc4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 80029fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a00:	6353      	str	r3, [r2, #52]	; 0x34
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_PCD_MspInit+0xb0>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020000 	.word	0x40020000

08002a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a54:	4c0b      	ldr	r4, [pc, #44]	; (8002a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a62:	f7ff fc9f 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a66:	f005 f86d 	bl	8007b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6a:	f7ff f84b 	bl	8001b04 <main>
  bx  lr    
 8002a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a78:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002a7c:	0800adfc 	.word	0x0800adfc
  ldr r2, =_sbss
 8002a80:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002a84:	2000093c 	.word	0x2000093c

08002a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a88:	e7fe      	b.n	8002a88 <ADC_IRQHandler>
	...

08002a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <HAL_Init+0x28>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <HAL_Init+0x28>)
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	f000 ffbd 	bl	8003a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f000 f808 	bl	8002ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa8:	f7ff fb10 	bl	80020cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023c00 	.word	0x40023c00

08002ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_InitTick+0x54>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_InitTick+0x58>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 ffd5 	bl	8003a86 <HAL_SYSTICK_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00e      	b.n	8002b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0f      	cmp	r3, #15
 8002aea:	d80a      	bhi.n	8002b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aec:	2200      	movs	r2, #0
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f000 ff9d 	bl	8003a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_InitTick+0x5c>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000001c 	.word	0x2000001c
 8002b10:	20000024 	.word	0x20000024
 8002b14:	20000020 	.word	0x20000020

08002b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_IncTick+0x20>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_IncTick+0x24>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_IncTick+0x24>)
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000024 	.word	0x20000024
 8002b3c:	20000928 	.word	0x20000928

08002b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return uwTick;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_GetTick+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000928 	.word	0x20000928

08002b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b60:	f7ff ffee 	bl	8002b40 <HAL_GetTick>
 8002b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d005      	beq.n	8002b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_Delay+0x44>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b7e:	bf00      	nop
 8002b80:	f7ff ffde 	bl	8002b40 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d8f7      	bhi.n	8002b80 <HAL_Delay+0x28>
  {
  }
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000024 	.word	0x20000024

08002ba0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0ed      	b.n	8002d8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd fd50 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd4:	f7ff ffb4 	bl	8002b40 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bda:	e012      	b.n	8002c02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bdc:	f7ff ffb0 	bl	8002b40 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b0a      	cmp	r3, #10
 8002be8:	d90b      	bls.n	8002c02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0c5      	b.n	8002d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0e5      	beq.n	8002bdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0202 	bic.w	r2, r2, #2
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c20:	f7ff ff8e 	bl	8002b40 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c26:	e012      	b.n	8002c4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c28:	f7ff ff8a 	bl	8002b40 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b0a      	cmp	r3, #10
 8002c34:	d90b      	bls.n	8002c4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2205      	movs	r2, #5
 8002c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e09f      	b.n	8002d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e5      	bne.n	8002c28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7e1b      	ldrb	r3, [r3, #24]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e007      	b.n	8002c86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7e5b      	ldrb	r3, [r3, #25]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e007      	b.n	8002cb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7e9b      	ldrb	r3, [r3, #26]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d108      	bne.n	8002cca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0220 	orr.w	r2, r2, #32
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e007      	b.n	8002cda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0220 	bic.w	r2, r2, #32
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7edb      	ldrb	r3, [r3, #27]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d108      	bne.n	8002cf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0210 	bic.w	r2, r2, #16
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e007      	b.n	8002d04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0210 	orr.w	r2, r2, #16
 8002d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7f1b      	ldrb	r3, [r3, #28]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0208 	orr.w	r2, r2, #8
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e007      	b.n	8002d2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0208 	bic.w	r2, r2, #8
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7f5b      	ldrb	r3, [r3, #29]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d108      	bne.n	8002d48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0204 	orr.w	r2, r2, #4
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e007      	b.n	8002d58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0204 	bic.w	r2, r2, #4
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	ea42 0103 	orr.w	r1, r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d003      	beq.n	8002dbe <HAL_CAN_ConfigFilter+0x26>
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f040 80c7 	bne.w	8002f4c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_CAN_ConfigFilter+0x1d0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d001      	beq.n	8002dcc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002dc8:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_CAN_ConfigFilter+0x1d4>)
 8002dca:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <HAL_CAN_ConfigFilter+0x1d4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d111      	bne.n	8002e08 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2201      	movs	r2, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	401a      	ands	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d123      	bne.n	8002e7a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3248      	adds	r2, #72	; 0x48
 8002e5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e70:	6979      	ldr	r1, [r7, #20]
 8002e72:	3348      	adds	r3, #72	; 0x48
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d122      	bne.n	8002ec8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ea2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3248      	adds	r2, #72	; 0x48
 8002ea8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ebc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ebe:	6979      	ldr	r1, [r7, #20]
 8002ec0:	3348      	adds	r3, #72	; 0x48
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ee2:	e007      	b.n	8002ef4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f0e:	e007      	b.n	8002f20 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f3e:	f023 0201 	bic.w	r2, r3, #1
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e006      	b.n	8002f5a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40003400 	.word	0x40003400
 8002f6c:	40006400 	.word	0x40006400

08002f70 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d12e      	bne.n	8002fe2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7ff fdd0 	bl	8002b40 <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fa2:	e012      	b.n	8002fca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fa4:	f7ff fdcc 	bl	8002b40 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b0a      	cmp	r3, #10
 8002fb0:	d90b      	bls.n	8002fca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e012      	b.n	8002ff0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e5      	bne.n	8002fa4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e006      	b.n	8002ff0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003016:	7ffb      	ldrb	r3, [r7, #31]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d003      	beq.n	8003024 <HAL_CAN_AddTxMessage+0x2c>
 800301c:	7ffb      	ldrb	r3, [r7, #31]
 800301e:	2b02      	cmp	r3, #2
 8003020:	f040 80b8 	bne.w	8003194 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80a0 	beq.w	8003184 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	0e1b      	lsrs	r3, r3, #24
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d907      	bls.n	8003064 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e09e      	b.n	80031a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003064:	2201      	movs	r2, #1
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	409a      	lsls	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	6809      	ldr	r1, [r1, #0]
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3318      	adds	r3, #24
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	440b      	add	r3, r1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e00f      	b.n	80030b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800309c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3318      	adds	r3, #24
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	440b      	add	r3, r1
 80030b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3318      	adds	r3, #24
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	440b      	add	r3, r1
 80030c2:	3304      	adds	r3, #4
 80030c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	7d1b      	ldrb	r3, [r3, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d111      	bne.n	80030f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3318      	adds	r3, #24
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	6811      	ldr	r1, [r2, #0]
 80030e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3318      	adds	r3, #24
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	440b      	add	r3, r1
 80030ee:	3304      	adds	r3, #4
 80030f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3307      	adds	r3, #7
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	061a      	lsls	r2, r3, #24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3306      	adds	r3, #6
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3305      	adds	r3, #5
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	4313      	orrs	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	3204      	adds	r2, #4
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	4610      	mov	r0, r2
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	ea43 0200 	orr.w	r2, r3, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	440b      	add	r3, r1
 8003124:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003128:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3303      	adds	r3, #3
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	061a      	lsls	r2, r3, #24
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3302      	adds	r3, #2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3301      	adds	r3, #1
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	4313      	orrs	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	4610      	mov	r0, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	6811      	ldr	r1, [r2, #0]
 8003150:	ea43 0200 	orr.w	r2, r3, r0
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	440b      	add	r3, r1
 800315a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800315e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3318      	adds	r3, #24
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4413      	add	r3, r2
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	6811      	ldr	r1, [r2, #0]
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3318      	adds	r3, #24
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	440b      	add	r3, r1
 800317e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e00e      	b.n	80031a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e006      	b.n	80031a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d003      	beq.n	80031d2 <HAL_CAN_GetRxMessage+0x24>
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	f040 80f3 	bne.w	80033b8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10e      	bne.n	80031f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0e7      	b.n	80033c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0d8      	b.n	80033c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	331b      	adds	r3, #27
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0204 	and.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	331b      	adds	r3, #27
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	4413      	add	r3, r2
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0d5b      	lsrs	r3, r3, #21
 8003242:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e00b      	b.n	8003264 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	331b      	adds	r3, #27
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	331b      	adds	r3, #27
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	4413      	add	r3, r2
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0202 	and.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	331b      	adds	r3, #27
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	4413      	add	r3, r2
 8003286:	3304      	adds	r3, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	331b      	adds	r3, #27
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	331b      	adds	r3, #27
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0a1a      	lsrs	r2, r3, #8
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0c1a      	lsrs	r2, r3, #16
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	3302      	adds	r3, #2
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	4413      	add	r3, r2
 8003316:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	0e1a      	lsrs	r2, r3, #24
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	3303      	adds	r3, #3
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	4413      	add	r3, r2
 8003330:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	3304      	adds	r3, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	4413      	add	r3, r2
 8003348:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0a1a      	lsrs	r2, r3, #8
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	3305      	adds	r3, #5
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	4413      	add	r3, r2
 8003362:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0c1a      	lsrs	r2, r3, #16
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	3306      	adds	r3, #6
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	4413      	add	r3, r2
 800337c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0e1a      	lsrs	r2, r3, #24
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	3307      	adds	r3, #7
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d108      	bne.n	80033a4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0220 	orr.w	r2, r2, #32
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	e007      	b.n	80033b4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0220 	orr.w	r2, r2, #32
 80033b2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e006      	b.n	80033c6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d002      	beq.n	80033f0 <HAL_CAN_ActivateNotification+0x1e>
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d109      	bne.n	8003404 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6959      	ldr	r1, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e006      	b.n	8003412 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08a      	sub	sp, #40	; 0x28
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d07c      	beq.n	800355e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d023      	beq.n	80034b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f983 	bl	800378c <HAL_CAN_TxMailbox0CompleteCallback>
 8003486:	e016      	b.n	80034b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
 800349a:	e00c      	b.n	80034b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	e002      	b.n	80034b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f989 	bl	80037c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d024      	beq.n	800350a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f963 	bl	80037a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80034da:	e016      	b.n	800350a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	e00c      	b.n	800350a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
 8003502:	e002      	b.n	800350a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f969 	bl	80037dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d024      	beq.n	800355e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800351c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f943 	bl	80037b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800352e:	e016      	b.n	800355e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
 8003542:	e00c      	b.n	800355e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	e002      	b.n	800355e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f949 	bl	80037f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00c      	beq.n	8003582 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003578:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2210      	movs	r2, #16
 8003580:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2208      	movs	r2, #8
 800359c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f930 	bl	8003804 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fe fd6d 	bl	800209c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2210      	movs	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2208      	movs	r2, #8
 8003600:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f912 	bl	800382c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8f9 	bl	8003818 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2210      	movs	r2, #16
 8003640:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8fc 	bl	8003840 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2208      	movs	r2, #8
 8003662:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8f5 	bl	8003854 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d07b      	beq.n	800376c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d072      	beq.n	8003764 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d03e      	beq.n	8003764 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ec:	2b60      	cmp	r3, #96	; 0x60
 80036ee:	d02b      	beq.n	8003748 <HAL_CAN_IRQHandler+0x32a>
 80036f0:	2b60      	cmp	r3, #96	; 0x60
 80036f2:	d82e      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d022      	beq.n	800373e <HAL_CAN_IRQHandler+0x320>
 80036f8:	2b50      	cmp	r3, #80	; 0x50
 80036fa:	d82a      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d019      	beq.n	8003734 <HAL_CAN_IRQHandler+0x316>
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d826      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 8003704:	2b30      	cmp	r3, #48	; 0x30
 8003706:	d010      	beq.n	800372a <HAL_CAN_IRQHandler+0x30c>
 8003708:	2b30      	cmp	r3, #48	; 0x30
 800370a:	d822      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 800370c:	2b10      	cmp	r3, #16
 800370e:	d002      	beq.n	8003716 <HAL_CAN_IRQHandler+0x2f8>
 8003710:	2b20      	cmp	r3, #32
 8003712:	d005      	beq.n	8003720 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003714:	e01d      	b.n	8003752 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800371e:	e019      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f043 0310 	orr.w	r3, r3, #16
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003728:	e014      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	f043 0320 	orr.w	r3, r3, #32
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003732:	e00f      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800373c:	e00a      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003746:	e005      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003750:	e000      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            break;
 8003752:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003762:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2204      	movs	r2, #4
 800376a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f872 	bl	8003868 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <__NVIC_SetPriorityGrouping+0x40>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038aa:	4a04      	ldr	r2, [pc, #16]	; (80038bc <__NVIC_SetPriorityGrouping+0x40>)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	60d3      	str	r3, [r2, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000ed00 	.word	0xe000ed00
 80038c0:	05fa0000 	.word	0x05fa0000

080038c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0b      	blt.n	800390a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <__NVIC_EnableIRQ+0x38>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000e100 	.word	0xe000e100

0800391c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf28      	it	cs
 800398e:	2304      	movcs	r3, #4
 8003990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3304      	adds	r3, #4
 8003996:	2b06      	cmp	r3, #6
 8003998:	d902      	bls.n	80039a0 <NVIC_EncodePriority+0x30>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3b03      	subs	r3, #3
 800399e:	e000      	b.n	80039a2 <NVIC_EncodePriority+0x32>
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	4313      	orrs	r3, r2
         );
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e8:	d301      	bcc.n	80039ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00f      	b.n	8003a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <SysTick_Config+0x40>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f6:	210f      	movs	r1, #15
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	f7ff ff8e 	bl	800391c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SysTick_Config+0x40>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <SysTick_Config+0x40>)
 8003a08:	2207      	movs	r2, #7
 8003a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	e000e010 	.word	0xe000e010

08003a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff29 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a44:	f7ff ff3e 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	6978      	ldr	r0, [r7, #20]
 8003a50:	f7ff ff8e 	bl	8003970 <NVIC_EncodePriority>
 8003a54:	4602      	mov	r2, r0
 8003a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff5d 	bl	800391c <__NVIC_SetPriority>
}
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	4603      	mov	r3, r0
 8003a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff31 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ffa2 	bl	80039d8 <SysTick_Config>
 8003a94:	4603      	mov	r3, r0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff f848 	bl	8002b40 <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d008      	beq.n	8003ad0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e052      	b.n	8003b76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0216 	bic.w	r2, r2, #22
 8003ade:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <HAL_DMA_Abort+0x62>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0208 	bic.w	r2, r2, #8
 8003b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b20:	e013      	b.n	8003b4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b22:	f7ff f80d 	bl	8002b40 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d90c      	bls.n	8003b4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2203      	movs	r2, #3
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e015      	b.n	8003b76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e4      	bne.n	8003b22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	223f      	movs	r2, #63	; 0x3f
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d004      	beq.n	8003b9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e00c      	b.n	8003bb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2205      	movs	r2, #5
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e175      	b.n	8003ed0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003be4:	2201      	movs	r2, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	f040 8164 	bne.w	8003eca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d005      	beq.n	8003c1a <HAL_GPIO_Init+0x56>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d130      	bne.n	8003c7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c50:	2201      	movs	r2, #1
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 0201 	and.w	r2, r3, #1
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d017      	beq.n	8003cb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d123      	bne.n	8003d0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	08da      	lsrs	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3208      	adds	r2, #8
 8003ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	220f      	movs	r2, #15
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	08da      	lsrs	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3208      	adds	r2, #8
 8003d06:	69b9      	ldr	r1, [r7, #24]
 8003d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0203 	and.w	r2, r3, #3
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80be 	beq.w	8003eca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4e:	4b66      	ldr	r3, [pc, #408]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a65      	ldr	r2, [pc, #404]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d66:	4a61      	ldr	r2, [pc, #388]	; (8003eec <HAL_GPIO_Init+0x328>)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_GPIO_Init+0x32c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d037      	beq.n	8003e02 <HAL_GPIO_Init+0x23e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a57      	ldr	r2, [pc, #348]	; (8003ef4 <HAL_GPIO_Init+0x330>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d031      	beq.n	8003dfe <HAL_GPIO_Init+0x23a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a56      	ldr	r2, [pc, #344]	; (8003ef8 <HAL_GPIO_Init+0x334>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d02b      	beq.n	8003dfa <HAL_GPIO_Init+0x236>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a55      	ldr	r2, [pc, #340]	; (8003efc <HAL_GPIO_Init+0x338>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d025      	beq.n	8003df6 <HAL_GPIO_Init+0x232>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a54      	ldr	r2, [pc, #336]	; (8003f00 <HAL_GPIO_Init+0x33c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01f      	beq.n	8003df2 <HAL_GPIO_Init+0x22e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <HAL_GPIO_Init+0x340>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d019      	beq.n	8003dee <HAL_GPIO_Init+0x22a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_GPIO_Init+0x344>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_GPIO_Init+0x226>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a51      	ldr	r2, [pc, #324]	; (8003f0c <HAL_GPIO_Init+0x348>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00d      	beq.n	8003de6 <HAL_GPIO_Init+0x222>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a50      	ldr	r2, [pc, #320]	; (8003f10 <HAL_GPIO_Init+0x34c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <HAL_GPIO_Init+0x21e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4f      	ldr	r2, [pc, #316]	; (8003f14 <HAL_GPIO_Init+0x350>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_GPIO_Init+0x21a>
 8003dda:	2309      	movs	r3, #9
 8003ddc:	e012      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003dde:	230a      	movs	r3, #10
 8003de0:	e010      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003de2:	2308      	movs	r3, #8
 8003de4:	e00e      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003de6:	2307      	movs	r3, #7
 8003de8:	e00c      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003dea:	2306      	movs	r3, #6
 8003dec:	e00a      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003dee:	2305      	movs	r3, #5
 8003df0:	e008      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003df2:	2304      	movs	r3, #4
 8003df4:	e006      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003df6:	2303      	movs	r3, #3
 8003df8:	e004      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e002      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_GPIO_Init+0x240>
 8003e02:	2300      	movs	r3, #0
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	f002 0203 	and.w	r2, r2, #3
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	4093      	lsls	r3, r2
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e14:	4935      	ldr	r1, [pc, #212]	; (8003eec <HAL_GPIO_Init+0x328>)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e22:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e46:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e4c:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <HAL_GPIO_Init+0x354>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b0f      	cmp	r3, #15
 8003ed4:	f67f ae86 	bls.w	8003be4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	40020400 	.word	0x40020400
 8003ef8:	40020800 	.word	0x40020800
 8003efc:	40020c00 	.word	0x40020c00
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40021400 	.word	0x40021400
 8003f08:	40021800 	.word	0x40021800
 8003f0c:	40021c00 	.word	0x40021c00
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40022400 	.word	0x40022400
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f2c:	787b      	ldrb	r3, [r7, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f38:	e003      	b.n	8003f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	041a      	lsls	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	619a      	str	r2, [r3, #24]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4013      	ands	r3, r2
 8003f66:	041a      	lsls	r2, r3, #16
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	43d9      	mvns	r1, r3
 8003f6c:	887b      	ldrh	r3, [r7, #2]
 8003f6e:	400b      	ands	r3, r1
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	619a      	str	r2, [r3, #24]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d006      	beq.n	8003fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f9a:	4a05      	ldr	r2, [pc, #20]	; (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd fd6e 	bl	8001a84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40013c00 	.word	0x40013c00

08003fb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb6:	b08f      	sub	sp, #60	; 0x3c
 8003fb8:	af0a      	add	r7, sp, #40	; 0x28
 8003fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e116      	b.n	80041f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fe fccd 	bl	8002980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f003 fafd 	bl	8007604 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	687e      	ldr	r6, [r7, #4]
 8004012:	466d      	mov	r5, sp
 8004014:	f106 0410 	add.w	r4, r6, #16
 8004018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800401a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800401c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800401e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004020:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004024:	e885 0003 	stmia.w	r5, {r0, r1}
 8004028:	1d33      	adds	r3, r6, #4
 800402a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800402c:	6838      	ldr	r0, [r7, #0]
 800402e:	f003 fa91 	bl	8007554 <USB_CoreInit>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0d7      	b.n	80041f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f003 faeb 	bl	8007626 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e04a      	b.n	80040ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	333d      	adds	r3, #61	; 0x3d
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	333c      	adds	r3, #60	; 0x3c
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	b298      	uxth	r0, r3
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	3342      	adds	r3, #66	; 0x42
 8004092:	4602      	mov	r2, r0
 8004094:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	333f      	adds	r3, #63	; 0x3f
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3344      	adds	r3, #68	; 0x44
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	3348      	adds	r3, #72	; 0x48
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	3350      	adds	r3, #80	; 0x50
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	3301      	adds	r3, #1
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d3af      	bcc.n	8004056 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	e044      	b.n	8004186 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	3301      	adds	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d3b5      	bcc.n	80040fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	687e      	ldr	r6, [r7, #4]
 8004198:	466d      	mov	r5, sp
 800419a:	f106 0410 	add.w	r4, r6, #16
 800419e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ae:	1d33      	adds	r3, r6, #4
 80041b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041b2:	6838      	ldr	r0, [r7, #0]
 80041b4:	f003 fa84 	bl	80076c0 <USB_DevInit>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e014      	b.n	80041f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d102      	bne.n	80041e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f80a 	bl	80041fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f003 fc3e 	bl	8007a6e <USB_DevDisconnect>

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_PCDEx_ActivateLPM+0x44>)
 800422c:	4313      	orrs	r3, r2
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	10000003 	.word	0x10000003

08004244 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40007000 	.word	0x40007000

08004264 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	4b23      	ldr	r3, [pc, #140]	; (80042fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <HAL_PWREx_EnableOverDrive+0x98>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	; 0x40
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_PWREx_EnableOverDrive+0x98>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1d      	ldr	r2, [pc, #116]	; (8004300 <HAL_PWREx_EnableOverDrive+0x9c>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004292:	f7fe fc55 	bl	8002b40 <HAL_GetTick>
 8004296:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004298:	e009      	b.n	80042ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800429a:	f7fe fc51 	bl	8002b40 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a8:	d901      	bls.n	80042ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e022      	b.n	80042f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ae:	4b14      	ldr	r3, [pc, #80]	; (8004300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ba:	d1ee      	bne.n	800429a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042c8:	f7fe fc3a 	bl	8002b40 <HAL_GetTick>
 80042cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042ce:	e009      	b.n	80042e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d0:	f7fe fc36 	bl	8002b40 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042de:	d901      	bls.n	80042e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e007      	b.n	80042f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f0:	d1ee      	bne.n	80042d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	40007000 	.word	0x40007000

08004304 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e29b      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8087 	beq.w	8004436 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004328:	4b96      	ldr	r3, [pc, #600]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b04      	cmp	r3, #4
 8004332:	d00c      	beq.n	800434e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004334:	4b93      	ldr	r3, [pc, #588]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d112      	bne.n	8004366 <HAL_RCC_OscConfig+0x62>
 8004340:	4b90      	ldr	r3, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434c:	d10b      	bne.n	8004366 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434e:	4b8d      	ldr	r3, [pc, #564]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d06c      	beq.n	8004434 <HAL_RCC_OscConfig+0x130>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d168      	bne.n	8004434 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e275      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x7a>
 8004370:	4b84      	ldr	r3, [pc, #528]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a83      	ldr	r2, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e02e      	b.n	80043dc <HAL_RCC_OscConfig+0xd8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x9c>
 8004386:	4b7f      	ldr	r3, [pc, #508]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7e      	ldr	r2, [pc, #504]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b7c      	ldr	r3, [pc, #496]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a7b      	ldr	r2, [pc, #492]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e01d      	b.n	80043dc <HAL_RCC_OscConfig+0xd8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0xc0>
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a75      	ldr	r2, [pc, #468]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b73      	ldr	r3, [pc, #460]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a72      	ldr	r2, [pc, #456]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0xd8>
 80043c4:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6e      	ldr	r2, [pc, #440]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a6b      	ldr	r2, [pc, #428]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fe fbac 	bl	8002b40 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fe fba8 	bl	8002b40 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e229      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0xe8>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe fb98 	bl	8002b40 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fe fb94 	bl	8002b40 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e215      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	4b57      	ldr	r3, [pc, #348]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x110>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d069      	beq.n	8004516 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004442:	4b50      	ldr	r3, [pc, #320]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b4d      	ldr	r3, [pc, #308]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b08      	cmp	r3, #8
 8004458:	d11c      	bne.n	8004494 <HAL_RCC_OscConfig+0x190>
 800445a:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	4b47      	ldr	r3, [pc, #284]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x17a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1e9      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b41      	ldr	r3, [pc, #260]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	493d      	ldr	r1, [pc, #244]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	e040      	b.n	8004516 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d023      	beq.n	80044e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a38      	ldr	r2, [pc, #224]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe fb4a 	bl	8002b40 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fe fb46 	bl	8002b40 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e1c7      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c2:	4b30      	ldr	r3, [pc, #192]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b2d      	ldr	r3, [pc, #180]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4929      	ldr	r1, [pc, #164]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
 80044e2:	e018      	b.n	8004516 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe fb26 	bl	8002b40 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f8:	f7fe fb22 	bl	8002b40 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1a3      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d038      	beq.n	8004594 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d019      	beq.n	800455e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452a:	4b16      	ldr	r3, [pc, #88]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 800452c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fe fb03 	bl	8002b40 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453e:	f7fe faff 	bl	8002b40 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e180      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x23a>
 800455c:	e01a      	b.n	8004594 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455e:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	4a08      	ldr	r2, [pc, #32]	; (8004584 <HAL_RCC_OscConfig+0x280>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fe fae9 	bl	8002b40 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004572:	f7fe fae5 	bl	8002b40 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d903      	bls.n	8004588 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e166      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
 8004584:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b92      	ldr	r3, [pc, #584]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800458a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ee      	bne.n	8004572 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a4 	beq.w	80046ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a2:	4b8c      	ldr	r3, [pc, #560]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10d      	bne.n	80045ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	4b89      	ldr	r3, [pc, #548]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a88      	ldr	r2, [pc, #544]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ba:	4b86      	ldr	r3, [pc, #536]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ca:	4b83      	ldr	r3, [pc, #524]	; (80047d8 <HAL_RCC_OscConfig+0x4d4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d118      	bne.n	8004608 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045d6:	4b80      	ldr	r3, [pc, #512]	; (80047d8 <HAL_RCC_OscConfig+0x4d4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7f      	ldr	r2, [pc, #508]	; (80047d8 <HAL_RCC_OscConfig+0x4d4>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e2:	f7fe faad 	bl	8002b40 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fe faa9 	bl	8002b40 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b64      	cmp	r3, #100	; 0x64
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e12a      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fc:	4b76      	ldr	r3, [pc, #472]	; (80047d8 <HAL_RCC_OscConfig+0x4d4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d106      	bne.n	800461e <HAL_RCC_OscConfig+0x31a>
 8004610:	4b70      	ldr	r3, [pc, #448]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a6f      	ldr	r2, [pc, #444]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	e02d      	b.n	800467a <HAL_RCC_OscConfig+0x376>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x33c>
 8004626:	4b6b      	ldr	r3, [pc, #428]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a6a      	ldr	r2, [pc, #424]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	4b68      	ldr	r3, [pc, #416]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a67      	ldr	r2, [pc, #412]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	f023 0304 	bic.w	r3, r3, #4
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
 800463e:	e01c      	b.n	800467a <HAL_RCC_OscConfig+0x376>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b05      	cmp	r3, #5
 8004646:	d10c      	bne.n	8004662 <HAL_RCC_OscConfig+0x35e>
 8004648:	4b62      	ldr	r3, [pc, #392]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a61      	ldr	r2, [pc, #388]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800464e:	f043 0304 	orr.w	r3, r3, #4
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	4b5f      	ldr	r3, [pc, #380]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
 8004660:	e00b      	b.n	800467a <HAL_RCC_OscConfig+0x376>
 8004662:	4b5c      	ldr	r3, [pc, #368]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	4a5b      	ldr	r2, [pc, #364]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	6713      	str	r3, [r2, #112]	; 0x70
 800466e:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d015      	beq.n	80046ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fe fa5d 	bl	8002b40 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004688:	e00a      	b.n	80046a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fe fa59 	bl	8002b40 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	; 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e0d8      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a0:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ee      	beq.n	800468a <HAL_RCC_OscConfig+0x386>
 80046ac:	e014      	b.n	80046d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ae:	f7fe fa47 	bl	8002b40 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fe fa43 	bl	8002b40 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0c2      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046cc:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ee      	bne.n	80046b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046de:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a3c      	ldr	r2, [pc, #240]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80046e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80ae 	beq.w	8004850 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f4:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d06d      	beq.n	80047dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d14b      	bne.n	80047a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004708:	4b32      	ldr	r3, [pc, #200]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a31      	ldr	r2, [pc, #196]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800470e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fe fa14 	bl	8002b40 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471c:	f7fe fa10 	bl	8002b40 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e091      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	019b      	lsls	r3, r3, #6
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	3b01      	subs	r3, #1
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	071b      	lsls	r3, r3, #28
 8004766:	491b      	ldr	r1, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe f9e2 	bl	8002b40 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe f9de 	bl	8002b40 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e05f      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x47c>
 800479e:	e057      	b.n	8004850 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe f9c8 	bl	8002b40 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fe f9c4 	bl	8002b40 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e045      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4b0>
 80047d2:	e03d      	b.n	8004850 <HAL_RCC_OscConfig+0x54c>
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047dc:	4b1f      	ldr	r3, [pc, #124]	; (800485c <HAL_RCC_OscConfig+0x558>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d030      	beq.n	800484c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d129      	bne.n	800484c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d122      	bne.n	800484c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004812:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d119      	bne.n	800484c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d10f      	bne.n	800484c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d107      	bne.n	800484c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800

08004860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0d0      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d910      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 020f 	bic.w	r2, r3, #15
 800488e:	4965      	ldr	r1, [pc, #404]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0b8      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d020      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d8:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	494d      	ldr	r1, [pc, #308]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d040      	beq.n	8004984 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d115      	bne.n	8004942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e073      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06b      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4936      	ldr	r1, [pc, #216]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004954:	f7fe f8f4 	bl	8002b40 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	e00a      	b.n	8004972 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7fe f8f0 	bl	8002b40 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e053      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 020c 	and.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d1eb      	bne.n	800495c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d210      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 020f 	bic.w	r2, r3, #15
 800499a:	4922      	ldr	r1, [pc, #136]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e032      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	490e      	ldr	r1, [pc, #56]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049f2:	f000 f821 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	490a      	ldr	r1, [pc, #40]	; (8004a2c <HAL_RCC_ClockConfig+0x1cc>)
 8004a04:	5ccb      	ldrb	r3, [r1, r3]
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1d0>)
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x1d4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f850 	bl	8002ab8 <HAL_InitTick>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023c00 	.word	0x40023c00
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	0800a9f4 	.word	0x0800a9f4
 8004a30:	2000001c 	.word	0x2000001c
 8004a34:	20000020 	.word	0x20000020

08004a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b094      	sub	sp, #80	; 0x50
 8004a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	647b      	str	r3, [r7, #68]	; 0x44
 8004a44:	2300      	movs	r3, #0
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a48:	2300      	movs	r3, #0
 8004a4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a50:	4b79      	ldr	r3, [pc, #484]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d00d      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x40>
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	f200 80e1 	bhi.w	8004c24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x34>
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d003      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a6a:	e0db      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b73      	ldr	r3, [pc, #460]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a70:	e0db      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b73      	ldr	r3, [pc, #460]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a76:	e0d8      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b6f      	ldr	r3, [pc, #444]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a82:	4b6d      	ldr	r3, [pc, #436]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d063      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	2200      	movs	r2, #0
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	f04f 0000 	mov.w	r0, #0
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	0159      	lsls	r1, r3, #5
 8004ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004abc:	0150      	lsls	r0, r2, #5
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	1a51      	subs	r1, r2, r1
 8004ac6:	6139      	str	r1, [r7, #16]
 8004ac8:	4629      	mov	r1, r5
 8004aca:	eb63 0301 	sbc.w	r3, r3, r1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004adc:	4659      	mov	r1, fp
 8004ade:	018b      	lsls	r3, r1, #6
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae6:	4651      	mov	r1, sl
 8004ae8:	018a      	lsls	r2, r1, #6
 8004aea:	4651      	mov	r1, sl
 8004aec:	ebb2 0801 	subs.w	r8, r2, r1
 8004af0:	4659      	mov	r1, fp
 8004af2:	eb63 0901 	sbc.w	r9, r3, r1
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0a:	4690      	mov	r8, r2
 8004b0c:	4699      	mov	r9, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	eb18 0303 	adds.w	r3, r8, r3
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	462b      	mov	r3, r5
 8004b18:	eb49 0303 	adc.w	r3, r9, r3
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	024b      	lsls	r3, r1, #9
 8004b2e:	4621      	mov	r1, r4
 8004b30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b34:	4621      	mov	r1, r4
 8004b36:	024a      	lsls	r2, r1, #9
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3e:	2200      	movs	r2, #0
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b48:	f7fb fbd2 	bl	80002f0 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b54:	e058      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b56:	4b38      	ldr	r3, [pc, #224]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	4611      	mov	r1, r2
 8004b62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	0159      	lsls	r1, r3, #5
 8004b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b82:	0150      	lsls	r0, r2, #5
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b8e:	4649      	mov	r1, r9
 8004b90:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ba0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ba4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ba8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bac:	eb63 050b 	sbc.w	r5, r3, fp
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	00eb      	lsls	r3, r5, #3
 8004bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bbe:	00e2      	lsls	r2, r4, #3
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	18e3      	adds	r3, r4, r3
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	464b      	mov	r3, r9
 8004bcc:	eb45 0303 	adc.w	r3, r5, r3
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bde:	4629      	mov	r1, r5
 8004be0:	028b      	lsls	r3, r1, #10
 8004be2:	4621      	mov	r1, r4
 8004be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be8:	4621      	mov	r1, r4
 8004bea:	028a      	lsls	r2, r1, #10
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	61fa      	str	r2, [r7, #28]
 8004bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bfc:	f7fb fb78 	bl	80002f0 <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4613      	mov	r3, r2
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	3301      	adds	r3, #1
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3750      	adds	r7, #80	; 0x50
 8004c30:	46bd      	mov	sp, r7
 8004c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	007a1200 	.word	0x007a1200

08004c44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	2000001c 	.word	0x2000001c

08004c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c60:	f7ff fff0 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	0a9b      	lsrs	r3, r3, #10
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4903      	ldr	r1, [pc, #12]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	0800aa04 	.word	0x0800aa04

08004c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c88:	f7ff ffdc 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0b5b      	lsrs	r3, r3, #13
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4903      	ldr	r1, [pc, #12]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	0800aa04 	.word	0x0800aa04

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d012      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cd4:	4b69      	ldr	r3, [pc, #420]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a68      	ldr	r2, [pc, #416]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cde:	6093      	str	r3, [r2, #8]
 8004ce0:	4b66      	ldr	r3, [pc, #408]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	4964      	ldr	r1, [pc, #400]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d017      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d06:	4b5d      	ldr	r3, [pc, #372]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	4959      	ldr	r1, [pc, #356]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d24:	d101      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d42:	4b4e      	ldr	r3, [pc, #312]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	494a      	ldr	r1, [pc, #296]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d60:	d101      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 808b 	beq.w	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	4a39      	ldr	r2, [pc, #228]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9c:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004da8:	4b35      	ldr	r3, [pc, #212]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fd fec4 	bl	8002b40 <HAL_GetTick>
 8004db8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dbc:	f7fd fec0 	bl	8002b40 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e38f      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dce:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dda:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d035      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d02e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004df8:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	4a1a      	ldr	r2, [pc, #104]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e1a:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d114      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd fe88 	bl	8002b40 <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd fe84 	bl	8002b40 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e351      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e62:	d111      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e72:	400b      	ands	r3, r1
 8004e74:	4901      	ldr	r1, [pc, #4]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40007000 	.word	0x40007000
 8004e84:	0ffffcff 	.word	0x0ffffcff
 8004e88:	4bac      	ldr	r3, [pc, #688]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4aab      	ldr	r2, [pc, #684]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e92:	6093      	str	r3, [r2, #8]
 8004e94:	4ba9      	ldr	r3, [pc, #676]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea0:	49a6      	ldr	r1, [pc, #664]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d010      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eb2:	4ba2      	ldr	r3, [pc, #648]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb8:	4aa0      	ldr	r2, [pc, #640]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ec2:	4b9e      	ldr	r3, [pc, #632]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	499b      	ldr	r1, [pc, #620]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee0:	4b96      	ldr	r3, [pc, #600]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eee:	4993      	ldr	r1, [pc, #588]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f02:	4b8e      	ldr	r3, [pc, #568]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f10:	498a      	ldr	r1, [pc, #552]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f24:	4b85      	ldr	r3, [pc, #532]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f32:	4982      	ldr	r1, [pc, #520]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f46:	4b7d      	ldr	r3, [pc, #500]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	4979      	ldr	r1, [pc, #484]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f68:	4b74      	ldr	r3, [pc, #464]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f023 0203 	bic.w	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	4971      	ldr	r1, [pc, #452]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f8a:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f023 020c 	bic.w	r2, r3, #12
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f98:	4968      	ldr	r1, [pc, #416]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fac:	4b63      	ldr	r3, [pc, #396]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	4960      	ldr	r1, [pc, #384]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fce:	4b5b      	ldr	r3, [pc, #364]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	4957      	ldr	r1, [pc, #348]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ff0:	4b52      	ldr	r3, [pc, #328]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	494f      	ldr	r1, [pc, #316]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005012:	4b4a      	ldr	r3, [pc, #296]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	4946      	ldr	r1, [pc, #280]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005034:	4b41      	ldr	r3, [pc, #260]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005042:	493e      	ldr	r1, [pc, #248]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005064:	4935      	ldr	r1, [pc, #212]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005078:	4b30      	ldr	r3, [pc, #192]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005086:	492d      	ldr	r1, [pc, #180]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d011      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a8:	4924      	ldr	r1, [pc, #144]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b8:	d101      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050ba:	2301      	movs	r3, #1
 80050bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050da:	4b18      	ldr	r3, [pc, #96]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e8:	4914      	ldr	r1, [pc, #80]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00b      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510c:	490b      	ldr	r1, [pc, #44]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00f      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005130:	4902      	ldr	r1, [pc, #8]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005138:	e002      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800514c:	4b8a      	ldr	r3, [pc, #552]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005152:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	4986      	ldr	r1, [pc, #536]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005170:	4b81      	ldr	r3, [pc, #516]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005180:	497d      	ldr	r1, [pc, #500]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d006      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80d6 	beq.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800519c:	4b76      	ldr	r3, [pc, #472]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a75      	ldr	r2, [pc, #468]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a8:	f7fd fcca 	bl	8002b40 <HAL_GetTick>
 80051ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051b0:	f7fd fcc6 	bl	8002b40 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e195      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c2:	4b6d      	ldr	r3, [pc, #436]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d021      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11d      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051e2:	4b65      	ldr	r3, [pc, #404]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051f0:	4b61      	ldr	r3, [pc, #388]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f6:	0e1b      	lsrs	r3, r3, #24
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	019a      	lsls	r2, r3, #6
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	071b      	lsls	r3, r3, #28
 8005216:	4958      	ldr	r1, [pc, #352]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02e      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005248:	d129      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800524a:	4b4b      	ldr	r3, [pc, #300]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005258:	4b47      	ldr	r3, [pc, #284]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	0f1b      	lsrs	r3, r3, #28
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	019a      	lsls	r2, r3, #6
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	071b      	lsls	r3, r3, #28
 800527e:	493e      	ldr	r1, [pc, #248]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005286:	4b3c      	ldr	r3, [pc, #240]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800528c:	f023 021f 	bic.w	r2, r3, #31
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	3b01      	subs	r3, #1
 8005296:	4938      	ldr	r1, [pc, #224]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01d      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052aa:	4b33      	ldr	r3, [pc, #204]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b0:	0e1b      	lsrs	r3, r3, #24
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052b8:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052be:	0f1b      	lsrs	r3, r3, #28
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	019a      	lsls	r2, r3, #6
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	431a      	orrs	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	071b      	lsls	r3, r3, #28
 80052de:	4926      	ldr	r1, [pc, #152]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d011      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	019a      	lsls	r2, r3, #6
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	061b      	lsls	r3, r3, #24
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	071b      	lsls	r3, r3, #28
 800530e:	491a      	ldr	r1, [pc, #104]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005322:	f7fd fc0d 	bl	8002b40 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800532a:	f7fd fc09 	bl	8002b40 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b64      	cmp	r3, #100	; 0x64
 8005336:	d901      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0d8      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 80ce 	bne.w	80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a08      	ldr	r2, [pc, #32]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535c:	f7fd fbf0 	bl	8002b40 <HAL_GetTick>
 8005360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005362:	e00b      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005364:	f7fd fbec 	bl	8002b40 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d904      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0bb      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800537c:	4b5e      	ldr	r3, [pc, #376]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005388:	d0ec      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02e      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d12a      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053b2:	4b51      	ldr	r3, [pc, #324]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053c0:	4b4d      	ldr	r3, [pc, #308]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	0f1b      	lsrs	r3, r3, #28
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	019a      	lsls	r2, r3, #6
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	061b      	lsls	r3, r3, #24
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	071b      	lsls	r3, r3, #28
 80053e6:	4944      	ldr	r1, [pc, #272]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053ee:	4b42      	ldr	r3, [pc, #264]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	3b01      	subs	r3, #1
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	493d      	ldr	r1, [pc, #244]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d022      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541c:	d11d      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800541e:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	0e1b      	lsrs	r3, r3, #24
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800542c:	4b32      	ldr	r3, [pc, #200]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005432:	0f1b      	lsrs	r3, r3, #28
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	019a      	lsls	r2, r3, #6
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	431a      	orrs	r2, r3
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	061b      	lsls	r3, r3, #24
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	071b      	lsls	r3, r3, #28
 8005452:	4929      	ldr	r1, [pc, #164]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d028      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	0e1b      	lsrs	r3, r3, #24
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005474:	4b20      	ldr	r3, [pc, #128]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	019a      	lsls	r2, r3, #6
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	431a      	orrs	r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	071b      	lsls	r3, r3, #28
 800549a:	4917      	ldr	r1, [pc, #92]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054a2:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4911      	ldr	r1, [pc, #68]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fd fb3c 	bl	8002b40 <HAL_GetTick>
 80054c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054cc:	f7fd fb38 	bl	8002b40 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	; 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e007      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ea:	d1ef      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800

080054fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e049      	b.n	80055a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fd f8ec 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f000 fb80 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <HAL_TIM_Base_Stop+0x38>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	f240 4344 	movw	r3, #1092	; 0x444
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <HAL_TIM_Base_Stop+0x38>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d001      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e054      	b.n	80056ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d022      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x80>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563a:	d01d      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x80>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a22      	ldr	r2, [pc, #136]	; (80056cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x80>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x80>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x80>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x80>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <HAL_TIM_Base_Start_IT+0xe4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x80>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d115      	bne.n	80056a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005680:	4013      	ands	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b06      	cmp	r3, #6
 8005688:	d015      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0xbe>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005690:	d011      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a2:	e008      	b.n	80056b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e000      	b.n	80056b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40010400 	.word	0x40010400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40001800 	.word	0x40001800
 80056e4:	00010007 	.word	0x00010007

080056e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	f241 1311 	movw	r3, #4369	; 0x1111
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10f      	bne.n	8005730 <HAL_TIM_Base_Stop_IT+0x48>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	f240 4344 	movw	r3, #1092	; 0x444
 800571a:	4013      	ands	r3, r2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <HAL_TIM_Base_Stop_IT+0x48>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e08f      	b.n	800587c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7fc ff5b 	bl	800262c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b3e      	ldr	r3, [pc, #248]	; (8005884 <HAL_TIM_Encoder_Init+0x13c>)
 800578a:	400b      	ands	r3, r1
 800578c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f000 fa51 	bl	8005c40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_TIM_Encoder_Init+0x140>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	4313      	orrs	r3, r2
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4b2b      	ldr	r3, [pc, #172]	; (800588c <HAL_TIM_Encoder_Init+0x144>)
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4b2a      	ldr	r3, [pc, #168]	; (8005890 <HAL_TIM_Encoder_Init+0x148>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	4313      	orrs	r3, r2
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	031b      	lsls	r3, r3, #12
 8005808:	4313      	orrs	r3, r2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	4313      	orrs	r3, r2
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	fffebff8 	.word	0xfffebff8
 8005888:	fffffcfc 	.word	0xfffffcfc
 800588c:	fffff3f3 	.word	0xfffff3f3
 8005890:	ffff0f0f 	.word	0xffff0f0f

08005894 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d110      	bne.n	80058e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d102      	bne.n	80058d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ca:	7b7b      	ldrb	r3, [r7, #13]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d001      	beq.n	80058d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e069      	b.n	80059a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e4:	e031      	b.n	800594a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d110      	bne.n	800590e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d102      	bne.n	80058f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058f2:	7b3b      	ldrb	r3, [r7, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e055      	b.n	80059a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800590c:	e01d      	b.n	800594a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d108      	bne.n	8005926 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800591a:	7b7b      	ldrb	r3, [r7, #13]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d102      	bne.n	8005926 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005920:	7b3b      	ldrb	r3, [r7, #12]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d001      	beq.n	800592a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e03e      	b.n	80059a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_TIM_Encoder_Start+0xc4>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b04      	cmp	r3, #4
 8005954:	d008      	beq.n	8005968 <HAL_TIM_Encoder_Start+0xd4>
 8005956:	e00f      	b.n	8005978 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fa0d 	bl	8005d80 <TIM_CCxChannelCmd>
      break;
 8005966:	e016      	b.n	8005996 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2201      	movs	r2, #1
 800596e:	2104      	movs	r1, #4
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fa05 	bl	8005d80 <TIM_CCxChannelCmd>
      break;
 8005976:	e00e      	b.n	8005996 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2201      	movs	r2, #1
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f9fd 	bl	8005d80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2201      	movs	r2, #1
 800598c:	2104      	movs	r1, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f9f6 	bl	8005d80 <TIM_CCxChannelCmd>
      break;
 8005994:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d122      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d11b      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0202 	mvn.w	r2, #2
 80059dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f905 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 80059f8:	e005      	b.n	8005a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8f7 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f908 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d122      	bne.n	8005a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d11b      	bne.n	8005a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0204 	mvn.w	r2, #4
 8005a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f8db 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f8cd 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f8de 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d122      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d11b      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0208 	mvn.w	r2, #8
 8005a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2204      	movs	r2, #4
 8005a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f8b1 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8a3 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8b4 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d122      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d11b      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0210 	mvn.w	r2, #16
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2208      	movs	r2, #8
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f887 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f879 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f88a 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d10e      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d107      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0201 	mvn.w	r2, #1
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb ff04 	bl	800193c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b80      	cmp	r3, #128	; 0x80
 8005b40:	d10e      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4c:	2b80      	cmp	r3, #128	; 0x80
 8005b4e:	d107      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9ce 	bl	8005efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6e:	d10e      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b80      	cmp	r3, #128	; 0x80
 8005b7c:	d107      	bne.n	8005b8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f9c1 	bl	8005f10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b40      	cmp	r3, #64	; 0x40
 8005b9a:	d10e      	bne.n	8005bba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d107      	bne.n	8005bba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f838 	bl	8005c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d10e      	bne.n	8005be6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d107      	bne.n	8005be6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f06f 0220 	mvn.w	r2, #32
 8005bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f981 	bl	8005ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3d      	ldr	r2, [pc, #244]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3c      	ldr	r2, [pc, #240]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3b      	ldr	r2, [pc, #236]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3a      	ldr	r2, [pc, #232]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d027      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d023      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d017      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <TIM_Base_SetConfig+0x128>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <TIM_Base_SetConfig+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <TIM_Base_SetConfig+0x134>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <TIM_Base_SetConfig+0x138>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <TIM_Base_SetConfig+0x13c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0c      	ldr	r2, [pc, #48]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d103      	bne.n	8005d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	615a      	str	r2, [r3, #20]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800
 8005d74:	40001800 	.word	0x40001800
 8005d78:	40001c00 	.word	0x40001c00
 8005d7c:	40002000 	.word	0x40002000

08005d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2201      	movs	r2, #1
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1a      	ldr	r2, [r3, #32]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1a      	ldr	r2, [r3, #32]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	fa01 f303 	lsl.w	r3, r1, r3
 8005db8:	431a      	orrs	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e06d      	b.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a30      	ldr	r2, [pc, #192]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a2f      	ldr	r2, [pc, #188]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d022      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e56:	d01d      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d10c      	bne.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40001800 	.word	0x40001800

08005ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e040      	b.n	8005fb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fc fca0 	bl	800288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2224      	movs	r2, #36	; 0x24
 8005f50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fc18 	bl	8006798 <UART_SetConfig>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e022      	b.n	8005fb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fe70 	bl	8006c60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fef7 	bl	8006da4 <UART_CheckIdleState>
 8005fb6:	4603      	mov	r3, r0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	f040 8081 	bne.w	80060dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_UART_Transmit+0x26>
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e079      	b.n	80060de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_UART_Transmit+0x38>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e072      	b.n	80060de <HAL_UART_Transmit+0x11e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2221      	movs	r2, #33	; 0x21
 800600c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800600e:	f7fc fd97 	bl	8002b40 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602c:	d108      	bne.n	8006040 <HAL_UART_Transmit+0x80>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	e003      	b.n	8006048 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006050:	e02c      	b.n	80060ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	2180      	movs	r1, #128	; 0x80
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 feea 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e038      	b.n	80060de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006080:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	3302      	adds	r3, #2
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e007      	b.n	800609a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3301      	adds	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1cc      	bne.n	8006052 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	2140      	movs	r1, #64	; 0x40
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 feb7 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e005      	b.n	80060de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e000      	b.n	80060de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80060dc:	2302      	movs	r3, #2
  }
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b08a      	sub	sp, #40	; 0x28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	4613      	mov	r3, r2
 80060f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d13d      	bne.n	8006178 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_UART_Receive_IT+0x22>
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e036      	b.n	800617a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_UART_Receive_IT+0x34>
 8006116:	2302      	movs	r3, #2
 8006118:	e02f      	b.n	800617a <HAL_UART_Receive_IT+0x94>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d018      	beq.n	8006168 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	613b      	str	r3, [r7, #16]
   return(result);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	69f9      	ldr	r1, [r7, #28]
 800615a:	6a3a      	ldr	r2, [r7, #32]
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	61bb      	str	r3, [r7, #24]
   return(result);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e6      	bne.n	8006136 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	461a      	mov	r2, r3
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 ff26 	bl	8006fc0 <UART_Start_Receive_IT>
 8006174:	4603      	mov	r3, r0
 8006176:	e000      	b.n	800617a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006178:	2302      	movs	r3, #2
  }
}
 800617a:	4618      	mov	r0, r3
 800617c:	3728      	adds	r7, #40	; 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b0ba      	sub	sp, #232	; 0xe8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80061ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80061b2:	4013      	ands	r3, r2
 80061b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80061b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d115      	bne.n	80061ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00f      	beq.n	80061ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 82a4 	beq.w	800672a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
      }
      return;
 80061ea:	e29e      	b.n	800672a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8117 	beq.w	8006424 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006202:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006206:	4b85      	ldr	r3, [pc, #532]	; (800641c <HAL_UART_IRQHandler+0x298>)
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 810a 	beq.w	8006424 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d011      	beq.n	8006240 <HAL_UART_IRQHandler+0xbc>
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006236:	f043 0201 	orr.w	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d011      	beq.n	8006270 <HAL_UART_IRQHandler+0xec>
 800624c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2202      	movs	r2, #2
 800625e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006266:	f043 0204 	orr.w	r2, r3, #4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d011      	beq.n	80062a0 <HAL_UART_IRQHandler+0x11c>
 800627c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2204      	movs	r2, #4
 800628e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006296:	f043 0202 	orr.w	r2, r3, #2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d017      	beq.n	80062dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d105      	bne.n	80062c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2208      	movs	r2, #8
 80062ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d2:	f043 0208 	orr.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d012      	beq.n	800630e <HAL_UART_IRQHandler+0x18a>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00c      	beq.n	800630e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 820a 	beq.w	800672e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d005      	beq.n	8006366 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800635a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800635e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006362:	2b00      	cmp	r3, #0
 8006364:	d04f      	beq.n	8006406 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fef4 	bl	8007154 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006376:	2b40      	cmp	r3, #64	; 0x40
 8006378:	d141      	bne.n	80063fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006390:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1d9      	bne.n	800637a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d013      	beq.n	80063f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	4a13      	ldr	r2, [pc, #76]	; (8006420 <HAL_UART_IRQHandler+0x29c>)
 80063d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd fbcf 	bl	8003b7e <HAL_DMA_Abort_IT>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d017      	beq.n	8006416 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f4:	e00f      	b.n	8006416 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9ae 	bl	8006758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fc:	e00b      	b.n	8006416 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f9aa 	bl	8006758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006404:	e007      	b.n	8006416 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f9a6 	bl	8006758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006414:	e18b      	b.n	800672e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006416:	bf00      	nop
    return;
 8006418:	e189      	b.n	800672e <HAL_UART_IRQHandler+0x5aa>
 800641a:	bf00      	nop
 800641c:	04000120 	.word	0x04000120
 8006420:	0800721b 	.word	0x0800721b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006428:	2b01      	cmp	r3, #1
 800642a:	f040 8144 	bne.w	80066b6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 813d 	beq.w	80066b6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8136 	beq.w	80066b6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2210      	movs	r2, #16
 8006450:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	f040 80b2 	bne.w	80065c6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800646e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 815d 	beq.w	8006732 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800647e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006482:	429a      	cmp	r2, r3
 8006484:	f080 8155 	bcs.w	8006732 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800648e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649c:	f000 8085 	beq.w	80065aa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1da      	bne.n	80064a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064fc:	f023 0301 	bic.w	r3, r3, #1
 8006500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3308      	adds	r3, #8
 800650a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800650e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006512:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e1      	bne.n	80064ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800654a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800654c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006550:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e3      	bne.n	8006526 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657a:	f023 0310 	bic.w	r3, r3, #16
 800657e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800658c:	65bb      	str	r3, [r7, #88]	; 0x58
 800658e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800659a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e4      	bne.n	800656a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fd fa7a 	bl	8003a9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8d4 	bl	800676c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065c4:	e0b5      	b.n	8006732 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80a7 	beq.w	8006736 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80065e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80a2 	beq.w	8006736 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
 8006616:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800661a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e4      	bne.n	80065f2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3308      	adds	r3, #8
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	623b      	str	r3, [r7, #32]
   return(result);
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800664c:	633a      	str	r2, [r7, #48]	; 0x30
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e3      	bne.n	8006628 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0310 	bic.w	r3, r3, #16
 8006686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	69b9      	ldr	r1, [r7, #24]
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	617b      	str	r3, [r7, #20]
   return(result);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e4      	bne.n	8006672 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f85c 	bl	800676c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066b4:	e03f      	b.n	8006736 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <HAL_UART_IRQHandler+0x55c>
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d008      	beq.n	80066e0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f853 	bl	8006784 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066de:	e02d      	b.n	800673c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00e      	beq.n	800670a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01c      	beq.n	800673a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
    }
    return;
 8006708:	e017      	b.n	800673a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	d012      	beq.n	800673c <HAL_UART_IRQHandler+0x5b8>
 8006716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fd8f 	bl	8007246 <UART_EndTransmit_IT>
    return;
 8006728:	e008      	b.n	800673c <HAL_UART_IRQHandler+0x5b8>
      return;
 800672a:	bf00      	nop
 800672c:	e006      	b.n	800673c <HAL_UART_IRQHandler+0x5b8>
    return;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_UART_IRQHandler+0x5b8>
    return;
 800673a:	bf00      	nop
  }

}
 800673c:	37e8      	adds	r7, #232	; 0xe8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop

08006744 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4ba6      	ldr	r3, [pc, #664]	; (8006a5c <UART_SetConfig+0x2c4>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	6979      	ldr	r1, [r7, #20]
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a94      	ldr	r2, [pc, #592]	; (8006a60 <UART_SetConfig+0x2c8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d120      	bne.n	8006856 <UART_SetConfig+0xbe>
 8006814:	4b93      	ldr	r3, [pc, #588]	; (8006a64 <UART_SetConfig+0x2cc>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b03      	cmp	r3, #3
 8006820:	d816      	bhi.n	8006850 <UART_SetConfig+0xb8>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <UART_SetConfig+0x90>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006839 	.word	0x08006839
 800682c:	08006845 	.word	0x08006845
 8006830:	0800683f 	.word	0x0800683f
 8006834:	0800684b 	.word	0x0800684b
 8006838:	2301      	movs	r3, #1
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e150      	b.n	8006ae0 <UART_SetConfig+0x348>
 800683e:	2302      	movs	r3, #2
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e14d      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006844:	2304      	movs	r3, #4
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e14a      	b.n	8006ae0 <UART_SetConfig+0x348>
 800684a:	2308      	movs	r3, #8
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e147      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006850:	2310      	movs	r3, #16
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e144      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a83      	ldr	r2, [pc, #524]	; (8006a68 <UART_SetConfig+0x2d0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d132      	bne.n	80068c6 <UART_SetConfig+0x12e>
 8006860:	4b80      	ldr	r3, [pc, #512]	; (8006a64 <UART_SetConfig+0x2cc>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b0c      	cmp	r3, #12
 800686c:	d828      	bhi.n	80068c0 <UART_SetConfig+0x128>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <UART_SetConfig+0xdc>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	080068a9 	.word	0x080068a9
 8006878:	080068c1 	.word	0x080068c1
 800687c:	080068c1 	.word	0x080068c1
 8006880:	080068c1 	.word	0x080068c1
 8006884:	080068b5 	.word	0x080068b5
 8006888:	080068c1 	.word	0x080068c1
 800688c:	080068c1 	.word	0x080068c1
 8006890:	080068c1 	.word	0x080068c1
 8006894:	080068af 	.word	0x080068af
 8006898:	080068c1 	.word	0x080068c1
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c1 	.word	0x080068c1
 80068a4:	080068bb 	.word	0x080068bb
 80068a8:	2300      	movs	r3, #0
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e118      	b.n	8006ae0 <UART_SetConfig+0x348>
 80068ae:	2302      	movs	r3, #2
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e115      	b.n	8006ae0 <UART_SetConfig+0x348>
 80068b4:	2304      	movs	r3, #4
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e112      	b.n	8006ae0 <UART_SetConfig+0x348>
 80068ba:	2308      	movs	r3, #8
 80068bc:	77fb      	strb	r3, [r7, #31]
 80068be:	e10f      	b.n	8006ae0 <UART_SetConfig+0x348>
 80068c0:	2310      	movs	r3, #16
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e10c      	b.n	8006ae0 <UART_SetConfig+0x348>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a68      	ldr	r2, [pc, #416]	; (8006a6c <UART_SetConfig+0x2d4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d120      	bne.n	8006912 <UART_SetConfig+0x17a>
 80068d0:	4b64      	ldr	r3, [pc, #400]	; (8006a64 <UART_SetConfig+0x2cc>)
 80068d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068da:	2b30      	cmp	r3, #48	; 0x30
 80068dc:	d013      	beq.n	8006906 <UART_SetConfig+0x16e>
 80068de:	2b30      	cmp	r3, #48	; 0x30
 80068e0:	d814      	bhi.n	800690c <UART_SetConfig+0x174>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d009      	beq.n	80068fa <UART_SetConfig+0x162>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d810      	bhi.n	800690c <UART_SetConfig+0x174>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <UART_SetConfig+0x15c>
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d006      	beq.n	8006900 <UART_SetConfig+0x168>
 80068f2:	e00b      	b.n	800690c <UART_SetConfig+0x174>
 80068f4:	2300      	movs	r3, #0
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e0f2      	b.n	8006ae0 <UART_SetConfig+0x348>
 80068fa:	2302      	movs	r3, #2
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e0ef      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006900:	2304      	movs	r3, #4
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e0ec      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006906:	2308      	movs	r3, #8
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e0e9      	b.n	8006ae0 <UART_SetConfig+0x348>
 800690c:	2310      	movs	r3, #16
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e0e6      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a56      	ldr	r2, [pc, #344]	; (8006a70 <UART_SetConfig+0x2d8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d120      	bne.n	800695e <UART_SetConfig+0x1c6>
 800691c:	4b51      	ldr	r3, [pc, #324]	; (8006a64 <UART_SetConfig+0x2cc>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006922:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006926:	2bc0      	cmp	r3, #192	; 0xc0
 8006928:	d013      	beq.n	8006952 <UART_SetConfig+0x1ba>
 800692a:	2bc0      	cmp	r3, #192	; 0xc0
 800692c:	d814      	bhi.n	8006958 <UART_SetConfig+0x1c0>
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d009      	beq.n	8006946 <UART_SetConfig+0x1ae>
 8006932:	2b80      	cmp	r3, #128	; 0x80
 8006934:	d810      	bhi.n	8006958 <UART_SetConfig+0x1c0>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <UART_SetConfig+0x1a8>
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d006      	beq.n	800694c <UART_SetConfig+0x1b4>
 800693e:	e00b      	b.n	8006958 <UART_SetConfig+0x1c0>
 8006940:	2300      	movs	r3, #0
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e0cc      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006946:	2302      	movs	r3, #2
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e0c9      	b.n	8006ae0 <UART_SetConfig+0x348>
 800694c:	2304      	movs	r3, #4
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e0c6      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006952:	2308      	movs	r3, #8
 8006954:	77fb      	strb	r3, [r7, #31]
 8006956:	e0c3      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006958:	2310      	movs	r3, #16
 800695a:	77fb      	strb	r3, [r7, #31]
 800695c:	e0c0      	b.n	8006ae0 <UART_SetConfig+0x348>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a44      	ldr	r2, [pc, #272]	; (8006a74 <UART_SetConfig+0x2dc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d125      	bne.n	80069b4 <UART_SetConfig+0x21c>
 8006968:	4b3e      	ldr	r3, [pc, #248]	; (8006a64 <UART_SetConfig+0x2cc>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006976:	d017      	beq.n	80069a8 <UART_SetConfig+0x210>
 8006978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800697c:	d817      	bhi.n	80069ae <UART_SetConfig+0x216>
 800697e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006982:	d00b      	beq.n	800699c <UART_SetConfig+0x204>
 8006984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006988:	d811      	bhi.n	80069ae <UART_SetConfig+0x216>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <UART_SetConfig+0x1fe>
 800698e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006992:	d006      	beq.n	80069a2 <UART_SetConfig+0x20a>
 8006994:	e00b      	b.n	80069ae <UART_SetConfig+0x216>
 8006996:	2300      	movs	r3, #0
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e0a1      	b.n	8006ae0 <UART_SetConfig+0x348>
 800699c:	2302      	movs	r3, #2
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e09e      	b.n	8006ae0 <UART_SetConfig+0x348>
 80069a2:	2304      	movs	r3, #4
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e09b      	b.n	8006ae0 <UART_SetConfig+0x348>
 80069a8:	2308      	movs	r3, #8
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e098      	b.n	8006ae0 <UART_SetConfig+0x348>
 80069ae:	2310      	movs	r3, #16
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e095      	b.n	8006ae0 <UART_SetConfig+0x348>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <UART_SetConfig+0x2e0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d125      	bne.n	8006a0a <UART_SetConfig+0x272>
 80069be:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <UART_SetConfig+0x2cc>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069cc:	d017      	beq.n	80069fe <UART_SetConfig+0x266>
 80069ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d2:	d817      	bhi.n	8006a04 <UART_SetConfig+0x26c>
 80069d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d8:	d00b      	beq.n	80069f2 <UART_SetConfig+0x25a>
 80069da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069de:	d811      	bhi.n	8006a04 <UART_SetConfig+0x26c>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <UART_SetConfig+0x254>
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e8:	d006      	beq.n	80069f8 <UART_SetConfig+0x260>
 80069ea:	e00b      	b.n	8006a04 <UART_SetConfig+0x26c>
 80069ec:	2301      	movs	r3, #1
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e076      	b.n	8006ae0 <UART_SetConfig+0x348>
 80069f2:	2302      	movs	r3, #2
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e073      	b.n	8006ae0 <UART_SetConfig+0x348>
 80069f8:	2304      	movs	r3, #4
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e070      	b.n	8006ae0 <UART_SetConfig+0x348>
 80069fe:	2308      	movs	r3, #8
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e06d      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006a04:	2310      	movs	r3, #16
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e06a      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1b      	ldr	r2, [pc, #108]	; (8006a7c <UART_SetConfig+0x2e4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d138      	bne.n	8006a86 <UART_SetConfig+0x2ee>
 8006a14:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <UART_SetConfig+0x2cc>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a22:	d017      	beq.n	8006a54 <UART_SetConfig+0x2bc>
 8006a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a28:	d82a      	bhi.n	8006a80 <UART_SetConfig+0x2e8>
 8006a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2e:	d00b      	beq.n	8006a48 <UART_SetConfig+0x2b0>
 8006a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a34:	d824      	bhi.n	8006a80 <UART_SetConfig+0x2e8>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <UART_SetConfig+0x2aa>
 8006a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3e:	d006      	beq.n	8006a4e <UART_SetConfig+0x2b6>
 8006a40:	e01e      	b.n	8006a80 <UART_SetConfig+0x2e8>
 8006a42:	2300      	movs	r3, #0
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e04b      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e048      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006a4e:	2304      	movs	r3, #4
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e045      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006a54:	2308      	movs	r3, #8
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e042      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006a5a:	bf00      	nop
 8006a5c:	efff69f3 	.word	0xefff69f3
 8006a60:	40011000 	.word	0x40011000
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40004400 	.word	0x40004400
 8006a6c:	40004800 	.word	0x40004800
 8006a70:	40004c00 	.word	0x40004c00
 8006a74:	40005000 	.word	0x40005000
 8006a78:	40011400 	.word	0x40011400
 8006a7c:	40007800 	.word	0x40007800
 8006a80:	2310      	movs	r3, #16
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e02c      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a72      	ldr	r2, [pc, #456]	; (8006c54 <UART_SetConfig+0x4bc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d125      	bne.n	8006adc <UART_SetConfig+0x344>
 8006a90:	4b71      	ldr	r3, [pc, #452]	; (8006c58 <UART_SetConfig+0x4c0>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a9e:	d017      	beq.n	8006ad0 <UART_SetConfig+0x338>
 8006aa0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aa4:	d817      	bhi.n	8006ad6 <UART_SetConfig+0x33e>
 8006aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aaa:	d00b      	beq.n	8006ac4 <UART_SetConfig+0x32c>
 8006aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab0:	d811      	bhi.n	8006ad6 <UART_SetConfig+0x33e>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <UART_SetConfig+0x326>
 8006ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aba:	d006      	beq.n	8006aca <UART_SetConfig+0x332>
 8006abc:	e00b      	b.n	8006ad6 <UART_SetConfig+0x33e>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e00d      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e00a      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006aca:	2304      	movs	r3, #4
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e007      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e004      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006ad6:	2310      	movs	r3, #16
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e001      	b.n	8006ae0 <UART_SetConfig+0x348>
 8006adc:	2310      	movs	r3, #16
 8006ade:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae8:	d15b      	bne.n	8006ba2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006aea:	7ffb      	ldrb	r3, [r7, #31]
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d828      	bhi.n	8006b42 <UART_SetConfig+0x3aa>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x360>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b25 	.word	0x08006b25
 8006b00:	08006b2d 	.word	0x08006b2d
 8006b04:	08006b43 	.word	0x08006b43
 8006b08:	08006b33 	.word	0x08006b33
 8006b0c:	08006b43 	.word	0x08006b43
 8006b10:	08006b43 	.word	0x08006b43
 8006b14:	08006b43 	.word	0x08006b43
 8006b18:	08006b3b 	.word	0x08006b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fe f89e 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 8006b20:	61b8      	str	r0, [r7, #24]
        break;
 8006b22:	e013      	b.n	8006b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b24:	f7fe f8ae 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8006b28:	61b8      	str	r0, [r7, #24]
        break;
 8006b2a:	e00f      	b.n	8006b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b2c:	4b4b      	ldr	r3, [pc, #300]	; (8006c5c <UART_SetConfig+0x4c4>)
 8006b2e:	61bb      	str	r3, [r7, #24]
        break;
 8006b30:	e00c      	b.n	8006b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b32:	f7fd ff81 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 8006b36:	61b8      	str	r0, [r7, #24]
        break;
 8006b38:	e008      	b.n	8006b4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3e:	61bb      	str	r3, [r7, #24]
        break;
 8006b40:	e004      	b.n	8006b4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	77bb      	strb	r3, [r7, #30]
        break;
 8006b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d074      	beq.n	8006c3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	005a      	lsls	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2b0f      	cmp	r3, #15
 8006b6c:	d916      	bls.n	8006b9c <UART_SetConfig+0x404>
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b74:	d212      	bcs.n	8006b9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f023 030f 	bic.w	r3, r3, #15
 8006b7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	89fa      	ldrh	r2, [r7, #14]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	e04f      	b.n	8006c3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	77bb      	strb	r3, [r7, #30]
 8006ba0:	e04c      	b.n	8006c3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ba2:	7ffb      	ldrb	r3, [r7, #31]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d828      	bhi.n	8006bfa <UART_SetConfig+0x462>
 8006ba8:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <UART_SetConfig+0x418>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006bd5 	.word	0x08006bd5
 8006bb4:	08006bdd 	.word	0x08006bdd
 8006bb8:	08006be5 	.word	0x08006be5
 8006bbc:	08006bfb 	.word	0x08006bfb
 8006bc0:	08006beb 	.word	0x08006beb
 8006bc4:	08006bfb 	.word	0x08006bfb
 8006bc8:	08006bfb 	.word	0x08006bfb
 8006bcc:	08006bfb 	.word	0x08006bfb
 8006bd0:	08006bf3 	.word	0x08006bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7fe f842 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 8006bd8:	61b8      	str	r0, [r7, #24]
        break;
 8006bda:	e013      	b.n	8006c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bdc:	f7fe f852 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8006be0:	61b8      	str	r0, [r7, #24]
        break;
 8006be2:	e00f      	b.n	8006c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be4:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <UART_SetConfig+0x4c4>)
 8006be6:	61bb      	str	r3, [r7, #24]
        break;
 8006be8:	e00c      	b.n	8006c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bea:	f7fd ff25 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 8006bee:	61b8      	str	r0, [r7, #24]
        break;
 8006bf0:	e008      	b.n	8006c04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf6:	61bb      	str	r3, [r7, #24]
        break;
 8006bf8:	e004      	b.n	8006c04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	77bb      	strb	r3, [r7, #30]
        break;
 8006c02:	bf00      	nop
    }

    if (pclk != 0U)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d018      	beq.n	8006c3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	085a      	lsrs	r2, r3, #1
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	441a      	add	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b0f      	cmp	r3, #15
 8006c22:	d909      	bls.n	8006c38 <UART_SetConfig+0x4a0>
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c2a:	d205      	bcs.n	8006c38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	e001      	b.n	8006c3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c48:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40007c00 	.word	0x40007c00
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	00f42400 	.word	0x00f42400

08006c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01a      	beq.n	8006d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5e:	d10a      	bne.n	8006d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	605a      	str	r2, [r3, #4]
  }
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006db4:	f7fb fec4 	bl	8002b40 <HAL_GetTick>
 8006db8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d10e      	bne.n	8006de6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f82d 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e023      	b.n	8006e2e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d10e      	bne.n	8006e12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f817 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e00d      	b.n	8006e2e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b09c      	sub	sp, #112	; 0x70
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4613      	mov	r3, r2
 8006e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e46:	e0a5      	b.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	f000 80a1 	beq.w	8006f94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e52:	f7fb fe75 	bl	8002b40 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d302      	bcc.n	8006e68 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d13e      	bne.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e7c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e6      	bne.n	8006e68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eba:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ebc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e067      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d04f      	beq.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f02:	d147      	bne.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e6      	bne.n	8006f0e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3308      	adds	r3, #8
 8006f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f023 0301 	bic.w	r3, r3, #1
 8006f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f60:	623a      	str	r2, [r7, #32]
 8006f62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	6a3a      	ldr	r2, [r7, #32]
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e5      	bne.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e010      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69da      	ldr	r2, [r3, #28]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	bf0c      	ite	eq
 8006fa4:	2301      	moveq	r3, #1
 8006fa6:	2300      	movne	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	f43f af4a 	beq.w	8006e48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3770      	adds	r7, #112	; 0x70
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b097      	sub	sp, #92	; 0x5c
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff2:	d10e      	bne.n	8007012 <UART_Start_Receive_IT+0x52>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <UART_Start_Receive_IT+0x48>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007002:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007006:	e02d      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	22ff      	movs	r2, #255	; 0xff
 800700c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007010:	e028      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10d      	bne.n	8007036 <UART_Start_Receive_IT+0x76>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <UART_Start_Receive_IT+0x6c>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800702a:	e01b      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	227f      	movs	r2, #127	; 0x7f
 8007030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007034:	e016      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800703e:	d10d      	bne.n	800705c <UART_Start_Receive_IT+0x9c>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <UART_Start_Receive_IT+0x92>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	227f      	movs	r2, #127	; 0x7f
 800704c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007050:	e008      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	223f      	movs	r2, #63	; 0x3f
 8007056:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800705a:	e003      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2222      	movs	r2, #34	; 0x22
 8007070:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	657b      	str	r3, [r7, #84]	; 0x54
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007092:	64ba      	str	r2, [r7, #72]	; 0x48
 8007094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e5      	bne.n	8007072 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ae:	d107      	bne.n	80070c0 <UART_Start_Receive_IT+0x100>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d103      	bne.n	80070c0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4a24      	ldr	r2, [pc, #144]	; (800714c <UART_Start_Receive_IT+0x18c>)
 80070bc:	665a      	str	r2, [r3, #100]	; 0x64
 80070be:	e002      	b.n	80070c6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a23      	ldr	r2, [pc, #140]	; (8007150 <UART_Start_Receive_IT+0x190>)
 80070c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d019      	beq.n	800710a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
 80070f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e6      	bne.n	80070d6 <UART_Start_Receive_IT+0x116>
 8007108:	e018      	b.n	800713c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	613b      	str	r3, [r7, #16]
   return(result);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f043 0320 	orr.w	r3, r3, #32
 800711e:	653b      	str	r3, [r7, #80]	; 0x50
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007128:	623b      	str	r3, [r7, #32]
 800712a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	69f9      	ldr	r1, [r7, #28]
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	61bb      	str	r3, [r7, #24]
   return(result);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e6      	bne.n	800710a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	375c      	adds	r7, #92	; 0x5c
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	080073f7 	.word	0x080073f7
 8007150:	0800729b 	.word	0x0800729b

08007154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007154:	b480      	push	{r7}
 8007156:	b095      	sub	sp, #84	; 0x54
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007170:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717a:	643b      	str	r3, [r7, #64]	; 0x40
 800717c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	61fb      	str	r3, [r7, #28]
   return(result);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d118      	bne.n	80071fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 0310 	bic.w	r3, r3, #16
 80071de:	647b      	str	r3, [r7, #68]	; 0x44
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	613b      	str	r3, [r7, #16]
   return(result);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e6      	bne.n	80071ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800720e:	bf00      	nop
 8007210:	3754      	adds	r7, #84	; 0x54
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fa8d 	bl	8006758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b088      	sub	sp, #32
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	60bb      	str	r3, [r7, #8]
   return(result);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	613b      	str	r3, [r7, #16]
   return(result);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e6      	bne.n	800724e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff fa59 	bl	8006744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007292:	bf00      	nop
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b096      	sub	sp, #88	; 0x58
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072b0:	2b22      	cmp	r3, #34	; 0x22
 80072b2:	f040 8094 	bne.w	80073de <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80072c4:	b2d9      	uxtb	r1, r3
 80072c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	400a      	ands	r2, r1
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d177      	bne.n	80073ee <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007312:	653b      	str	r3, [r7, #80]	; 0x50
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731c:	647b      	str	r3, [r7, #68]	; 0x44
 800731e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e6      	bne.n	80072fe <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	623b      	str	r3, [r7, #32]
   return(result);
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007350:	633a      	str	r2, [r7, #48]	; 0x30
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e5      	bne.n	8007330 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007374:	2b01      	cmp	r3, #1
 8007376:	d12e      	bne.n	80073d6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	60fb      	str	r3, [r7, #12]
   return(result);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0310 	bic.w	r3, r3, #16
 8007392:	64bb      	str	r3, [r7, #72]	; 0x48
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	69b9      	ldr	r1, [r7, #24]
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	617b      	str	r3, [r7, #20]
   return(result);
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b10      	cmp	r3, #16
 80073bc:	d103      	bne.n	80073c6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2210      	movs	r2, #16
 80073c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff f9cc 	bl	800676c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073d4:	e00b      	b.n	80073ee <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fa fca8 	bl	8001d2c <HAL_UART_RxCpltCallback>
}
 80073dc:	e007      	b.n	80073ee <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0208 	orr.w	r2, r2, #8
 80073ec:	619a      	str	r2, [r3, #24]
}
 80073ee:	bf00      	nop
 80073f0:	3758      	adds	r7, #88	; 0x58
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b096      	sub	sp, #88	; 0x58
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007404:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740c:	2b22      	cmp	r3, #34	; 0x22
 800740e:	f040 8094 	bne.w	800753a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007422:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007426:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800742a:	4013      	ands	r3, r2
 800742c:	b29a      	uxth	r2, r3
 800742e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007430:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	1c9a      	adds	r2, r3, #2
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d177      	bne.n	800754a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800746e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
 800747a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800747e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	61fb      	str	r3, [r7, #28]
   return(result);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3308      	adds	r3, #8
 80074aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d12e      	bne.n	8007532 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f023 0310 	bic.w	r3, r3, #16
 80074ee:	647b      	str	r3, [r7, #68]	; 0x44
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f8:	61bb      	str	r3, [r7, #24]
 80074fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	6979      	ldr	r1, [r7, #20]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	613b      	str	r3, [r7, #16]
   return(result);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e6      	bne.n	80074da <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b10      	cmp	r3, #16
 8007518:	d103      	bne.n	8007522 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2210      	movs	r2, #16
 8007520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff f91e 	bl	800676c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007530:	e00b      	b.n	800754a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fa fbfa 	bl	8001d2c <HAL_UART_RxCpltCallback>
}
 8007538:	e007      	b.n	800754a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0208 	orr.w	r2, r2, #8
 8007548:	619a      	str	r2, [r3, #24]
}
 800754a:	bf00      	nop
 800754c:	3758      	adds	r7, #88	; 0x58
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007554:	b084      	sub	sp, #16
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	f107 001c 	add.w	r0, r7, #28
 8007562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2b01      	cmp	r3, #1
 800756a:	d120      	bne.n	80075ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	4b20      	ldr	r3, [pc, #128]	; (8007600 <USB_CoreInit+0xac>)
 800757e:	4013      	ands	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d105      	bne.n	80075a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa92 	bl	8007acc <USB_CoreReset>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	e010      	b.n	80075d0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa86 	bl	8007acc <USB_CoreReset>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d10b      	bne.n	80075ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f043 0206 	orr.w	r2, r3, #6
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f043 0220 	orr.w	r2, r3, #32
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075fa:	b004      	add	sp, #16
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	ffbdffbf 	.word	0xffbdffbf

08007604 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f023 0201 	bic.w	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d115      	bne.n	8007674 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007654:	2001      	movs	r0, #1
 8007656:	f7fb fa7f 	bl	8002b58 <HAL_Delay>
      ms++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fa25 	bl	8007ab0 <USB_GetMode>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d01e      	beq.n	80076aa <USB_SetCurrentMode+0x84>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b31      	cmp	r3, #49	; 0x31
 8007670:	d9f0      	bls.n	8007654 <USB_SetCurrentMode+0x2e>
 8007672:	e01a      	b.n	80076aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d115      	bne.n	80076a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007686:	2001      	movs	r0, #1
 8007688:	f7fb fa66 	bl	8002b58 <HAL_Delay>
      ms++;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa0c 	bl	8007ab0 <USB_GetMode>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <USB_SetCurrentMode+0x84>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b31      	cmp	r3, #49	; 0x31
 80076a2:	d9f0      	bls.n	8007686 <USB_SetCurrentMode+0x60>
 80076a4:	e001      	b.n	80076aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e005      	b.n	80076b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b32      	cmp	r3, #50	; 0x32
 80076ae:	d101      	bne.n	80076b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e000      	b.n	80076b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076c0:	b084      	sub	sp, #16
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	e009      	b.n	80076f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3340      	adds	r3, #64	; 0x40
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3301      	adds	r3, #1
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b0e      	cmp	r3, #14
 80076f8:	d9f2      	bls.n	80076e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11c      	bne.n	800773a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800770e:	f043 0302 	orr.w	r3, r3, #2
 8007712:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	e005      	b.n	8007746 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800774c:	461a      	mov	r2, r3
 800774e:	2300      	movs	r3, #0
 8007750:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007758:	4619      	mov	r1, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	461a      	mov	r2, r3
 8007762:	680b      	ldr	r3, [r1, #0]
 8007764:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	2b01      	cmp	r3, #1
 800776a:	d10c      	bne.n	8007786 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d104      	bne.n	800777c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007772:	2100      	movs	r1, #0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f961 	bl	8007a3c <USB_SetDevSpeed>
 800777a:	e008      	b.n	800778e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800777c:	2101      	movs	r1, #1
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f95c 	bl	8007a3c <USB_SetDevSpeed>
 8007784:	e003      	b.n	800778e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007786:	2103      	movs	r1, #3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f957 	bl	8007a3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800778e:	2110      	movs	r1, #16
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8f3 	bl	800797c <USB_FlushTxFifo>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f91d 	bl	80079e0 <USB_FlushRxFifo>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	461a      	mov	r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c2:	461a      	mov	r2, r3
 80077c4:	2300      	movs	r3, #0
 80077c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	461a      	mov	r2, r3
 80077d0:	2300      	movs	r3, #0
 80077d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	e043      	b.n	8007862 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f0:	d118      	bne.n	8007824 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007804:	461a      	mov	r2, r3
 8007806:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	e013      	b.n	8007836 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781a:	461a      	mov	r2, r3
 800781c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e008      	b.n	8007836 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	461a      	mov	r2, r3
 8007832:	2300      	movs	r3, #0
 8007834:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007842:	461a      	mov	r2, r3
 8007844:	2300      	movs	r3, #0
 8007846:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	461a      	mov	r2, r3
 8007856:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800785a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	3301      	adds	r3, #1
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	429a      	cmp	r2, r3
 8007868:	d3b7      	bcc.n	80077da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	e043      	b.n	80078f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007886:	d118      	bne.n	80078ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	461a      	mov	r2, r3
 800789c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e013      	b.n	80078cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	461a      	mov	r2, r3
 80078b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e008      	b.n	80078cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c6:	461a      	mov	r2, r3
 80078c8:	2300      	movs	r3, #0
 80078ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	461a      	mov	r2, r3
 80078da:	2300      	movs	r3, #0
 80078dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ea:	461a      	mov	r2, r3
 80078ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3301      	adds	r3, #1
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d3b7      	bcc.n	8007870 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800790e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007912:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007920:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f043 0210 	orr.w	r2, r3, #16
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <USB_DevInit+0x2b4>)
 800793a:	4313      	orrs	r3, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	f043 0208 	orr.w	r2, r3, #8
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d105      	bne.n	8007964 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <USB_DevInit+0x2b8>)
 800795e:	4313      	orrs	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007970:	b004      	add	sp, #16
 8007972:	4770      	bx	lr
 8007974:	803c3800 	.word	0x803c3800
 8007978:	40000004 	.word	0x40000004

0800797c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	4a12      	ldr	r2, [pc, #72]	; (80079dc <USB_FlushTxFifo+0x60>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d901      	bls.n	800799a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e01a      	b.n	80079d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	daf3      	bge.n	800798a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	019b      	lsls	r3, r3, #6
 80079aa:	f043 0220 	orr.w	r2, r3, #32
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	4a08      	ldr	r2, [pc, #32]	; (80079dc <USB_FlushTxFifo+0x60>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d901      	bls.n	80079c2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e006      	b.n	80079d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d0f1      	beq.n	80079b2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	00030d40 	.word	0x00030d40

080079e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	4a11      	ldr	r2, [pc, #68]	; (8007a38 <USB_FlushRxFifo+0x58>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d901      	bls.n	80079fc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e017      	b.n	8007a2c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	daf3      	bge.n	80079ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <USB_FlushRxFifo+0x58>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d901      	bls.n	8007a1e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e006      	b.n	8007a2c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b10      	cmp	r3, #16
 8007a28:	d0f1      	beq.n	8007a0e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	00030d40 	.word	0x00030d40

08007a3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a88:	f023 0303 	bic.w	r3, r3, #3
 8007a8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	f003 0301 	and.w	r3, r3, #1
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <USB_CoreReset+0x60>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d901      	bls.n	8007ae8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e01a      	b.n	8007b1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	daf3      	bge.n	8007ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f043 0201 	orr.w	r2, r3, #1
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	4a09      	ldr	r2, [pc, #36]	; (8007b2c <USB_CoreReset+0x60>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d901      	bls.n	8007b10 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e006      	b.n	8007b1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d0f1      	beq.n	8007b00 <USB_CoreReset+0x34>

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	00030d40 	.word	0x00030d40

08007b30 <atoi>:
 8007b30:	220a      	movs	r2, #10
 8007b32:	2100      	movs	r1, #0
 8007b34:	f000 bd2c 	b.w	8008590 <strtol>

08007b38 <__errno>:
 8007b38:	4b01      	ldr	r3, [pc, #4]	; (8007b40 <__errno+0x8>)
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000028 	.word	0x20000028

08007b44 <__libc_init_array>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4d0d      	ldr	r5, [pc, #52]	; (8007b7c <__libc_init_array+0x38>)
 8007b48:	4c0d      	ldr	r4, [pc, #52]	; (8007b80 <__libc_init_array+0x3c>)
 8007b4a:	1b64      	subs	r4, r4, r5
 8007b4c:	10a4      	asrs	r4, r4, #2
 8007b4e:	2600      	movs	r6, #0
 8007b50:	42a6      	cmp	r6, r4
 8007b52:	d109      	bne.n	8007b68 <__libc_init_array+0x24>
 8007b54:	4d0b      	ldr	r5, [pc, #44]	; (8007b84 <__libc_init_array+0x40>)
 8007b56:	4c0c      	ldr	r4, [pc, #48]	; (8007b88 <__libc_init_array+0x44>)
 8007b58:	f002 fefe 	bl	800a958 <_init>
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	2600      	movs	r6, #0
 8007b62:	42a6      	cmp	r6, r4
 8007b64:	d105      	bne.n	8007b72 <__libc_init_array+0x2e>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6c:	4798      	blx	r3
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7ee      	b.n	8007b50 <__libc_init_array+0xc>
 8007b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b76:	4798      	blx	r3
 8007b78:	3601      	adds	r6, #1
 8007b7a:	e7f2      	b.n	8007b62 <__libc_init_array+0x1e>
 8007b7c:	0800adf4 	.word	0x0800adf4
 8007b80:	0800adf4 	.word	0x0800adf4
 8007b84:	0800adf4 	.word	0x0800adf4
 8007b88:	0800adf8 	.word	0x0800adf8

08007b8c <memset>:
 8007b8c:	4402      	add	r2, r0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d100      	bne.n	8007b96 <memset+0xa>
 8007b94:	4770      	bx	lr
 8007b96:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9a:	e7f9      	b.n	8007b90 <memset+0x4>

08007b9c <__cvt>:
 8007b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9e:	ed2d 8b02 	vpush	{d8}
 8007ba2:	eeb0 8b40 	vmov.f64	d8, d0
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	4617      	mov	r7, r2
 8007baa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007bac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007bae:	ee18 2a90 	vmov	r2, s17
 8007bb2:	f025 0520 	bic.w	r5, r5, #32
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	bfb6      	itet	lt
 8007bba:	222d      	movlt	r2, #45	; 0x2d
 8007bbc:	2200      	movge	r2, #0
 8007bbe:	eeb1 8b40 	vneglt.f64	d8, d0
 8007bc2:	2d46      	cmp	r5, #70	; 0x46
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	d004      	beq.n	8007bd4 <__cvt+0x38>
 8007bca:	2d45      	cmp	r5, #69	; 0x45
 8007bcc:	d100      	bne.n	8007bd0 <__cvt+0x34>
 8007bce:	3401      	adds	r4, #1
 8007bd0:	2102      	movs	r1, #2
 8007bd2:	e000      	b.n	8007bd6 <__cvt+0x3a>
 8007bd4:	2103      	movs	r1, #3
 8007bd6:	ab03      	add	r3, sp, #12
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	ab02      	add	r3, sp, #8
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4622      	mov	r2, r4
 8007be0:	4633      	mov	r3, r6
 8007be2:	eeb0 0b48 	vmov.f64	d0, d8
 8007be6:	f000 fd6b 	bl	80086c0 <_dtoa_r>
 8007bea:	2d47      	cmp	r5, #71	; 0x47
 8007bec:	d101      	bne.n	8007bf2 <__cvt+0x56>
 8007bee:	07fb      	lsls	r3, r7, #31
 8007bf0:	d51a      	bpl.n	8007c28 <__cvt+0x8c>
 8007bf2:	2d46      	cmp	r5, #70	; 0x46
 8007bf4:	eb00 0204 	add.w	r2, r0, r4
 8007bf8:	d10c      	bne.n	8007c14 <__cvt+0x78>
 8007bfa:	7803      	ldrb	r3, [r0, #0]
 8007bfc:	2b30      	cmp	r3, #48	; 0x30
 8007bfe:	d107      	bne.n	8007c10 <__cvt+0x74>
 8007c00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c08:	bf1c      	itt	ne
 8007c0a:	f1c4 0401 	rsbne	r4, r4, #1
 8007c0e:	6034      	strne	r4, [r6, #0]
 8007c10:	6833      	ldr	r3, [r6, #0]
 8007c12:	441a      	add	r2, r3
 8007c14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c1c:	bf08      	it	eq
 8007c1e:	9203      	streq	r2, [sp, #12]
 8007c20:	2130      	movs	r1, #48	; 0x30
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d307      	bcc.n	8007c38 <__cvt+0x9c>
 8007c28:	9b03      	ldr	r3, [sp, #12]
 8007c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c2c:	1a1b      	subs	r3, r3, r0
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	b005      	add	sp, #20
 8007c32:	ecbd 8b02 	vpop	{d8}
 8007c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c38:	1c5c      	adds	r4, r3, #1
 8007c3a:	9403      	str	r4, [sp, #12]
 8007c3c:	7019      	strb	r1, [r3, #0]
 8007c3e:	e7f0      	b.n	8007c22 <__cvt+0x86>

08007c40 <__exponent>:
 8007c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c42:	4603      	mov	r3, r0
 8007c44:	2900      	cmp	r1, #0
 8007c46:	bfb8      	it	lt
 8007c48:	4249      	neglt	r1, r1
 8007c4a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c4e:	bfb4      	ite	lt
 8007c50:	222d      	movlt	r2, #45	; 0x2d
 8007c52:	222b      	movge	r2, #43	; 0x2b
 8007c54:	2909      	cmp	r1, #9
 8007c56:	7042      	strb	r2, [r0, #1]
 8007c58:	dd2a      	ble.n	8007cb0 <__exponent+0x70>
 8007c5a:	f10d 0407 	add.w	r4, sp, #7
 8007c5e:	46a4      	mov	ip, r4
 8007c60:	270a      	movs	r7, #10
 8007c62:	46a6      	mov	lr, r4
 8007c64:	460a      	mov	r2, r1
 8007c66:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c6e:	3530      	adds	r5, #48	; 0x30
 8007c70:	2a63      	cmp	r2, #99	; 0x63
 8007c72:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	dcf1      	bgt.n	8007c62 <__exponent+0x22>
 8007c7e:	3130      	adds	r1, #48	; 0x30
 8007c80:	f1ae 0502 	sub.w	r5, lr, #2
 8007c84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c88:	1c44      	adds	r4, r0, #1
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	4561      	cmp	r1, ip
 8007c8e:	d30a      	bcc.n	8007ca6 <__exponent+0x66>
 8007c90:	f10d 0209 	add.w	r2, sp, #9
 8007c94:	eba2 020e 	sub.w	r2, r2, lr
 8007c98:	4565      	cmp	r5, ip
 8007c9a:	bf88      	it	hi
 8007c9c:	2200      	movhi	r2, #0
 8007c9e:	4413      	add	r3, r2
 8007ca0:	1a18      	subs	r0, r3, r0
 8007ca2:	b003      	add	sp, #12
 8007ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007caa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007cae:	e7ed      	b.n	8007c8c <__exponent+0x4c>
 8007cb0:	2330      	movs	r3, #48	; 0x30
 8007cb2:	3130      	adds	r1, #48	; 0x30
 8007cb4:	7083      	strb	r3, [r0, #2]
 8007cb6:	70c1      	strb	r1, [r0, #3]
 8007cb8:	1d03      	adds	r3, r0, #4
 8007cba:	e7f1      	b.n	8007ca0 <__exponent+0x60>
 8007cbc:	0000      	movs	r0, r0
	...

08007cc0 <_printf_float>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b08b      	sub	sp, #44	; 0x2c
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007ccc:	4616      	mov	r6, r2
 8007cce:	461f      	mov	r7, r3
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	f001 fa63 	bl	800919c <_localeconv_r>
 8007cd6:	f8d0 b000 	ldr.w	fp, [r0]
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f7f8 fab0 	bl	8000240 <strlen>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9308      	str	r3, [sp, #32]
 8007ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007cec:	6822      	ldr	r2, [r4, #0]
 8007cee:	3307      	adds	r3, #7
 8007cf0:	f023 0307 	bic.w	r3, r3, #7
 8007cf4:	f103 0108 	add.w	r1, r3, #8
 8007cf8:	f8c8 1000 	str.w	r1, [r8]
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007d06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007f68 <_printf_float+0x2a8>
 8007d0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007d0e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007d12:	eeb4 6b47 	vcmp.f64	d6, d7
 8007d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1a:	dd24      	ble.n	8007d66 <_printf_float+0xa6>
 8007d1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d24:	d502      	bpl.n	8007d2c <_printf_float+0x6c>
 8007d26:	232d      	movs	r3, #45	; 0x2d
 8007d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d2c:	4b90      	ldr	r3, [pc, #576]	; (8007f70 <_printf_float+0x2b0>)
 8007d2e:	4891      	ldr	r0, [pc, #580]	; (8007f74 <_printf_float+0x2b4>)
 8007d30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d34:	bf94      	ite	ls
 8007d36:	4698      	movls	r8, r3
 8007d38:	4680      	movhi	r8, r0
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	f022 0204 	bic.w	r2, r2, #4
 8007d42:	2300      	movs	r3, #0
 8007d44:	6022      	str	r2, [r4, #0]
 8007d46:	9304      	str	r3, [sp, #16]
 8007d48:	9700      	str	r7, [sp, #0]
 8007d4a:	4633      	mov	r3, r6
 8007d4c:	aa09      	add	r2, sp, #36	; 0x24
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4628      	mov	r0, r5
 8007d52:	f000 f9d3 	bl	80080fc <_printf_common>
 8007d56:	3001      	adds	r0, #1
 8007d58:	f040 808a 	bne.w	8007e70 <_printf_float+0x1b0>
 8007d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d60:	b00b      	add	sp, #44	; 0x2c
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	eeb4 0b40 	vcmp.f64	d0, d0
 8007d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6e:	d709      	bvc.n	8007d84 <_printf_float+0xc4>
 8007d70:	ee10 3a90 	vmov	r3, s1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bfbc      	itt	lt
 8007d78:	232d      	movlt	r3, #45	; 0x2d
 8007d7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d7e:	487e      	ldr	r0, [pc, #504]	; (8007f78 <_printf_float+0x2b8>)
 8007d80:	4b7e      	ldr	r3, [pc, #504]	; (8007f7c <_printf_float+0x2bc>)
 8007d82:	e7d5      	b.n	8007d30 <_printf_float+0x70>
 8007d84:	6863      	ldr	r3, [r4, #4]
 8007d86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d8a:	9104      	str	r1, [sp, #16]
 8007d8c:	1c59      	adds	r1, r3, #1
 8007d8e:	d13c      	bne.n	8007e0a <_printf_float+0x14a>
 8007d90:	2306      	movs	r3, #6
 8007d92:	6063      	str	r3, [r4, #4]
 8007d94:	2300      	movs	r3, #0
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	ab08      	add	r3, sp, #32
 8007d9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007d9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007da2:	ab07      	add	r3, sp, #28
 8007da4:	6861      	ldr	r1, [r4, #4]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	6022      	str	r2, [r4, #0]
 8007daa:	f10d 031b 	add.w	r3, sp, #27
 8007dae:	4628      	mov	r0, r5
 8007db0:	f7ff fef4 	bl	8007b9c <__cvt>
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	9907      	ldr	r1, [sp, #28]
 8007db8:	2b47      	cmp	r3, #71	; 0x47
 8007dba:	4680      	mov	r8, r0
 8007dbc:	d108      	bne.n	8007dd0 <_printf_float+0x110>
 8007dbe:	1cc8      	adds	r0, r1, #3
 8007dc0:	db02      	blt.n	8007dc8 <_printf_float+0x108>
 8007dc2:	6863      	ldr	r3, [r4, #4]
 8007dc4:	4299      	cmp	r1, r3
 8007dc6:	dd41      	ble.n	8007e4c <_printf_float+0x18c>
 8007dc8:	f1a9 0902 	sub.w	r9, r9, #2
 8007dcc:	fa5f f989 	uxtb.w	r9, r9
 8007dd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007dd4:	d820      	bhi.n	8007e18 <_printf_float+0x158>
 8007dd6:	3901      	subs	r1, #1
 8007dd8:	464a      	mov	r2, r9
 8007dda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dde:	9107      	str	r1, [sp, #28]
 8007de0:	f7ff ff2e 	bl	8007c40 <__exponent>
 8007de4:	9a08      	ldr	r2, [sp, #32]
 8007de6:	9004      	str	r0, [sp, #16]
 8007de8:	1813      	adds	r3, r2, r0
 8007dea:	2a01      	cmp	r2, #1
 8007dec:	6123      	str	r3, [r4, #16]
 8007dee:	dc02      	bgt.n	8007df6 <_printf_float+0x136>
 8007df0:	6822      	ldr	r2, [r4, #0]
 8007df2:	07d2      	lsls	r2, r2, #31
 8007df4:	d501      	bpl.n	8007dfa <_printf_float+0x13a>
 8007df6:	3301      	adds	r3, #1
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0a2      	beq.n	8007d48 <_printf_float+0x88>
 8007e02:	232d      	movs	r3, #45	; 0x2d
 8007e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e08:	e79e      	b.n	8007d48 <_printf_float+0x88>
 8007e0a:	9904      	ldr	r1, [sp, #16]
 8007e0c:	2947      	cmp	r1, #71	; 0x47
 8007e0e:	d1c1      	bne.n	8007d94 <_printf_float+0xd4>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1bf      	bne.n	8007d94 <_printf_float+0xd4>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e7bc      	b.n	8007d92 <_printf_float+0xd2>
 8007e18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007e1c:	d118      	bne.n	8007e50 <_printf_float+0x190>
 8007e1e:	2900      	cmp	r1, #0
 8007e20:	6863      	ldr	r3, [r4, #4]
 8007e22:	dd0b      	ble.n	8007e3c <_printf_float+0x17c>
 8007e24:	6121      	str	r1, [r4, #16]
 8007e26:	b913      	cbnz	r3, 8007e2e <_printf_float+0x16e>
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	07d0      	lsls	r0, r2, #31
 8007e2c:	d502      	bpl.n	8007e34 <_printf_float+0x174>
 8007e2e:	3301      	adds	r3, #1
 8007e30:	440b      	add	r3, r1
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	2300      	movs	r3, #0
 8007e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	e7de      	b.n	8007dfa <_printf_float+0x13a>
 8007e3c:	b913      	cbnz	r3, 8007e44 <_printf_float+0x184>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	07d2      	lsls	r2, r2, #31
 8007e42:	d501      	bpl.n	8007e48 <_printf_float+0x188>
 8007e44:	3302      	adds	r3, #2
 8007e46:	e7f4      	b.n	8007e32 <_printf_float+0x172>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e7f2      	b.n	8007e32 <_printf_float+0x172>
 8007e4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	4299      	cmp	r1, r3
 8007e54:	db05      	blt.n	8007e62 <_printf_float+0x1a2>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	6121      	str	r1, [r4, #16]
 8007e5a:	07d8      	lsls	r0, r3, #31
 8007e5c:	d5ea      	bpl.n	8007e34 <_printf_float+0x174>
 8007e5e:	1c4b      	adds	r3, r1, #1
 8007e60:	e7e7      	b.n	8007e32 <_printf_float+0x172>
 8007e62:	2900      	cmp	r1, #0
 8007e64:	bfd4      	ite	le
 8007e66:	f1c1 0202 	rsble	r2, r1, #2
 8007e6a:	2201      	movgt	r2, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	e7e0      	b.n	8007e32 <_printf_float+0x172>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	055a      	lsls	r2, r3, #21
 8007e74:	d407      	bmi.n	8007e86 <_printf_float+0x1c6>
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	4642      	mov	r2, r8
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	d12a      	bne.n	8007eda <_printf_float+0x21a>
 8007e84:	e76a      	b.n	8007d5c <_printf_float+0x9c>
 8007e86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e8a:	f240 80e2 	bls.w	8008052 <_printf_float+0x392>
 8007e8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e9a:	d133      	bne.n	8007f04 <_printf_float+0x244>
 8007e9c:	4a38      	ldr	r2, [pc, #224]	; (8007f80 <_printf_float+0x2c0>)
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f af58 	beq.w	8007d5c <_printf_float+0x9c>
 8007eac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	db02      	blt.n	8007eba <_printf_float+0x1fa>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	07d8      	lsls	r0, r3, #31
 8007eb8:	d50f      	bpl.n	8007eda <_printf_float+0x21a>
 8007eba:	4653      	mov	r3, sl
 8007ebc:	465a      	mov	r2, fp
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	f43f af49 	beq.w	8007d5c <_printf_float+0x9c>
 8007eca:	f04f 0800 	mov.w	r8, #0
 8007ece:	f104 091a 	add.w	r9, r4, #26
 8007ed2:	9b08      	ldr	r3, [sp, #32]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	4543      	cmp	r3, r8
 8007ed8:	dc09      	bgt.n	8007eee <_printf_float+0x22e>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	079b      	lsls	r3, r3, #30
 8007ede:	f100 8108 	bmi.w	80080f2 <_printf_float+0x432>
 8007ee2:	68e0      	ldr	r0, [r4, #12]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	4298      	cmp	r0, r3
 8007ee8:	bfb8      	it	lt
 8007eea:	4618      	movlt	r0, r3
 8007eec:	e738      	b.n	8007d60 <_printf_float+0xa0>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	464a      	mov	r2, r9
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b8      	blx	r7
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f43f af2f 	beq.w	8007d5c <_printf_float+0x9c>
 8007efe:	f108 0801 	add.w	r8, r8, #1
 8007f02:	e7e6      	b.n	8007ed2 <_printf_float+0x212>
 8007f04:	9b07      	ldr	r3, [sp, #28]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dc3c      	bgt.n	8007f84 <_printf_float+0x2c4>
 8007f0a:	4a1d      	ldr	r2, [pc, #116]	; (8007f80 <_printf_float+0x2c0>)
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4628      	mov	r0, r5
 8007f12:	47b8      	blx	r7
 8007f14:	3001      	adds	r0, #1
 8007f16:	f43f af21 	beq.w	8007d5c <_printf_float+0x9c>
 8007f1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	d102      	bne.n	8007f28 <_printf_float+0x268>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	07d9      	lsls	r1, r3, #31
 8007f26:	d5d8      	bpl.n	8007eda <_printf_float+0x21a>
 8007f28:	4653      	mov	r3, sl
 8007f2a:	465a      	mov	r2, fp
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	f43f af12 	beq.w	8007d5c <_printf_float+0x9c>
 8007f38:	f04f 0900 	mov.w	r9, #0
 8007f3c:	f104 0a1a 	add.w	sl, r4, #26
 8007f40:	9b07      	ldr	r3, [sp, #28]
 8007f42:	425b      	negs	r3, r3
 8007f44:	454b      	cmp	r3, r9
 8007f46:	dc01      	bgt.n	8007f4c <_printf_float+0x28c>
 8007f48:	9b08      	ldr	r3, [sp, #32]
 8007f4a:	e795      	b.n	8007e78 <_printf_float+0x1b8>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4652      	mov	r2, sl
 8007f50:	4631      	mov	r1, r6
 8007f52:	4628      	mov	r0, r5
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	f43f af00 	beq.w	8007d5c <_printf_float+0x9c>
 8007f5c:	f109 0901 	add.w	r9, r9, #1
 8007f60:	e7ee      	b.n	8007f40 <_printf_float+0x280>
 8007f62:	bf00      	nop
 8007f64:	f3af 8000 	nop.w
 8007f68:	ffffffff 	.word	0xffffffff
 8007f6c:	7fefffff 	.word	0x7fefffff
 8007f70:	0800aa10 	.word	0x0800aa10
 8007f74:	0800aa14 	.word	0x0800aa14
 8007f78:	0800aa1c 	.word	0x0800aa1c
 8007f7c:	0800aa18 	.word	0x0800aa18
 8007f80:	0800aa20 	.word	0x0800aa20
 8007f84:	9a08      	ldr	r2, [sp, #32]
 8007f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	bfa8      	it	ge
 8007f8c:	461a      	movge	r2, r3
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	4691      	mov	r9, r2
 8007f92:	dc38      	bgt.n	8008006 <_printf_float+0x346>
 8007f94:	2300      	movs	r3, #0
 8007f96:	9305      	str	r3, [sp, #20]
 8007f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f9c:	f104 021a 	add.w	r2, r4, #26
 8007fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fa2:	9905      	ldr	r1, [sp, #20]
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	eba3 0309 	sub.w	r3, r3, r9
 8007faa:	428b      	cmp	r3, r1
 8007fac:	dc33      	bgt.n	8008016 <_printf_float+0x356>
 8007fae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	db3c      	blt.n	8008030 <_printf_float+0x370>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	07da      	lsls	r2, r3, #31
 8007fba:	d439      	bmi.n	8008030 <_printf_float+0x370>
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	9a04      	ldr	r2, [sp, #16]
 8007fc0:	9907      	ldr	r1, [sp, #28]
 8007fc2:	1a9a      	subs	r2, r3, r2
 8007fc4:	eba3 0901 	sub.w	r9, r3, r1
 8007fc8:	4591      	cmp	r9, r2
 8007fca:	bfa8      	it	ge
 8007fcc:	4691      	movge	r9, r2
 8007fce:	f1b9 0f00 	cmp.w	r9, #0
 8007fd2:	dc35      	bgt.n	8008040 <_printf_float+0x380>
 8007fd4:	f04f 0800 	mov.w	r8, #0
 8007fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fdc:	f104 0a1a 	add.w	sl, r4, #26
 8007fe0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	eba3 0309 	sub.w	r3, r3, r9
 8007fea:	4543      	cmp	r3, r8
 8007fec:	f77f af75 	ble.w	8007eda <_printf_float+0x21a>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4652      	mov	r2, sl
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f aeae 	beq.w	8007d5c <_printf_float+0x9c>
 8008000:	f108 0801 	add.w	r8, r8, #1
 8008004:	e7ec      	b.n	8007fe0 <_printf_float+0x320>
 8008006:	4613      	mov	r3, r2
 8008008:	4631      	mov	r1, r6
 800800a:	4642      	mov	r2, r8
 800800c:	4628      	mov	r0, r5
 800800e:	47b8      	blx	r7
 8008010:	3001      	adds	r0, #1
 8008012:	d1bf      	bne.n	8007f94 <_printf_float+0x2d4>
 8008014:	e6a2      	b.n	8007d5c <_printf_float+0x9c>
 8008016:	2301      	movs	r3, #1
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	9204      	str	r2, [sp, #16]
 800801e:	47b8      	blx	r7
 8008020:	3001      	adds	r0, #1
 8008022:	f43f ae9b 	beq.w	8007d5c <_printf_float+0x9c>
 8008026:	9b05      	ldr	r3, [sp, #20]
 8008028:	9a04      	ldr	r2, [sp, #16]
 800802a:	3301      	adds	r3, #1
 800802c:	9305      	str	r3, [sp, #20]
 800802e:	e7b7      	b.n	8007fa0 <_printf_float+0x2e0>
 8008030:	4653      	mov	r3, sl
 8008032:	465a      	mov	r2, fp
 8008034:	4631      	mov	r1, r6
 8008036:	4628      	mov	r0, r5
 8008038:	47b8      	blx	r7
 800803a:	3001      	adds	r0, #1
 800803c:	d1be      	bne.n	8007fbc <_printf_float+0x2fc>
 800803e:	e68d      	b.n	8007d5c <_printf_float+0x9c>
 8008040:	9a04      	ldr	r2, [sp, #16]
 8008042:	464b      	mov	r3, r9
 8008044:	4442      	add	r2, r8
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	d1c1      	bne.n	8007fd4 <_printf_float+0x314>
 8008050:	e684      	b.n	8007d5c <_printf_float+0x9c>
 8008052:	9a08      	ldr	r2, [sp, #32]
 8008054:	2a01      	cmp	r2, #1
 8008056:	dc01      	bgt.n	800805c <_printf_float+0x39c>
 8008058:	07db      	lsls	r3, r3, #31
 800805a:	d537      	bpl.n	80080cc <_printf_float+0x40c>
 800805c:	2301      	movs	r3, #1
 800805e:	4642      	mov	r2, r8
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f ae78 	beq.w	8007d5c <_printf_float+0x9c>
 800806c:	4653      	mov	r3, sl
 800806e:	465a      	mov	r2, fp
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f ae70 	beq.w	8007d5c <_printf_float+0x9c>
 800807c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008080:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008088:	d01b      	beq.n	80080c2 <_printf_float+0x402>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	f108 0201 	add.w	r2, r8, #1
 8008090:	3b01      	subs	r3, #1
 8008092:	4631      	mov	r1, r6
 8008094:	4628      	mov	r0, r5
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	d10e      	bne.n	80080ba <_printf_float+0x3fa>
 800809c:	e65e      	b.n	8007d5c <_printf_float+0x9c>
 800809e:	2301      	movs	r3, #1
 80080a0:	464a      	mov	r2, r9
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	f43f ae57 	beq.w	8007d5c <_printf_float+0x9c>
 80080ae:	f108 0801 	add.w	r8, r8, #1
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	4543      	cmp	r3, r8
 80080b8:	dcf1      	bgt.n	800809e <_printf_float+0x3de>
 80080ba:	9b04      	ldr	r3, [sp, #16]
 80080bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080c0:	e6db      	b.n	8007e7a <_printf_float+0x1ba>
 80080c2:	f04f 0800 	mov.w	r8, #0
 80080c6:	f104 091a 	add.w	r9, r4, #26
 80080ca:	e7f2      	b.n	80080b2 <_printf_float+0x3f2>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4642      	mov	r2, r8
 80080d0:	e7df      	b.n	8008092 <_printf_float+0x3d2>
 80080d2:	2301      	movs	r3, #1
 80080d4:	464a      	mov	r2, r9
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f ae3d 	beq.w	8007d5c <_printf_float+0x9c>
 80080e2:	f108 0801 	add.w	r8, r8, #1
 80080e6:	68e3      	ldr	r3, [r4, #12]
 80080e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ea:	1a5b      	subs	r3, r3, r1
 80080ec:	4543      	cmp	r3, r8
 80080ee:	dcf0      	bgt.n	80080d2 <_printf_float+0x412>
 80080f0:	e6f7      	b.n	8007ee2 <_printf_float+0x222>
 80080f2:	f04f 0800 	mov.w	r8, #0
 80080f6:	f104 0919 	add.w	r9, r4, #25
 80080fa:	e7f4      	b.n	80080e6 <_printf_float+0x426>

080080fc <_printf_common>:
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	4616      	mov	r6, r2
 8008102:	4699      	mov	r9, r3
 8008104:	688a      	ldr	r2, [r1, #8]
 8008106:	690b      	ldr	r3, [r1, #16]
 8008108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800810c:	4293      	cmp	r3, r2
 800810e:	bfb8      	it	lt
 8008110:	4613      	movlt	r3, r2
 8008112:	6033      	str	r3, [r6, #0]
 8008114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008118:	4607      	mov	r7, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b10a      	cbz	r2, 8008122 <_printf_common+0x26>
 800811e:	3301      	adds	r3, #1
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	0699      	lsls	r1, r3, #26
 8008126:	bf42      	ittt	mi
 8008128:	6833      	ldrmi	r3, [r6, #0]
 800812a:	3302      	addmi	r3, #2
 800812c:	6033      	strmi	r3, [r6, #0]
 800812e:	6825      	ldr	r5, [r4, #0]
 8008130:	f015 0506 	ands.w	r5, r5, #6
 8008134:	d106      	bne.n	8008144 <_printf_common+0x48>
 8008136:	f104 0a19 	add.w	sl, r4, #25
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	6832      	ldr	r2, [r6, #0]
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc26      	bgt.n	8008192 <_printf_common+0x96>
 8008144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008148:	1e13      	subs	r3, r2, #0
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	bf18      	it	ne
 800814e:	2301      	movne	r3, #1
 8008150:	0692      	lsls	r2, r2, #26
 8008152:	d42b      	bmi.n	80081ac <_printf_common+0xb0>
 8008154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008158:	4649      	mov	r1, r9
 800815a:	4638      	mov	r0, r7
 800815c:	47c0      	blx	r8
 800815e:	3001      	adds	r0, #1
 8008160:	d01e      	beq.n	80081a0 <_printf_common+0xa4>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	68e5      	ldr	r5, [r4, #12]
 8008166:	6832      	ldr	r2, [r6, #0]
 8008168:	f003 0306 	and.w	r3, r3, #6
 800816c:	2b04      	cmp	r3, #4
 800816e:	bf08      	it	eq
 8008170:	1aad      	subeq	r5, r5, r2
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	6922      	ldr	r2, [r4, #16]
 8008176:	bf0c      	ite	eq
 8008178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800817c:	2500      	movne	r5, #0
 800817e:	4293      	cmp	r3, r2
 8008180:	bfc4      	itt	gt
 8008182:	1a9b      	subgt	r3, r3, r2
 8008184:	18ed      	addgt	r5, r5, r3
 8008186:	2600      	movs	r6, #0
 8008188:	341a      	adds	r4, #26
 800818a:	42b5      	cmp	r5, r6
 800818c:	d11a      	bne.n	80081c4 <_printf_common+0xc8>
 800818e:	2000      	movs	r0, #0
 8008190:	e008      	b.n	80081a4 <_printf_common+0xa8>
 8008192:	2301      	movs	r3, #1
 8008194:	4652      	mov	r2, sl
 8008196:	4649      	mov	r1, r9
 8008198:	4638      	mov	r0, r7
 800819a:	47c0      	blx	r8
 800819c:	3001      	adds	r0, #1
 800819e:	d103      	bne.n	80081a8 <_printf_common+0xac>
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a8:	3501      	adds	r5, #1
 80081aa:	e7c6      	b.n	800813a <_printf_common+0x3e>
 80081ac:	18e1      	adds	r1, r4, r3
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	2030      	movs	r0, #48	; 0x30
 80081b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081b6:	4422      	add	r2, r4
 80081b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081c0:	3302      	adds	r3, #2
 80081c2:	e7c7      	b.n	8008154 <_printf_common+0x58>
 80081c4:	2301      	movs	r3, #1
 80081c6:	4622      	mov	r2, r4
 80081c8:	4649      	mov	r1, r9
 80081ca:	4638      	mov	r0, r7
 80081cc:	47c0      	blx	r8
 80081ce:	3001      	adds	r0, #1
 80081d0:	d0e6      	beq.n	80081a0 <_printf_common+0xa4>
 80081d2:	3601      	adds	r6, #1
 80081d4:	e7d9      	b.n	800818a <_printf_common+0x8e>
	...

080081d8 <_printf_i>:
 80081d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	7e0f      	ldrb	r7, [r1, #24]
 80081de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081e0:	2f78      	cmp	r7, #120	; 0x78
 80081e2:	4691      	mov	r9, r2
 80081e4:	4680      	mov	r8, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	469a      	mov	sl, r3
 80081ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081ee:	d807      	bhi.n	8008200 <_printf_i+0x28>
 80081f0:	2f62      	cmp	r7, #98	; 0x62
 80081f2:	d80a      	bhi.n	800820a <_printf_i+0x32>
 80081f4:	2f00      	cmp	r7, #0
 80081f6:	f000 80d8 	beq.w	80083aa <_printf_i+0x1d2>
 80081fa:	2f58      	cmp	r7, #88	; 0x58
 80081fc:	f000 80a3 	beq.w	8008346 <_printf_i+0x16e>
 8008200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008208:	e03a      	b.n	8008280 <_printf_i+0xa8>
 800820a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800820e:	2b15      	cmp	r3, #21
 8008210:	d8f6      	bhi.n	8008200 <_printf_i+0x28>
 8008212:	a101      	add	r1, pc, #4	; (adr r1, 8008218 <_printf_i+0x40>)
 8008214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008218:	08008271 	.word	0x08008271
 800821c:	08008285 	.word	0x08008285
 8008220:	08008201 	.word	0x08008201
 8008224:	08008201 	.word	0x08008201
 8008228:	08008201 	.word	0x08008201
 800822c:	08008201 	.word	0x08008201
 8008230:	08008285 	.word	0x08008285
 8008234:	08008201 	.word	0x08008201
 8008238:	08008201 	.word	0x08008201
 800823c:	08008201 	.word	0x08008201
 8008240:	08008201 	.word	0x08008201
 8008244:	08008391 	.word	0x08008391
 8008248:	080082b5 	.word	0x080082b5
 800824c:	08008373 	.word	0x08008373
 8008250:	08008201 	.word	0x08008201
 8008254:	08008201 	.word	0x08008201
 8008258:	080083b3 	.word	0x080083b3
 800825c:	08008201 	.word	0x08008201
 8008260:	080082b5 	.word	0x080082b5
 8008264:	08008201 	.word	0x08008201
 8008268:	08008201 	.word	0x08008201
 800826c:	0800837b 	.word	0x0800837b
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	1d1a      	adds	r2, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	602a      	str	r2, [r5, #0]
 8008278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800827c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008280:	2301      	movs	r3, #1
 8008282:	e0a3      	b.n	80083cc <_printf_i+0x1f4>
 8008284:	6820      	ldr	r0, [r4, #0]
 8008286:	6829      	ldr	r1, [r5, #0]
 8008288:	0606      	lsls	r6, r0, #24
 800828a:	f101 0304 	add.w	r3, r1, #4
 800828e:	d50a      	bpl.n	80082a6 <_printf_i+0xce>
 8008290:	680e      	ldr	r6, [r1, #0]
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	2e00      	cmp	r6, #0
 8008296:	da03      	bge.n	80082a0 <_printf_i+0xc8>
 8008298:	232d      	movs	r3, #45	; 0x2d
 800829a:	4276      	negs	r6, r6
 800829c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a0:	485e      	ldr	r0, [pc, #376]	; (800841c <_printf_i+0x244>)
 80082a2:	230a      	movs	r3, #10
 80082a4:	e019      	b.n	80082da <_printf_i+0x102>
 80082a6:	680e      	ldr	r6, [r1, #0]
 80082a8:	602b      	str	r3, [r5, #0]
 80082aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082ae:	bf18      	it	ne
 80082b0:	b236      	sxthne	r6, r6
 80082b2:	e7ef      	b.n	8008294 <_printf_i+0xbc>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	6820      	ldr	r0, [r4, #0]
 80082b8:	1d19      	adds	r1, r3, #4
 80082ba:	6029      	str	r1, [r5, #0]
 80082bc:	0601      	lsls	r1, r0, #24
 80082be:	d501      	bpl.n	80082c4 <_printf_i+0xec>
 80082c0:	681e      	ldr	r6, [r3, #0]
 80082c2:	e002      	b.n	80082ca <_printf_i+0xf2>
 80082c4:	0646      	lsls	r6, r0, #25
 80082c6:	d5fb      	bpl.n	80082c0 <_printf_i+0xe8>
 80082c8:	881e      	ldrh	r6, [r3, #0]
 80082ca:	4854      	ldr	r0, [pc, #336]	; (800841c <_printf_i+0x244>)
 80082cc:	2f6f      	cmp	r7, #111	; 0x6f
 80082ce:	bf0c      	ite	eq
 80082d0:	2308      	moveq	r3, #8
 80082d2:	230a      	movne	r3, #10
 80082d4:	2100      	movs	r1, #0
 80082d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082da:	6865      	ldr	r5, [r4, #4]
 80082dc:	60a5      	str	r5, [r4, #8]
 80082de:	2d00      	cmp	r5, #0
 80082e0:	bfa2      	ittt	ge
 80082e2:	6821      	ldrge	r1, [r4, #0]
 80082e4:	f021 0104 	bicge.w	r1, r1, #4
 80082e8:	6021      	strge	r1, [r4, #0]
 80082ea:	b90e      	cbnz	r6, 80082f0 <_printf_i+0x118>
 80082ec:	2d00      	cmp	r5, #0
 80082ee:	d04d      	beq.n	800838c <_printf_i+0x1b4>
 80082f0:	4615      	mov	r5, r2
 80082f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80082f6:	fb03 6711 	mls	r7, r3, r1, r6
 80082fa:	5dc7      	ldrb	r7, [r0, r7]
 80082fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008300:	4637      	mov	r7, r6
 8008302:	42bb      	cmp	r3, r7
 8008304:	460e      	mov	r6, r1
 8008306:	d9f4      	bls.n	80082f2 <_printf_i+0x11a>
 8008308:	2b08      	cmp	r3, #8
 800830a:	d10b      	bne.n	8008324 <_printf_i+0x14c>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	07de      	lsls	r6, r3, #31
 8008310:	d508      	bpl.n	8008324 <_printf_i+0x14c>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	6861      	ldr	r1, [r4, #4]
 8008316:	4299      	cmp	r1, r3
 8008318:	bfde      	ittt	le
 800831a:	2330      	movle	r3, #48	; 0x30
 800831c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008324:	1b52      	subs	r2, r2, r5
 8008326:	6122      	str	r2, [r4, #16]
 8008328:	f8cd a000 	str.w	sl, [sp]
 800832c:	464b      	mov	r3, r9
 800832e:	aa03      	add	r2, sp, #12
 8008330:	4621      	mov	r1, r4
 8008332:	4640      	mov	r0, r8
 8008334:	f7ff fee2 	bl	80080fc <_printf_common>
 8008338:	3001      	adds	r0, #1
 800833a:	d14c      	bne.n	80083d6 <_printf_i+0x1fe>
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	b004      	add	sp, #16
 8008342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008346:	4835      	ldr	r0, [pc, #212]	; (800841c <_printf_i+0x244>)
 8008348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800834c:	6829      	ldr	r1, [r5, #0]
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	f851 6b04 	ldr.w	r6, [r1], #4
 8008354:	6029      	str	r1, [r5, #0]
 8008356:	061d      	lsls	r5, r3, #24
 8008358:	d514      	bpl.n	8008384 <_printf_i+0x1ac>
 800835a:	07df      	lsls	r7, r3, #31
 800835c:	bf44      	itt	mi
 800835e:	f043 0320 	orrmi.w	r3, r3, #32
 8008362:	6023      	strmi	r3, [r4, #0]
 8008364:	b91e      	cbnz	r6, 800836e <_printf_i+0x196>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	f023 0320 	bic.w	r3, r3, #32
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	2310      	movs	r3, #16
 8008370:	e7b0      	b.n	80082d4 <_printf_i+0xfc>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f043 0320 	orr.w	r3, r3, #32
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	2378      	movs	r3, #120	; 0x78
 800837c:	4828      	ldr	r0, [pc, #160]	; (8008420 <_printf_i+0x248>)
 800837e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008382:	e7e3      	b.n	800834c <_printf_i+0x174>
 8008384:	0659      	lsls	r1, r3, #25
 8008386:	bf48      	it	mi
 8008388:	b2b6      	uxthmi	r6, r6
 800838a:	e7e6      	b.n	800835a <_printf_i+0x182>
 800838c:	4615      	mov	r5, r2
 800838e:	e7bb      	b.n	8008308 <_printf_i+0x130>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	6826      	ldr	r6, [r4, #0]
 8008394:	6961      	ldr	r1, [r4, #20]
 8008396:	1d18      	adds	r0, r3, #4
 8008398:	6028      	str	r0, [r5, #0]
 800839a:	0635      	lsls	r5, r6, #24
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	d501      	bpl.n	80083a4 <_printf_i+0x1cc>
 80083a0:	6019      	str	r1, [r3, #0]
 80083a2:	e002      	b.n	80083aa <_printf_i+0x1d2>
 80083a4:	0670      	lsls	r0, r6, #25
 80083a6:	d5fb      	bpl.n	80083a0 <_printf_i+0x1c8>
 80083a8:	8019      	strh	r1, [r3, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	4615      	mov	r5, r2
 80083b0:	e7ba      	b.n	8008328 <_printf_i+0x150>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	602a      	str	r2, [r5, #0]
 80083b8:	681d      	ldr	r5, [r3, #0]
 80083ba:	6862      	ldr	r2, [r4, #4]
 80083bc:	2100      	movs	r1, #0
 80083be:	4628      	mov	r0, r5
 80083c0:	f7f7 ff46 	bl	8000250 <memchr>
 80083c4:	b108      	cbz	r0, 80083ca <_printf_i+0x1f2>
 80083c6:	1b40      	subs	r0, r0, r5
 80083c8:	6060      	str	r0, [r4, #4]
 80083ca:	6863      	ldr	r3, [r4, #4]
 80083cc:	6123      	str	r3, [r4, #16]
 80083ce:	2300      	movs	r3, #0
 80083d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d4:	e7a8      	b.n	8008328 <_printf_i+0x150>
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	462a      	mov	r2, r5
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	47d0      	blx	sl
 80083e0:	3001      	adds	r0, #1
 80083e2:	d0ab      	beq.n	800833c <_printf_i+0x164>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	079b      	lsls	r3, r3, #30
 80083e8:	d413      	bmi.n	8008412 <_printf_i+0x23a>
 80083ea:	68e0      	ldr	r0, [r4, #12]
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	4298      	cmp	r0, r3
 80083f0:	bfb8      	it	lt
 80083f2:	4618      	movlt	r0, r3
 80083f4:	e7a4      	b.n	8008340 <_printf_i+0x168>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4632      	mov	r2, r6
 80083fa:	4649      	mov	r1, r9
 80083fc:	4640      	mov	r0, r8
 80083fe:	47d0      	blx	sl
 8008400:	3001      	adds	r0, #1
 8008402:	d09b      	beq.n	800833c <_printf_i+0x164>
 8008404:	3501      	adds	r5, #1
 8008406:	68e3      	ldr	r3, [r4, #12]
 8008408:	9903      	ldr	r1, [sp, #12]
 800840a:	1a5b      	subs	r3, r3, r1
 800840c:	42ab      	cmp	r3, r5
 800840e:	dcf2      	bgt.n	80083f6 <_printf_i+0x21e>
 8008410:	e7eb      	b.n	80083ea <_printf_i+0x212>
 8008412:	2500      	movs	r5, #0
 8008414:	f104 0619 	add.w	r6, r4, #25
 8008418:	e7f5      	b.n	8008406 <_printf_i+0x22e>
 800841a:	bf00      	nop
 800841c:	0800aa22 	.word	0x0800aa22
 8008420:	0800aa33 	.word	0x0800aa33

08008424 <siprintf>:
 8008424:	b40e      	push	{r1, r2, r3}
 8008426:	b500      	push	{lr}
 8008428:	b09c      	sub	sp, #112	; 0x70
 800842a:	ab1d      	add	r3, sp, #116	; 0x74
 800842c:	9002      	str	r0, [sp, #8]
 800842e:	9006      	str	r0, [sp, #24]
 8008430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008434:	4809      	ldr	r0, [pc, #36]	; (800845c <siprintf+0x38>)
 8008436:	9107      	str	r1, [sp, #28]
 8008438:	9104      	str	r1, [sp, #16]
 800843a:	4909      	ldr	r1, [pc, #36]	; (8008460 <siprintf+0x3c>)
 800843c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008440:	9105      	str	r1, [sp, #20]
 8008442:	6800      	ldr	r0, [r0, #0]
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	a902      	add	r1, sp, #8
 8008448:	f001 fb98 	bl	8009b7c <_svfiprintf_r>
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	b01c      	add	sp, #112	; 0x70
 8008454:	f85d eb04 	ldr.w	lr, [sp], #4
 8008458:	b003      	add	sp, #12
 800845a:	4770      	bx	lr
 800845c:	20000028 	.word	0x20000028
 8008460:	ffff0208 	.word	0xffff0208

08008464 <strncmp>:
 8008464:	b510      	push	{r4, lr}
 8008466:	b17a      	cbz	r2, 8008488 <strncmp+0x24>
 8008468:	4603      	mov	r3, r0
 800846a:	3901      	subs	r1, #1
 800846c:	1884      	adds	r4, r0, r2
 800846e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008472:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008476:	4290      	cmp	r0, r2
 8008478:	d101      	bne.n	800847e <strncmp+0x1a>
 800847a:	42a3      	cmp	r3, r4
 800847c:	d101      	bne.n	8008482 <strncmp+0x1e>
 800847e:	1a80      	subs	r0, r0, r2
 8008480:	bd10      	pop	{r4, pc}
 8008482:	2800      	cmp	r0, #0
 8008484:	d1f3      	bne.n	800846e <strncmp+0xa>
 8008486:	e7fa      	b.n	800847e <strncmp+0x1a>
 8008488:	4610      	mov	r0, r2
 800848a:	e7f9      	b.n	8008480 <strncmp+0x1c>

0800848c <_strtol_l.constprop.0>:
 800848c:	2b01      	cmp	r3, #1
 800848e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008492:	d001      	beq.n	8008498 <_strtol_l.constprop.0+0xc>
 8008494:	2b24      	cmp	r3, #36	; 0x24
 8008496:	d906      	bls.n	80084a6 <_strtol_l.constprop.0+0x1a>
 8008498:	f7ff fb4e 	bl	8007b38 <__errno>
 800849c:	2316      	movs	r3, #22
 800849e:	6003      	str	r3, [r0, #0]
 80084a0:	2000      	movs	r0, #0
 80084a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800858c <_strtol_l.constprop.0+0x100>
 80084aa:	460d      	mov	r5, r1
 80084ac:	462e      	mov	r6, r5
 80084ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80084b6:	f017 0708 	ands.w	r7, r7, #8
 80084ba:	d1f7      	bne.n	80084ac <_strtol_l.constprop.0+0x20>
 80084bc:	2c2d      	cmp	r4, #45	; 0x2d
 80084be:	d132      	bne.n	8008526 <_strtol_l.constprop.0+0x9a>
 80084c0:	782c      	ldrb	r4, [r5, #0]
 80084c2:	2701      	movs	r7, #1
 80084c4:	1cb5      	adds	r5, r6, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d05b      	beq.n	8008582 <_strtol_l.constprop.0+0xf6>
 80084ca:	2b10      	cmp	r3, #16
 80084cc:	d109      	bne.n	80084e2 <_strtol_l.constprop.0+0x56>
 80084ce:	2c30      	cmp	r4, #48	; 0x30
 80084d0:	d107      	bne.n	80084e2 <_strtol_l.constprop.0+0x56>
 80084d2:	782c      	ldrb	r4, [r5, #0]
 80084d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084d8:	2c58      	cmp	r4, #88	; 0x58
 80084da:	d14d      	bne.n	8008578 <_strtol_l.constprop.0+0xec>
 80084dc:	786c      	ldrb	r4, [r5, #1]
 80084de:	2310      	movs	r3, #16
 80084e0:	3502      	adds	r5, #2
 80084e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80084e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ea:	f04f 0c00 	mov.w	ip, #0
 80084ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80084f2:	4666      	mov	r6, ip
 80084f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80084f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80084fc:	f1be 0f09 	cmp.w	lr, #9
 8008500:	d816      	bhi.n	8008530 <_strtol_l.constprop.0+0xa4>
 8008502:	4674      	mov	r4, lr
 8008504:	42a3      	cmp	r3, r4
 8008506:	dd24      	ble.n	8008552 <_strtol_l.constprop.0+0xc6>
 8008508:	f1bc 0f00 	cmp.w	ip, #0
 800850c:	db1e      	blt.n	800854c <_strtol_l.constprop.0+0xc0>
 800850e:	45b1      	cmp	r9, r6
 8008510:	d31c      	bcc.n	800854c <_strtol_l.constprop.0+0xc0>
 8008512:	d101      	bne.n	8008518 <_strtol_l.constprop.0+0x8c>
 8008514:	45a2      	cmp	sl, r4
 8008516:	db19      	blt.n	800854c <_strtol_l.constprop.0+0xc0>
 8008518:	fb06 4603 	mla	r6, r6, r3, r4
 800851c:	f04f 0c01 	mov.w	ip, #1
 8008520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008524:	e7e8      	b.n	80084f8 <_strtol_l.constprop.0+0x6c>
 8008526:	2c2b      	cmp	r4, #43	; 0x2b
 8008528:	bf04      	itt	eq
 800852a:	782c      	ldrbeq	r4, [r5, #0]
 800852c:	1cb5      	addeq	r5, r6, #2
 800852e:	e7ca      	b.n	80084c6 <_strtol_l.constprop.0+0x3a>
 8008530:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008534:	f1be 0f19 	cmp.w	lr, #25
 8008538:	d801      	bhi.n	800853e <_strtol_l.constprop.0+0xb2>
 800853a:	3c37      	subs	r4, #55	; 0x37
 800853c:	e7e2      	b.n	8008504 <_strtol_l.constprop.0+0x78>
 800853e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008542:	f1be 0f19 	cmp.w	lr, #25
 8008546:	d804      	bhi.n	8008552 <_strtol_l.constprop.0+0xc6>
 8008548:	3c57      	subs	r4, #87	; 0x57
 800854a:	e7db      	b.n	8008504 <_strtol_l.constprop.0+0x78>
 800854c:	f04f 3cff 	mov.w	ip, #4294967295
 8008550:	e7e6      	b.n	8008520 <_strtol_l.constprop.0+0x94>
 8008552:	f1bc 0f00 	cmp.w	ip, #0
 8008556:	da05      	bge.n	8008564 <_strtol_l.constprop.0+0xd8>
 8008558:	2322      	movs	r3, #34	; 0x22
 800855a:	6003      	str	r3, [r0, #0]
 800855c:	4646      	mov	r6, r8
 800855e:	b942      	cbnz	r2, 8008572 <_strtol_l.constprop.0+0xe6>
 8008560:	4630      	mov	r0, r6
 8008562:	e79e      	b.n	80084a2 <_strtol_l.constprop.0+0x16>
 8008564:	b107      	cbz	r7, 8008568 <_strtol_l.constprop.0+0xdc>
 8008566:	4276      	negs	r6, r6
 8008568:	2a00      	cmp	r2, #0
 800856a:	d0f9      	beq.n	8008560 <_strtol_l.constprop.0+0xd4>
 800856c:	f1bc 0f00 	cmp.w	ip, #0
 8008570:	d000      	beq.n	8008574 <_strtol_l.constprop.0+0xe8>
 8008572:	1e69      	subs	r1, r5, #1
 8008574:	6011      	str	r1, [r2, #0]
 8008576:	e7f3      	b.n	8008560 <_strtol_l.constprop.0+0xd4>
 8008578:	2430      	movs	r4, #48	; 0x30
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1b1      	bne.n	80084e2 <_strtol_l.constprop.0+0x56>
 800857e:	2308      	movs	r3, #8
 8008580:	e7af      	b.n	80084e2 <_strtol_l.constprop.0+0x56>
 8008582:	2c30      	cmp	r4, #48	; 0x30
 8008584:	d0a5      	beq.n	80084d2 <_strtol_l.constprop.0+0x46>
 8008586:	230a      	movs	r3, #10
 8008588:	e7ab      	b.n	80084e2 <_strtol_l.constprop.0+0x56>
 800858a:	bf00      	nop
 800858c:	0800aa45 	.word	0x0800aa45

08008590 <strtol>:
 8008590:	4613      	mov	r3, r2
 8008592:	460a      	mov	r2, r1
 8008594:	4601      	mov	r1, r0
 8008596:	4802      	ldr	r0, [pc, #8]	; (80085a0 <strtol+0x10>)
 8008598:	6800      	ldr	r0, [r0, #0]
 800859a:	f7ff bf77 	b.w	800848c <_strtol_l.constprop.0>
 800859e:	bf00      	nop
 80085a0:	20000028 	.word	0x20000028

080085a4 <quorem>:
 80085a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	6903      	ldr	r3, [r0, #16]
 80085aa:	690c      	ldr	r4, [r1, #16]
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	4607      	mov	r7, r0
 80085b0:	f2c0 8081 	blt.w	80086b6 <quorem+0x112>
 80085b4:	3c01      	subs	r4, #1
 80085b6:	f101 0814 	add.w	r8, r1, #20
 80085ba:	f100 0514 	add.w	r5, r0, #20
 80085be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085cc:	3301      	adds	r3, #1
 80085ce:	429a      	cmp	r2, r3
 80085d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80085dc:	d331      	bcc.n	8008642 <quorem+0x9e>
 80085de:	f04f 0e00 	mov.w	lr, #0
 80085e2:	4640      	mov	r0, r8
 80085e4:	46ac      	mov	ip, r5
 80085e6:	46f2      	mov	sl, lr
 80085e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80085ec:	b293      	uxth	r3, r2
 80085ee:	fb06 e303 	mla	r3, r6, r3, lr
 80085f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	ebaa 0303 	sub.w	r3, sl, r3
 80085fc:	f8dc a000 	ldr.w	sl, [ip]
 8008600:	0c12      	lsrs	r2, r2, #16
 8008602:	fa13 f38a 	uxtah	r3, r3, sl
 8008606:	fb06 e202 	mla	r2, r6, r2, lr
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	9b00      	ldr	r3, [sp, #0]
 800860e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008612:	b292      	uxth	r2, r2
 8008614:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800861c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008620:	4581      	cmp	r9, r0
 8008622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008626:	f84c 3b04 	str.w	r3, [ip], #4
 800862a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800862e:	d2db      	bcs.n	80085e8 <quorem+0x44>
 8008630:	f855 300b 	ldr.w	r3, [r5, fp]
 8008634:	b92b      	cbnz	r3, 8008642 <quorem+0x9e>
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	3b04      	subs	r3, #4
 800863a:	429d      	cmp	r5, r3
 800863c:	461a      	mov	r2, r3
 800863e:	d32e      	bcc.n	800869e <quorem+0xfa>
 8008640:	613c      	str	r4, [r7, #16]
 8008642:	4638      	mov	r0, r7
 8008644:	f001 f846 	bl	80096d4 <__mcmp>
 8008648:	2800      	cmp	r0, #0
 800864a:	db24      	blt.n	8008696 <quorem+0xf2>
 800864c:	3601      	adds	r6, #1
 800864e:	4628      	mov	r0, r5
 8008650:	f04f 0c00 	mov.w	ip, #0
 8008654:	f858 2b04 	ldr.w	r2, [r8], #4
 8008658:	f8d0 e000 	ldr.w	lr, [r0]
 800865c:	b293      	uxth	r3, r2
 800865e:	ebac 0303 	sub.w	r3, ip, r3
 8008662:	0c12      	lsrs	r2, r2, #16
 8008664:	fa13 f38e 	uxtah	r3, r3, lr
 8008668:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800866c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008670:	b29b      	uxth	r3, r3
 8008672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008676:	45c1      	cmp	r9, r8
 8008678:	f840 3b04 	str.w	r3, [r0], #4
 800867c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008680:	d2e8      	bcs.n	8008654 <quorem+0xb0>
 8008682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800868a:	b922      	cbnz	r2, 8008696 <quorem+0xf2>
 800868c:	3b04      	subs	r3, #4
 800868e:	429d      	cmp	r5, r3
 8008690:	461a      	mov	r2, r3
 8008692:	d30a      	bcc.n	80086aa <quorem+0x106>
 8008694:	613c      	str	r4, [r7, #16]
 8008696:	4630      	mov	r0, r6
 8008698:	b003      	add	sp, #12
 800869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	3b04      	subs	r3, #4
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	d1cc      	bne.n	8008640 <quorem+0x9c>
 80086a6:	3c01      	subs	r4, #1
 80086a8:	e7c7      	b.n	800863a <quorem+0x96>
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	3b04      	subs	r3, #4
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	d1f0      	bne.n	8008694 <quorem+0xf0>
 80086b2:	3c01      	subs	r4, #1
 80086b4:	e7eb      	b.n	800868e <quorem+0xea>
 80086b6:	2000      	movs	r0, #0
 80086b8:	e7ee      	b.n	8008698 <quorem+0xf4>
 80086ba:	0000      	movs	r0, r0
 80086bc:	0000      	movs	r0, r0
	...

080086c0 <_dtoa_r>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	ed2d 8b02 	vpush	{d8}
 80086c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086ca:	b091      	sub	sp, #68	; 0x44
 80086cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086d0:	ec59 8b10 	vmov	r8, r9, d0
 80086d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80086d6:	9106      	str	r1, [sp, #24]
 80086d8:	4606      	mov	r6, r0
 80086da:	9208      	str	r2, [sp, #32]
 80086dc:	930c      	str	r3, [sp, #48]	; 0x30
 80086de:	b975      	cbnz	r5, 80086fe <_dtoa_r+0x3e>
 80086e0:	2010      	movs	r0, #16
 80086e2:	f000 fd5f 	bl	80091a4 <malloc>
 80086e6:	4602      	mov	r2, r0
 80086e8:	6270      	str	r0, [r6, #36]	; 0x24
 80086ea:	b920      	cbnz	r0, 80086f6 <_dtoa_r+0x36>
 80086ec:	4baa      	ldr	r3, [pc, #680]	; (8008998 <_dtoa_r+0x2d8>)
 80086ee:	21ea      	movs	r1, #234	; 0xea
 80086f0:	48aa      	ldr	r0, [pc, #680]	; (800899c <_dtoa_r+0x2dc>)
 80086f2:	f001 fb53 	bl	8009d9c <__assert_func>
 80086f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086fa:	6005      	str	r5, [r0, #0]
 80086fc:	60c5      	str	r5, [r0, #12]
 80086fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008700:	6819      	ldr	r1, [r3, #0]
 8008702:	b151      	cbz	r1, 800871a <_dtoa_r+0x5a>
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	604a      	str	r2, [r1, #4]
 8008708:	2301      	movs	r3, #1
 800870a:	4093      	lsls	r3, r2
 800870c:	608b      	str	r3, [r1, #8]
 800870e:	4630      	mov	r0, r6
 8008710:	f000 fd9e 	bl	8009250 <_Bfree>
 8008714:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	f1b9 0300 	subs.w	r3, r9, #0
 800871e:	bfbb      	ittet	lt
 8008720:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008724:	9303      	strlt	r3, [sp, #12]
 8008726:	2300      	movge	r3, #0
 8008728:	2201      	movlt	r2, #1
 800872a:	bfac      	ite	ge
 800872c:	6023      	strge	r3, [r4, #0]
 800872e:	6022      	strlt	r2, [r4, #0]
 8008730:	4b9b      	ldr	r3, [pc, #620]	; (80089a0 <_dtoa_r+0x2e0>)
 8008732:	9c03      	ldr	r4, [sp, #12]
 8008734:	43a3      	bics	r3, r4
 8008736:	d11c      	bne.n	8008772 <_dtoa_r+0xb2>
 8008738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800873a:	f242 730f 	movw	r3, #9999	; 0x270f
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008744:	ea53 0308 	orrs.w	r3, r3, r8
 8008748:	f000 84fd 	beq.w	8009146 <_dtoa_r+0xa86>
 800874c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800874e:	b963      	cbnz	r3, 800876a <_dtoa_r+0xaa>
 8008750:	4b94      	ldr	r3, [pc, #592]	; (80089a4 <_dtoa_r+0x2e4>)
 8008752:	e01f      	b.n	8008794 <_dtoa_r+0xd4>
 8008754:	4b94      	ldr	r3, [pc, #592]	; (80089a8 <_dtoa_r+0x2e8>)
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	3308      	adds	r3, #8
 800875a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	9801      	ldr	r0, [sp, #4]
 8008760:	b011      	add	sp, #68	; 0x44
 8008762:	ecbd 8b02 	vpop	{d8}
 8008766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876a:	4b8e      	ldr	r3, [pc, #568]	; (80089a4 <_dtoa_r+0x2e4>)
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	3303      	adds	r3, #3
 8008770:	e7f3      	b.n	800875a <_dtoa_r+0x9a>
 8008772:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008776:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877e:	d10b      	bne.n	8008798 <_dtoa_r+0xd8>
 8008780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008782:	2301      	movs	r3, #1
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 84d9 	beq.w	8009140 <_dtoa_r+0xa80>
 800878e:	4887      	ldr	r0, [pc, #540]	; (80089ac <_dtoa_r+0x2ec>)
 8008790:	6018      	str	r0, [r3, #0]
 8008792:	1e43      	subs	r3, r0, #1
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	e7e2      	b.n	800875e <_dtoa_r+0x9e>
 8008798:	a90f      	add	r1, sp, #60	; 0x3c
 800879a:	aa0e      	add	r2, sp, #56	; 0x38
 800879c:	4630      	mov	r0, r6
 800879e:	eeb0 0b48 	vmov.f64	d0, d8
 80087a2:	f001 f83d 	bl	8009820 <__d2b>
 80087a6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80087aa:	4605      	mov	r5, r0
 80087ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80087ae:	2900      	cmp	r1, #0
 80087b0:	d046      	beq.n	8008840 <_dtoa_r+0x180>
 80087b2:	ee18 4a90 	vmov	r4, s17
 80087b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80087ba:	ec53 2b18 	vmov	r2, r3, d8
 80087be:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80087c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80087c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80087ca:	2400      	movs	r4, #0
 80087cc:	ec43 2b16 	vmov	d6, r2, r3
 80087d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80087d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008980 <_dtoa_r+0x2c0>
 80087d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008988 <_dtoa_r+0x2c8>
 80087e0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80087e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008990 <_dtoa_r+0x2d0>
 80087e8:	ee07 1a90 	vmov	s15, r1
 80087ec:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80087f0:	eeb0 7b46 	vmov.f64	d7, d6
 80087f4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80087f8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80087fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008804:	ee16 ba90 	vmov	fp, s13
 8008808:	940a      	str	r4, [sp, #40]	; 0x28
 800880a:	d508      	bpl.n	800881e <_dtoa_r+0x15e>
 800880c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008810:	eeb4 6b47 	vcmp.f64	d6, d7
 8008814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008818:	bf18      	it	ne
 800881a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800881e:	f1bb 0f16 	cmp.w	fp, #22
 8008822:	d82f      	bhi.n	8008884 <_dtoa_r+0x1c4>
 8008824:	4b62      	ldr	r3, [pc, #392]	; (80089b0 <_dtoa_r+0x2f0>)
 8008826:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800882a:	ed93 7b00 	vldr	d7, [r3]
 800882e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	d501      	bpl.n	800883c <_dtoa_r+0x17c>
 8008838:	f10b 3bff 	add.w	fp, fp, #4294967295
 800883c:	2300      	movs	r3, #0
 800883e:	e022      	b.n	8008886 <_dtoa_r+0x1c6>
 8008840:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008842:	4401      	add	r1, r0
 8008844:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008848:	2b20      	cmp	r3, #32
 800884a:	bfc1      	itttt	gt
 800884c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008850:	fa04 f303 	lslgt.w	r3, r4, r3
 8008854:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008858:	fa28 f804 	lsrgt.w	r8, r8, r4
 800885c:	bfd6      	itet	le
 800885e:	f1c3 0320 	rsble	r3, r3, #32
 8008862:	ea43 0808 	orrgt.w	r8, r3, r8
 8008866:	fa08 f803 	lslle.w	r8, r8, r3
 800886a:	ee07 8a90 	vmov	s15, r8
 800886e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008872:	3901      	subs	r1, #1
 8008874:	ee17 4a90 	vmov	r4, s15
 8008878:	ec53 2b17 	vmov	r2, r3, d7
 800887c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008880:	2401      	movs	r4, #1
 8008882:	e7a3      	b.n	80087cc <_dtoa_r+0x10c>
 8008884:	2301      	movs	r3, #1
 8008886:	930b      	str	r3, [sp, #44]	; 0x2c
 8008888:	1a43      	subs	r3, r0, r1
 800888a:	1e5a      	subs	r2, r3, #1
 800888c:	bf45      	ittet	mi
 800888e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008892:	9304      	strmi	r3, [sp, #16]
 8008894:	2300      	movpl	r3, #0
 8008896:	2300      	movmi	r3, #0
 8008898:	9205      	str	r2, [sp, #20]
 800889a:	bf54      	ite	pl
 800889c:	9304      	strpl	r3, [sp, #16]
 800889e:	9305      	strmi	r3, [sp, #20]
 80088a0:	f1bb 0f00 	cmp.w	fp, #0
 80088a4:	db18      	blt.n	80088d8 <_dtoa_r+0x218>
 80088a6:	9b05      	ldr	r3, [sp, #20]
 80088a8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80088ac:	445b      	add	r3, fp
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	2300      	movs	r3, #0
 80088b2:	9a06      	ldr	r2, [sp, #24]
 80088b4:	2a09      	cmp	r2, #9
 80088b6:	d849      	bhi.n	800894c <_dtoa_r+0x28c>
 80088b8:	2a05      	cmp	r2, #5
 80088ba:	bfc4      	itt	gt
 80088bc:	3a04      	subgt	r2, #4
 80088be:	9206      	strgt	r2, [sp, #24]
 80088c0:	9a06      	ldr	r2, [sp, #24]
 80088c2:	f1a2 0202 	sub.w	r2, r2, #2
 80088c6:	bfcc      	ite	gt
 80088c8:	2400      	movgt	r4, #0
 80088ca:	2401      	movle	r4, #1
 80088cc:	2a03      	cmp	r2, #3
 80088ce:	d848      	bhi.n	8008962 <_dtoa_r+0x2a2>
 80088d0:	e8df f002 	tbb	[pc, r2]
 80088d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80088d8:	9b04      	ldr	r3, [sp, #16]
 80088da:	2200      	movs	r2, #0
 80088dc:	eba3 030b 	sub.w	r3, r3, fp
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	9209      	str	r2, [sp, #36]	; 0x24
 80088e4:	f1cb 0300 	rsb	r3, fp, #0
 80088e8:	e7e3      	b.n	80088b2 <_dtoa_r+0x1f2>
 80088ea:	2200      	movs	r2, #0
 80088ec:	9207      	str	r2, [sp, #28]
 80088ee:	9a08      	ldr	r2, [sp, #32]
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	dc39      	bgt.n	8008968 <_dtoa_r+0x2a8>
 80088f4:	f04f 0a01 	mov.w	sl, #1
 80088f8:	46d1      	mov	r9, sl
 80088fa:	4652      	mov	r2, sl
 80088fc:	f8cd a020 	str.w	sl, [sp, #32]
 8008900:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008902:	2100      	movs	r1, #0
 8008904:	6079      	str	r1, [r7, #4]
 8008906:	2004      	movs	r0, #4
 8008908:	f100 0c14 	add.w	ip, r0, #20
 800890c:	4594      	cmp	ip, r2
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	d92f      	bls.n	8008972 <_dtoa_r+0x2b2>
 8008912:	4630      	mov	r0, r6
 8008914:	930d      	str	r3, [sp, #52]	; 0x34
 8008916:	f000 fc5b 	bl	80091d0 <_Balloc>
 800891a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800891c:	9001      	str	r0, [sp, #4]
 800891e:	4602      	mov	r2, r0
 8008920:	2800      	cmp	r0, #0
 8008922:	d149      	bne.n	80089b8 <_dtoa_r+0x2f8>
 8008924:	4b23      	ldr	r3, [pc, #140]	; (80089b4 <_dtoa_r+0x2f4>)
 8008926:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800892a:	e6e1      	b.n	80086f0 <_dtoa_r+0x30>
 800892c:	2201      	movs	r2, #1
 800892e:	e7dd      	b.n	80088ec <_dtoa_r+0x22c>
 8008930:	2200      	movs	r2, #0
 8008932:	9207      	str	r2, [sp, #28]
 8008934:	9a08      	ldr	r2, [sp, #32]
 8008936:	eb0b 0a02 	add.w	sl, fp, r2
 800893a:	f10a 0901 	add.w	r9, sl, #1
 800893e:	464a      	mov	r2, r9
 8008940:	2a01      	cmp	r2, #1
 8008942:	bfb8      	it	lt
 8008944:	2201      	movlt	r2, #1
 8008946:	e7db      	b.n	8008900 <_dtoa_r+0x240>
 8008948:	2201      	movs	r2, #1
 800894a:	e7f2      	b.n	8008932 <_dtoa_r+0x272>
 800894c:	2401      	movs	r4, #1
 800894e:	2200      	movs	r2, #0
 8008950:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008954:	f04f 3aff 	mov.w	sl, #4294967295
 8008958:	2100      	movs	r1, #0
 800895a:	46d1      	mov	r9, sl
 800895c:	2212      	movs	r2, #18
 800895e:	9108      	str	r1, [sp, #32]
 8008960:	e7ce      	b.n	8008900 <_dtoa_r+0x240>
 8008962:	2201      	movs	r2, #1
 8008964:	9207      	str	r2, [sp, #28]
 8008966:	e7f5      	b.n	8008954 <_dtoa_r+0x294>
 8008968:	f8dd a020 	ldr.w	sl, [sp, #32]
 800896c:	46d1      	mov	r9, sl
 800896e:	4652      	mov	r2, sl
 8008970:	e7c6      	b.n	8008900 <_dtoa_r+0x240>
 8008972:	3101      	adds	r1, #1
 8008974:	6079      	str	r1, [r7, #4]
 8008976:	0040      	lsls	r0, r0, #1
 8008978:	e7c6      	b.n	8008908 <_dtoa_r+0x248>
 800897a:	bf00      	nop
 800897c:	f3af 8000 	nop.w
 8008980:	636f4361 	.word	0x636f4361
 8008984:	3fd287a7 	.word	0x3fd287a7
 8008988:	8b60c8b3 	.word	0x8b60c8b3
 800898c:	3fc68a28 	.word	0x3fc68a28
 8008990:	509f79fb 	.word	0x509f79fb
 8008994:	3fd34413 	.word	0x3fd34413
 8008998:	0800ab52 	.word	0x0800ab52
 800899c:	0800ab69 	.word	0x0800ab69
 80089a0:	7ff00000 	.word	0x7ff00000
 80089a4:	0800ab4e 	.word	0x0800ab4e
 80089a8:	0800ab45 	.word	0x0800ab45
 80089ac:	0800aa21 	.word	0x0800aa21
 80089b0:	0800ac60 	.word	0x0800ac60
 80089b4:	0800abc4 	.word	0x0800abc4
 80089b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80089ba:	9901      	ldr	r1, [sp, #4]
 80089bc:	6011      	str	r1, [r2, #0]
 80089be:	f1b9 0f0e 	cmp.w	r9, #14
 80089c2:	d86c      	bhi.n	8008a9e <_dtoa_r+0x3de>
 80089c4:	2c00      	cmp	r4, #0
 80089c6:	d06a      	beq.n	8008a9e <_dtoa_r+0x3de>
 80089c8:	f1bb 0f00 	cmp.w	fp, #0
 80089cc:	f340 80a0 	ble.w	8008b10 <_dtoa_r+0x450>
 80089d0:	49c1      	ldr	r1, [pc, #772]	; (8008cd8 <_dtoa_r+0x618>)
 80089d2:	f00b 020f 	and.w	r2, fp, #15
 80089d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80089da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80089de:	ed92 7b00 	vldr	d7, [r2]
 80089e2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80089e6:	f000 8087 	beq.w	8008af8 <_dtoa_r+0x438>
 80089ea:	4abc      	ldr	r2, [pc, #752]	; (8008cdc <_dtoa_r+0x61c>)
 80089ec:	ed92 6b08 	vldr	d6, [r2, #32]
 80089f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80089f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80089f8:	f001 010f 	and.w	r1, r1, #15
 80089fc:	2203      	movs	r2, #3
 80089fe:	48b7      	ldr	r0, [pc, #732]	; (8008cdc <_dtoa_r+0x61c>)
 8008a00:	2900      	cmp	r1, #0
 8008a02:	d17b      	bne.n	8008afc <_dtoa_r+0x43c>
 8008a04:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a12:	2900      	cmp	r1, #0
 8008a14:	f000 80a2 	beq.w	8008b5c <_dtoa_r+0x49c>
 8008a18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008a1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a28:	f140 8098 	bpl.w	8008b5c <_dtoa_r+0x49c>
 8008a2c:	f1b9 0f00 	cmp.w	r9, #0
 8008a30:	f000 8094 	beq.w	8008b5c <_dtoa_r+0x49c>
 8008a34:	f1ba 0f00 	cmp.w	sl, #0
 8008a38:	dd2f      	ble.n	8008a9a <_dtoa_r+0x3da>
 8008a3a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a42:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a46:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a4a:	3201      	adds	r2, #1
 8008a4c:	4650      	mov	r0, sl
 8008a4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a52:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008a56:	ee07 2a90 	vmov	s15, r2
 8008a5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a5e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008a62:	ee15 4a90 	vmov	r4, s11
 8008a66:	ec52 1b15 	vmov	r1, r2, d5
 8008a6a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d177      	bne.n	8008b62 <_dtoa_r+0x4a2>
 8008a72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a76:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008a7a:	ec42 1b17 	vmov	d7, r1, r2
 8008a7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a86:	f300 8263 	bgt.w	8008f50 <_dtoa_r+0x890>
 8008a8a:	eeb1 7b47 	vneg.f64	d7, d7
 8008a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a96:	f100 8258 	bmi.w	8008f4a <_dtoa_r+0x88a>
 8008a9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aa0:	2a00      	cmp	r2, #0
 8008aa2:	f2c0 811d 	blt.w	8008ce0 <_dtoa_r+0x620>
 8008aa6:	f1bb 0f0e 	cmp.w	fp, #14
 8008aaa:	f300 8119 	bgt.w	8008ce0 <_dtoa_r+0x620>
 8008aae:	4b8a      	ldr	r3, [pc, #552]	; (8008cd8 <_dtoa_r+0x618>)
 8008ab0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ab4:	ed93 6b00 	vldr	d6, [r3]
 8008ab8:	9b08      	ldr	r3, [sp, #32]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f280 80b7 	bge.w	8008c2e <_dtoa_r+0x56e>
 8008ac0:	f1b9 0f00 	cmp.w	r9, #0
 8008ac4:	f300 80b3 	bgt.w	8008c2e <_dtoa_r+0x56e>
 8008ac8:	f040 823f 	bne.w	8008f4a <_dtoa_r+0x88a>
 8008acc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008ad0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008ad4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ad8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae0:	464c      	mov	r4, r9
 8008ae2:	464f      	mov	r7, r9
 8008ae4:	f280 8215 	bge.w	8008f12 <_dtoa_r+0x852>
 8008ae8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008aec:	2331      	movs	r3, #49	; 0x31
 8008aee:	f808 3b01 	strb.w	r3, [r8], #1
 8008af2:	f10b 0b01 	add.w	fp, fp, #1
 8008af6:	e211      	b.n	8008f1c <_dtoa_r+0x85c>
 8008af8:	2202      	movs	r2, #2
 8008afa:	e780      	b.n	80089fe <_dtoa_r+0x33e>
 8008afc:	07cc      	lsls	r4, r1, #31
 8008afe:	d504      	bpl.n	8008b0a <_dtoa_r+0x44a>
 8008b00:	ed90 6b00 	vldr	d6, [r0]
 8008b04:	3201      	adds	r2, #1
 8008b06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b0a:	1049      	asrs	r1, r1, #1
 8008b0c:	3008      	adds	r0, #8
 8008b0e:	e777      	b.n	8008a00 <_dtoa_r+0x340>
 8008b10:	d022      	beq.n	8008b58 <_dtoa_r+0x498>
 8008b12:	f1cb 0100 	rsb	r1, fp, #0
 8008b16:	4a70      	ldr	r2, [pc, #448]	; (8008cd8 <_dtoa_r+0x618>)
 8008b18:	f001 000f 	and.w	r0, r1, #15
 8008b1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b20:	ed92 7b00 	vldr	d7, [r2]
 8008b24:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008b28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b2c:	486b      	ldr	r0, [pc, #428]	; (8008cdc <_dtoa_r+0x61c>)
 8008b2e:	1109      	asrs	r1, r1, #4
 8008b30:	2400      	movs	r4, #0
 8008b32:	2202      	movs	r2, #2
 8008b34:	b929      	cbnz	r1, 8008b42 <_dtoa_r+0x482>
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	f43f af6a 	beq.w	8008a10 <_dtoa_r+0x350>
 8008b3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b40:	e766      	b.n	8008a10 <_dtoa_r+0x350>
 8008b42:	07cf      	lsls	r7, r1, #31
 8008b44:	d505      	bpl.n	8008b52 <_dtoa_r+0x492>
 8008b46:	ed90 6b00 	vldr	d6, [r0]
 8008b4a:	3201      	adds	r2, #1
 8008b4c:	2401      	movs	r4, #1
 8008b4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b52:	1049      	asrs	r1, r1, #1
 8008b54:	3008      	adds	r0, #8
 8008b56:	e7ed      	b.n	8008b34 <_dtoa_r+0x474>
 8008b58:	2202      	movs	r2, #2
 8008b5a:	e759      	b.n	8008a10 <_dtoa_r+0x350>
 8008b5c:	465f      	mov	r7, fp
 8008b5e:	4648      	mov	r0, r9
 8008b60:	e775      	b.n	8008a4e <_dtoa_r+0x38e>
 8008b62:	ec42 1b17 	vmov	d7, r1, r2
 8008b66:	4a5c      	ldr	r2, [pc, #368]	; (8008cd8 <_dtoa_r+0x618>)
 8008b68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b6c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008b70:	9a01      	ldr	r2, [sp, #4]
 8008b72:	1814      	adds	r4, r2, r0
 8008b74:	9a07      	ldr	r2, [sp, #28]
 8008b76:	b352      	cbz	r2, 8008bce <_dtoa_r+0x50e>
 8008b78:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008b7c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008b80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b84:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008b88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008b8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008b90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008b94:	ee14 2a90 	vmov	r2, s9
 8008b98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008b9c:	3230      	adds	r2, #48	; 0x30
 8008b9e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ba2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008baa:	f808 2b01 	strb.w	r2, [r8], #1
 8008bae:	d439      	bmi.n	8008c24 <_dtoa_r+0x564>
 8008bb0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008bb4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bbc:	d472      	bmi.n	8008ca4 <_dtoa_r+0x5e4>
 8008bbe:	45a0      	cmp	r8, r4
 8008bc0:	f43f af6b 	beq.w	8008a9a <_dtoa_r+0x3da>
 8008bc4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008bc8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008bcc:	e7e0      	b.n	8008b90 <_dtoa_r+0x4d0>
 8008bce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008bd2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008bdc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008be0:	ee14 2a90 	vmov	r2, s9
 8008be4:	3230      	adds	r2, #48	; 0x30
 8008be6:	f808 2b01 	strb.w	r2, [r8], #1
 8008bea:	45a0      	cmp	r8, r4
 8008bec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008bf0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008bf4:	d118      	bne.n	8008c28 <_dtoa_r+0x568>
 8008bf6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008bfa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008bfe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c06:	dc4d      	bgt.n	8008ca4 <_dtoa_r+0x5e4>
 8008c08:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008c0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c14:	f57f af41 	bpl.w	8008a9a <_dtoa_r+0x3da>
 8008c18:	4688      	mov	r8, r1
 8008c1a:	3901      	subs	r1, #1
 8008c1c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008c20:	2b30      	cmp	r3, #48	; 0x30
 8008c22:	d0f9      	beq.n	8008c18 <_dtoa_r+0x558>
 8008c24:	46bb      	mov	fp, r7
 8008c26:	e02a      	b.n	8008c7e <_dtoa_r+0x5be>
 8008c28:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008c2c:	e7d6      	b.n	8008bdc <_dtoa_r+0x51c>
 8008c2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c32:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008c36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c3a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008c3e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008c42:	ee15 3a10 	vmov	r3, s10
 8008c46:	3330      	adds	r3, #48	; 0x30
 8008c48:	f808 3b01 	strb.w	r3, [r8], #1
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	eba8 0303 	sub.w	r3, r8, r3
 8008c52:	4599      	cmp	r9, r3
 8008c54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008c58:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008c5c:	d133      	bne.n	8008cc6 <_dtoa_r+0x606>
 8008c5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008c62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6a:	dc1a      	bgt.n	8008ca2 <_dtoa_r+0x5e2>
 8008c6c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c74:	d103      	bne.n	8008c7e <_dtoa_r+0x5be>
 8008c76:	ee15 3a10 	vmov	r3, s10
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	d411      	bmi.n	8008ca2 <_dtoa_r+0x5e2>
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 fae5 	bl	8009250 <_Bfree>
 8008c86:	2300      	movs	r3, #0
 8008c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c8a:	f888 3000 	strb.w	r3, [r8]
 8008c8e:	f10b 0301 	add.w	r3, fp, #1
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f43f ad61 	beq.w	800875e <_dtoa_r+0x9e>
 8008c9c:	f8c3 8000 	str.w	r8, [r3]
 8008ca0:	e55d      	b.n	800875e <_dtoa_r+0x9e>
 8008ca2:	465f      	mov	r7, fp
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	4698      	mov	r8, r3
 8008ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cac:	2a39      	cmp	r2, #57	; 0x39
 8008cae:	d106      	bne.n	8008cbe <_dtoa_r+0x5fe>
 8008cb0:	9a01      	ldr	r2, [sp, #4]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d1f7      	bne.n	8008ca6 <_dtoa_r+0x5e6>
 8008cb6:	9901      	ldr	r1, [sp, #4]
 8008cb8:	2230      	movs	r2, #48	; 0x30
 8008cba:	3701      	adds	r7, #1
 8008cbc:	700a      	strb	r2, [r1, #0]
 8008cbe:	781a      	ldrb	r2, [r3, #0]
 8008cc0:	3201      	adds	r2, #1
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	e7ae      	b.n	8008c24 <_dtoa_r+0x564>
 8008cc6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008cca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd2:	d1b2      	bne.n	8008c3a <_dtoa_r+0x57a>
 8008cd4:	e7d3      	b.n	8008c7e <_dtoa_r+0x5be>
 8008cd6:	bf00      	nop
 8008cd8:	0800ac60 	.word	0x0800ac60
 8008cdc:	0800ac38 	.word	0x0800ac38
 8008ce0:	9907      	ldr	r1, [sp, #28]
 8008ce2:	2900      	cmp	r1, #0
 8008ce4:	f000 80d0 	beq.w	8008e88 <_dtoa_r+0x7c8>
 8008ce8:	9906      	ldr	r1, [sp, #24]
 8008cea:	2901      	cmp	r1, #1
 8008cec:	f300 80b4 	bgt.w	8008e58 <_dtoa_r+0x798>
 8008cf0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cf2:	2900      	cmp	r1, #0
 8008cf4:	f000 80ac 	beq.w	8008e50 <_dtoa_r+0x790>
 8008cf8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008cfc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008d00:	461c      	mov	r4, r3
 8008d02:	930a      	str	r3, [sp, #40]	; 0x28
 8008d04:	9b04      	ldr	r3, [sp, #16]
 8008d06:	4413      	add	r3, r2
 8008d08:	9304      	str	r3, [sp, #16]
 8008d0a:	9b05      	ldr	r3, [sp, #20]
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	4413      	add	r3, r2
 8008d10:	4630      	mov	r0, r6
 8008d12:	9305      	str	r3, [sp, #20]
 8008d14:	f000 fb54 	bl	80093c0 <__i2b>
 8008d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	f1b8 0f00 	cmp.w	r8, #0
 8008d20:	dd0d      	ble.n	8008d3e <_dtoa_r+0x67e>
 8008d22:	9a05      	ldr	r2, [sp, #20]
 8008d24:	2a00      	cmp	r2, #0
 8008d26:	dd0a      	ble.n	8008d3e <_dtoa_r+0x67e>
 8008d28:	4542      	cmp	r2, r8
 8008d2a:	9904      	ldr	r1, [sp, #16]
 8008d2c:	bfa8      	it	ge
 8008d2e:	4642      	movge	r2, r8
 8008d30:	1a89      	subs	r1, r1, r2
 8008d32:	9104      	str	r1, [sp, #16]
 8008d34:	9905      	ldr	r1, [sp, #20]
 8008d36:	eba8 0802 	sub.w	r8, r8, r2
 8008d3a:	1a8a      	subs	r2, r1, r2
 8008d3c:	9205      	str	r2, [sp, #20]
 8008d3e:	b303      	cbz	r3, 8008d82 <_dtoa_r+0x6c2>
 8008d40:	9a07      	ldr	r2, [sp, #28]
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	f000 80a5 	beq.w	8008e92 <_dtoa_r+0x7d2>
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	dd13      	ble.n	8008d74 <_dtoa_r+0x6b4>
 8008d4c:	4639      	mov	r1, r7
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4630      	mov	r0, r6
 8008d52:	930d      	str	r3, [sp, #52]	; 0x34
 8008d54:	f000 fbf4 	bl	8009540 <__pow5mult>
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 fb44 	bl	80093ec <__multiply>
 8008d64:	4629      	mov	r1, r5
 8008d66:	900a      	str	r0, [sp, #40]	; 0x28
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f000 fa71 	bl	8009250 <_Bfree>
 8008d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d72:	4615      	mov	r5, r2
 8008d74:	1b1a      	subs	r2, r3, r4
 8008d76:	d004      	beq.n	8008d82 <_dtoa_r+0x6c2>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 fbe0 	bl	8009540 <__pow5mult>
 8008d80:	4605      	mov	r5, r0
 8008d82:	2101      	movs	r1, #1
 8008d84:	4630      	mov	r0, r6
 8008d86:	f000 fb1b 	bl	80093c0 <__i2b>
 8008d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	4604      	mov	r4, r0
 8008d90:	f340 8081 	ble.w	8008e96 <_dtoa_r+0x7d6>
 8008d94:	461a      	mov	r2, r3
 8008d96:	4601      	mov	r1, r0
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f000 fbd1 	bl	8009540 <__pow5mult>
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	4604      	mov	r4, r0
 8008da4:	dd7a      	ble.n	8008e9c <_dtoa_r+0x7dc>
 8008da6:	2300      	movs	r3, #0
 8008da8:	930a      	str	r3, [sp, #40]	; 0x28
 8008daa:	6922      	ldr	r2, [r4, #16]
 8008dac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008db0:	6910      	ldr	r0, [r2, #16]
 8008db2:	f000 fab5 	bl	8009320 <__hi0bits>
 8008db6:	f1c0 0020 	rsb	r0, r0, #32
 8008dba:	9b05      	ldr	r3, [sp, #20]
 8008dbc:	4418      	add	r0, r3
 8008dbe:	f010 001f 	ands.w	r0, r0, #31
 8008dc2:	f000 808c 	beq.w	8008ede <_dtoa_r+0x81e>
 8008dc6:	f1c0 0220 	rsb	r2, r0, #32
 8008dca:	2a04      	cmp	r2, #4
 8008dcc:	f340 8085 	ble.w	8008eda <_dtoa_r+0x81a>
 8008dd0:	f1c0 001c 	rsb	r0, r0, #28
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	4403      	add	r3, r0
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	9b05      	ldr	r3, [sp, #20]
 8008ddc:	4403      	add	r3, r0
 8008dde:	4480      	add	r8, r0
 8008de0:	9305      	str	r3, [sp, #20]
 8008de2:	9b04      	ldr	r3, [sp, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd05      	ble.n	8008df4 <_dtoa_r+0x734>
 8008de8:	4629      	mov	r1, r5
 8008dea:	461a      	mov	r2, r3
 8008dec:	4630      	mov	r0, r6
 8008dee:	f000 fc01 	bl	80095f4 <__lshift>
 8008df2:	4605      	mov	r5, r0
 8008df4:	9b05      	ldr	r3, [sp, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	dd05      	ble.n	8008e06 <_dtoa_r+0x746>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f000 fbf8 	bl	80095f4 <__lshift>
 8008e04:	4604      	mov	r4, r0
 8008e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d06a      	beq.n	8008ee2 <_dtoa_r+0x822>
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f000 fc60 	bl	80096d4 <__mcmp>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	da64      	bge.n	8008ee2 <_dtoa_r+0x822>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	220a      	movs	r2, #10
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f000 fa38 	bl	8009294 <__multadd>
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 8191 	beq.w	8009154 <_dtoa_r+0xa94>
 8008e32:	4639      	mov	r1, r7
 8008e34:	2300      	movs	r3, #0
 8008e36:	220a      	movs	r2, #10
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 fa2b 	bl	8009294 <__multadd>
 8008e3e:	f1ba 0f00 	cmp.w	sl, #0
 8008e42:	4607      	mov	r7, r0
 8008e44:	f300 808d 	bgt.w	8008f62 <_dtoa_r+0x8a2>
 8008e48:	9b06      	ldr	r3, [sp, #24]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	dc50      	bgt.n	8008ef0 <_dtoa_r+0x830>
 8008e4e:	e088      	b.n	8008f62 <_dtoa_r+0x8a2>
 8008e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e56:	e751      	b.n	8008cfc <_dtoa_r+0x63c>
 8008e58:	f109 34ff 	add.w	r4, r9, #4294967295
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	bfbf      	itttt	lt
 8008e60:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008e62:	1ae3      	sublt	r3, r4, r3
 8008e64:	18d2      	addlt	r2, r2, r3
 8008e66:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008e68:	bfb6      	itet	lt
 8008e6a:	4623      	movlt	r3, r4
 8008e6c:	1b1c      	subge	r4, r3, r4
 8008e6e:	2400      	movlt	r4, #0
 8008e70:	f1b9 0f00 	cmp.w	r9, #0
 8008e74:	bfb5      	itete	lt
 8008e76:	9a04      	ldrlt	r2, [sp, #16]
 8008e78:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008e7c:	eba2 0809 	sublt.w	r8, r2, r9
 8008e80:	464a      	movge	r2, r9
 8008e82:	bfb8      	it	lt
 8008e84:	2200      	movlt	r2, #0
 8008e86:	e73c      	b.n	8008d02 <_dtoa_r+0x642>
 8008e88:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008e8c:	9f07      	ldr	r7, [sp, #28]
 8008e8e:	461c      	mov	r4, r3
 8008e90:	e744      	b.n	8008d1c <_dtoa_r+0x65c>
 8008e92:	461a      	mov	r2, r3
 8008e94:	e770      	b.n	8008d78 <_dtoa_r+0x6b8>
 8008e96:	9b06      	ldr	r3, [sp, #24]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	dc18      	bgt.n	8008ece <_dtoa_r+0x80e>
 8008e9c:	9b02      	ldr	r3, [sp, #8]
 8008e9e:	b9b3      	cbnz	r3, 8008ece <_dtoa_r+0x80e>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008ea6:	b9a2      	cbnz	r2, 8008ed2 <_dtoa_r+0x812>
 8008ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008eac:	0d12      	lsrs	r2, r2, #20
 8008eae:	0512      	lsls	r2, r2, #20
 8008eb0:	b18a      	cbz	r2, 8008ed6 <_dtoa_r+0x816>
 8008eb2:	9b04      	ldr	r3, [sp, #16]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	9304      	str	r3, [sp, #16]
 8008eb8:	9b05      	ldr	r3, [sp, #20]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f47f af70 	bne.w	8008daa <_dtoa_r+0x6ea>
 8008eca:	2001      	movs	r0, #1
 8008ecc:	e775      	b.n	8008dba <_dtoa_r+0x6fa>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e7f6      	b.n	8008ec0 <_dtoa_r+0x800>
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	e7f4      	b.n	8008ec0 <_dtoa_r+0x800>
 8008ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ed8:	e7f3      	b.n	8008ec2 <_dtoa_r+0x802>
 8008eda:	d082      	beq.n	8008de2 <_dtoa_r+0x722>
 8008edc:	4610      	mov	r0, r2
 8008ede:	301c      	adds	r0, #28
 8008ee0:	e778      	b.n	8008dd4 <_dtoa_r+0x714>
 8008ee2:	f1b9 0f00 	cmp.w	r9, #0
 8008ee6:	dc37      	bgt.n	8008f58 <_dtoa_r+0x898>
 8008ee8:	9b06      	ldr	r3, [sp, #24]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	dd34      	ble.n	8008f58 <_dtoa_r+0x898>
 8008eee:	46ca      	mov	sl, r9
 8008ef0:	f1ba 0f00 	cmp.w	sl, #0
 8008ef4:	d10d      	bne.n	8008f12 <_dtoa_r+0x852>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4653      	mov	r3, sl
 8008efa:	2205      	movs	r2, #5
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 f9c9 	bl	8009294 <__multadd>
 8008f02:	4601      	mov	r1, r0
 8008f04:	4604      	mov	r4, r0
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 fbe4 	bl	80096d4 <__mcmp>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f73f adeb 	bgt.w	8008ae8 <_dtoa_r+0x428>
 8008f12:	9b08      	ldr	r3, [sp, #32]
 8008f14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f18:	ea6f 0b03 	mvn.w	fp, r3
 8008f1c:	f04f 0900 	mov.w	r9, #0
 8008f20:	4621      	mov	r1, r4
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f994 	bl	8009250 <_Bfree>
 8008f28:	2f00      	cmp	r7, #0
 8008f2a:	f43f aea8 	beq.w	8008c7e <_dtoa_r+0x5be>
 8008f2e:	f1b9 0f00 	cmp.w	r9, #0
 8008f32:	d005      	beq.n	8008f40 <_dtoa_r+0x880>
 8008f34:	45b9      	cmp	r9, r7
 8008f36:	d003      	beq.n	8008f40 <_dtoa_r+0x880>
 8008f38:	4649      	mov	r1, r9
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f000 f988 	bl	8009250 <_Bfree>
 8008f40:	4639      	mov	r1, r7
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 f984 	bl	8009250 <_Bfree>
 8008f48:	e699      	b.n	8008c7e <_dtoa_r+0x5be>
 8008f4a:	2400      	movs	r4, #0
 8008f4c:	4627      	mov	r7, r4
 8008f4e:	e7e0      	b.n	8008f12 <_dtoa_r+0x852>
 8008f50:	46bb      	mov	fp, r7
 8008f52:	4604      	mov	r4, r0
 8008f54:	4607      	mov	r7, r0
 8008f56:	e5c7      	b.n	8008ae8 <_dtoa_r+0x428>
 8008f58:	9b07      	ldr	r3, [sp, #28]
 8008f5a:	46ca      	mov	sl, r9
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8100 	beq.w	8009162 <_dtoa_r+0xaa2>
 8008f62:	f1b8 0f00 	cmp.w	r8, #0
 8008f66:	dd05      	ble.n	8008f74 <_dtoa_r+0x8b4>
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4642      	mov	r2, r8
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f000 fb41 	bl	80095f4 <__lshift>
 8008f72:	4607      	mov	r7, r0
 8008f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d05d      	beq.n	8009036 <_dtoa_r+0x976>
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f000 f927 	bl	80091d0 <_Balloc>
 8008f82:	4680      	mov	r8, r0
 8008f84:	b928      	cbnz	r0, 8008f92 <_dtoa_r+0x8d2>
 8008f86:	4b82      	ldr	r3, [pc, #520]	; (8009190 <_dtoa_r+0xad0>)
 8008f88:	4602      	mov	r2, r0
 8008f8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f8e:	f7ff bbaf 	b.w	80086f0 <_dtoa_r+0x30>
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	3202      	adds	r2, #2
 8008f96:	0092      	lsls	r2, r2, #2
 8008f98:	f107 010c 	add.w	r1, r7, #12
 8008f9c:	300c      	adds	r0, #12
 8008f9e:	f000 f909 	bl	80091b4 <memcpy>
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	4641      	mov	r1, r8
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f000 fb24 	bl	80095f4 <__lshift>
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	4453      	add	r3, sl
 8008fb6:	9308      	str	r3, [sp, #32]
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	46b9      	mov	r9, r7
 8008fc0:	9307      	str	r3, [sp, #28]
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	4628      	mov	r0, r5
 8008fcc:	9302      	str	r3, [sp, #8]
 8008fce:	f7ff fae9 	bl	80085a4 <quorem>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	3330      	adds	r3, #48	; 0x30
 8008fd6:	9005      	str	r0, [sp, #20]
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4628      	mov	r0, r5
 8008fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008fde:	f000 fb79 	bl	80096d4 <__mcmp>
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 fb8f 	bl	800970c <__mdiff>
 8008fee:	68c2      	ldr	r2, [r0, #12]
 8008ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	bb0a      	cbnz	r2, 800903a <_dtoa_r+0x97a>
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f000 fb6b 	bl	80096d4 <__mcmp>
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	4602      	mov	r2, r0
 8009002:	4641      	mov	r1, r8
 8009004:	4630      	mov	r0, r6
 8009006:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800900a:	f000 f921 	bl	8009250 <_Bfree>
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009012:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009016:	ea43 0102 	orr.w	r1, r3, r2
 800901a:	9b07      	ldr	r3, [sp, #28]
 800901c:	430b      	orrs	r3, r1
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	d10d      	bne.n	800903e <_dtoa_r+0x97e>
 8009022:	2b39      	cmp	r3, #57	; 0x39
 8009024:	d029      	beq.n	800907a <_dtoa_r+0x9ba>
 8009026:	f1ba 0f00 	cmp.w	sl, #0
 800902a:	dd01      	ble.n	8009030 <_dtoa_r+0x970>
 800902c:	9b05      	ldr	r3, [sp, #20]
 800902e:	3331      	adds	r3, #49	; 0x31
 8009030:	9a02      	ldr	r2, [sp, #8]
 8009032:	7013      	strb	r3, [r2, #0]
 8009034:	e774      	b.n	8008f20 <_dtoa_r+0x860>
 8009036:	4638      	mov	r0, r7
 8009038:	e7b8      	b.n	8008fac <_dtoa_r+0x8ec>
 800903a:	2201      	movs	r2, #1
 800903c:	e7e1      	b.n	8009002 <_dtoa_r+0x942>
 800903e:	f1ba 0f00 	cmp.w	sl, #0
 8009042:	db06      	blt.n	8009052 <_dtoa_r+0x992>
 8009044:	9906      	ldr	r1, [sp, #24]
 8009046:	ea41 0a0a 	orr.w	sl, r1, sl
 800904a:	9907      	ldr	r1, [sp, #28]
 800904c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009050:	d120      	bne.n	8009094 <_dtoa_r+0x9d4>
 8009052:	2a00      	cmp	r2, #0
 8009054:	ddec      	ble.n	8009030 <_dtoa_r+0x970>
 8009056:	4629      	mov	r1, r5
 8009058:	2201      	movs	r2, #1
 800905a:	4630      	mov	r0, r6
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	f000 fac9 	bl	80095f4 <__lshift>
 8009062:	4621      	mov	r1, r4
 8009064:	4605      	mov	r5, r0
 8009066:	f000 fb35 	bl	80096d4 <__mcmp>
 800906a:	2800      	cmp	r0, #0
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	dc02      	bgt.n	8009076 <_dtoa_r+0x9b6>
 8009070:	d1de      	bne.n	8009030 <_dtoa_r+0x970>
 8009072:	07da      	lsls	r2, r3, #31
 8009074:	d5dc      	bpl.n	8009030 <_dtoa_r+0x970>
 8009076:	2b39      	cmp	r3, #57	; 0x39
 8009078:	d1d8      	bne.n	800902c <_dtoa_r+0x96c>
 800907a:	9a02      	ldr	r2, [sp, #8]
 800907c:	2339      	movs	r3, #57	; 0x39
 800907e:	7013      	strb	r3, [r2, #0]
 8009080:	4643      	mov	r3, r8
 8009082:	4698      	mov	r8, r3
 8009084:	3b01      	subs	r3, #1
 8009086:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800908a:	2a39      	cmp	r2, #57	; 0x39
 800908c:	d051      	beq.n	8009132 <_dtoa_r+0xa72>
 800908e:	3201      	adds	r2, #1
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e745      	b.n	8008f20 <_dtoa_r+0x860>
 8009094:	2a00      	cmp	r2, #0
 8009096:	dd03      	ble.n	80090a0 <_dtoa_r+0x9e0>
 8009098:	2b39      	cmp	r3, #57	; 0x39
 800909a:	d0ee      	beq.n	800907a <_dtoa_r+0x9ba>
 800909c:	3301      	adds	r3, #1
 800909e:	e7c7      	b.n	8009030 <_dtoa_r+0x970>
 80090a0:	9a04      	ldr	r2, [sp, #16]
 80090a2:	9908      	ldr	r1, [sp, #32]
 80090a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80090a8:	428a      	cmp	r2, r1
 80090aa:	d02b      	beq.n	8009104 <_dtoa_r+0xa44>
 80090ac:	4629      	mov	r1, r5
 80090ae:	2300      	movs	r3, #0
 80090b0:	220a      	movs	r2, #10
 80090b2:	4630      	mov	r0, r6
 80090b4:	f000 f8ee 	bl	8009294 <__multadd>
 80090b8:	45b9      	cmp	r9, r7
 80090ba:	4605      	mov	r5, r0
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	f04f 020a 	mov.w	r2, #10
 80090c4:	4649      	mov	r1, r9
 80090c6:	4630      	mov	r0, r6
 80090c8:	d107      	bne.n	80090da <_dtoa_r+0xa1a>
 80090ca:	f000 f8e3 	bl	8009294 <__multadd>
 80090ce:	4681      	mov	r9, r0
 80090d0:	4607      	mov	r7, r0
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	3301      	adds	r3, #1
 80090d6:	9304      	str	r3, [sp, #16]
 80090d8:	e774      	b.n	8008fc4 <_dtoa_r+0x904>
 80090da:	f000 f8db 	bl	8009294 <__multadd>
 80090de:	4639      	mov	r1, r7
 80090e0:	4681      	mov	r9, r0
 80090e2:	2300      	movs	r3, #0
 80090e4:	220a      	movs	r2, #10
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 f8d4 	bl	8009294 <__multadd>
 80090ec:	4607      	mov	r7, r0
 80090ee:	e7f0      	b.n	80090d2 <_dtoa_r+0xa12>
 80090f0:	f1ba 0f00 	cmp.w	sl, #0
 80090f4:	9a01      	ldr	r2, [sp, #4]
 80090f6:	bfcc      	ite	gt
 80090f8:	46d0      	movgt	r8, sl
 80090fa:	f04f 0801 	movle.w	r8, #1
 80090fe:	4490      	add	r8, r2
 8009100:	f04f 0900 	mov.w	r9, #0
 8009104:	4629      	mov	r1, r5
 8009106:	2201      	movs	r2, #1
 8009108:	4630      	mov	r0, r6
 800910a:	9302      	str	r3, [sp, #8]
 800910c:	f000 fa72 	bl	80095f4 <__lshift>
 8009110:	4621      	mov	r1, r4
 8009112:	4605      	mov	r5, r0
 8009114:	f000 fade 	bl	80096d4 <__mcmp>
 8009118:	2800      	cmp	r0, #0
 800911a:	dcb1      	bgt.n	8009080 <_dtoa_r+0x9c0>
 800911c:	d102      	bne.n	8009124 <_dtoa_r+0xa64>
 800911e:	9b02      	ldr	r3, [sp, #8]
 8009120:	07db      	lsls	r3, r3, #31
 8009122:	d4ad      	bmi.n	8009080 <_dtoa_r+0x9c0>
 8009124:	4643      	mov	r3, r8
 8009126:	4698      	mov	r8, r3
 8009128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800912c:	2a30      	cmp	r2, #48	; 0x30
 800912e:	d0fa      	beq.n	8009126 <_dtoa_r+0xa66>
 8009130:	e6f6      	b.n	8008f20 <_dtoa_r+0x860>
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	d1a4      	bne.n	8009082 <_dtoa_r+0x9c2>
 8009138:	f10b 0b01 	add.w	fp, fp, #1
 800913c:	2331      	movs	r3, #49	; 0x31
 800913e:	e778      	b.n	8009032 <_dtoa_r+0x972>
 8009140:	4b14      	ldr	r3, [pc, #80]	; (8009194 <_dtoa_r+0xad4>)
 8009142:	f7ff bb27 	b.w	8008794 <_dtoa_r+0xd4>
 8009146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009148:	2b00      	cmp	r3, #0
 800914a:	f47f ab03 	bne.w	8008754 <_dtoa_r+0x94>
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <_dtoa_r+0xad8>)
 8009150:	f7ff bb20 	b.w	8008794 <_dtoa_r+0xd4>
 8009154:	f1ba 0f00 	cmp.w	sl, #0
 8009158:	dc03      	bgt.n	8009162 <_dtoa_r+0xaa2>
 800915a:	9b06      	ldr	r3, [sp, #24]
 800915c:	2b02      	cmp	r3, #2
 800915e:	f73f aec7 	bgt.w	8008ef0 <_dtoa_r+0x830>
 8009162:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f7ff fa1b 	bl	80085a4 <quorem>
 800916e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009172:	f808 3b01 	strb.w	r3, [r8], #1
 8009176:	9a01      	ldr	r2, [sp, #4]
 8009178:	eba8 0202 	sub.w	r2, r8, r2
 800917c:	4592      	cmp	sl, r2
 800917e:	ddb7      	ble.n	80090f0 <_dtoa_r+0xa30>
 8009180:	4629      	mov	r1, r5
 8009182:	2300      	movs	r3, #0
 8009184:	220a      	movs	r2, #10
 8009186:	4630      	mov	r0, r6
 8009188:	f000 f884 	bl	8009294 <__multadd>
 800918c:	4605      	mov	r5, r0
 800918e:	e7ea      	b.n	8009166 <_dtoa_r+0xaa6>
 8009190:	0800abc4 	.word	0x0800abc4
 8009194:	0800aa20 	.word	0x0800aa20
 8009198:	0800ab45 	.word	0x0800ab45

0800919c <_localeconv_r>:
 800919c:	4800      	ldr	r0, [pc, #0]	; (80091a0 <_localeconv_r+0x4>)
 800919e:	4770      	bx	lr
 80091a0:	2000017c 	.word	0x2000017c

080091a4 <malloc>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <malloc+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f000 bc17 	b.w	80099dc <_malloc_r>
 80091ae:	bf00      	nop
 80091b0:	20000028 	.word	0x20000028

080091b4 <memcpy>:
 80091b4:	440a      	add	r2, r1
 80091b6:	4291      	cmp	r1, r2
 80091b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091bc:	d100      	bne.n	80091c0 <memcpy+0xc>
 80091be:	4770      	bx	lr
 80091c0:	b510      	push	{r4, lr}
 80091c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ca:	4291      	cmp	r1, r2
 80091cc:	d1f9      	bne.n	80091c2 <memcpy+0xe>
 80091ce:	bd10      	pop	{r4, pc}

080091d0 <_Balloc>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091d4:	4604      	mov	r4, r0
 80091d6:	460d      	mov	r5, r1
 80091d8:	b976      	cbnz	r6, 80091f8 <_Balloc+0x28>
 80091da:	2010      	movs	r0, #16
 80091dc:	f7ff ffe2 	bl	80091a4 <malloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6260      	str	r0, [r4, #36]	; 0x24
 80091e4:	b920      	cbnz	r0, 80091f0 <_Balloc+0x20>
 80091e6:	4b18      	ldr	r3, [pc, #96]	; (8009248 <_Balloc+0x78>)
 80091e8:	4818      	ldr	r0, [pc, #96]	; (800924c <_Balloc+0x7c>)
 80091ea:	2166      	movs	r1, #102	; 0x66
 80091ec:	f000 fdd6 	bl	8009d9c <__assert_func>
 80091f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091f4:	6006      	str	r6, [r0, #0]
 80091f6:	60c6      	str	r6, [r0, #12]
 80091f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091fa:	68f3      	ldr	r3, [r6, #12]
 80091fc:	b183      	cbz	r3, 8009220 <_Balloc+0x50>
 80091fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009206:	b9b8      	cbnz	r0, 8009238 <_Balloc+0x68>
 8009208:	2101      	movs	r1, #1
 800920a:	fa01 f605 	lsl.w	r6, r1, r5
 800920e:	1d72      	adds	r2, r6, #5
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fb60 	bl	80098d8 <_calloc_r>
 8009218:	b160      	cbz	r0, 8009234 <_Balloc+0x64>
 800921a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800921e:	e00e      	b.n	800923e <_Balloc+0x6e>
 8009220:	2221      	movs	r2, #33	; 0x21
 8009222:	2104      	movs	r1, #4
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fb57 	bl	80098d8 <_calloc_r>
 800922a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800922c:	60f0      	str	r0, [r6, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e4      	bne.n	80091fe <_Balloc+0x2e>
 8009234:	2000      	movs	r0, #0
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	6802      	ldr	r2, [r0, #0]
 800923a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800923e:	2300      	movs	r3, #0
 8009240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009244:	e7f7      	b.n	8009236 <_Balloc+0x66>
 8009246:	bf00      	nop
 8009248:	0800ab52 	.word	0x0800ab52
 800924c:	0800abd5 	.word	0x0800abd5

08009250 <_Bfree>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b976      	cbnz	r6, 8009278 <_Bfree+0x28>
 800925a:	2010      	movs	r0, #16
 800925c:	f7ff ffa2 	bl	80091a4 <malloc>
 8009260:	4602      	mov	r2, r0
 8009262:	6268      	str	r0, [r5, #36]	; 0x24
 8009264:	b920      	cbnz	r0, 8009270 <_Bfree+0x20>
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <_Bfree+0x3c>)
 8009268:	4809      	ldr	r0, [pc, #36]	; (8009290 <_Bfree+0x40>)
 800926a:	218a      	movs	r1, #138	; 0x8a
 800926c:	f000 fd96 	bl	8009d9c <__assert_func>
 8009270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009274:	6006      	str	r6, [r0, #0]
 8009276:	60c6      	str	r6, [r0, #12]
 8009278:	b13c      	cbz	r4, 800928a <_Bfree+0x3a>
 800927a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800927c:	6862      	ldr	r2, [r4, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009284:	6021      	str	r1, [r4, #0]
 8009286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	0800ab52 	.word	0x0800ab52
 8009290:	0800abd5 	.word	0x0800abd5

08009294 <__multadd>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	690d      	ldr	r5, [r1, #16]
 800929a:	4607      	mov	r7, r0
 800929c:	460c      	mov	r4, r1
 800929e:	461e      	mov	r6, r3
 80092a0:	f101 0c14 	add.w	ip, r1, #20
 80092a4:	2000      	movs	r0, #0
 80092a6:	f8dc 3000 	ldr.w	r3, [ip]
 80092aa:	b299      	uxth	r1, r3
 80092ac:	fb02 6101 	mla	r1, r2, r1, r6
 80092b0:	0c1e      	lsrs	r6, r3, #16
 80092b2:	0c0b      	lsrs	r3, r1, #16
 80092b4:	fb02 3306 	mla	r3, r2, r6, r3
 80092b8:	b289      	uxth	r1, r1
 80092ba:	3001      	adds	r0, #1
 80092bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092c0:	4285      	cmp	r5, r0
 80092c2:	f84c 1b04 	str.w	r1, [ip], #4
 80092c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092ca:	dcec      	bgt.n	80092a6 <__multadd+0x12>
 80092cc:	b30e      	cbz	r6, 8009312 <__multadd+0x7e>
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc19      	bgt.n	8009308 <__multadd+0x74>
 80092d4:	6861      	ldr	r1, [r4, #4]
 80092d6:	4638      	mov	r0, r7
 80092d8:	3101      	adds	r1, #1
 80092da:	f7ff ff79 	bl	80091d0 <_Balloc>
 80092de:	4680      	mov	r8, r0
 80092e0:	b928      	cbnz	r0, 80092ee <__multadd+0x5a>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <__multadd+0x84>)
 80092e6:	480d      	ldr	r0, [pc, #52]	; (800931c <__multadd+0x88>)
 80092e8:	21b5      	movs	r1, #181	; 0xb5
 80092ea:	f000 fd57 	bl	8009d9c <__assert_func>
 80092ee:	6922      	ldr	r2, [r4, #16]
 80092f0:	3202      	adds	r2, #2
 80092f2:	f104 010c 	add.w	r1, r4, #12
 80092f6:	0092      	lsls	r2, r2, #2
 80092f8:	300c      	adds	r0, #12
 80092fa:	f7ff ff5b 	bl	80091b4 <memcpy>
 80092fe:	4621      	mov	r1, r4
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff ffa5 	bl	8009250 <_Bfree>
 8009306:	4644      	mov	r4, r8
 8009308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800930c:	3501      	adds	r5, #1
 800930e:	615e      	str	r6, [r3, #20]
 8009310:	6125      	str	r5, [r4, #16]
 8009312:	4620      	mov	r0, r4
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	0800abc4 	.word	0x0800abc4
 800931c:	0800abd5 	.word	0x0800abd5

08009320 <__hi0bits>:
 8009320:	0c03      	lsrs	r3, r0, #16
 8009322:	041b      	lsls	r3, r3, #16
 8009324:	b9d3      	cbnz	r3, 800935c <__hi0bits+0x3c>
 8009326:	0400      	lsls	r0, r0, #16
 8009328:	2310      	movs	r3, #16
 800932a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800932e:	bf04      	itt	eq
 8009330:	0200      	lsleq	r0, r0, #8
 8009332:	3308      	addeq	r3, #8
 8009334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009338:	bf04      	itt	eq
 800933a:	0100      	lsleq	r0, r0, #4
 800933c:	3304      	addeq	r3, #4
 800933e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009342:	bf04      	itt	eq
 8009344:	0080      	lsleq	r0, r0, #2
 8009346:	3302      	addeq	r3, #2
 8009348:	2800      	cmp	r0, #0
 800934a:	db05      	blt.n	8009358 <__hi0bits+0x38>
 800934c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009350:	f103 0301 	add.w	r3, r3, #1
 8009354:	bf08      	it	eq
 8009356:	2320      	moveq	r3, #32
 8009358:	4618      	mov	r0, r3
 800935a:	4770      	bx	lr
 800935c:	2300      	movs	r3, #0
 800935e:	e7e4      	b.n	800932a <__hi0bits+0xa>

08009360 <__lo0bits>:
 8009360:	6803      	ldr	r3, [r0, #0]
 8009362:	f013 0207 	ands.w	r2, r3, #7
 8009366:	4601      	mov	r1, r0
 8009368:	d00b      	beq.n	8009382 <__lo0bits+0x22>
 800936a:	07da      	lsls	r2, r3, #31
 800936c:	d423      	bmi.n	80093b6 <__lo0bits+0x56>
 800936e:	0798      	lsls	r0, r3, #30
 8009370:	bf49      	itett	mi
 8009372:	085b      	lsrmi	r3, r3, #1
 8009374:	089b      	lsrpl	r3, r3, #2
 8009376:	2001      	movmi	r0, #1
 8009378:	600b      	strmi	r3, [r1, #0]
 800937a:	bf5c      	itt	pl
 800937c:	600b      	strpl	r3, [r1, #0]
 800937e:	2002      	movpl	r0, #2
 8009380:	4770      	bx	lr
 8009382:	b298      	uxth	r0, r3
 8009384:	b9a8      	cbnz	r0, 80093b2 <__lo0bits+0x52>
 8009386:	0c1b      	lsrs	r3, r3, #16
 8009388:	2010      	movs	r0, #16
 800938a:	b2da      	uxtb	r2, r3
 800938c:	b90a      	cbnz	r2, 8009392 <__lo0bits+0x32>
 800938e:	3008      	adds	r0, #8
 8009390:	0a1b      	lsrs	r3, r3, #8
 8009392:	071a      	lsls	r2, r3, #28
 8009394:	bf04      	itt	eq
 8009396:	091b      	lsreq	r3, r3, #4
 8009398:	3004      	addeq	r0, #4
 800939a:	079a      	lsls	r2, r3, #30
 800939c:	bf04      	itt	eq
 800939e:	089b      	lsreq	r3, r3, #2
 80093a0:	3002      	addeq	r0, #2
 80093a2:	07da      	lsls	r2, r3, #31
 80093a4:	d403      	bmi.n	80093ae <__lo0bits+0x4e>
 80093a6:	085b      	lsrs	r3, r3, #1
 80093a8:	f100 0001 	add.w	r0, r0, #1
 80093ac:	d005      	beq.n	80093ba <__lo0bits+0x5a>
 80093ae:	600b      	str	r3, [r1, #0]
 80093b0:	4770      	bx	lr
 80093b2:	4610      	mov	r0, r2
 80093b4:	e7e9      	b.n	800938a <__lo0bits+0x2a>
 80093b6:	2000      	movs	r0, #0
 80093b8:	4770      	bx	lr
 80093ba:	2020      	movs	r0, #32
 80093bc:	4770      	bx	lr
	...

080093c0 <__i2b>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	460c      	mov	r4, r1
 80093c4:	2101      	movs	r1, #1
 80093c6:	f7ff ff03 	bl	80091d0 <_Balloc>
 80093ca:	4602      	mov	r2, r0
 80093cc:	b928      	cbnz	r0, 80093da <__i2b+0x1a>
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <__i2b+0x24>)
 80093d0:	4805      	ldr	r0, [pc, #20]	; (80093e8 <__i2b+0x28>)
 80093d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093d6:	f000 fce1 	bl	8009d9c <__assert_func>
 80093da:	2301      	movs	r3, #1
 80093dc:	6144      	str	r4, [r0, #20]
 80093de:	6103      	str	r3, [r0, #16]
 80093e0:	bd10      	pop	{r4, pc}
 80093e2:	bf00      	nop
 80093e4:	0800abc4 	.word	0x0800abc4
 80093e8:	0800abd5 	.word	0x0800abd5

080093ec <__multiply>:
 80093ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	4691      	mov	r9, r2
 80093f2:	690a      	ldr	r2, [r1, #16]
 80093f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	bfb8      	it	lt
 80093fc:	460b      	movlt	r3, r1
 80093fe:	460c      	mov	r4, r1
 8009400:	bfbc      	itt	lt
 8009402:	464c      	movlt	r4, r9
 8009404:	4699      	movlt	r9, r3
 8009406:	6927      	ldr	r7, [r4, #16]
 8009408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	6861      	ldr	r1, [r4, #4]
 8009410:	eb07 060a 	add.w	r6, r7, sl
 8009414:	42b3      	cmp	r3, r6
 8009416:	b085      	sub	sp, #20
 8009418:	bfb8      	it	lt
 800941a:	3101      	addlt	r1, #1
 800941c:	f7ff fed8 	bl	80091d0 <_Balloc>
 8009420:	b930      	cbnz	r0, 8009430 <__multiply+0x44>
 8009422:	4602      	mov	r2, r0
 8009424:	4b44      	ldr	r3, [pc, #272]	; (8009538 <__multiply+0x14c>)
 8009426:	4845      	ldr	r0, [pc, #276]	; (800953c <__multiply+0x150>)
 8009428:	f240 115d 	movw	r1, #349	; 0x15d
 800942c:	f000 fcb6 	bl	8009d9c <__assert_func>
 8009430:	f100 0514 	add.w	r5, r0, #20
 8009434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009438:	462b      	mov	r3, r5
 800943a:	2200      	movs	r2, #0
 800943c:	4543      	cmp	r3, r8
 800943e:	d321      	bcc.n	8009484 <__multiply+0x98>
 8009440:	f104 0314 	add.w	r3, r4, #20
 8009444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009448:	f109 0314 	add.w	r3, r9, #20
 800944c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009450:	9202      	str	r2, [sp, #8]
 8009452:	1b3a      	subs	r2, r7, r4
 8009454:	3a15      	subs	r2, #21
 8009456:	f022 0203 	bic.w	r2, r2, #3
 800945a:	3204      	adds	r2, #4
 800945c:	f104 0115 	add.w	r1, r4, #21
 8009460:	428f      	cmp	r7, r1
 8009462:	bf38      	it	cc
 8009464:	2204      	movcc	r2, #4
 8009466:	9201      	str	r2, [sp, #4]
 8009468:	9a02      	ldr	r2, [sp, #8]
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	429a      	cmp	r2, r3
 800946e:	d80c      	bhi.n	800948a <__multiply+0x9e>
 8009470:	2e00      	cmp	r6, #0
 8009472:	dd03      	ble.n	800947c <__multiply+0x90>
 8009474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009478:	2b00      	cmp	r3, #0
 800947a:	d05a      	beq.n	8009532 <__multiply+0x146>
 800947c:	6106      	str	r6, [r0, #16]
 800947e:	b005      	add	sp, #20
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	f843 2b04 	str.w	r2, [r3], #4
 8009488:	e7d8      	b.n	800943c <__multiply+0x50>
 800948a:	f8b3 a000 	ldrh.w	sl, [r3]
 800948e:	f1ba 0f00 	cmp.w	sl, #0
 8009492:	d024      	beq.n	80094de <__multiply+0xf2>
 8009494:	f104 0e14 	add.w	lr, r4, #20
 8009498:	46a9      	mov	r9, r5
 800949a:	f04f 0c00 	mov.w	ip, #0
 800949e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094a2:	f8d9 1000 	ldr.w	r1, [r9]
 80094a6:	fa1f fb82 	uxth.w	fp, r2
 80094aa:	b289      	uxth	r1, r1
 80094ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80094b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094b4:	f8d9 2000 	ldr.w	r2, [r9]
 80094b8:	4461      	add	r1, ip
 80094ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094be:	fb0a c20b 	mla	r2, sl, fp, ip
 80094c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094c6:	b289      	uxth	r1, r1
 80094c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094cc:	4577      	cmp	r7, lr
 80094ce:	f849 1b04 	str.w	r1, [r9], #4
 80094d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094d6:	d8e2      	bhi.n	800949e <__multiply+0xb2>
 80094d8:	9a01      	ldr	r2, [sp, #4]
 80094da:	f845 c002 	str.w	ip, [r5, r2]
 80094de:	9a03      	ldr	r2, [sp, #12]
 80094e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094e4:	3304      	adds	r3, #4
 80094e6:	f1b9 0f00 	cmp.w	r9, #0
 80094ea:	d020      	beq.n	800952e <__multiply+0x142>
 80094ec:	6829      	ldr	r1, [r5, #0]
 80094ee:	f104 0c14 	add.w	ip, r4, #20
 80094f2:	46ae      	mov	lr, r5
 80094f4:	f04f 0a00 	mov.w	sl, #0
 80094f8:	f8bc b000 	ldrh.w	fp, [ip]
 80094fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009500:	fb09 220b 	mla	r2, r9, fp, r2
 8009504:	4492      	add	sl, r2
 8009506:	b289      	uxth	r1, r1
 8009508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800950c:	f84e 1b04 	str.w	r1, [lr], #4
 8009510:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009514:	f8be 1000 	ldrh.w	r1, [lr]
 8009518:	0c12      	lsrs	r2, r2, #16
 800951a:	fb09 1102 	mla	r1, r9, r2, r1
 800951e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009522:	4567      	cmp	r7, ip
 8009524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009528:	d8e6      	bhi.n	80094f8 <__multiply+0x10c>
 800952a:	9a01      	ldr	r2, [sp, #4]
 800952c:	50a9      	str	r1, [r5, r2]
 800952e:	3504      	adds	r5, #4
 8009530:	e79a      	b.n	8009468 <__multiply+0x7c>
 8009532:	3e01      	subs	r6, #1
 8009534:	e79c      	b.n	8009470 <__multiply+0x84>
 8009536:	bf00      	nop
 8009538:	0800abc4 	.word	0x0800abc4
 800953c:	0800abd5 	.word	0x0800abd5

08009540 <__pow5mult>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	4615      	mov	r5, r2
 8009546:	f012 0203 	ands.w	r2, r2, #3
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	d007      	beq.n	8009560 <__pow5mult+0x20>
 8009550:	4c25      	ldr	r4, [pc, #148]	; (80095e8 <__pow5mult+0xa8>)
 8009552:	3a01      	subs	r2, #1
 8009554:	2300      	movs	r3, #0
 8009556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800955a:	f7ff fe9b 	bl	8009294 <__multadd>
 800955e:	4607      	mov	r7, r0
 8009560:	10ad      	asrs	r5, r5, #2
 8009562:	d03d      	beq.n	80095e0 <__pow5mult+0xa0>
 8009564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009566:	b97c      	cbnz	r4, 8009588 <__pow5mult+0x48>
 8009568:	2010      	movs	r0, #16
 800956a:	f7ff fe1b 	bl	80091a4 <malloc>
 800956e:	4602      	mov	r2, r0
 8009570:	6270      	str	r0, [r6, #36]	; 0x24
 8009572:	b928      	cbnz	r0, 8009580 <__pow5mult+0x40>
 8009574:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <__pow5mult+0xac>)
 8009576:	481e      	ldr	r0, [pc, #120]	; (80095f0 <__pow5mult+0xb0>)
 8009578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800957c:	f000 fc0e 	bl	8009d9c <__assert_func>
 8009580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009584:	6004      	str	r4, [r0, #0]
 8009586:	60c4      	str	r4, [r0, #12]
 8009588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800958c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009590:	b94c      	cbnz	r4, 80095a6 <__pow5mult+0x66>
 8009592:	f240 2171 	movw	r1, #625	; 0x271
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ff12 	bl	80093c0 <__i2b>
 800959c:	2300      	movs	r3, #0
 800959e:	f8c8 0008 	str.w	r0, [r8, #8]
 80095a2:	4604      	mov	r4, r0
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	f04f 0900 	mov.w	r9, #0
 80095aa:	07eb      	lsls	r3, r5, #31
 80095ac:	d50a      	bpl.n	80095c4 <__pow5mult+0x84>
 80095ae:	4639      	mov	r1, r7
 80095b0:	4622      	mov	r2, r4
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff1a 	bl	80093ec <__multiply>
 80095b8:	4639      	mov	r1, r7
 80095ba:	4680      	mov	r8, r0
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff fe47 	bl	8009250 <_Bfree>
 80095c2:	4647      	mov	r7, r8
 80095c4:	106d      	asrs	r5, r5, #1
 80095c6:	d00b      	beq.n	80095e0 <__pow5mult+0xa0>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	b938      	cbnz	r0, 80095dc <__pow5mult+0x9c>
 80095cc:	4622      	mov	r2, r4
 80095ce:	4621      	mov	r1, r4
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff ff0b 	bl	80093ec <__multiply>
 80095d6:	6020      	str	r0, [r4, #0]
 80095d8:	f8c0 9000 	str.w	r9, [r0]
 80095dc:	4604      	mov	r4, r0
 80095de:	e7e4      	b.n	80095aa <__pow5mult+0x6a>
 80095e0:	4638      	mov	r0, r7
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	bf00      	nop
 80095e8:	0800ad28 	.word	0x0800ad28
 80095ec:	0800ab52 	.word	0x0800ab52
 80095f0:	0800abd5 	.word	0x0800abd5

080095f4 <__lshift>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	460c      	mov	r4, r1
 80095fa:	6849      	ldr	r1, [r1, #4]
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	4607      	mov	r7, r0
 8009606:	4691      	mov	r9, r2
 8009608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800960c:	f108 0601 	add.w	r6, r8, #1
 8009610:	42b3      	cmp	r3, r6
 8009612:	db0b      	blt.n	800962c <__lshift+0x38>
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff fddb 	bl	80091d0 <_Balloc>
 800961a:	4605      	mov	r5, r0
 800961c:	b948      	cbnz	r0, 8009632 <__lshift+0x3e>
 800961e:	4602      	mov	r2, r0
 8009620:	4b2a      	ldr	r3, [pc, #168]	; (80096cc <__lshift+0xd8>)
 8009622:	482b      	ldr	r0, [pc, #172]	; (80096d0 <__lshift+0xdc>)
 8009624:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009628:	f000 fbb8 	bl	8009d9c <__assert_func>
 800962c:	3101      	adds	r1, #1
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	e7ee      	b.n	8009610 <__lshift+0x1c>
 8009632:	2300      	movs	r3, #0
 8009634:	f100 0114 	add.w	r1, r0, #20
 8009638:	f100 0210 	add.w	r2, r0, #16
 800963c:	4618      	mov	r0, r3
 800963e:	4553      	cmp	r3, sl
 8009640:	db37      	blt.n	80096b2 <__lshift+0xbe>
 8009642:	6920      	ldr	r0, [r4, #16]
 8009644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009648:	f104 0314 	add.w	r3, r4, #20
 800964c:	f019 091f 	ands.w	r9, r9, #31
 8009650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009658:	d02f      	beq.n	80096ba <__lshift+0xc6>
 800965a:	f1c9 0e20 	rsb	lr, r9, #32
 800965e:	468a      	mov	sl, r1
 8009660:	f04f 0c00 	mov.w	ip, #0
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	fa02 f209 	lsl.w	r2, r2, r9
 800966a:	ea42 020c 	orr.w	r2, r2, ip
 800966e:	f84a 2b04 	str.w	r2, [sl], #4
 8009672:	f853 2b04 	ldr.w	r2, [r3], #4
 8009676:	4298      	cmp	r0, r3
 8009678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800967c:	d8f2      	bhi.n	8009664 <__lshift+0x70>
 800967e:	1b03      	subs	r3, r0, r4
 8009680:	3b15      	subs	r3, #21
 8009682:	f023 0303 	bic.w	r3, r3, #3
 8009686:	3304      	adds	r3, #4
 8009688:	f104 0215 	add.w	r2, r4, #21
 800968c:	4290      	cmp	r0, r2
 800968e:	bf38      	it	cc
 8009690:	2304      	movcc	r3, #4
 8009692:	f841 c003 	str.w	ip, [r1, r3]
 8009696:	f1bc 0f00 	cmp.w	ip, #0
 800969a:	d001      	beq.n	80096a0 <__lshift+0xac>
 800969c:	f108 0602 	add.w	r6, r8, #2
 80096a0:	3e01      	subs	r6, #1
 80096a2:	4638      	mov	r0, r7
 80096a4:	612e      	str	r6, [r5, #16]
 80096a6:	4621      	mov	r1, r4
 80096a8:	f7ff fdd2 	bl	8009250 <_Bfree>
 80096ac:	4628      	mov	r0, r5
 80096ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096b6:	3301      	adds	r3, #1
 80096b8:	e7c1      	b.n	800963e <__lshift+0x4a>
 80096ba:	3904      	subs	r1, #4
 80096bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096c4:	4298      	cmp	r0, r3
 80096c6:	d8f9      	bhi.n	80096bc <__lshift+0xc8>
 80096c8:	e7ea      	b.n	80096a0 <__lshift+0xac>
 80096ca:	bf00      	nop
 80096cc:	0800abc4 	.word	0x0800abc4
 80096d0:	0800abd5 	.word	0x0800abd5

080096d4 <__mcmp>:
 80096d4:	b530      	push	{r4, r5, lr}
 80096d6:	6902      	ldr	r2, [r0, #16]
 80096d8:	690c      	ldr	r4, [r1, #16]
 80096da:	1b12      	subs	r2, r2, r4
 80096dc:	d10e      	bne.n	80096fc <__mcmp+0x28>
 80096de:	f100 0314 	add.w	r3, r0, #20
 80096e2:	3114      	adds	r1, #20
 80096e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096f4:	42a5      	cmp	r5, r4
 80096f6:	d003      	beq.n	8009700 <__mcmp+0x2c>
 80096f8:	d305      	bcc.n	8009706 <__mcmp+0x32>
 80096fa:	2201      	movs	r2, #1
 80096fc:	4610      	mov	r0, r2
 80096fe:	bd30      	pop	{r4, r5, pc}
 8009700:	4283      	cmp	r3, r0
 8009702:	d3f3      	bcc.n	80096ec <__mcmp+0x18>
 8009704:	e7fa      	b.n	80096fc <__mcmp+0x28>
 8009706:	f04f 32ff 	mov.w	r2, #4294967295
 800970a:	e7f7      	b.n	80096fc <__mcmp+0x28>

0800970c <__mdiff>:
 800970c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	4606      	mov	r6, r0
 8009714:	4611      	mov	r1, r2
 8009716:	4620      	mov	r0, r4
 8009718:	4690      	mov	r8, r2
 800971a:	f7ff ffdb 	bl	80096d4 <__mcmp>
 800971e:	1e05      	subs	r5, r0, #0
 8009720:	d110      	bne.n	8009744 <__mdiff+0x38>
 8009722:	4629      	mov	r1, r5
 8009724:	4630      	mov	r0, r6
 8009726:	f7ff fd53 	bl	80091d0 <_Balloc>
 800972a:	b930      	cbnz	r0, 800973a <__mdiff+0x2e>
 800972c:	4b3a      	ldr	r3, [pc, #232]	; (8009818 <__mdiff+0x10c>)
 800972e:	4602      	mov	r2, r0
 8009730:	f240 2132 	movw	r1, #562	; 0x232
 8009734:	4839      	ldr	r0, [pc, #228]	; (800981c <__mdiff+0x110>)
 8009736:	f000 fb31 	bl	8009d9c <__assert_func>
 800973a:	2301      	movs	r3, #1
 800973c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009744:	bfa4      	itt	ge
 8009746:	4643      	movge	r3, r8
 8009748:	46a0      	movge	r8, r4
 800974a:	4630      	mov	r0, r6
 800974c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009750:	bfa6      	itte	ge
 8009752:	461c      	movge	r4, r3
 8009754:	2500      	movge	r5, #0
 8009756:	2501      	movlt	r5, #1
 8009758:	f7ff fd3a 	bl	80091d0 <_Balloc>
 800975c:	b920      	cbnz	r0, 8009768 <__mdiff+0x5c>
 800975e:	4b2e      	ldr	r3, [pc, #184]	; (8009818 <__mdiff+0x10c>)
 8009760:	4602      	mov	r2, r0
 8009762:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009766:	e7e5      	b.n	8009734 <__mdiff+0x28>
 8009768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800976c:	6926      	ldr	r6, [r4, #16]
 800976e:	60c5      	str	r5, [r0, #12]
 8009770:	f104 0914 	add.w	r9, r4, #20
 8009774:	f108 0514 	add.w	r5, r8, #20
 8009778:	f100 0e14 	add.w	lr, r0, #20
 800977c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009784:	f108 0210 	add.w	r2, r8, #16
 8009788:	46f2      	mov	sl, lr
 800978a:	2100      	movs	r1, #0
 800978c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009794:	fa1f f883 	uxth.w	r8, r3
 8009798:	fa11 f18b 	uxtah	r1, r1, fp
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	eba1 0808 	sub.w	r8, r1, r8
 80097a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097aa:	fa1f f888 	uxth.w	r8, r8
 80097ae:	1419      	asrs	r1, r3, #16
 80097b0:	454e      	cmp	r6, r9
 80097b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097b6:	f84a 3b04 	str.w	r3, [sl], #4
 80097ba:	d8e7      	bhi.n	800978c <__mdiff+0x80>
 80097bc:	1b33      	subs	r3, r6, r4
 80097be:	3b15      	subs	r3, #21
 80097c0:	f023 0303 	bic.w	r3, r3, #3
 80097c4:	3304      	adds	r3, #4
 80097c6:	3415      	adds	r4, #21
 80097c8:	42a6      	cmp	r6, r4
 80097ca:	bf38      	it	cc
 80097cc:	2304      	movcc	r3, #4
 80097ce:	441d      	add	r5, r3
 80097d0:	4473      	add	r3, lr
 80097d2:	469e      	mov	lr, r3
 80097d4:	462e      	mov	r6, r5
 80097d6:	4566      	cmp	r6, ip
 80097d8:	d30e      	bcc.n	80097f8 <__mdiff+0xec>
 80097da:	f10c 0203 	add.w	r2, ip, #3
 80097de:	1b52      	subs	r2, r2, r5
 80097e0:	f022 0203 	bic.w	r2, r2, #3
 80097e4:	3d03      	subs	r5, #3
 80097e6:	45ac      	cmp	ip, r5
 80097e8:	bf38      	it	cc
 80097ea:	2200      	movcc	r2, #0
 80097ec:	441a      	add	r2, r3
 80097ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097f2:	b17b      	cbz	r3, 8009814 <__mdiff+0x108>
 80097f4:	6107      	str	r7, [r0, #16]
 80097f6:	e7a3      	b.n	8009740 <__mdiff+0x34>
 80097f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80097fc:	fa11 f288 	uxtah	r2, r1, r8
 8009800:	1414      	asrs	r4, r2, #16
 8009802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009806:	b292      	uxth	r2, r2
 8009808:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800980c:	f84e 2b04 	str.w	r2, [lr], #4
 8009810:	1421      	asrs	r1, r4, #16
 8009812:	e7e0      	b.n	80097d6 <__mdiff+0xca>
 8009814:	3f01      	subs	r7, #1
 8009816:	e7ea      	b.n	80097ee <__mdiff+0xe2>
 8009818:	0800abc4 	.word	0x0800abc4
 800981c:	0800abd5 	.word	0x0800abd5

08009820 <__d2b>:
 8009820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009824:	4689      	mov	r9, r1
 8009826:	2101      	movs	r1, #1
 8009828:	ec57 6b10 	vmov	r6, r7, d0
 800982c:	4690      	mov	r8, r2
 800982e:	f7ff fccf 	bl	80091d0 <_Balloc>
 8009832:	4604      	mov	r4, r0
 8009834:	b930      	cbnz	r0, 8009844 <__d2b+0x24>
 8009836:	4602      	mov	r2, r0
 8009838:	4b25      	ldr	r3, [pc, #148]	; (80098d0 <__d2b+0xb0>)
 800983a:	4826      	ldr	r0, [pc, #152]	; (80098d4 <__d2b+0xb4>)
 800983c:	f240 310a 	movw	r1, #778	; 0x30a
 8009840:	f000 faac 	bl	8009d9c <__assert_func>
 8009844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800984c:	bb35      	cbnz	r5, 800989c <__d2b+0x7c>
 800984e:	2e00      	cmp	r6, #0
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	d028      	beq.n	80098a6 <__d2b+0x86>
 8009854:	4668      	mov	r0, sp
 8009856:	9600      	str	r6, [sp, #0]
 8009858:	f7ff fd82 	bl	8009360 <__lo0bits>
 800985c:	9900      	ldr	r1, [sp, #0]
 800985e:	b300      	cbz	r0, 80098a2 <__d2b+0x82>
 8009860:	9a01      	ldr	r2, [sp, #4]
 8009862:	f1c0 0320 	rsb	r3, r0, #32
 8009866:	fa02 f303 	lsl.w	r3, r2, r3
 800986a:	430b      	orrs	r3, r1
 800986c:	40c2      	lsrs	r2, r0
 800986e:	6163      	str	r3, [r4, #20]
 8009870:	9201      	str	r2, [sp, #4]
 8009872:	9b01      	ldr	r3, [sp, #4]
 8009874:	61a3      	str	r3, [r4, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	bf14      	ite	ne
 800987a:	2202      	movne	r2, #2
 800987c:	2201      	moveq	r2, #1
 800987e:	6122      	str	r2, [r4, #16]
 8009880:	b1d5      	cbz	r5, 80098b8 <__d2b+0x98>
 8009882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009886:	4405      	add	r5, r0
 8009888:	f8c9 5000 	str.w	r5, [r9]
 800988c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009890:	f8c8 0000 	str.w	r0, [r8]
 8009894:	4620      	mov	r0, r4
 8009896:	b003      	add	sp, #12
 8009898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800989c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098a0:	e7d5      	b.n	800984e <__d2b+0x2e>
 80098a2:	6161      	str	r1, [r4, #20]
 80098a4:	e7e5      	b.n	8009872 <__d2b+0x52>
 80098a6:	a801      	add	r0, sp, #4
 80098a8:	f7ff fd5a 	bl	8009360 <__lo0bits>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	6163      	str	r3, [r4, #20]
 80098b0:	2201      	movs	r2, #1
 80098b2:	6122      	str	r2, [r4, #16]
 80098b4:	3020      	adds	r0, #32
 80098b6:	e7e3      	b.n	8009880 <__d2b+0x60>
 80098b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098c0:	f8c9 0000 	str.w	r0, [r9]
 80098c4:	6918      	ldr	r0, [r3, #16]
 80098c6:	f7ff fd2b 	bl	8009320 <__hi0bits>
 80098ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098ce:	e7df      	b.n	8009890 <__d2b+0x70>
 80098d0:	0800abc4 	.word	0x0800abc4
 80098d4:	0800abd5 	.word	0x0800abd5

080098d8 <_calloc_r>:
 80098d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098da:	fba1 2402 	umull	r2, r4, r1, r2
 80098de:	b94c      	cbnz	r4, 80098f4 <_calloc_r+0x1c>
 80098e0:	4611      	mov	r1, r2
 80098e2:	9201      	str	r2, [sp, #4]
 80098e4:	f000 f87a 	bl	80099dc <_malloc_r>
 80098e8:	9a01      	ldr	r2, [sp, #4]
 80098ea:	4605      	mov	r5, r0
 80098ec:	b930      	cbnz	r0, 80098fc <_calloc_r+0x24>
 80098ee:	4628      	mov	r0, r5
 80098f0:	b003      	add	sp, #12
 80098f2:	bd30      	pop	{r4, r5, pc}
 80098f4:	220c      	movs	r2, #12
 80098f6:	6002      	str	r2, [r0, #0]
 80098f8:	2500      	movs	r5, #0
 80098fa:	e7f8      	b.n	80098ee <_calloc_r+0x16>
 80098fc:	4621      	mov	r1, r4
 80098fe:	f7fe f945 	bl	8007b8c <memset>
 8009902:	e7f4      	b.n	80098ee <_calloc_r+0x16>

08009904 <_free_r>:
 8009904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009906:	2900      	cmp	r1, #0
 8009908:	d044      	beq.n	8009994 <_free_r+0x90>
 800990a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800990e:	9001      	str	r0, [sp, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f1a1 0404 	sub.w	r4, r1, #4
 8009916:	bfb8      	it	lt
 8009918:	18e4      	addlt	r4, r4, r3
 800991a:	f000 fa9b 	bl	8009e54 <__malloc_lock>
 800991e:	4a1e      	ldr	r2, [pc, #120]	; (8009998 <_free_r+0x94>)
 8009920:	9801      	ldr	r0, [sp, #4]
 8009922:	6813      	ldr	r3, [r2, #0]
 8009924:	b933      	cbnz	r3, 8009934 <_free_r+0x30>
 8009926:	6063      	str	r3, [r4, #4]
 8009928:	6014      	str	r4, [r2, #0]
 800992a:	b003      	add	sp, #12
 800992c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009930:	f000 ba96 	b.w	8009e60 <__malloc_unlock>
 8009934:	42a3      	cmp	r3, r4
 8009936:	d908      	bls.n	800994a <_free_r+0x46>
 8009938:	6825      	ldr	r5, [r4, #0]
 800993a:	1961      	adds	r1, r4, r5
 800993c:	428b      	cmp	r3, r1
 800993e:	bf01      	itttt	eq
 8009940:	6819      	ldreq	r1, [r3, #0]
 8009942:	685b      	ldreq	r3, [r3, #4]
 8009944:	1949      	addeq	r1, r1, r5
 8009946:	6021      	streq	r1, [r4, #0]
 8009948:	e7ed      	b.n	8009926 <_free_r+0x22>
 800994a:	461a      	mov	r2, r3
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	b10b      	cbz	r3, 8009954 <_free_r+0x50>
 8009950:	42a3      	cmp	r3, r4
 8009952:	d9fa      	bls.n	800994a <_free_r+0x46>
 8009954:	6811      	ldr	r1, [r2, #0]
 8009956:	1855      	adds	r5, r2, r1
 8009958:	42a5      	cmp	r5, r4
 800995a:	d10b      	bne.n	8009974 <_free_r+0x70>
 800995c:	6824      	ldr	r4, [r4, #0]
 800995e:	4421      	add	r1, r4
 8009960:	1854      	adds	r4, r2, r1
 8009962:	42a3      	cmp	r3, r4
 8009964:	6011      	str	r1, [r2, #0]
 8009966:	d1e0      	bne.n	800992a <_free_r+0x26>
 8009968:	681c      	ldr	r4, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	6053      	str	r3, [r2, #4]
 800996e:	4421      	add	r1, r4
 8009970:	6011      	str	r1, [r2, #0]
 8009972:	e7da      	b.n	800992a <_free_r+0x26>
 8009974:	d902      	bls.n	800997c <_free_r+0x78>
 8009976:	230c      	movs	r3, #12
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	e7d6      	b.n	800992a <_free_r+0x26>
 800997c:	6825      	ldr	r5, [r4, #0]
 800997e:	1961      	adds	r1, r4, r5
 8009980:	428b      	cmp	r3, r1
 8009982:	bf04      	itt	eq
 8009984:	6819      	ldreq	r1, [r3, #0]
 8009986:	685b      	ldreq	r3, [r3, #4]
 8009988:	6063      	str	r3, [r4, #4]
 800998a:	bf04      	itt	eq
 800998c:	1949      	addeq	r1, r1, r5
 800998e:	6021      	streq	r1, [r4, #0]
 8009990:	6054      	str	r4, [r2, #4]
 8009992:	e7ca      	b.n	800992a <_free_r+0x26>
 8009994:	b003      	add	sp, #12
 8009996:	bd30      	pop	{r4, r5, pc}
 8009998:	2000092c 	.word	0x2000092c

0800999c <sbrk_aligned>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4e0e      	ldr	r6, [pc, #56]	; (80099d8 <sbrk_aligned+0x3c>)
 80099a0:	460c      	mov	r4, r1
 80099a2:	6831      	ldr	r1, [r6, #0]
 80099a4:	4605      	mov	r5, r0
 80099a6:	b911      	cbnz	r1, 80099ae <sbrk_aligned+0x12>
 80099a8:	f000 f9e8 	bl	8009d7c <_sbrk_r>
 80099ac:	6030      	str	r0, [r6, #0]
 80099ae:	4621      	mov	r1, r4
 80099b0:	4628      	mov	r0, r5
 80099b2:	f000 f9e3 	bl	8009d7c <_sbrk_r>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d00a      	beq.n	80099d0 <sbrk_aligned+0x34>
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d007      	beq.n	80099d4 <sbrk_aligned+0x38>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f9d8 	bl	8009d7c <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d101      	bne.n	80099d4 <sbrk_aligned+0x38>
 80099d0:	f04f 34ff 	mov.w	r4, #4294967295
 80099d4:	4620      	mov	r0, r4
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	20000930 	.word	0x20000930

080099dc <_malloc_r>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	1ccd      	adds	r5, r1, #3
 80099e2:	f025 0503 	bic.w	r5, r5, #3
 80099e6:	3508      	adds	r5, #8
 80099e8:	2d0c      	cmp	r5, #12
 80099ea:	bf38      	it	cc
 80099ec:	250c      	movcc	r5, #12
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	4607      	mov	r7, r0
 80099f2:	db01      	blt.n	80099f8 <_malloc_r+0x1c>
 80099f4:	42a9      	cmp	r1, r5
 80099f6:	d905      	bls.n	8009a04 <_malloc_r+0x28>
 80099f8:	230c      	movs	r3, #12
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	2600      	movs	r6, #0
 80099fe:	4630      	mov	r0, r6
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	4e2e      	ldr	r6, [pc, #184]	; (8009ac0 <_malloc_r+0xe4>)
 8009a06:	f000 fa25 	bl	8009e54 <__malloc_lock>
 8009a0a:	6833      	ldr	r3, [r6, #0]
 8009a0c:	461c      	mov	r4, r3
 8009a0e:	bb34      	cbnz	r4, 8009a5e <_malloc_r+0x82>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ffc2 	bl	800999c <sbrk_aligned>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	d14d      	bne.n	8009aba <_malloc_r+0xde>
 8009a1e:	6834      	ldr	r4, [r6, #0]
 8009a20:	4626      	mov	r6, r4
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	d140      	bne.n	8009aa8 <_malloc_r+0xcc>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	eb04 0803 	add.w	r8, r4, r3
 8009a30:	f000 f9a4 	bl	8009d7c <_sbrk_r>
 8009a34:	4580      	cmp	r8, r0
 8009a36:	d13a      	bne.n	8009aae <_malloc_r+0xd2>
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	3503      	adds	r5, #3
 8009a3c:	1a6d      	subs	r5, r5, r1
 8009a3e:	f025 0503 	bic.w	r5, r5, #3
 8009a42:	3508      	adds	r5, #8
 8009a44:	2d0c      	cmp	r5, #12
 8009a46:	bf38      	it	cc
 8009a48:	250c      	movcc	r5, #12
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ffa5 	bl	800999c <sbrk_aligned>
 8009a52:	3001      	adds	r0, #1
 8009a54:	d02b      	beq.n	8009aae <_malloc_r+0xd2>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	442b      	add	r3, r5
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	e00e      	b.n	8009a7c <_malloc_r+0xa0>
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	1b52      	subs	r2, r2, r5
 8009a62:	d41e      	bmi.n	8009aa2 <_malloc_r+0xc6>
 8009a64:	2a0b      	cmp	r2, #11
 8009a66:	d916      	bls.n	8009a96 <_malloc_r+0xba>
 8009a68:	1961      	adds	r1, r4, r5
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	6025      	str	r5, [r4, #0]
 8009a6e:	bf18      	it	ne
 8009a70:	6059      	strne	r1, [r3, #4]
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	bf08      	it	eq
 8009a76:	6031      	streq	r1, [r6, #0]
 8009a78:	5162      	str	r2, [r4, r5]
 8009a7a:	604b      	str	r3, [r1, #4]
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f104 060b 	add.w	r6, r4, #11
 8009a82:	f000 f9ed 	bl	8009e60 <__malloc_unlock>
 8009a86:	f026 0607 	bic.w	r6, r6, #7
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	1af2      	subs	r2, r6, r3
 8009a8e:	d0b6      	beq.n	80099fe <_malloc_r+0x22>
 8009a90:	1b9b      	subs	r3, r3, r6
 8009a92:	50a3      	str	r3, [r4, r2]
 8009a94:	e7b3      	b.n	80099fe <_malloc_r+0x22>
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	bf0c      	ite	eq
 8009a9c:	6032      	streq	r2, [r6, #0]
 8009a9e:	605a      	strne	r2, [r3, #4]
 8009aa0:	e7ec      	b.n	8009a7c <_malloc_r+0xa0>
 8009aa2:	4623      	mov	r3, r4
 8009aa4:	6864      	ldr	r4, [r4, #4]
 8009aa6:	e7b2      	b.n	8009a0e <_malloc_r+0x32>
 8009aa8:	4634      	mov	r4, r6
 8009aaa:	6876      	ldr	r6, [r6, #4]
 8009aac:	e7b9      	b.n	8009a22 <_malloc_r+0x46>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f000 f9d4 	bl	8009e60 <__malloc_unlock>
 8009ab8:	e7a1      	b.n	80099fe <_malloc_r+0x22>
 8009aba:	6025      	str	r5, [r4, #0]
 8009abc:	e7de      	b.n	8009a7c <_malloc_r+0xa0>
 8009abe:	bf00      	nop
 8009ac0:	2000092c 	.word	0x2000092c

08009ac4 <__ssputs_r>:
 8009ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	688e      	ldr	r6, [r1, #8]
 8009aca:	429e      	cmp	r6, r3
 8009acc:	4682      	mov	sl, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	4690      	mov	r8, r2
 8009ad2:	461f      	mov	r7, r3
 8009ad4:	d838      	bhi.n	8009b48 <__ssputs_r+0x84>
 8009ad6:	898a      	ldrh	r2, [r1, #12]
 8009ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009adc:	d032      	beq.n	8009b44 <__ssputs_r+0x80>
 8009ade:	6825      	ldr	r5, [r4, #0]
 8009ae0:	6909      	ldr	r1, [r1, #16]
 8009ae2:	eba5 0901 	sub.w	r9, r5, r1
 8009ae6:	6965      	ldr	r5, [r4, #20]
 8009ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009af0:	3301      	adds	r3, #1
 8009af2:	444b      	add	r3, r9
 8009af4:	106d      	asrs	r5, r5, #1
 8009af6:	429d      	cmp	r5, r3
 8009af8:	bf38      	it	cc
 8009afa:	461d      	movcc	r5, r3
 8009afc:	0553      	lsls	r3, r2, #21
 8009afe:	d531      	bpl.n	8009b64 <__ssputs_r+0xa0>
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7ff ff6b 	bl	80099dc <_malloc_r>
 8009b06:	4606      	mov	r6, r0
 8009b08:	b950      	cbnz	r0, 8009b20 <__ssputs_r+0x5c>
 8009b0a:	230c      	movs	r3, #12
 8009b0c:	f8ca 3000 	str.w	r3, [sl]
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b16:	81a3      	strh	r3, [r4, #12]
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	6921      	ldr	r1, [r4, #16]
 8009b22:	464a      	mov	r2, r9
 8009b24:	f7ff fb46 	bl	80091b4 <memcpy>
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	6126      	str	r6, [r4, #16]
 8009b36:	6165      	str	r5, [r4, #20]
 8009b38:	444e      	add	r6, r9
 8009b3a:	eba5 0509 	sub.w	r5, r5, r9
 8009b3e:	6026      	str	r6, [r4, #0]
 8009b40:	60a5      	str	r5, [r4, #8]
 8009b42:	463e      	mov	r6, r7
 8009b44:	42be      	cmp	r6, r7
 8009b46:	d900      	bls.n	8009b4a <__ssputs_r+0x86>
 8009b48:	463e      	mov	r6, r7
 8009b4a:	6820      	ldr	r0, [r4, #0]
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	4641      	mov	r1, r8
 8009b50:	f000 f966 	bl	8009e20 <memmove>
 8009b54:	68a3      	ldr	r3, [r4, #8]
 8009b56:	1b9b      	subs	r3, r3, r6
 8009b58:	60a3      	str	r3, [r4, #8]
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	4433      	add	r3, r6
 8009b5e:	6023      	str	r3, [r4, #0]
 8009b60:	2000      	movs	r0, #0
 8009b62:	e7db      	b.n	8009b1c <__ssputs_r+0x58>
 8009b64:	462a      	mov	r2, r5
 8009b66:	f000 f981 	bl	8009e6c <_realloc_r>
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d1e1      	bne.n	8009b34 <__ssputs_r+0x70>
 8009b70:	6921      	ldr	r1, [r4, #16]
 8009b72:	4650      	mov	r0, sl
 8009b74:	f7ff fec6 	bl	8009904 <_free_r>
 8009b78:	e7c7      	b.n	8009b0a <__ssputs_r+0x46>
	...

08009b7c <_svfiprintf_r>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	4698      	mov	r8, r3
 8009b82:	898b      	ldrh	r3, [r1, #12]
 8009b84:	061b      	lsls	r3, r3, #24
 8009b86:	b09d      	sub	sp, #116	; 0x74
 8009b88:	4607      	mov	r7, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	4614      	mov	r4, r2
 8009b8e:	d50e      	bpl.n	8009bae <_svfiprintf_r+0x32>
 8009b90:	690b      	ldr	r3, [r1, #16]
 8009b92:	b963      	cbnz	r3, 8009bae <_svfiprintf_r+0x32>
 8009b94:	2140      	movs	r1, #64	; 0x40
 8009b96:	f7ff ff21 	bl	80099dc <_malloc_r>
 8009b9a:	6028      	str	r0, [r5, #0]
 8009b9c:	6128      	str	r0, [r5, #16]
 8009b9e:	b920      	cbnz	r0, 8009baa <_svfiprintf_r+0x2e>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	e0d1      	b.n	8009d4e <_svfiprintf_r+0x1d2>
 8009baa:	2340      	movs	r3, #64	; 0x40
 8009bac:	616b      	str	r3, [r5, #20]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb2:	2320      	movs	r3, #32
 8009bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bbc:	2330      	movs	r3, #48	; 0x30
 8009bbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d68 <_svfiprintf_r+0x1ec>
 8009bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bc6:	f04f 0901 	mov.w	r9, #1
 8009bca:	4623      	mov	r3, r4
 8009bcc:	469a      	mov	sl, r3
 8009bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd2:	b10a      	cbz	r2, 8009bd8 <_svfiprintf_r+0x5c>
 8009bd4:	2a25      	cmp	r2, #37	; 0x25
 8009bd6:	d1f9      	bne.n	8009bcc <_svfiprintf_r+0x50>
 8009bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8009bdc:	d00b      	beq.n	8009bf6 <_svfiprintf_r+0x7a>
 8009bde:	465b      	mov	r3, fp
 8009be0:	4622      	mov	r2, r4
 8009be2:	4629      	mov	r1, r5
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7ff ff6d 	bl	8009ac4 <__ssputs_r>
 8009bea:	3001      	adds	r0, #1
 8009bec:	f000 80aa 	beq.w	8009d44 <_svfiprintf_r+0x1c8>
 8009bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf2:	445a      	add	r2, fp
 8009bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8009bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 80a2 	beq.w	8009d44 <_svfiprintf_r+0x1c8>
 8009c00:	2300      	movs	r3, #0
 8009c02:	f04f 32ff 	mov.w	r2, #4294967295
 8009c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c0a:	f10a 0a01 	add.w	sl, sl, #1
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	9307      	str	r3, [sp, #28]
 8009c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c16:	931a      	str	r3, [sp, #104]	; 0x68
 8009c18:	4654      	mov	r4, sl
 8009c1a:	2205      	movs	r2, #5
 8009c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c20:	4851      	ldr	r0, [pc, #324]	; (8009d68 <_svfiprintf_r+0x1ec>)
 8009c22:	f7f6 fb15 	bl	8000250 <memchr>
 8009c26:	9a04      	ldr	r2, [sp, #16]
 8009c28:	b9d8      	cbnz	r0, 8009c62 <_svfiprintf_r+0xe6>
 8009c2a:	06d0      	lsls	r0, r2, #27
 8009c2c:	bf44      	itt	mi
 8009c2e:	2320      	movmi	r3, #32
 8009c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c34:	0711      	lsls	r1, r2, #28
 8009c36:	bf44      	itt	mi
 8009c38:	232b      	movmi	r3, #43	; 0x2b
 8009c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c42:	2b2a      	cmp	r3, #42	; 0x2a
 8009c44:	d015      	beq.n	8009c72 <_svfiprintf_r+0xf6>
 8009c46:	9a07      	ldr	r2, [sp, #28]
 8009c48:	4654      	mov	r4, sl
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	f04f 0c0a 	mov.w	ip, #10
 8009c50:	4621      	mov	r1, r4
 8009c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c56:	3b30      	subs	r3, #48	; 0x30
 8009c58:	2b09      	cmp	r3, #9
 8009c5a:	d94e      	bls.n	8009cfa <_svfiprintf_r+0x17e>
 8009c5c:	b1b0      	cbz	r0, 8009c8c <_svfiprintf_r+0x110>
 8009c5e:	9207      	str	r2, [sp, #28]
 8009c60:	e014      	b.n	8009c8c <_svfiprintf_r+0x110>
 8009c62:	eba0 0308 	sub.w	r3, r0, r8
 8009c66:	fa09 f303 	lsl.w	r3, r9, r3
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	46a2      	mov	sl, r4
 8009c70:	e7d2      	b.n	8009c18 <_svfiprintf_r+0x9c>
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	1d19      	adds	r1, r3, #4
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	9103      	str	r1, [sp, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	bfbb      	ittet	lt
 8009c7e:	425b      	neglt	r3, r3
 8009c80:	f042 0202 	orrlt.w	r2, r2, #2
 8009c84:	9307      	strge	r3, [sp, #28]
 8009c86:	9307      	strlt	r3, [sp, #28]
 8009c88:	bfb8      	it	lt
 8009c8a:	9204      	strlt	r2, [sp, #16]
 8009c8c:	7823      	ldrb	r3, [r4, #0]
 8009c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c90:	d10c      	bne.n	8009cac <_svfiprintf_r+0x130>
 8009c92:	7863      	ldrb	r3, [r4, #1]
 8009c94:	2b2a      	cmp	r3, #42	; 0x2a
 8009c96:	d135      	bne.n	8009d04 <_svfiprintf_r+0x188>
 8009c98:	9b03      	ldr	r3, [sp, #12]
 8009c9a:	1d1a      	adds	r2, r3, #4
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	9203      	str	r2, [sp, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bfb8      	it	lt
 8009ca4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ca8:	3402      	adds	r4, #2
 8009caa:	9305      	str	r3, [sp, #20]
 8009cac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d78 <_svfiprintf_r+0x1fc>
 8009cb0:	7821      	ldrb	r1, [r4, #0]
 8009cb2:	2203      	movs	r2, #3
 8009cb4:	4650      	mov	r0, sl
 8009cb6:	f7f6 facb 	bl	8000250 <memchr>
 8009cba:	b140      	cbz	r0, 8009cce <_svfiprintf_r+0x152>
 8009cbc:	2340      	movs	r3, #64	; 0x40
 8009cbe:	eba0 000a 	sub.w	r0, r0, sl
 8009cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8009cc6:	9b04      	ldr	r3, [sp, #16]
 8009cc8:	4303      	orrs	r3, r0
 8009cca:	3401      	adds	r4, #1
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd2:	4826      	ldr	r0, [pc, #152]	; (8009d6c <_svfiprintf_r+0x1f0>)
 8009cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cd8:	2206      	movs	r2, #6
 8009cda:	f7f6 fab9 	bl	8000250 <memchr>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d038      	beq.n	8009d54 <_svfiprintf_r+0x1d8>
 8009ce2:	4b23      	ldr	r3, [pc, #140]	; (8009d70 <_svfiprintf_r+0x1f4>)
 8009ce4:	bb1b      	cbnz	r3, 8009d2e <_svfiprintf_r+0x1b2>
 8009ce6:	9b03      	ldr	r3, [sp, #12]
 8009ce8:	3307      	adds	r3, #7
 8009cea:	f023 0307 	bic.w	r3, r3, #7
 8009cee:	3308      	adds	r3, #8
 8009cf0:	9303      	str	r3, [sp, #12]
 8009cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf4:	4433      	add	r3, r6
 8009cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf8:	e767      	b.n	8009bca <_svfiprintf_r+0x4e>
 8009cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cfe:	460c      	mov	r4, r1
 8009d00:	2001      	movs	r0, #1
 8009d02:	e7a5      	b.n	8009c50 <_svfiprintf_r+0xd4>
 8009d04:	2300      	movs	r3, #0
 8009d06:	3401      	adds	r4, #1
 8009d08:	9305      	str	r3, [sp, #20]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f04f 0c0a 	mov.w	ip, #10
 8009d10:	4620      	mov	r0, r4
 8009d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d16:	3a30      	subs	r2, #48	; 0x30
 8009d18:	2a09      	cmp	r2, #9
 8009d1a:	d903      	bls.n	8009d24 <_svfiprintf_r+0x1a8>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0c5      	beq.n	8009cac <_svfiprintf_r+0x130>
 8009d20:	9105      	str	r1, [sp, #20]
 8009d22:	e7c3      	b.n	8009cac <_svfiprintf_r+0x130>
 8009d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d28:	4604      	mov	r4, r0
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e7f0      	b.n	8009d10 <_svfiprintf_r+0x194>
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	462a      	mov	r2, r5
 8009d34:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <_svfiprintf_r+0x1f8>)
 8009d36:	a904      	add	r1, sp, #16
 8009d38:	4638      	mov	r0, r7
 8009d3a:	f7fd ffc1 	bl	8007cc0 <_printf_float>
 8009d3e:	1c42      	adds	r2, r0, #1
 8009d40:	4606      	mov	r6, r0
 8009d42:	d1d6      	bne.n	8009cf2 <_svfiprintf_r+0x176>
 8009d44:	89ab      	ldrh	r3, [r5, #12]
 8009d46:	065b      	lsls	r3, r3, #25
 8009d48:	f53f af2c 	bmi.w	8009ba4 <_svfiprintf_r+0x28>
 8009d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d4e:	b01d      	add	sp, #116	; 0x74
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	ab03      	add	r3, sp, #12
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	462a      	mov	r2, r5
 8009d5a:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <_svfiprintf_r+0x1f8>)
 8009d5c:	a904      	add	r1, sp, #16
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f7fe fa3a 	bl	80081d8 <_printf_i>
 8009d64:	e7eb      	b.n	8009d3e <_svfiprintf_r+0x1c2>
 8009d66:	bf00      	nop
 8009d68:	0800ad34 	.word	0x0800ad34
 8009d6c:	0800ad3e 	.word	0x0800ad3e
 8009d70:	08007cc1 	.word	0x08007cc1
 8009d74:	08009ac5 	.word	0x08009ac5
 8009d78:	0800ad3a 	.word	0x0800ad3a

08009d7c <_sbrk_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d06      	ldr	r5, [pc, #24]	; (8009d98 <_sbrk_r+0x1c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f8 fad6 	bl	8002338 <_sbrk>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_sbrk_r+0x1a>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_sbrk_r+0x1a>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20000934 	.word	0x20000934

08009d9c <__assert_func>:
 8009d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d9e:	4614      	mov	r4, r2
 8009da0:	461a      	mov	r2, r3
 8009da2:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <__assert_func+0x2c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4605      	mov	r5, r0
 8009da8:	68d8      	ldr	r0, [r3, #12]
 8009daa:	b14c      	cbz	r4, 8009dc0 <__assert_func+0x24>
 8009dac:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <__assert_func+0x30>)
 8009dae:	9100      	str	r1, [sp, #0]
 8009db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009db4:	4906      	ldr	r1, [pc, #24]	; (8009dd0 <__assert_func+0x34>)
 8009db6:	462b      	mov	r3, r5
 8009db8:	f000 f80e 	bl	8009dd8 <fiprintf>
 8009dbc:	f000 faac 	bl	800a318 <abort>
 8009dc0:	4b04      	ldr	r3, [pc, #16]	; (8009dd4 <__assert_func+0x38>)
 8009dc2:	461c      	mov	r4, r3
 8009dc4:	e7f3      	b.n	8009dae <__assert_func+0x12>
 8009dc6:	bf00      	nop
 8009dc8:	20000028 	.word	0x20000028
 8009dcc:	0800ad45 	.word	0x0800ad45
 8009dd0:	0800ad52 	.word	0x0800ad52
 8009dd4:	0800ad80 	.word	0x0800ad80

08009dd8 <fiprintf>:
 8009dd8:	b40e      	push	{r1, r2, r3}
 8009dda:	b503      	push	{r0, r1, lr}
 8009ddc:	4601      	mov	r1, r0
 8009dde:	ab03      	add	r3, sp, #12
 8009de0:	4805      	ldr	r0, [pc, #20]	; (8009df8 <fiprintf+0x20>)
 8009de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de6:	6800      	ldr	r0, [r0, #0]
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	f000 f897 	bl	8009f1c <_vfiprintf_r>
 8009dee:	b002      	add	sp, #8
 8009df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df4:	b003      	add	sp, #12
 8009df6:	4770      	bx	lr
 8009df8:	20000028 	.word	0x20000028

08009dfc <__ascii_mbtowc>:
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	b901      	cbnz	r1, 8009e02 <__ascii_mbtowc+0x6>
 8009e00:	a901      	add	r1, sp, #4
 8009e02:	b142      	cbz	r2, 8009e16 <__ascii_mbtowc+0x1a>
 8009e04:	b14b      	cbz	r3, 8009e1a <__ascii_mbtowc+0x1e>
 8009e06:	7813      	ldrb	r3, [r2, #0]
 8009e08:	600b      	str	r3, [r1, #0]
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	1e10      	subs	r0, r2, #0
 8009e0e:	bf18      	it	ne
 8009e10:	2001      	movne	r0, #1
 8009e12:	b002      	add	sp, #8
 8009e14:	4770      	bx	lr
 8009e16:	4610      	mov	r0, r2
 8009e18:	e7fb      	b.n	8009e12 <__ascii_mbtowc+0x16>
 8009e1a:	f06f 0001 	mvn.w	r0, #1
 8009e1e:	e7f8      	b.n	8009e12 <__ascii_mbtowc+0x16>

08009e20 <memmove>:
 8009e20:	4288      	cmp	r0, r1
 8009e22:	b510      	push	{r4, lr}
 8009e24:	eb01 0402 	add.w	r4, r1, r2
 8009e28:	d902      	bls.n	8009e30 <memmove+0x10>
 8009e2a:	4284      	cmp	r4, r0
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	d807      	bhi.n	8009e40 <memmove+0x20>
 8009e30:	1e43      	subs	r3, r0, #1
 8009e32:	42a1      	cmp	r1, r4
 8009e34:	d008      	beq.n	8009e48 <memmove+0x28>
 8009e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e3e:	e7f8      	b.n	8009e32 <memmove+0x12>
 8009e40:	4402      	add	r2, r0
 8009e42:	4601      	mov	r1, r0
 8009e44:	428a      	cmp	r2, r1
 8009e46:	d100      	bne.n	8009e4a <memmove+0x2a>
 8009e48:	bd10      	pop	{r4, pc}
 8009e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e52:	e7f7      	b.n	8009e44 <memmove+0x24>

08009e54 <__malloc_lock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__malloc_lock+0x8>)
 8009e56:	f000 bc1f 	b.w	800a698 <__retarget_lock_acquire_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20000938 	.word	0x20000938

08009e60 <__malloc_unlock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__malloc_unlock+0x8>)
 8009e62:	f000 bc1a 	b.w	800a69a <__retarget_lock_release_recursive>
 8009e66:	bf00      	nop
 8009e68:	20000938 	.word	0x20000938

08009e6c <_realloc_r>:
 8009e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	4680      	mov	r8, r0
 8009e72:	4614      	mov	r4, r2
 8009e74:	460e      	mov	r6, r1
 8009e76:	b921      	cbnz	r1, 8009e82 <_realloc_r+0x16>
 8009e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	f7ff bdad 	b.w	80099dc <_malloc_r>
 8009e82:	b92a      	cbnz	r2, 8009e90 <_realloc_r+0x24>
 8009e84:	f7ff fd3e 	bl	8009904 <_free_r>
 8009e88:	4625      	mov	r5, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	f000 fc6a 	bl	800a768 <_malloc_usable_size_r>
 8009e94:	4284      	cmp	r4, r0
 8009e96:	4607      	mov	r7, r0
 8009e98:	d802      	bhi.n	8009ea0 <_realloc_r+0x34>
 8009e9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e9e:	d812      	bhi.n	8009ec6 <_realloc_r+0x5a>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f7ff fd9a 	bl	80099dc <_malloc_r>
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0ed      	beq.n	8009e8a <_realloc_r+0x1e>
 8009eae:	42bc      	cmp	r4, r7
 8009eb0:	4622      	mov	r2, r4
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	bf28      	it	cs
 8009eb6:	463a      	movcs	r2, r7
 8009eb8:	f7ff f97c 	bl	80091b4 <memcpy>
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	f7ff fd20 	bl	8009904 <_free_r>
 8009ec4:	e7e1      	b.n	8009e8a <_realloc_r+0x1e>
 8009ec6:	4635      	mov	r5, r6
 8009ec8:	e7df      	b.n	8009e8a <_realloc_r+0x1e>

08009eca <__sfputc_r>:
 8009eca:	6893      	ldr	r3, [r2, #8]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	b410      	push	{r4}
 8009ed2:	6093      	str	r3, [r2, #8]
 8009ed4:	da08      	bge.n	8009ee8 <__sfputc_r+0x1e>
 8009ed6:	6994      	ldr	r4, [r2, #24]
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	db01      	blt.n	8009ee0 <__sfputc_r+0x16>
 8009edc:	290a      	cmp	r1, #10
 8009ede:	d103      	bne.n	8009ee8 <__sfputc_r+0x1e>
 8009ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee4:	f000 b94a 	b.w	800a17c <__swbuf_r>
 8009ee8:	6813      	ldr	r3, [r2, #0]
 8009eea:	1c58      	adds	r0, r3, #1
 8009eec:	6010      	str	r0, [r2, #0]
 8009eee:	7019      	strb	r1, [r3, #0]
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <__sfputs_r>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	4606      	mov	r6, r0
 8009efc:	460f      	mov	r7, r1
 8009efe:	4614      	mov	r4, r2
 8009f00:	18d5      	adds	r5, r2, r3
 8009f02:	42ac      	cmp	r4, r5
 8009f04:	d101      	bne.n	8009f0a <__sfputs_r+0x12>
 8009f06:	2000      	movs	r0, #0
 8009f08:	e007      	b.n	8009f1a <__sfputs_r+0x22>
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	463a      	mov	r2, r7
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff ffda 	bl	8009eca <__sfputc_r>
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d1f3      	bne.n	8009f02 <__sfputs_r+0xa>
 8009f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f1c <_vfiprintf_r>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	460d      	mov	r5, r1
 8009f22:	b09d      	sub	sp, #116	; 0x74
 8009f24:	4614      	mov	r4, r2
 8009f26:	4698      	mov	r8, r3
 8009f28:	4606      	mov	r6, r0
 8009f2a:	b118      	cbz	r0, 8009f34 <_vfiprintf_r+0x18>
 8009f2c:	6983      	ldr	r3, [r0, #24]
 8009f2e:	b90b      	cbnz	r3, 8009f34 <_vfiprintf_r+0x18>
 8009f30:	f000 fb14 	bl	800a55c <__sinit>
 8009f34:	4b89      	ldr	r3, [pc, #548]	; (800a15c <_vfiprintf_r+0x240>)
 8009f36:	429d      	cmp	r5, r3
 8009f38:	d11b      	bne.n	8009f72 <_vfiprintf_r+0x56>
 8009f3a:	6875      	ldr	r5, [r6, #4]
 8009f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f3e:	07d9      	lsls	r1, r3, #31
 8009f40:	d405      	bmi.n	8009f4e <_vfiprintf_r+0x32>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	059a      	lsls	r2, r3, #22
 8009f46:	d402      	bmi.n	8009f4e <_vfiprintf_r+0x32>
 8009f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4a:	f000 fba5 	bl	800a698 <__retarget_lock_acquire_recursive>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	071b      	lsls	r3, r3, #28
 8009f52:	d501      	bpl.n	8009f58 <_vfiprintf_r+0x3c>
 8009f54:	692b      	ldr	r3, [r5, #16]
 8009f56:	b9eb      	cbnz	r3, 8009f94 <_vfiprintf_r+0x78>
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f000 f96e 	bl	800a23c <__swsetup_r>
 8009f60:	b1c0      	cbz	r0, 8009f94 <_vfiprintf_r+0x78>
 8009f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f64:	07dc      	lsls	r4, r3, #31
 8009f66:	d50e      	bpl.n	8009f86 <_vfiprintf_r+0x6a>
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	b01d      	add	sp, #116	; 0x74
 8009f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f72:	4b7b      	ldr	r3, [pc, #492]	; (800a160 <_vfiprintf_r+0x244>)
 8009f74:	429d      	cmp	r5, r3
 8009f76:	d101      	bne.n	8009f7c <_vfiprintf_r+0x60>
 8009f78:	68b5      	ldr	r5, [r6, #8]
 8009f7a:	e7df      	b.n	8009f3c <_vfiprintf_r+0x20>
 8009f7c:	4b79      	ldr	r3, [pc, #484]	; (800a164 <_vfiprintf_r+0x248>)
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	bf08      	it	eq
 8009f82:	68f5      	ldreq	r5, [r6, #12]
 8009f84:	e7da      	b.n	8009f3c <_vfiprintf_r+0x20>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	0598      	lsls	r0, r3, #22
 8009f8a:	d4ed      	bmi.n	8009f68 <_vfiprintf_r+0x4c>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8e:	f000 fb84 	bl	800a69a <__retarget_lock_release_recursive>
 8009f92:	e7e9      	b.n	8009f68 <_vfiprintf_r+0x4c>
 8009f94:	2300      	movs	r3, #0
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	2320      	movs	r3, #32
 8009f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa2:	2330      	movs	r3, #48	; 0x30
 8009fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a168 <_vfiprintf_r+0x24c>
 8009fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fac:	f04f 0901 	mov.w	r9, #1
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	469a      	mov	sl, r3
 8009fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb8:	b10a      	cbz	r2, 8009fbe <_vfiprintf_r+0xa2>
 8009fba:	2a25      	cmp	r2, #37	; 0x25
 8009fbc:	d1f9      	bne.n	8009fb2 <_vfiprintf_r+0x96>
 8009fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc2:	d00b      	beq.n	8009fdc <_vfiprintf_r+0xc0>
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7ff ff94 	bl	8009ef8 <__sfputs_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f000 80aa 	beq.w	800a12a <_vfiprintf_r+0x20e>
 8009fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd8:	445a      	add	r2, fp
 8009fda:	9209      	str	r2, [sp, #36]	; 0x24
 8009fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 80a2 	beq.w	800a12a <_vfiprintf_r+0x20e>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff0:	f10a 0a01 	add.w	sl, sl, #1
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8009ffe:	4654      	mov	r4, sl
 800a000:	2205      	movs	r2, #5
 800a002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a006:	4858      	ldr	r0, [pc, #352]	; (800a168 <_vfiprintf_r+0x24c>)
 800a008:	f7f6 f922 	bl	8000250 <memchr>
 800a00c:	9a04      	ldr	r2, [sp, #16]
 800a00e:	b9d8      	cbnz	r0, 800a048 <_vfiprintf_r+0x12c>
 800a010:	06d1      	lsls	r1, r2, #27
 800a012:	bf44      	itt	mi
 800a014:	2320      	movmi	r3, #32
 800a016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a01a:	0713      	lsls	r3, r2, #28
 800a01c:	bf44      	itt	mi
 800a01e:	232b      	movmi	r3, #43	; 0x2b
 800a020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a024:	f89a 3000 	ldrb.w	r3, [sl]
 800a028:	2b2a      	cmp	r3, #42	; 0x2a
 800a02a:	d015      	beq.n	800a058 <_vfiprintf_r+0x13c>
 800a02c:	9a07      	ldr	r2, [sp, #28]
 800a02e:	4654      	mov	r4, sl
 800a030:	2000      	movs	r0, #0
 800a032:	f04f 0c0a 	mov.w	ip, #10
 800a036:	4621      	mov	r1, r4
 800a038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a03c:	3b30      	subs	r3, #48	; 0x30
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d94e      	bls.n	800a0e0 <_vfiprintf_r+0x1c4>
 800a042:	b1b0      	cbz	r0, 800a072 <_vfiprintf_r+0x156>
 800a044:	9207      	str	r2, [sp, #28]
 800a046:	e014      	b.n	800a072 <_vfiprintf_r+0x156>
 800a048:	eba0 0308 	sub.w	r3, r0, r8
 800a04c:	fa09 f303 	lsl.w	r3, r9, r3
 800a050:	4313      	orrs	r3, r2
 800a052:	9304      	str	r3, [sp, #16]
 800a054:	46a2      	mov	sl, r4
 800a056:	e7d2      	b.n	8009ffe <_vfiprintf_r+0xe2>
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	1d19      	adds	r1, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	9103      	str	r1, [sp, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	bfbb      	ittet	lt
 800a064:	425b      	neglt	r3, r3
 800a066:	f042 0202 	orrlt.w	r2, r2, #2
 800a06a:	9307      	strge	r3, [sp, #28]
 800a06c:	9307      	strlt	r3, [sp, #28]
 800a06e:	bfb8      	it	lt
 800a070:	9204      	strlt	r2, [sp, #16]
 800a072:	7823      	ldrb	r3, [r4, #0]
 800a074:	2b2e      	cmp	r3, #46	; 0x2e
 800a076:	d10c      	bne.n	800a092 <_vfiprintf_r+0x176>
 800a078:	7863      	ldrb	r3, [r4, #1]
 800a07a:	2b2a      	cmp	r3, #42	; 0x2a
 800a07c:	d135      	bne.n	800a0ea <_vfiprintf_r+0x1ce>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	1d1a      	adds	r2, r3, #4
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	9203      	str	r2, [sp, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfb8      	it	lt
 800a08a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a08e:	3402      	adds	r4, #2
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a178 <_vfiprintf_r+0x25c>
 800a096:	7821      	ldrb	r1, [r4, #0]
 800a098:	2203      	movs	r2, #3
 800a09a:	4650      	mov	r0, sl
 800a09c:	f7f6 f8d8 	bl	8000250 <memchr>
 800a0a0:	b140      	cbz	r0, 800a0b4 <_vfiprintf_r+0x198>
 800a0a2:	2340      	movs	r3, #64	; 0x40
 800a0a4:	eba0 000a 	sub.w	r0, r0, sl
 800a0a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ac:	9b04      	ldr	r3, [sp, #16]
 800a0ae:	4303      	orrs	r3, r0
 800a0b0:	3401      	adds	r4, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b8:	482c      	ldr	r0, [pc, #176]	; (800a16c <_vfiprintf_r+0x250>)
 800a0ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0be:	2206      	movs	r2, #6
 800a0c0:	f7f6 f8c6 	bl	8000250 <memchr>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d03f      	beq.n	800a148 <_vfiprintf_r+0x22c>
 800a0c8:	4b29      	ldr	r3, [pc, #164]	; (800a170 <_vfiprintf_r+0x254>)
 800a0ca:	bb1b      	cbnz	r3, 800a114 <_vfiprintf_r+0x1f8>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	3307      	adds	r3, #7
 800a0d0:	f023 0307 	bic.w	r3, r3, #7
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	9303      	str	r3, [sp, #12]
 800a0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0da:	443b      	add	r3, r7
 800a0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0de:	e767      	b.n	8009fb0 <_vfiprintf_r+0x94>
 800a0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	e7a5      	b.n	800a036 <_vfiprintf_r+0x11a>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	3401      	adds	r4, #1
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f04f 0c0a 	mov.w	ip, #10
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fc:	3a30      	subs	r2, #48	; 0x30
 800a0fe:	2a09      	cmp	r2, #9
 800a100:	d903      	bls.n	800a10a <_vfiprintf_r+0x1ee>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0c5      	beq.n	800a092 <_vfiprintf_r+0x176>
 800a106:	9105      	str	r1, [sp, #20]
 800a108:	e7c3      	b.n	800a092 <_vfiprintf_r+0x176>
 800a10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a10e:	4604      	mov	r4, r0
 800a110:	2301      	movs	r3, #1
 800a112:	e7f0      	b.n	800a0f6 <_vfiprintf_r+0x1da>
 800a114:	ab03      	add	r3, sp, #12
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	462a      	mov	r2, r5
 800a11a:	4b16      	ldr	r3, [pc, #88]	; (800a174 <_vfiprintf_r+0x258>)
 800a11c:	a904      	add	r1, sp, #16
 800a11e:	4630      	mov	r0, r6
 800a120:	f7fd fdce 	bl	8007cc0 <_printf_float>
 800a124:	4607      	mov	r7, r0
 800a126:	1c78      	adds	r0, r7, #1
 800a128:	d1d6      	bne.n	800a0d8 <_vfiprintf_r+0x1bc>
 800a12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a12c:	07d9      	lsls	r1, r3, #31
 800a12e:	d405      	bmi.n	800a13c <_vfiprintf_r+0x220>
 800a130:	89ab      	ldrh	r3, [r5, #12]
 800a132:	059a      	lsls	r2, r3, #22
 800a134:	d402      	bmi.n	800a13c <_vfiprintf_r+0x220>
 800a136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a138:	f000 faaf 	bl	800a69a <__retarget_lock_release_recursive>
 800a13c:	89ab      	ldrh	r3, [r5, #12]
 800a13e:	065b      	lsls	r3, r3, #25
 800a140:	f53f af12 	bmi.w	8009f68 <_vfiprintf_r+0x4c>
 800a144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a146:	e711      	b.n	8009f6c <_vfiprintf_r+0x50>
 800a148:	ab03      	add	r3, sp, #12
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	462a      	mov	r2, r5
 800a14e:	4b09      	ldr	r3, [pc, #36]	; (800a174 <_vfiprintf_r+0x258>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	4630      	mov	r0, r6
 800a154:	f7fe f840 	bl	80081d8 <_printf_i>
 800a158:	e7e4      	b.n	800a124 <_vfiprintf_r+0x208>
 800a15a:	bf00      	nop
 800a15c:	0800adac 	.word	0x0800adac
 800a160:	0800adcc 	.word	0x0800adcc
 800a164:	0800ad8c 	.word	0x0800ad8c
 800a168:	0800ad34 	.word	0x0800ad34
 800a16c:	0800ad3e 	.word	0x0800ad3e
 800a170:	08007cc1 	.word	0x08007cc1
 800a174:	08009ef9 	.word	0x08009ef9
 800a178:	0800ad3a 	.word	0x0800ad3a

0800a17c <__swbuf_r>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	460e      	mov	r6, r1
 800a180:	4614      	mov	r4, r2
 800a182:	4605      	mov	r5, r0
 800a184:	b118      	cbz	r0, 800a18e <__swbuf_r+0x12>
 800a186:	6983      	ldr	r3, [r0, #24]
 800a188:	b90b      	cbnz	r3, 800a18e <__swbuf_r+0x12>
 800a18a:	f000 f9e7 	bl	800a55c <__sinit>
 800a18e:	4b21      	ldr	r3, [pc, #132]	; (800a214 <__swbuf_r+0x98>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d12b      	bne.n	800a1ec <__swbuf_r+0x70>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	69a3      	ldr	r3, [r4, #24]
 800a198:	60a3      	str	r3, [r4, #8]
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	071a      	lsls	r2, r3, #28
 800a19e:	d52f      	bpl.n	800a200 <__swbuf_r+0x84>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	b36b      	cbz	r3, 800a200 <__swbuf_r+0x84>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	1ac0      	subs	r0, r0, r3
 800a1aa:	6963      	ldr	r3, [r4, #20]
 800a1ac:	b2f6      	uxtb	r6, r6
 800a1ae:	4283      	cmp	r3, r0
 800a1b0:	4637      	mov	r7, r6
 800a1b2:	dc04      	bgt.n	800a1be <__swbuf_r+0x42>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 f93c 	bl	800a434 <_fflush_r>
 800a1bc:	bb30      	cbnz	r0, 800a20c <__swbuf_r+0x90>
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	6022      	str	r2, [r4, #0]
 800a1ca:	701e      	strb	r6, [r3, #0]
 800a1cc:	6963      	ldr	r3, [r4, #20]
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	4283      	cmp	r3, r0
 800a1d2:	d004      	beq.n	800a1de <__swbuf_r+0x62>
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	07db      	lsls	r3, r3, #31
 800a1d8:	d506      	bpl.n	800a1e8 <__swbuf_r+0x6c>
 800a1da:	2e0a      	cmp	r6, #10
 800a1dc:	d104      	bne.n	800a1e8 <__swbuf_r+0x6c>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 f927 	bl	800a434 <_fflush_r>
 800a1e6:	b988      	cbnz	r0, 800a20c <__swbuf_r+0x90>
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <__swbuf_r+0x9c>)
 800a1ee:	429c      	cmp	r4, r3
 800a1f0:	d101      	bne.n	800a1f6 <__swbuf_r+0x7a>
 800a1f2:	68ac      	ldr	r4, [r5, #8]
 800a1f4:	e7cf      	b.n	800a196 <__swbuf_r+0x1a>
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <__swbuf_r+0xa0>)
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	bf08      	it	eq
 800a1fc:	68ec      	ldreq	r4, [r5, #12]
 800a1fe:	e7ca      	b.n	800a196 <__swbuf_r+0x1a>
 800a200:	4621      	mov	r1, r4
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f81a 	bl	800a23c <__swsetup_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d0cb      	beq.n	800a1a4 <__swbuf_r+0x28>
 800a20c:	f04f 37ff 	mov.w	r7, #4294967295
 800a210:	e7ea      	b.n	800a1e8 <__swbuf_r+0x6c>
 800a212:	bf00      	nop
 800a214:	0800adac 	.word	0x0800adac
 800a218:	0800adcc 	.word	0x0800adcc
 800a21c:	0800ad8c 	.word	0x0800ad8c

0800a220 <__ascii_wctomb>:
 800a220:	b149      	cbz	r1, 800a236 <__ascii_wctomb+0x16>
 800a222:	2aff      	cmp	r2, #255	; 0xff
 800a224:	bf85      	ittet	hi
 800a226:	238a      	movhi	r3, #138	; 0x8a
 800a228:	6003      	strhi	r3, [r0, #0]
 800a22a:	700a      	strbls	r2, [r1, #0]
 800a22c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a230:	bf98      	it	ls
 800a232:	2001      	movls	r0, #1
 800a234:	4770      	bx	lr
 800a236:	4608      	mov	r0, r1
 800a238:	4770      	bx	lr
	...

0800a23c <__swsetup_r>:
 800a23c:	4b32      	ldr	r3, [pc, #200]	; (800a308 <__swsetup_r+0xcc>)
 800a23e:	b570      	push	{r4, r5, r6, lr}
 800a240:	681d      	ldr	r5, [r3, #0]
 800a242:	4606      	mov	r6, r0
 800a244:	460c      	mov	r4, r1
 800a246:	b125      	cbz	r5, 800a252 <__swsetup_r+0x16>
 800a248:	69ab      	ldr	r3, [r5, #24]
 800a24a:	b913      	cbnz	r3, 800a252 <__swsetup_r+0x16>
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 f985 	bl	800a55c <__sinit>
 800a252:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <__swsetup_r+0xd0>)
 800a254:	429c      	cmp	r4, r3
 800a256:	d10f      	bne.n	800a278 <__swsetup_r+0x3c>
 800a258:	686c      	ldr	r4, [r5, #4]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a260:	0719      	lsls	r1, r3, #28
 800a262:	d42c      	bmi.n	800a2be <__swsetup_r+0x82>
 800a264:	06dd      	lsls	r5, r3, #27
 800a266:	d411      	bmi.n	800a28c <__swsetup_r+0x50>
 800a268:	2309      	movs	r3, #9
 800a26a:	6033      	str	r3, [r6, #0]
 800a26c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	f04f 30ff 	mov.w	r0, #4294967295
 800a276:	e03e      	b.n	800a2f6 <__swsetup_r+0xba>
 800a278:	4b25      	ldr	r3, [pc, #148]	; (800a310 <__swsetup_r+0xd4>)
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d101      	bne.n	800a282 <__swsetup_r+0x46>
 800a27e:	68ac      	ldr	r4, [r5, #8]
 800a280:	e7eb      	b.n	800a25a <__swsetup_r+0x1e>
 800a282:	4b24      	ldr	r3, [pc, #144]	; (800a314 <__swsetup_r+0xd8>)
 800a284:	429c      	cmp	r4, r3
 800a286:	bf08      	it	eq
 800a288:	68ec      	ldreq	r4, [r5, #12]
 800a28a:	e7e6      	b.n	800a25a <__swsetup_r+0x1e>
 800a28c:	0758      	lsls	r0, r3, #29
 800a28e:	d512      	bpl.n	800a2b6 <__swsetup_r+0x7a>
 800a290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a292:	b141      	cbz	r1, 800a2a6 <__swsetup_r+0x6a>
 800a294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a298:	4299      	cmp	r1, r3
 800a29a:	d002      	beq.n	800a2a2 <__swsetup_r+0x66>
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fb31 	bl	8009904 <_free_r>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6063      	str	r3, [r4, #4]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	f043 0308 	orr.w	r3, r3, #8
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	b94b      	cbnz	r3, 800a2d6 <__swsetup_r+0x9a>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2cc:	d003      	beq.n	800a2d6 <__swsetup_r+0x9a>
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 fa09 	bl	800a6e8 <__smakebuf_r>
 800a2d6:	89a0      	ldrh	r0, [r4, #12]
 800a2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2dc:	f010 0301 	ands.w	r3, r0, #1
 800a2e0:	d00a      	beq.n	800a2f8 <__swsetup_r+0xbc>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	6963      	ldr	r3, [r4, #20]
 800a2e8:	425b      	negs	r3, r3
 800a2ea:	61a3      	str	r3, [r4, #24]
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	b943      	cbnz	r3, 800a302 <__swsetup_r+0xc6>
 800a2f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2f4:	d1ba      	bne.n	800a26c <__swsetup_r+0x30>
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}
 800a2f8:	0781      	lsls	r1, r0, #30
 800a2fa:	bf58      	it	pl
 800a2fc:	6963      	ldrpl	r3, [r4, #20]
 800a2fe:	60a3      	str	r3, [r4, #8]
 800a300:	e7f4      	b.n	800a2ec <__swsetup_r+0xb0>
 800a302:	2000      	movs	r0, #0
 800a304:	e7f7      	b.n	800a2f6 <__swsetup_r+0xba>
 800a306:	bf00      	nop
 800a308:	20000028 	.word	0x20000028
 800a30c:	0800adac 	.word	0x0800adac
 800a310:	0800adcc 	.word	0x0800adcc
 800a314:	0800ad8c 	.word	0x0800ad8c

0800a318 <abort>:
 800a318:	b508      	push	{r3, lr}
 800a31a:	2006      	movs	r0, #6
 800a31c:	f000 fa54 	bl	800a7c8 <raise>
 800a320:	2001      	movs	r0, #1
 800a322:	f7f7 ff91 	bl	8002248 <_exit>
	...

0800a328 <__sflush_r>:
 800a328:	898a      	ldrh	r2, [r1, #12]
 800a32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32e:	4605      	mov	r5, r0
 800a330:	0710      	lsls	r0, r2, #28
 800a332:	460c      	mov	r4, r1
 800a334:	d458      	bmi.n	800a3e8 <__sflush_r+0xc0>
 800a336:	684b      	ldr	r3, [r1, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	dc05      	bgt.n	800a348 <__sflush_r+0x20>
 800a33c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	dc02      	bgt.n	800a348 <__sflush_r+0x20>
 800a342:	2000      	movs	r0, #0
 800a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a34a:	2e00      	cmp	r6, #0
 800a34c:	d0f9      	beq.n	800a342 <__sflush_r+0x1a>
 800a34e:	2300      	movs	r3, #0
 800a350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a354:	682f      	ldr	r7, [r5, #0]
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	d032      	beq.n	800a3c0 <__sflush_r+0x98>
 800a35a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	075a      	lsls	r2, r3, #29
 800a360:	d505      	bpl.n	800a36e <__sflush_r+0x46>
 800a362:	6863      	ldr	r3, [r4, #4]
 800a364:	1ac0      	subs	r0, r0, r3
 800a366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a368:	b10b      	cbz	r3, 800a36e <__sflush_r+0x46>
 800a36a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a36c:	1ac0      	subs	r0, r0, r3
 800a36e:	2300      	movs	r3, #0
 800a370:	4602      	mov	r2, r0
 800a372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a374:	6a21      	ldr	r1, [r4, #32]
 800a376:	4628      	mov	r0, r5
 800a378:	47b0      	blx	r6
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	d106      	bne.n	800a38e <__sflush_r+0x66>
 800a380:	6829      	ldr	r1, [r5, #0]
 800a382:	291d      	cmp	r1, #29
 800a384:	d82c      	bhi.n	800a3e0 <__sflush_r+0xb8>
 800a386:	4a2a      	ldr	r2, [pc, #168]	; (800a430 <__sflush_r+0x108>)
 800a388:	40ca      	lsrs	r2, r1
 800a38a:	07d6      	lsls	r6, r2, #31
 800a38c:	d528      	bpl.n	800a3e0 <__sflush_r+0xb8>
 800a38e:	2200      	movs	r2, #0
 800a390:	6062      	str	r2, [r4, #4]
 800a392:	04d9      	lsls	r1, r3, #19
 800a394:	6922      	ldr	r2, [r4, #16]
 800a396:	6022      	str	r2, [r4, #0]
 800a398:	d504      	bpl.n	800a3a4 <__sflush_r+0x7c>
 800a39a:	1c42      	adds	r2, r0, #1
 800a39c:	d101      	bne.n	800a3a2 <__sflush_r+0x7a>
 800a39e:	682b      	ldr	r3, [r5, #0]
 800a3a0:	b903      	cbnz	r3, 800a3a4 <__sflush_r+0x7c>
 800a3a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a3a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3a6:	602f      	str	r7, [r5, #0]
 800a3a8:	2900      	cmp	r1, #0
 800a3aa:	d0ca      	beq.n	800a342 <__sflush_r+0x1a>
 800a3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	d002      	beq.n	800a3ba <__sflush_r+0x92>
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f7ff faa5 	bl	8009904 <_free_r>
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a3be:	e7c1      	b.n	800a344 <__sflush_r+0x1c>
 800a3c0:	6a21      	ldr	r1, [r4, #32]
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	47b0      	blx	r6
 800a3c8:	1c41      	adds	r1, r0, #1
 800a3ca:	d1c7      	bne.n	800a35c <__sflush_r+0x34>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d0c4      	beq.n	800a35c <__sflush_r+0x34>
 800a3d2:	2b1d      	cmp	r3, #29
 800a3d4:	d001      	beq.n	800a3da <__sflush_r+0xb2>
 800a3d6:	2b16      	cmp	r3, #22
 800a3d8:	d101      	bne.n	800a3de <__sflush_r+0xb6>
 800a3da:	602f      	str	r7, [r5, #0]
 800a3dc:	e7b1      	b.n	800a342 <__sflush_r+0x1a>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e4:	81a3      	strh	r3, [r4, #12]
 800a3e6:	e7ad      	b.n	800a344 <__sflush_r+0x1c>
 800a3e8:	690f      	ldr	r7, [r1, #16]
 800a3ea:	2f00      	cmp	r7, #0
 800a3ec:	d0a9      	beq.n	800a342 <__sflush_r+0x1a>
 800a3ee:	0793      	lsls	r3, r2, #30
 800a3f0:	680e      	ldr	r6, [r1, #0]
 800a3f2:	bf08      	it	eq
 800a3f4:	694b      	ldreq	r3, [r1, #20]
 800a3f6:	600f      	str	r7, [r1, #0]
 800a3f8:	bf18      	it	ne
 800a3fa:	2300      	movne	r3, #0
 800a3fc:	eba6 0807 	sub.w	r8, r6, r7
 800a400:	608b      	str	r3, [r1, #8]
 800a402:	f1b8 0f00 	cmp.w	r8, #0
 800a406:	dd9c      	ble.n	800a342 <__sflush_r+0x1a>
 800a408:	6a21      	ldr	r1, [r4, #32]
 800a40a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a40c:	4643      	mov	r3, r8
 800a40e:	463a      	mov	r2, r7
 800a410:	4628      	mov	r0, r5
 800a412:	47b0      	blx	r6
 800a414:	2800      	cmp	r0, #0
 800a416:	dc06      	bgt.n	800a426 <__sflush_r+0xfe>
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a41e:	81a3      	strh	r3, [r4, #12]
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	e78e      	b.n	800a344 <__sflush_r+0x1c>
 800a426:	4407      	add	r7, r0
 800a428:	eba8 0800 	sub.w	r8, r8, r0
 800a42c:	e7e9      	b.n	800a402 <__sflush_r+0xda>
 800a42e:	bf00      	nop
 800a430:	20400001 	.word	0x20400001

0800a434 <_fflush_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	690b      	ldr	r3, [r1, #16]
 800a438:	4605      	mov	r5, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	b913      	cbnz	r3, 800a444 <_fflush_r+0x10>
 800a43e:	2500      	movs	r5, #0
 800a440:	4628      	mov	r0, r5
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	b118      	cbz	r0, 800a44e <_fflush_r+0x1a>
 800a446:	6983      	ldr	r3, [r0, #24]
 800a448:	b90b      	cbnz	r3, 800a44e <_fflush_r+0x1a>
 800a44a:	f000 f887 	bl	800a55c <__sinit>
 800a44e:	4b14      	ldr	r3, [pc, #80]	; (800a4a0 <_fflush_r+0x6c>)
 800a450:	429c      	cmp	r4, r3
 800a452:	d11b      	bne.n	800a48c <_fflush_r+0x58>
 800a454:	686c      	ldr	r4, [r5, #4]
 800a456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0ef      	beq.n	800a43e <_fflush_r+0xa>
 800a45e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a460:	07d0      	lsls	r0, r2, #31
 800a462:	d404      	bmi.n	800a46e <_fflush_r+0x3a>
 800a464:	0599      	lsls	r1, r3, #22
 800a466:	d402      	bmi.n	800a46e <_fflush_r+0x3a>
 800a468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a46a:	f000 f915 	bl	800a698 <__retarget_lock_acquire_recursive>
 800a46e:	4628      	mov	r0, r5
 800a470:	4621      	mov	r1, r4
 800a472:	f7ff ff59 	bl	800a328 <__sflush_r>
 800a476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a478:	07da      	lsls	r2, r3, #31
 800a47a:	4605      	mov	r5, r0
 800a47c:	d4e0      	bmi.n	800a440 <_fflush_r+0xc>
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	059b      	lsls	r3, r3, #22
 800a482:	d4dd      	bmi.n	800a440 <_fflush_r+0xc>
 800a484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a486:	f000 f908 	bl	800a69a <__retarget_lock_release_recursive>
 800a48a:	e7d9      	b.n	800a440 <_fflush_r+0xc>
 800a48c:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <_fflush_r+0x70>)
 800a48e:	429c      	cmp	r4, r3
 800a490:	d101      	bne.n	800a496 <_fflush_r+0x62>
 800a492:	68ac      	ldr	r4, [r5, #8]
 800a494:	e7df      	b.n	800a456 <_fflush_r+0x22>
 800a496:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <_fflush_r+0x74>)
 800a498:	429c      	cmp	r4, r3
 800a49a:	bf08      	it	eq
 800a49c:	68ec      	ldreq	r4, [r5, #12]
 800a49e:	e7da      	b.n	800a456 <_fflush_r+0x22>
 800a4a0:	0800adac 	.word	0x0800adac
 800a4a4:	0800adcc 	.word	0x0800adcc
 800a4a8:	0800ad8c 	.word	0x0800ad8c

0800a4ac <std>:
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	b510      	push	{r4, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4ba:	6083      	str	r3, [r0, #8]
 800a4bc:	8181      	strh	r1, [r0, #12]
 800a4be:	6643      	str	r3, [r0, #100]	; 0x64
 800a4c0:	81c2      	strh	r2, [r0, #14]
 800a4c2:	6183      	str	r3, [r0, #24]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	2208      	movs	r2, #8
 800a4c8:	305c      	adds	r0, #92	; 0x5c
 800a4ca:	f7fd fb5f 	bl	8007b8c <memset>
 800a4ce:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <std+0x38>)
 800a4d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a4d2:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <std+0x3c>)
 800a4d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4d6:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <std+0x40>)
 800a4d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4da:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <std+0x44>)
 800a4dc:	6224      	str	r4, [r4, #32]
 800a4de:	6323      	str	r3, [r4, #48]	; 0x30
 800a4e0:	bd10      	pop	{r4, pc}
 800a4e2:	bf00      	nop
 800a4e4:	0800a801 	.word	0x0800a801
 800a4e8:	0800a823 	.word	0x0800a823
 800a4ec:	0800a85b 	.word	0x0800a85b
 800a4f0:	0800a87f 	.word	0x0800a87f

0800a4f4 <_cleanup_r>:
 800a4f4:	4901      	ldr	r1, [pc, #4]	; (800a4fc <_cleanup_r+0x8>)
 800a4f6:	f000 b8af 	b.w	800a658 <_fwalk_reent>
 800a4fa:	bf00      	nop
 800a4fc:	0800a435 	.word	0x0800a435

0800a500 <__sfmoreglue>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	2268      	movs	r2, #104	; 0x68
 800a504:	1e4d      	subs	r5, r1, #1
 800a506:	4355      	muls	r5, r2
 800a508:	460e      	mov	r6, r1
 800a50a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a50e:	f7ff fa65 	bl	80099dc <_malloc_r>
 800a512:	4604      	mov	r4, r0
 800a514:	b140      	cbz	r0, 800a528 <__sfmoreglue+0x28>
 800a516:	2100      	movs	r1, #0
 800a518:	e9c0 1600 	strd	r1, r6, [r0]
 800a51c:	300c      	adds	r0, #12
 800a51e:	60a0      	str	r0, [r4, #8]
 800a520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a524:	f7fd fb32 	bl	8007b8c <memset>
 800a528:	4620      	mov	r0, r4
 800a52a:	bd70      	pop	{r4, r5, r6, pc}

0800a52c <__sfp_lock_acquire>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__sfp_lock_acquire+0x8>)
 800a52e:	f000 b8b3 	b.w	800a698 <__retarget_lock_acquire_recursive>
 800a532:	bf00      	nop
 800a534:	20000939 	.word	0x20000939

0800a538 <__sfp_lock_release>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__sfp_lock_release+0x8>)
 800a53a:	f000 b8ae 	b.w	800a69a <__retarget_lock_release_recursive>
 800a53e:	bf00      	nop
 800a540:	20000939 	.word	0x20000939

0800a544 <__sinit_lock_acquire>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__sinit_lock_acquire+0x8>)
 800a546:	f000 b8a7 	b.w	800a698 <__retarget_lock_acquire_recursive>
 800a54a:	bf00      	nop
 800a54c:	2000093a 	.word	0x2000093a

0800a550 <__sinit_lock_release>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__sinit_lock_release+0x8>)
 800a552:	f000 b8a2 	b.w	800a69a <__retarget_lock_release_recursive>
 800a556:	bf00      	nop
 800a558:	2000093a 	.word	0x2000093a

0800a55c <__sinit>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	4604      	mov	r4, r0
 800a560:	f7ff fff0 	bl	800a544 <__sinit_lock_acquire>
 800a564:	69a3      	ldr	r3, [r4, #24]
 800a566:	b11b      	cbz	r3, 800a570 <__sinit+0x14>
 800a568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a56c:	f7ff bff0 	b.w	800a550 <__sinit_lock_release>
 800a570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a574:	6523      	str	r3, [r4, #80]	; 0x50
 800a576:	4b13      	ldr	r3, [pc, #76]	; (800a5c4 <__sinit+0x68>)
 800a578:	4a13      	ldr	r2, [pc, #76]	; (800a5c8 <__sinit+0x6c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a57e:	42a3      	cmp	r3, r4
 800a580:	bf04      	itt	eq
 800a582:	2301      	moveq	r3, #1
 800a584:	61a3      	streq	r3, [r4, #24]
 800a586:	4620      	mov	r0, r4
 800a588:	f000 f820 	bl	800a5cc <__sfp>
 800a58c:	6060      	str	r0, [r4, #4]
 800a58e:	4620      	mov	r0, r4
 800a590:	f000 f81c 	bl	800a5cc <__sfp>
 800a594:	60a0      	str	r0, [r4, #8]
 800a596:	4620      	mov	r0, r4
 800a598:	f000 f818 	bl	800a5cc <__sfp>
 800a59c:	2200      	movs	r2, #0
 800a59e:	60e0      	str	r0, [r4, #12]
 800a5a0:	2104      	movs	r1, #4
 800a5a2:	6860      	ldr	r0, [r4, #4]
 800a5a4:	f7ff ff82 	bl	800a4ac <std>
 800a5a8:	68a0      	ldr	r0, [r4, #8]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	2109      	movs	r1, #9
 800a5ae:	f7ff ff7d 	bl	800a4ac <std>
 800a5b2:	68e0      	ldr	r0, [r4, #12]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	2112      	movs	r1, #18
 800a5b8:	f7ff ff78 	bl	800a4ac <std>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	61a3      	str	r3, [r4, #24]
 800a5c0:	e7d2      	b.n	800a568 <__sinit+0xc>
 800a5c2:	bf00      	nop
 800a5c4:	0800aa0c 	.word	0x0800aa0c
 800a5c8:	0800a4f5 	.word	0x0800a4f5

0800a5cc <__sfp>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	f7ff ffac 	bl	800a52c <__sfp_lock_acquire>
 800a5d4:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <__sfp+0x84>)
 800a5d6:	681e      	ldr	r6, [r3, #0]
 800a5d8:	69b3      	ldr	r3, [r6, #24]
 800a5da:	b913      	cbnz	r3, 800a5e2 <__sfp+0x16>
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ffbd 	bl	800a55c <__sinit>
 800a5e2:	3648      	adds	r6, #72	; 0x48
 800a5e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	d503      	bpl.n	800a5f4 <__sfp+0x28>
 800a5ec:	6833      	ldr	r3, [r6, #0]
 800a5ee:	b30b      	cbz	r3, 800a634 <__sfp+0x68>
 800a5f0:	6836      	ldr	r6, [r6, #0]
 800a5f2:	e7f7      	b.n	800a5e4 <__sfp+0x18>
 800a5f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5f8:	b9d5      	cbnz	r5, 800a630 <__sfp+0x64>
 800a5fa:	4b16      	ldr	r3, [pc, #88]	; (800a654 <__sfp+0x88>)
 800a5fc:	60e3      	str	r3, [r4, #12]
 800a5fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a602:	6665      	str	r5, [r4, #100]	; 0x64
 800a604:	f000 f847 	bl	800a696 <__retarget_lock_init_recursive>
 800a608:	f7ff ff96 	bl	800a538 <__sfp_lock_release>
 800a60c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a614:	6025      	str	r5, [r4, #0]
 800a616:	61a5      	str	r5, [r4, #24]
 800a618:	2208      	movs	r2, #8
 800a61a:	4629      	mov	r1, r5
 800a61c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a620:	f7fd fab4 	bl	8007b8c <memset>
 800a624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a62c:	4620      	mov	r0, r4
 800a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a630:	3468      	adds	r4, #104	; 0x68
 800a632:	e7d9      	b.n	800a5e8 <__sfp+0x1c>
 800a634:	2104      	movs	r1, #4
 800a636:	4638      	mov	r0, r7
 800a638:	f7ff ff62 	bl	800a500 <__sfmoreglue>
 800a63c:	4604      	mov	r4, r0
 800a63e:	6030      	str	r0, [r6, #0]
 800a640:	2800      	cmp	r0, #0
 800a642:	d1d5      	bne.n	800a5f0 <__sfp+0x24>
 800a644:	f7ff ff78 	bl	800a538 <__sfp_lock_release>
 800a648:	230c      	movs	r3, #12
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	e7ee      	b.n	800a62c <__sfp+0x60>
 800a64e:	bf00      	nop
 800a650:	0800aa0c 	.word	0x0800aa0c
 800a654:	ffff0001 	.word	0xffff0001

0800a658 <_fwalk_reent>:
 800a658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a65c:	4606      	mov	r6, r0
 800a65e:	4688      	mov	r8, r1
 800a660:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a664:	2700      	movs	r7, #0
 800a666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a66a:	f1b9 0901 	subs.w	r9, r9, #1
 800a66e:	d505      	bpl.n	800a67c <_fwalk_reent+0x24>
 800a670:	6824      	ldr	r4, [r4, #0]
 800a672:	2c00      	cmp	r4, #0
 800a674:	d1f7      	bne.n	800a666 <_fwalk_reent+0xe>
 800a676:	4638      	mov	r0, r7
 800a678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67c:	89ab      	ldrh	r3, [r5, #12]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d907      	bls.n	800a692 <_fwalk_reent+0x3a>
 800a682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a686:	3301      	adds	r3, #1
 800a688:	d003      	beq.n	800a692 <_fwalk_reent+0x3a>
 800a68a:	4629      	mov	r1, r5
 800a68c:	4630      	mov	r0, r6
 800a68e:	47c0      	blx	r8
 800a690:	4307      	orrs	r7, r0
 800a692:	3568      	adds	r5, #104	; 0x68
 800a694:	e7e9      	b.n	800a66a <_fwalk_reent+0x12>

0800a696 <__retarget_lock_init_recursive>:
 800a696:	4770      	bx	lr

0800a698 <__retarget_lock_acquire_recursive>:
 800a698:	4770      	bx	lr

0800a69a <__retarget_lock_release_recursive>:
 800a69a:	4770      	bx	lr

0800a69c <__swhatbuf_r>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	460e      	mov	r6, r1
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	b096      	sub	sp, #88	; 0x58
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	461d      	mov	r5, r3
 800a6ac:	da08      	bge.n	800a6c0 <__swhatbuf_r+0x24>
 800a6ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	602a      	str	r2, [r5, #0]
 800a6b6:	061a      	lsls	r2, r3, #24
 800a6b8:	d410      	bmi.n	800a6dc <__swhatbuf_r+0x40>
 800a6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6be:	e00e      	b.n	800a6de <__swhatbuf_r+0x42>
 800a6c0:	466a      	mov	r2, sp
 800a6c2:	f000 f903 	bl	800a8cc <_fstat_r>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	dbf1      	blt.n	800a6ae <__swhatbuf_r+0x12>
 800a6ca:	9a01      	ldr	r2, [sp, #4]
 800a6cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6d4:	425a      	negs	r2, r3
 800a6d6:	415a      	adcs	r2, r3
 800a6d8:	602a      	str	r2, [r5, #0]
 800a6da:	e7ee      	b.n	800a6ba <__swhatbuf_r+0x1e>
 800a6dc:	2340      	movs	r3, #64	; 0x40
 800a6de:	2000      	movs	r0, #0
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	b016      	add	sp, #88	; 0x58
 800a6e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6e8 <__smakebuf_r>:
 800a6e8:	898b      	ldrh	r3, [r1, #12]
 800a6ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6ec:	079d      	lsls	r5, r3, #30
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	d507      	bpl.n	800a704 <__smakebuf_r+0x1c>
 800a6f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	6163      	str	r3, [r4, #20]
 800a700:	b002      	add	sp, #8
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	ab01      	add	r3, sp, #4
 800a706:	466a      	mov	r2, sp
 800a708:	f7ff ffc8 	bl	800a69c <__swhatbuf_r>
 800a70c:	9900      	ldr	r1, [sp, #0]
 800a70e:	4605      	mov	r5, r0
 800a710:	4630      	mov	r0, r6
 800a712:	f7ff f963 	bl	80099dc <_malloc_r>
 800a716:	b948      	cbnz	r0, 800a72c <__smakebuf_r+0x44>
 800a718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71c:	059a      	lsls	r2, r3, #22
 800a71e:	d4ef      	bmi.n	800a700 <__smakebuf_r+0x18>
 800a720:	f023 0303 	bic.w	r3, r3, #3
 800a724:	f043 0302 	orr.w	r3, r3, #2
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	e7e3      	b.n	800a6f4 <__smakebuf_r+0xc>
 800a72c:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <__smakebuf_r+0x7c>)
 800a72e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	6020      	str	r0, [r4, #0]
 800a734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	9b00      	ldr	r3, [sp, #0]
 800a73c:	6163      	str	r3, [r4, #20]
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	6120      	str	r0, [r4, #16]
 800a742:	b15b      	cbz	r3, 800a75c <__smakebuf_r+0x74>
 800a744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a748:	4630      	mov	r0, r6
 800a74a:	f000 f8d1 	bl	800a8f0 <_isatty_r>
 800a74e:	b128      	cbz	r0, 800a75c <__smakebuf_r+0x74>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	f043 0301 	orr.w	r3, r3, #1
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	89a0      	ldrh	r0, [r4, #12]
 800a75e:	4305      	orrs	r5, r0
 800a760:	81a5      	strh	r5, [r4, #12]
 800a762:	e7cd      	b.n	800a700 <__smakebuf_r+0x18>
 800a764:	0800a4f5 	.word	0x0800a4f5

0800a768 <_malloc_usable_size_r>:
 800a768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a76c:	1f18      	subs	r0, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bfbc      	itt	lt
 800a772:	580b      	ldrlt	r3, [r1, r0]
 800a774:	18c0      	addlt	r0, r0, r3
 800a776:	4770      	bx	lr

0800a778 <_raise_r>:
 800a778:	291f      	cmp	r1, #31
 800a77a:	b538      	push	{r3, r4, r5, lr}
 800a77c:	4604      	mov	r4, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	d904      	bls.n	800a78c <_raise_r+0x14>
 800a782:	2316      	movs	r3, #22
 800a784:	6003      	str	r3, [r0, #0]
 800a786:	f04f 30ff 	mov.w	r0, #4294967295
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a78e:	b112      	cbz	r2, 800a796 <_raise_r+0x1e>
 800a790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a794:	b94b      	cbnz	r3, 800a7aa <_raise_r+0x32>
 800a796:	4620      	mov	r0, r4
 800a798:	f000 f830 	bl	800a7fc <_getpid_r>
 800a79c:	462a      	mov	r2, r5
 800a79e:	4601      	mov	r1, r0
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7a6:	f000 b817 	b.w	800a7d8 <_kill_r>
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d00a      	beq.n	800a7c4 <_raise_r+0x4c>
 800a7ae:	1c59      	adds	r1, r3, #1
 800a7b0:	d103      	bne.n	800a7ba <_raise_r+0x42>
 800a7b2:	2316      	movs	r3, #22
 800a7b4:	6003      	str	r3, [r0, #0]
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	e7e7      	b.n	800a78a <_raise_r+0x12>
 800a7ba:	2400      	movs	r4, #0
 800a7bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	4798      	blx	r3
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e7e0      	b.n	800a78a <_raise_r+0x12>

0800a7c8 <raise>:
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <raise+0xc>)
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	f7ff bfd3 	b.w	800a778 <_raise_r>
 800a7d2:	bf00      	nop
 800a7d4:	20000028 	.word	0x20000028

0800a7d8 <_kill_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d07      	ldr	r5, [pc, #28]	; (800a7f8 <_kill_r+0x20>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	602b      	str	r3, [r5, #0]
 800a7e6:	f7f7 fd1f 	bl	8002228 <_kill>
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	d102      	bne.n	800a7f4 <_kill_r+0x1c>
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	b103      	cbz	r3, 800a7f4 <_kill_r+0x1c>
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20000934 	.word	0x20000934

0800a7fc <_getpid_r>:
 800a7fc:	f7f7 bd0c 	b.w	8002218 <_getpid>

0800a800 <__sread>:
 800a800:	b510      	push	{r4, lr}
 800a802:	460c      	mov	r4, r1
 800a804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a808:	f000 f894 	bl	800a934 <_read_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	bfab      	itete	ge
 800a810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a812:	89a3      	ldrhlt	r3, [r4, #12]
 800a814:	181b      	addge	r3, r3, r0
 800a816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a81a:	bfac      	ite	ge
 800a81c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a81e:	81a3      	strhlt	r3, [r4, #12]
 800a820:	bd10      	pop	{r4, pc}

0800a822 <__swrite>:
 800a822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a826:	461f      	mov	r7, r3
 800a828:	898b      	ldrh	r3, [r1, #12]
 800a82a:	05db      	lsls	r3, r3, #23
 800a82c:	4605      	mov	r5, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	4616      	mov	r6, r2
 800a832:	d505      	bpl.n	800a840 <__swrite+0x1e>
 800a834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a838:	2302      	movs	r3, #2
 800a83a:	2200      	movs	r2, #0
 800a83c:	f000 f868 	bl	800a910 <_lseek_r>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	4632      	mov	r2, r6
 800a84e:	463b      	mov	r3, r7
 800a850:	4628      	mov	r0, r5
 800a852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a856:	f000 b817 	b.w	800a888 <_write_r>

0800a85a <__sseek>:
 800a85a:	b510      	push	{r4, lr}
 800a85c:	460c      	mov	r4, r1
 800a85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a862:	f000 f855 	bl	800a910 <_lseek_r>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	bf15      	itete	ne
 800a86c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a86e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a876:	81a3      	strheq	r3, [r4, #12]
 800a878:	bf18      	it	ne
 800a87a:	81a3      	strhne	r3, [r4, #12]
 800a87c:	bd10      	pop	{r4, pc}

0800a87e <__sclose>:
 800a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a882:	f000 b813 	b.w	800a8ac <_close_r>
	...

0800a888 <_write_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d07      	ldr	r5, [pc, #28]	; (800a8a8 <_write_r+0x20>)
 800a88c:	4604      	mov	r4, r0
 800a88e:	4608      	mov	r0, r1
 800a890:	4611      	mov	r1, r2
 800a892:	2200      	movs	r2, #0
 800a894:	602a      	str	r2, [r5, #0]
 800a896:	461a      	mov	r2, r3
 800a898:	f7f7 fcfd 	bl	8002296 <_write>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_write_r+0x1e>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_write_r+0x1e>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	20000934 	.word	0x20000934

0800a8ac <_close_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4d06      	ldr	r5, [pc, #24]	; (800a8c8 <_close_r+0x1c>)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	602b      	str	r3, [r5, #0]
 800a8b8:	f7f7 fd09 	bl	80022ce <_close>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_close_r+0x1a>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_close_r+0x1a>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	20000934 	.word	0x20000934

0800a8cc <_fstat_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4d07      	ldr	r5, [pc, #28]	; (800a8ec <_fstat_r+0x20>)
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	f7f7 fd04 	bl	80022e6 <_fstat>
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	d102      	bne.n	800a8e8 <_fstat_r+0x1c>
 800a8e2:	682b      	ldr	r3, [r5, #0]
 800a8e4:	b103      	cbz	r3, 800a8e8 <_fstat_r+0x1c>
 800a8e6:	6023      	str	r3, [r4, #0]
 800a8e8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000934 	.word	0x20000934

0800a8f0 <_isatty_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d06      	ldr	r5, [pc, #24]	; (800a90c <_isatty_r+0x1c>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f7 fd03 	bl	8002306 <_isatty>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <_isatty_r+0x1a>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b103      	cbz	r3, 800a90a <_isatty_r+0x1a>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	20000934 	.word	0x20000934

0800a910 <_lseek_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	; (800a930 <_lseek_r+0x20>)
 800a914:	4604      	mov	r4, r0
 800a916:	4608      	mov	r0, r1
 800a918:	4611      	mov	r1, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	f7f7 fcfc 	bl	800231c <_lseek>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_lseek_r+0x1e>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_lseek_r+0x1e>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	20000934 	.word	0x20000934

0800a934 <_read_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	; (800a954 <_read_r+0x20>)
 800a938:	4604      	mov	r4, r0
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	2200      	movs	r2, #0
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f7 fc8a 	bl	800225c <_read>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_read_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_read_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	20000934 	.word	0x20000934

0800a958 <_init>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	bf00      	nop
 800a95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95e:	bc08      	pop	{r3}
 800a960:	469e      	mov	lr, r3
 800a962:	4770      	bx	lr

0800a964 <_fini>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	bf00      	nop
 800a968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96a:	bc08      	pop	{r3}
 800a96c:	469e      	mov	lr, r3
 800a96e:	4770      	bx	lr
