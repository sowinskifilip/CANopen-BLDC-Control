
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007204  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d8  080075d8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080075e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000088  08007668  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  08007668  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a281  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330e  00000000  00000000  0003a337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cba  00000000  00000000  0003fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191dd  00000000  00000000  000698ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100ec6  00000000  00000000  00082aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018396d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000528c  00000000  00000000  001839c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000088 	.word	0x20000088
 8000214:	00000000 	.word	0x00000000
 8000218:	080073e4 	.word	0x080073e4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000008c 	.word	0x2000008c
 8000234:	080073e4 	.word	0x080073e4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_CAN1_Init+0x68>)
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <MX_CAN1_Init+0x6c>)
 8000538:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_CAN1_Init+0x68>)
 800053c:	2210      	movs	r2, #16
 800053e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_CAN1_Init+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_CAN1_Init+0x68>)
 8000548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800054c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_CAN1_Init+0x68>)
 8000550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000554:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_CAN1_Init+0x68>)
 8000558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800055c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_CAN1_Init+0x68>)
 8000560:	2200      	movs	r2, #0
 8000562:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_CAN1_Init+0x68>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CAN1_Init+0x68>)
 8000584:	f001 feb6 	bl	80022f4 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f001 fa9b 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000b0 	.word	0x200000b0
 800059c:	40006400 	.word	0x40006400

080005a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_CAN_MspInit+0x8c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12f      	bne.n	8000622 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	2303      	movs	r3, #3
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000602:	2309      	movs	r3, #9
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_CAN_MspInit+0x94>)
 800060e:	f002 fe83 	bl	8003318 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2014      	movs	r0, #20
 8000618:	f002 fdb5 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061c:	2014      	movs	r0, #20
 800061e:	f002 fdce 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40006400 	.word	0x40006400
 8000630:	40023800 	.word	0x40023800
 8000634:	40020c00 	.word	0x40020c00

08000638 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a6b      	ldr	r2, [pc, #428]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b69      	ldr	r3, [pc, #420]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a65      	ldr	r2, [pc, #404]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a5f      	ldr	r2, [pc, #380]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a53      	ldr	r2, [pc, #332]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e4:	4847      	ldr	r0, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1cc>)
 80006e6:	f002 ffc3 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80006f0:	f002 ffbe 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d4>)
 800070c:	f002 fe04 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <MX_GPIO_Init+0x1d4>)
 800072c:	f002 fdf4 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000730:	2386      	movs	r3, #134	; 0x86
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x1d8>)
 800074c:	f002 fde4 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000750:	f244 0381 	movw	r3, #16513	; 0x4081
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800076a:	f002 fdd5 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800078c:	f002 fdc4 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007a8:	f002 fdb6 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007c0:	f002 fdaa 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007e2:	f002 fd99 	bl	8003318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f002 fccb 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f002 fce4 	bl	80031be <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <fnLEDsErrorState+0x28>)
 800081e:	f002 ff27 	bl	8003670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <fnLEDsErrorState+0x28>)
 8000828:	f002 ff22 	bl	8003670 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000832:	4802      	ldr	r0, [pc, #8]	; (800083c <fnLEDsErrorState+0x28>)
 8000834:	f002 ff1c 	bl	8003670 <HAL_GPIO_WritePin>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020400 	.word	0x40020400

08000840 <fnInit>:


//INIT FUNCTION
void fnInit(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000844:	4bc6      	ldr	r3, [pc, #792]	; (8000b60 <fnInit+0x320>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b50      	cmp	r3, #80	; 0x50
 800084a:	f200 833a 	bhi.w	8000ec2 <fnInit+0x682>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <fnInit+0x14>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000999 	.word	0x08000999
 8000858:	08000ec3 	.word	0x08000ec3
 800085c:	08000ec3 	.word	0x08000ec3
 8000860:	08000ec3 	.word	0x08000ec3
 8000864:	08000ec3 	.word	0x08000ec3
 8000868:	080009e1 	.word	0x080009e1
 800086c:	08000ec3 	.word	0x08000ec3
 8000870:	08000ec3 	.word	0x08000ec3
 8000874:	08000ec3 	.word	0x08000ec3
 8000878:	08000ec3 	.word	0x08000ec3
 800087c:	08000a29 	.word	0x08000a29
 8000880:	08000ec3 	.word	0x08000ec3
 8000884:	08000ec3 	.word	0x08000ec3
 8000888:	08000ec3 	.word	0x08000ec3
 800088c:	08000ec3 	.word	0x08000ec3
 8000890:	08000ec3 	.word	0x08000ec3
 8000894:	08000ec3 	.word	0x08000ec3
 8000898:	08000ec3 	.word	0x08000ec3
 800089c:	08000ec3 	.word	0x08000ec3
 80008a0:	08000ec3 	.word	0x08000ec3
 80008a4:	08000a97 	.word	0x08000a97
 80008a8:	08000ec3 	.word	0x08000ec3
 80008ac:	08000ec3 	.word	0x08000ec3
 80008b0:	08000ec3 	.word	0x08000ec3
 80008b4:	08000ec3 	.word	0x08000ec3
 80008b8:	08000b05 	.word	0x08000b05
 80008bc:	08000ec3 	.word	0x08000ec3
 80008c0:	08000ec3 	.word	0x08000ec3
 80008c4:	08000ec3 	.word	0x08000ec3
 80008c8:	08000ec3 	.word	0x08000ec3
 80008cc:	08000b9d 	.word	0x08000b9d
 80008d0:	08000ec3 	.word	0x08000ec3
 80008d4:	08000ec3 	.word	0x08000ec3
 80008d8:	08000ec3 	.word	0x08000ec3
 80008dc:	08000ec3 	.word	0x08000ec3
 80008e0:	08000ec3 	.word	0x08000ec3
 80008e4:	08000ec3 	.word	0x08000ec3
 80008e8:	08000ec3 	.word	0x08000ec3
 80008ec:	08000ec3 	.word	0x08000ec3
 80008f0:	08000ec3 	.word	0x08000ec3
 80008f4:	08000c0b 	.word	0x08000c0b
 80008f8:	08000ec3 	.word	0x08000ec3
 80008fc:	08000ec3 	.word	0x08000ec3
 8000900:	08000ec3 	.word	0x08000ec3
 8000904:	08000ec3 	.word	0x08000ec3
 8000908:	08000ec3 	.word	0x08000ec3
 800090c:	08000ec3 	.word	0x08000ec3
 8000910:	08000ec3 	.word	0x08000ec3
 8000914:	08000ec3 	.word	0x08000ec3
 8000918:	08000ec3 	.word	0x08000ec3
 800091c:	08000c79 	.word	0x08000c79
 8000920:	08000ec3 	.word	0x08000ec3
 8000924:	08000ec3 	.word	0x08000ec3
 8000928:	08000ec3 	.word	0x08000ec3
 800092c:	08000ec3 	.word	0x08000ec3
 8000930:	08000ce7 	.word	0x08000ce7
 8000934:	08000ec3 	.word	0x08000ec3
 8000938:	08000ec3 	.word	0x08000ec3
 800093c:	08000ec3 	.word	0x08000ec3
 8000940:	08000ec3 	.word	0x08000ec3
 8000944:	08000d63 	.word	0x08000d63
 8000948:	08000ec3 	.word	0x08000ec3
 800094c:	08000ec3 	.word	0x08000ec3
 8000950:	08000ec3 	.word	0x08000ec3
 8000954:	08000ec3 	.word	0x08000ec3
 8000958:	08000ec3 	.word	0x08000ec3
 800095c:	08000ec3 	.word	0x08000ec3
 8000960:	08000ec3 	.word	0x08000ec3
 8000964:	08000ec3 	.word	0x08000ec3
 8000968:	08000ec3 	.word	0x08000ec3
 800096c:	08000dd1 	.word	0x08000dd1
 8000970:	08000ec3 	.word	0x08000ec3
 8000974:	08000ec3 	.word	0x08000ec3
 8000978:	08000ec3 	.word	0x08000ec3
 800097c:	08000ec3 	.word	0x08000ec3
 8000980:	08000ec3 	.word	0x08000ec3
 8000984:	08000ec3 	.word	0x08000ec3
 8000988:	08000ec3 	.word	0x08000ec3
 800098c:	08000ec3 	.word	0x08000ec3
 8000990:	08000ec3 	.word	0x08000ec3
 8000994:	08000e85 	.word	0x08000e85

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000998:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <fnInit+0x324>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 800099e:	4b71      	ldr	r3, [pc, #452]	; (8000b64 <fnInit+0x324>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 80009a4:	4b70      	ldr	r3, [pc, #448]	; (8000b68 <fnInit+0x328>)
 80009a6:	2282      	movs	r2, #130	; 0x82
 80009a8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009aa:	4b6f      	ldr	r3, [pc, #444]	; (8000b68 <fnInit+0x328>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009b0:	4b6e      	ldr	r3, [pc, #440]	; (8000b6c <fnInit+0x32c>)
 80009b2:	4a6d      	ldr	r2, [pc, #436]	; (8000b68 <fnInit+0x328>)
 80009b4:	496b      	ldr	r1, [pc, #428]	; (8000b64 <fnInit+0x324>)
 80009b6:	486e      	ldr	r0, [pc, #440]	; (8000b70 <fnInit+0x330>)
 80009b8:	f001 fec8 	bl	800274c <HAL_CAN_AddTxMessage>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <fnInit+0x18c>
			fnLEDsErrorState();
 80009c2:	f7ff ff27 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 80009c6:	f001 f87f 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 80009ca:	e27a      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 5;
 80009cc:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <fnInit+0x320>)
 80009ce:	2205      	movs	r2, #5
 80009d0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	2204      	movs	r2, #4
 80009d6:	4967      	ldr	r1, [pc, #412]	; (8000b74 <fnInit+0x334>)
 80009d8:	4867      	ldr	r0, [pc, #412]	; (8000b78 <fnInit+0x338>)
 80009da:	f004 fe77 	bl	80056cc <HAL_UART_Transmit>
		break;
 80009de:	e270      	b.n	8000ec2 <fnInit+0x682>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 80009e0:	4b60      	ldr	r3, [pc, #384]	; (8000b64 <fnInit+0x324>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <fnInit+0x324>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 80009ec:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <fnInit+0x328>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009f2:	4b5d      	ldr	r3, [pc, #372]	; (8000b68 <fnInit+0x328>)
 80009f4:	220a      	movs	r2, #10
 80009f6:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009f8:	4b5c      	ldr	r3, [pc, #368]	; (8000b6c <fnInit+0x32c>)
 80009fa:	4a5b      	ldr	r2, [pc, #364]	; (8000b68 <fnInit+0x328>)
 80009fc:	4959      	ldr	r1, [pc, #356]	; (8000b64 <fnInit+0x324>)
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <fnInit+0x330>)
 8000a00:	f001 fea4 	bl	800274c <HAL_CAN_AddTxMessage>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <fnInit+0x1d4>
			fnLEDsErrorState();
 8000a0a:	f7ff ff03 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000a0e:	f001 f85b 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000a12:	e256      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 10;
 8000a14:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <fnInit+0x320>)
 8000a16:	220a      	movs	r2, #10
 8000a18:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4957      	ldr	r1, [pc, #348]	; (8000b7c <fnInit+0x33c>)
 8000a20:	4855      	ldr	r0, [pc, #340]	; (8000b78 <fnInit+0x338>)
 8000a22:	f004 fe53 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000a26:	e24c      	b.n	8000ec2 <fnInit+0x682>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000a28:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <fnInit+0x324>)
 8000a2a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a2e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a30:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <fnInit+0x324>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000a36:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <fnInit+0x328>)
 8000a38:	2222      	movs	r2, #34	; 0x22
 8000a3a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <fnInit+0x328>)
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000a42:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <fnInit+0x328>)
 8000a44:	2260      	movs	r2, #96	; 0x60
 8000a46:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <fnInit+0x328>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000a4e:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <fnInit+0x328>)
 8000a50:	2206      	movs	r2, #6
 8000a52:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <fnInit+0x328>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <fnInit+0x328>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <fnInit+0x328>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <fnInit+0x32c>)
 8000a68:	4a3f      	ldr	r2, [pc, #252]	; (8000b68 <fnInit+0x328>)
 8000a6a:	493e      	ldr	r1, [pc, #248]	; (8000b64 <fnInit+0x324>)
 8000a6c:	4840      	ldr	r0, [pc, #256]	; (8000b70 <fnInit+0x330>)
 8000a6e:	f001 fe6d 	bl	800274c <HAL_CAN_AddTxMessage>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <fnInit+0x242>
			fnLEDsErrorState();
 8000a78:	f7ff fecc 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000a7c:	f001 f824 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000a80:	e21f      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 20;
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <fnInit+0x320>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	493c      	ldr	r1, [pc, #240]	; (8000b80 <fnInit+0x340>)
 8000a8e:	483a      	ldr	r0, [pc, #232]	; (8000b78 <fnInit+0x338>)
 8000a90:	f004 fe1c 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000a94:	e215      	b.n	8000ec2 <fnInit+0x682>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <fnInit+0x324>)
 8000a98:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a9c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <fnInit+0x324>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <fnInit+0x328>)
 8000aa6:	2222      	movs	r2, #34	; 0x22
 8000aa8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <fnInit+0x328>)
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <fnInit+0x328>)
 8000ab2:	2260      	movs	r2, #96	; 0x60
 8000ab4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <fnInit+0x328>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <fnInit+0x328>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <fnInit+0x328>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <fnInit+0x328>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <fnInit+0x328>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <fnInit+0x32c>)
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <fnInit+0x328>)
 8000ad8:	4922      	ldr	r1, [pc, #136]	; (8000b64 <fnInit+0x324>)
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <fnInit+0x330>)
 8000adc:	f001 fe36 	bl	800274c <HAL_CAN_AddTxMessage>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d004      	beq.n	8000af0 <fnInit+0x2b0>
			fnLEDsErrorState();
 8000ae6:	f7ff fe95 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000aea:	f000 ffed 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000aee:	e1e8      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 25;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <fnInit+0x320>)
 8000af2:	2219      	movs	r2, #25
 8000af4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2204      	movs	r2, #4
 8000afa:	4922      	ldr	r1, [pc, #136]	; (8000b84 <fnInit+0x344>)
 8000afc:	481e      	ldr	r0, [pc, #120]	; (8000b78 <fnInit+0x338>)
 8000afe:	f004 fde5 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000b02:	e1de      	b.n	8000ec2 <fnInit+0x682>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <fnInit+0x324>)
 8000b06:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b0a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <fnInit+0x324>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <fnInit+0x328>)
 8000b14:	2222      	movs	r2, #34	; 0x22
 8000b16:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <fnInit+0x328>)
 8000b1a:	2240      	movs	r2, #64	; 0x40
 8000b1c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <fnInit+0x328>)
 8000b20:	2260      	movs	r2, #96	; 0x60
 8000b22:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <fnInit+0x328>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <fnInit+0x328>)
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <fnInit+0x328>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <fnInit+0x328>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <fnInit+0x328>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <fnInit+0x32c>)
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <fnInit+0x328>)
 8000b46:	4907      	ldr	r1, [pc, #28]	; (8000b64 <fnInit+0x324>)
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <fnInit+0x330>)
 8000b4a:	f001 fdff 	bl	800274c <HAL_CAN_AddTxMessage>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d019      	beq.n	8000b88 <fnInit+0x348>
			fnLEDsErrorState();
 8000b54:	f7ff fe5e 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000b58:	f000 ffb6 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000b5c:	e1b1      	b.n	8000ec2 <fnInit+0x682>
 8000b5e:	bf00      	nop
 8000b60:	20000002 	.word	0x20000002
 8000b64:	2000012c 	.word	0x2000012c
 8000b68:	200000dc 	.word	0x200000dc
 8000b6c:	200000f4 	.word	0x200000f4
 8000b70:	200000b0 	.word	0x200000b0
 8000b74:	080073fc 	.word	0x080073fc
 8000b78:	20000290 	.word	0x20000290
 8000b7c:	08007404 	.word	0x08007404
 8000b80:	0800740c 	.word	0x0800740c
 8000b84:	08007414 	.word	0x08007414
			iMachineStatus = 30;
 8000b88:	4bb0      	ldr	r3, [pc, #704]	; (8000e4c <fnInit+0x60c>)
 8000b8a:	221e      	movs	r2, #30
 8000b8c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2204      	movs	r2, #4
 8000b92:	49af      	ldr	r1, [pc, #700]	; (8000e50 <fnInit+0x610>)
 8000b94:	48af      	ldr	r0, [pc, #700]	; (8000e54 <fnInit+0x614>)
 8000b96:	f004 fd99 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000b9a:	e192      	b.n	8000ec2 <fnInit+0x682>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000b9c:	4bae      	ldr	r3, [pc, #696]	; (8000e58 <fnInit+0x618>)
 8000b9e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ba2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ba4:	4bac      	ldr	r3, [pc, #688]	; (8000e58 <fnInit+0x618>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000baa:	4bac      	ldr	r3, [pc, #688]	; (8000e5c <fnInit+0x61c>)
 8000bac:	2222      	movs	r2, #34	; 0x22
 8000bae:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000bb0:	4baa      	ldr	r3, [pc, #680]	; (8000e5c <fnInit+0x61c>)
 8000bb2:	2260      	movs	r2, #96	; 0x60
 8000bb4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bb6:	4ba9      	ldr	r3, [pc, #676]	; (8000e5c <fnInit+0x61c>)
 8000bb8:	2260      	movs	r2, #96	; 0x60
 8000bba:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bbc:	4ba7      	ldr	r3, [pc, #668]	; (8000e5c <fnInit+0x61c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000bc2:	4ba6      	ldr	r3, [pc, #664]	; (8000e5c <fnInit+0x61c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bc8:	4ba4      	ldr	r3, [pc, #656]	; (8000e5c <fnInit+0x61c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bce:	4ba3      	ldr	r3, [pc, #652]	; (8000e5c <fnInit+0x61c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000bd4:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <fnInit+0x61c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000bda:	4ba1      	ldr	r3, [pc, #644]	; (8000e60 <fnInit+0x620>)
 8000bdc:	4a9f      	ldr	r2, [pc, #636]	; (8000e5c <fnInit+0x61c>)
 8000bde:	499e      	ldr	r1, [pc, #632]	; (8000e58 <fnInit+0x618>)
 8000be0:	48a0      	ldr	r0, [pc, #640]	; (8000e64 <fnInit+0x624>)
 8000be2:	f001 fdb3 	bl	800274c <HAL_CAN_AddTxMessage>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <fnInit+0x3b6>
			fnLEDsErrorState();
 8000bec:	f7ff fe12 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000bf0:	f000 ff6a 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000bf4:	e165      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 40;
 8000bf6:	4b95      	ldr	r3, [pc, #596]	; (8000e4c <fnInit+0x60c>)
 8000bf8:	2228      	movs	r2, #40	; 0x28
 8000bfa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4999      	ldr	r1, [pc, #612]	; (8000e68 <fnInit+0x628>)
 8000c02:	4894      	ldr	r0, [pc, #592]	; (8000e54 <fnInit+0x614>)
 8000c04:	f004 fd62 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000c08:	e15b      	b.n	8000ec2 <fnInit+0x682>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000c0a:	4b93      	ldr	r3, [pc, #588]	; (8000e58 <fnInit+0x618>)
 8000c0c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c10:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c12:	4b91      	ldr	r3, [pc, #580]	; (8000e58 <fnInit+0x618>)
 8000c14:	2208      	movs	r2, #8
 8000c16:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000c18:	4b90      	ldr	r3, [pc, #576]	; (8000e5c <fnInit+0x61c>)
 8000c1a:	2222      	movs	r2, #34	; 0x22
 8000c1c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000c1e:	4b8f      	ldr	r3, [pc, #572]	; (8000e5c <fnInit+0x61c>)
 8000c20:	227a      	movs	r2, #122	; 0x7a
 8000c22:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c24:	4b8d      	ldr	r3, [pc, #564]	; (8000e5c <fnInit+0x61c>)
 8000c26:	2260      	movs	r2, #96	; 0x60
 8000c28:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c2a:	4b8c      	ldr	r3, [pc, #560]	; (8000e5c <fnInit+0x61c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000c30:	4b8a      	ldr	r3, [pc, #552]	; (8000e5c <fnInit+0x61c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c36:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <fnInit+0x61c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c3c:	4b87      	ldr	r3, [pc, #540]	; (8000e5c <fnInit+0x61c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c42:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <fnInit+0x61c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c48:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <fnInit+0x620>)
 8000c4a:	4a84      	ldr	r2, [pc, #528]	; (8000e5c <fnInit+0x61c>)
 8000c4c:	4982      	ldr	r1, [pc, #520]	; (8000e58 <fnInit+0x618>)
 8000c4e:	4885      	ldr	r0, [pc, #532]	; (8000e64 <fnInit+0x624>)
 8000c50:	f001 fd7c 	bl	800274c <HAL_CAN_AddTxMessage>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <fnInit+0x424>
			fnLEDsErrorState();
 8000c5a:	f7ff fddb 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000c5e:	f000 ff33 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000c62:	e12e      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 50;
 8000c64:	4b79      	ldr	r3, [pc, #484]	; (8000e4c <fnInit+0x60c>)
 8000c66:	2232      	movs	r2, #50	; 0x32
 8000c68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	497f      	ldr	r1, [pc, #508]	; (8000e6c <fnInit+0x62c>)
 8000c70:	4878      	ldr	r0, [pc, #480]	; (8000e54 <fnInit+0x614>)
 8000c72:	f004 fd2b 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000c76:	e124      	b.n	8000ec2 <fnInit+0x682>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000c78:	4b77      	ldr	r3, [pc, #476]	; (8000e58 <fnInit+0x618>)
 8000c7a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c7e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c80:	4b75      	ldr	r3, [pc, #468]	; (8000e58 <fnInit+0x618>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c86:	4b75      	ldr	r3, [pc, #468]	; (8000e5c <fnInit+0x61c>)
 8000c88:	2222      	movs	r2, #34	; 0x22
 8000c8a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c8c:	4b73      	ldr	r3, [pc, #460]	; (8000e5c <fnInit+0x61c>)
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c92:	4b72      	ldr	r3, [pc, #456]	; (8000e5c <fnInit+0x61c>)
 8000c94:	2260      	movs	r2, #96	; 0x60
 8000c96:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c98:	4b70      	ldr	r3, [pc, #448]	; (8000e5c <fnInit+0x61c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000c9e:	4b6f      	ldr	r3, [pc, #444]	; (8000e5c <fnInit+0x61c>)
 8000ca0:	221f      	movs	r2, #31
 8000ca2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ca4:	4b6d      	ldr	r3, [pc, #436]	; (8000e5c <fnInit+0x61c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000caa:	4b6c      	ldr	r3, [pc, #432]	; (8000e5c <fnInit+0x61c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cb0:	4b6a      	ldr	r3, [pc, #424]	; (8000e5c <fnInit+0x61c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cb6:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <fnInit+0x620>)
 8000cb8:	4a68      	ldr	r2, [pc, #416]	; (8000e5c <fnInit+0x61c>)
 8000cba:	4967      	ldr	r1, [pc, #412]	; (8000e58 <fnInit+0x618>)
 8000cbc:	4869      	ldr	r0, [pc, #420]	; (8000e64 <fnInit+0x624>)
 8000cbe:	f001 fd45 	bl	800274c <HAL_CAN_AddTxMessage>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <fnInit+0x492>
			fnLEDsErrorState();
 8000cc8:	f7ff fda4 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000ccc:	f000 fefc 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 55;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000cd0:	e0f7      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 55;
 8000cd2:	4b5e      	ldr	r3, [pc, #376]	; (8000e4c <fnInit+0x60c>)
 8000cd4:	2237      	movs	r2, #55	; 0x37
 8000cd6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4964      	ldr	r1, [pc, #400]	; (8000e70 <fnInit+0x630>)
 8000cde:	485d      	ldr	r0, [pc, #372]	; (8000e54 <fnInit+0x614>)
 8000ce0:	f004 fcf4 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000ce4:	e0ed      	b.n	8000ec2 <fnInit+0x682>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000ce6:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <fnInit+0x618>)
 8000ce8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cec:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cee:	4b5a      	ldr	r3, [pc, #360]	; (8000e58 <fnInit+0x618>)
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000cf4:	4b59      	ldr	r3, [pc, #356]	; (8000e5c <fnInit+0x61c>)
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000cfa:	4b58      	ldr	r3, [pc, #352]	; (8000e5c <fnInit+0x61c>)
 8000cfc:	2241      	movs	r2, #65	; 0x41
 8000cfe:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d00:	4b56      	ldr	r3, [pc, #344]	; (8000e5c <fnInit+0x61c>)
 8000d02:	2260      	movs	r2, #96	; 0x60
 8000d04:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d06:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <fnInit+0x61c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d0c:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <fnInit+0x61c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d12:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <fnInit+0x61c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d18:	4b50      	ldr	r3, [pc, #320]	; (8000e5c <fnInit+0x61c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d1e:	4b4f      	ldr	r3, [pc, #316]	; (8000e5c <fnInit+0x61c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d24:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <fnInit+0x620>)
 8000d26:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <fnInit+0x61c>)
 8000d28:	494b      	ldr	r1, [pc, #300]	; (8000e58 <fnInit+0x618>)
 8000d2a:	484e      	ldr	r0, [pc, #312]	; (8000e64 <fnInit+0x624>)
 8000d2c:	f001 fd0e 	bl	800274c <HAL_CAN_AddTxMessage>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <fnInit+0x500>
			fnLEDsErrorState();
 8000d36:	f7ff fd6d 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000d3a:	f000 fec5 	bl	8001ac8 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
		}
		break;
 8000d3e:	e0bd      	b.n	8000ebc <fnInit+0x67c>
		else if (RxData[5] & 0b10000) {
 8000d40:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <fnInit+0x634>)
 8000d42:	795b      	ldrb	r3, [r3, #5]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80b7 	beq.w	8000ebc <fnInit+0x67c>
			iMachineStatus = 60;
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <fnInit+0x60c>)
 8000d50:	223c      	movs	r2, #60	; 0x3c
 8000d52:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	2204      	movs	r2, #4
 8000d58:	4947      	ldr	r1, [pc, #284]	; (8000e78 <fnInit+0x638>)
 8000d5a:	483e      	ldr	r0, [pc, #248]	; (8000e54 <fnInit+0x614>)
 8000d5c:	f004 fcb6 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000d60:	e0ac      	b.n	8000ebc <fnInit+0x67c>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <fnInit+0x618>)
 8000d64:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d68:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <fnInit+0x618>)
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d70:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <fnInit+0x61c>)
 8000d72:	2222      	movs	r2, #34	; 0x22
 8000d74:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d76:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <fnInit+0x61c>)
 8000d78:	2240      	movs	r2, #64	; 0x40
 8000d7a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <fnInit+0x61c>)
 8000d7e:	2260      	movs	r2, #96	; 0x60
 8000d80:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <fnInit+0x61c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000d88:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <fnInit+0x61c>)
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <fnInit+0x61c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <fnInit+0x61c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d9a:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <fnInit+0x61c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <fnInit+0x620>)
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <fnInit+0x61c>)
 8000da4:	492c      	ldr	r1, [pc, #176]	; (8000e58 <fnInit+0x618>)
 8000da6:	482f      	ldr	r0, [pc, #188]	; (8000e64 <fnInit+0x624>)
 8000da8:	f001 fcd0 	bl	800274c <HAL_CAN_AddTxMessage>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d004      	beq.n	8000dbc <fnInit+0x57c>
			fnLEDsErrorState();
 8000db2:	f7ff fd2f 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000db6:	f000 fe87 	bl	8001ac8 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000dba:	e082      	b.n	8000ec2 <fnInit+0x682>
			iMachineStatus = 70;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <fnInit+0x60c>)
 8000dbe:	2246      	movs	r2, #70	; 0x46
 8000dc0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	492d      	ldr	r1, [pc, #180]	; (8000e7c <fnInit+0x63c>)
 8000dc8:	4822      	ldr	r0, [pc, #136]	; (8000e54 <fnInit+0x614>)
 8000dca:	f004 fc7f 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000dce:	e078      	b.n	8000ec2 <fnInit+0x682>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <fnInit+0x618>)
 8000dd2:	f240 620a 	movw	r2, #1546	; 0x60a
 8000dd6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <fnInit+0x618>)
 8000dda:	2208      	movs	r2, #8
 8000ddc:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <fnInit+0x61c>)
 8000de0:	2240      	movs	r2, #64	; 0x40
 8000de2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <fnInit+0x61c>)
 8000de6:	2241      	movs	r2, #65	; 0x41
 8000de8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <fnInit+0x61c>)
 8000dec:	2260      	movs	r2, #96	; 0x60
 8000dee:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <fnInit+0x61c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <fnInit+0x61c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <fnInit+0x61c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <fnInit+0x61c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <fnInit+0x61c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <fnInit+0x620>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <fnInit+0x61c>)
 8000e12:	4911      	ldr	r1, [pc, #68]	; (8000e58 <fnInit+0x618>)
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <fnInit+0x624>)
 8000e16:	f001 fc99 	bl	800274c <HAL_CAN_AddTxMessage>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d004      	beq.n	8000e2a <fnInit+0x5ea>
			fnLEDsErrorState();
 8000e20:	f7ff fcf8 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000e24:	f000 fe50 	bl	8001ac8 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000e28:	e04a      	b.n	8000ec0 <fnInit+0x680>
		else if (RxData[5] & 0b00100) {
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <fnInit+0x634>)
 8000e2c:	795b      	ldrb	r3, [r3, #5]
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d044      	beq.n	8000ec0 <fnInit+0x680>
			iMachineStatus = 80;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <fnInit+0x60c>)
 8000e38:	2250      	movs	r2, #80	; 0x50
 8000e3a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000e3c:	2364      	movs	r3, #100	; 0x64
 8000e3e:	2204      	movs	r2, #4
 8000e40:	490f      	ldr	r1, [pc, #60]	; (8000e80 <fnInit+0x640>)
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <fnInit+0x614>)
 8000e44:	f004 fc42 	bl	80056cc <HAL_UART_Transmit>
		break;
 8000e48:	e03a      	b.n	8000ec0 <fnInit+0x680>
 8000e4a:	bf00      	nop
 8000e4c:	20000002 	.word	0x20000002
 8000e50:	0800741c 	.word	0x0800741c
 8000e54:	20000290 	.word	0x20000290
 8000e58:	2000012c 	.word	0x2000012c
 8000e5c:	200000dc 	.word	0x200000dc
 8000e60:	200000f4 	.word	0x200000f4
 8000e64:	200000b0 	.word	0x200000b0
 8000e68:	08007424 	.word	0x08007424
 8000e6c:	0800742c 	.word	0x0800742c
 8000e70:	08007434 	.word	0x08007434
 8000e74:	200000f8 	.word	0x200000f8
 8000e78:	0800743c 	.word	0x0800743c
 8000e7c:	08007444 	.word	0x08007444
 8000e80:	0800744c 	.word	0x0800744c

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <fnInit+0x688>)
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	2b27      	cmp	r3, #39	; 0x27
 8000e8a:	d112      	bne.n	8000eb2 <fnInit+0x672>
			iMachineStatus = 1;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <fnInit+0x68c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <fnInit+0x690>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000e98:	213c      	movs	r1, #60	; 0x3c
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <fnInit+0x694>)
 8000e9c:	f004 f880 	bl	8004fa0 <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000ea0:	f000 f872 	bl	8000f88 <fnEncCalibration>

			HAL_UART_Transmit(&huart3, "C080", 4, 100);
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	490b      	ldr	r1, [pc, #44]	; (8000ed8 <fnInit+0x698>)
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <fnInit+0x69c>)
 8000eac:	f004 fc0e 	bl	80056cc <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000eb0:	e007      	b.n	8000ec2 <fnInit+0x682>
			fnLEDsErrorState();
 8000eb2:	f7ff fcaf 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000eb6:	f000 fe07 	bl	8001ac8 <Error_Handler>
		break;
 8000eba:	e002      	b.n	8000ec2 <fnInit+0x682>
		break;
 8000ebc:	bf00      	nop
 8000ebe:	e000      	b.n	8000ec2 <fnInit+0x682>
		break;
 8000ec0:	bf00      	nop
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000f8 	.word	0x200000f8
 8000ecc:	20000002 	.word	0x20000002
 8000ed0:	20000003 	.word	0x20000003
 8000ed4:	200001ac 	.word	0x200001ac
 8000ed8:	08007454 	.word	0x08007454
 8000edc:	20000290 	.word	0x20000290

08000ee0 <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <fnEncCounts2Angle+0x3c>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <fnEncCounts2Angle+0x40>)
 8000f00:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <fnEncCounts2Angle+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	ee07 3a90 	vmov	s15, r3
}
 8000f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200000ac 	.word	0x200000ac

08000f24 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <fnEncReadCount+0x54>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <fnEncReadCount+0x58>)
 8000f32:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <fnEncReadCount+0x58>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d208      	bcs.n	8000f56 <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8000f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <fnEncReadCount+0x58>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <fnEncReadCount+0x5c>)
 8000f52:	801a      	strh	r2, [r3, #0]
 8000f54:	e003      	b.n	8000f5e <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <fnEncReadCount+0x58>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <fnEncReadCount+0x5c>)
 8000f5c:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <fnEncReadCount+0x5c>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ffbc 	bl	8000ee0 <fnEncCounts2Angle>
 8000f68:	eef0 7a40 	vmov.f32	s15, s0
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <fnEncReadCount+0x60>)
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001ac 	.word	0x200001ac
 8000f7c:	200000a4 	.word	0x200000a4
 8000f80:	200000a6 	.word	0x200000a6
 8000f84:	200000a8 	.word	0x200000a8

08000f88 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <fnEncCalibration+0x14>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 8000f92:	f7ff ffc7 	bl	8000f24 <fnEncReadCount>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40000400 	.word	0x40000400

08000fa0 <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b5a      	cmp	r3, #90	; 0x5a
 8000fb0:	d901      	bls.n	8000fb6 <fnMoveAbsolute+0x16>
		iNumber = 90;
 8000fb2:	235a      	movs	r3, #90	; 0x5a
 8000fb4:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <fnMoveAbsolute+0xc4>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d108      	bne.n	8000fd2 <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e00e      	b.n	8000ff0 <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <fnMoveAbsolute+0xc4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a22      	ldr	r2, [pc, #136]	; (8001068 <fnMoveAbsolute+0xc8>)
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e001      	b.n	8000ff0 <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d132      	bne.n	800105c <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <fnMoveAbsolute+0xcc>)
 8000ff8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ffc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <fnMoveAbsolute+0xcc>)
 8001000:	2208      	movs	r2, #8
 8001002:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <fnMoveAbsolute+0xd0>)
 8001006:	2222      	movs	r2, #34	; 0x22
 8001008:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <fnMoveAbsolute+0xd0>)
 800100c:	227a      	movs	r2, #122	; 0x7a
 800100e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <fnMoveAbsolute+0xd0>)
 8001012:	2260      	movs	r2, #96	; 0x60
 8001014:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <fnMoveAbsolute+0xd0>)
 8001018:	2200      	movs	r2, #0
 800101a:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <fnMoveAbsolute+0xd0>)
 8001022:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <fnMoveAbsolute+0xd0>)
 800102c:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0c1b      	lsrs	r3, r3, #16
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <fnMoveAbsolute+0xd0>)
 8001036:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0e1b      	lsrs	r3, r3, #24
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <fnMoveAbsolute+0xd0>)
 8001040:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <fnMoveAbsolute+0xd4>)
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <fnMoveAbsolute+0xd0>)
 8001046:	4909      	ldr	r1, [pc, #36]	; (800106c <fnMoveAbsolute+0xcc>)
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <fnMoveAbsolute+0xd8>)
 800104a:	f001 fb7f 	bl	800274c <HAL_CAN_AddTxMessage>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 8001054:	f7ff fbde 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8001058:	f000 fd36 	bl	8001ac8 <Error_Handler>
		}

	}
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000001 	.word	0x20000001
 8001068:	fffffc18 	.word	0xfffffc18
 800106c:	2000012c 	.word	0x2000012c
 8001070:	200000dc 	.word	0x200000dc
 8001074:	200000f4 	.word	0x200000f4
 8001078:	200000b0 	.word	0x200000b0

0800107c <fnSingleMotionAction>:

void fnSingleMotionAction(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	switch (iSingleMachineStatus){
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <fnSingleMotionAction+0xfc>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b1e      	cmp	r3, #30
 8001086:	d040      	beq.n	800110a <fnSingleMotionAction+0x8e>
 8001088:	2b1e      	cmp	r3, #30
 800108a:	dc72      	bgt.n	8001172 <fnSingleMotionAction+0xf6>
 800108c:	2b0a      	cmp	r3, #10
 800108e:	d002      	beq.n	8001096 <fnSingleMotionAction+0x1a>
 8001090:	2b14      	cmp	r3, #20
 8001092:	d031      	beq.n	80010f8 <fnSingleMotionAction+0x7c>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
		}
		break;
	}
}
 8001094:	e06d      	b.n	8001172 <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <fnSingleMotionAction+0x100>)
 8001098:	f240 620a 	movw	r2, #1546	; 0x60a
 800109c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <fnSingleMotionAction+0x100>)
 80010a0:	2208      	movs	r2, #8
 80010a2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <fnSingleMotionAction+0x104>)
 80010a6:	2222      	movs	r2, #34	; 0x22
 80010a8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <fnSingleMotionAction+0x104>)
 80010ac:	2240      	movs	r2, #64	; 0x40
 80010ae:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <fnSingleMotionAction+0x104>)
 80010b2:	2260      	movs	r2, #96	; 0x60
 80010b4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <fnSingleMotionAction+0x104>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80010bc:	4b30      	ldr	r3, [pc, #192]	; (8001180 <fnSingleMotionAction+0x104>)
 80010be:	221f      	movs	r2, #31
 80010c0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <fnSingleMotionAction+0x104>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <fnSingleMotionAction+0x104>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <fnSingleMotionAction+0x104>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <fnSingleMotionAction+0x108>)
 80010d6:	4a2a      	ldr	r2, [pc, #168]	; (8001180 <fnSingleMotionAction+0x104>)
 80010d8:	4928      	ldr	r1, [pc, #160]	; (800117c <fnSingleMotionAction+0x100>)
 80010da:	482b      	ldr	r0, [pc, #172]	; (8001188 <fnSingleMotionAction+0x10c>)
 80010dc:	f001 fb36 	bl	800274c <HAL_CAN_AddTxMessage>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <fnSingleMotionAction+0x74>
			fnLEDsErrorState();
 80010e6:	f7ff fb95 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 80010ea:	f000 fced 	bl	8001ac8 <Error_Handler>
		break;
 80010ee:	e040      	b.n	8001172 <fnSingleMotionAction+0xf6>
			iSingleMachineStatus = 20;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <fnSingleMotionAction+0xfc>)
 80010f2:	2214      	movs	r2, #20
 80010f4:	701a      	strb	r2, [r3, #0]
		break;
 80010f6:	e03c      	b.n	8001172 <fnSingleMotionAction+0xf6>
		fnMoveAbsolute(iPosition);
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <fnSingleMotionAction+0x110>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff4f 	bl	8000fa0 <fnMoveAbsolute>
		iSingleMachineStatus = 30;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <fnSingleMotionAction+0xfc>)
 8001104:	221e      	movs	r2, #30
 8001106:	701a      	strb	r2, [r3, #0]
		break;
 8001108:	e033      	b.n	8001172 <fnSingleMotionAction+0xf6>
		TxHeader.StdId = 0x60A;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <fnSingleMotionAction+0x100>)
 800110c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001110:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <fnSingleMotionAction+0x100>)
 8001114:	2208      	movs	r2, #8
 8001116:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <fnSingleMotionAction+0x104>)
 800111a:	2222      	movs	r2, #34	; 0x22
 800111c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <fnSingleMotionAction+0x104>)
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <fnSingleMotionAction+0x104>)
 8001126:	2260      	movs	r2, #96	; 0x60
 8001128:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <fnSingleMotionAction+0x104>)
 800112c:	2200      	movs	r2, #0
 800112e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <fnSingleMotionAction+0x104>)
 8001132:	220f      	movs	r2, #15
 8001134:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <fnSingleMotionAction+0x104>)
 8001138:	2200      	movs	r2, #0
 800113a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <fnSingleMotionAction+0x104>)
 800113e:	2200      	movs	r2, #0
 8001140:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <fnSingleMotionAction+0x104>)
 8001144:	2200      	movs	r2, #0
 8001146:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <fnSingleMotionAction+0x108>)
 800114a:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <fnSingleMotionAction+0x104>)
 800114c:	490b      	ldr	r1, [pc, #44]	; (800117c <fnSingleMotionAction+0x100>)
 800114e:	480e      	ldr	r0, [pc, #56]	; (8001188 <fnSingleMotionAction+0x10c>)
 8001150:	f001 fafc 	bl	800274c <HAL_CAN_AddTxMessage>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <fnSingleMotionAction+0xe8>
			fnLEDsErrorState();
 800115a:	f7ff fb5b 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 800115e:	f000 fcb3 	bl	8001ac8 <Error_Handler>
		break;
 8001162:	e005      	b.n	8001170 <fnSingleMotionAction+0xf4>
			iSingleMachineStatus = 100;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <fnSingleMotionAction+0xfc>)
 8001166:	2264      	movs	r2, #100	; 0x64
 8001168:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <fnSingleMotionAction+0x114>)
 800116c:	f003 fe42 	bl	8004df4 <HAL_TIM_Base_Stop_IT>
		break;
 8001170:	bf00      	nop
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000004 	.word	0x20000004
 800117c:	2000012c 	.word	0x2000012c
 8001180:	200000dc 	.word	0x200000dc
 8001184:	200000f4 	.word	0x200000f4
 8001188:	200000b0 	.word	0x200000b0
 800118c:	200000d8 	.word	0x200000d8
 8001190:	20000244 	.word	0x20000244

08001194 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	switch (iSerialMachineStatus){
 8001198:	4bab      	ldr	r3, [pc, #684]	; (8001448 <fnSerialMotionAction+0x2b4>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3b0a      	subs	r3, #10
 800119e:	2b1e      	cmp	r3, #30
 80011a0:	f200 8150 	bhi.w	8001444 <fnSerialMotionAction+0x2b0>
 80011a4:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <fnSerialMotionAction+0x18>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	08001229 	.word	0x08001229
 80011b0:	08001445 	.word	0x08001445
 80011b4:	08001445 	.word	0x08001445
 80011b8:	08001445 	.word	0x08001445
 80011bc:	08001445 	.word	0x08001445
 80011c0:	08001445 	.word	0x08001445
 80011c4:	08001445 	.word	0x08001445
 80011c8:	08001445 	.word	0x08001445
 80011cc:	08001445 	.word	0x08001445
 80011d0:	08001445 	.word	0x08001445
 80011d4:	0800128b 	.word	0x0800128b
 80011d8:	08001445 	.word	0x08001445
 80011dc:	08001445 	.word	0x08001445
 80011e0:	08001445 	.word	0x08001445
 80011e4:	08001445 	.word	0x08001445
 80011e8:	0800129d 	.word	0x0800129d
 80011ec:	08001445 	.word	0x08001445
 80011f0:	08001445 	.word	0x08001445
 80011f4:	08001445 	.word	0x08001445
 80011f8:	08001445 	.word	0x08001445
 80011fc:	0800130d 	.word	0x0800130d
 8001200:	08001445 	.word	0x08001445
 8001204:	08001445 	.word	0x08001445
 8001208:	08001445 	.word	0x08001445
 800120c:	08001445 	.word	0x08001445
 8001210:	0800136f 	.word	0x0800136f
 8001214:	08001445 	.word	0x08001445
 8001218:	08001445 	.word	0x08001445
 800121c:	08001445 	.word	0x08001445
 8001220:	08001445 	.word	0x08001445
 8001224:	080013e9 	.word	0x080013e9
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001228:	4b88      	ldr	r3, [pc, #544]	; (800144c <fnSerialMotionAction+0x2b8>)
 800122a:	f240 620a 	movw	r2, #1546	; 0x60a
 800122e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001230:	4b86      	ldr	r3, [pc, #536]	; (800144c <fnSerialMotionAction+0x2b8>)
 8001232:	2208      	movs	r2, #8
 8001234:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001236:	4b86      	ldr	r3, [pc, #536]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001238:	2222      	movs	r2, #34	; 0x22
 800123a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800123c:	4b84      	ldr	r3, [pc, #528]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001242:	4b83      	ldr	r3, [pc, #524]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001244:	2260      	movs	r2, #96	; 0x60
 8001246:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800124a:	2200      	movs	r2, #0
 800124c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800124e:	4b80      	ldr	r3, [pc, #512]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001250:	221f      	movs	r2, #31
 8001252:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001254:	4b7e      	ldr	r3, [pc, #504]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001256:	2200      	movs	r2, #0
 8001258:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800125c:	2200      	movs	r2, #0
 800125e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001260:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001262:	2200      	movs	r2, #0
 8001264:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001266:	4b7b      	ldr	r3, [pc, #492]	; (8001454 <fnSerialMotionAction+0x2c0>)
 8001268:	4a79      	ldr	r2, [pc, #484]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800126a:	4978      	ldr	r1, [pc, #480]	; (800144c <fnSerialMotionAction+0x2b8>)
 800126c:	487a      	ldr	r0, [pc, #488]	; (8001458 <fnSerialMotionAction+0x2c4>)
 800126e:	f001 fa6d 	bl	800274c <HAL_CAN_AddTxMessage>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <fnSerialMotionAction+0xee>
			fnLEDsErrorState();
 8001278:	f7ff facc 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 800127c:	f000 fc24 	bl	8001ac8 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 20;
		}
		break;
 8001280:	e0e0      	b.n	8001444 <fnSerialMotionAction+0x2b0>
			iSerialMachineStatus = 20;
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <fnSerialMotionAction+0x2b4>)
 8001284:	2214      	movs	r2, #20
 8001286:	701a      	strb	r2, [r3, #0]
		break;
 8001288:	e0dc      	b.n	8001444 <fnSerialMotionAction+0x2b0>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <fnSerialMotionAction+0x2c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fe86 	bl	8000fa0 <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 8001294:	4b6c      	ldr	r3, [pc, #432]	; (8001448 <fnSerialMotionAction+0x2b4>)
 8001296:	2219      	movs	r2, #25
 8001298:	701a      	strb	r2, [r3, #0]
		break;
 800129a:	e0d3      	b.n	8001444 <fnSerialMotionAction+0x2b0>

	case 25://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 800129c:	4b6b      	ldr	r3, [pc, #428]	; (800144c <fnSerialMotionAction+0x2b8>)
 800129e:	f240 620a 	movw	r2, #1546	; 0x60a
 80012a2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80012a4:	4b69      	ldr	r3, [pc, #420]	; (800144c <fnSerialMotionAction+0x2b8>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80012aa:	4b69      	ldr	r3, [pc, #420]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012b2:	2241      	movs	r2, #65	; 0x41
 80012b4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80012b6:	4b66      	ldr	r3, [pc, #408]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012b8:	2260      	movs	r2, #96	; 0x60
 80012ba:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80012c8:	4b61      	ldr	r3, [pc, #388]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80012d4:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80012da:	4b5e      	ldr	r3, [pc, #376]	; (8001454 <fnSerialMotionAction+0x2c0>)
 80012dc:	4a5c      	ldr	r2, [pc, #368]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80012de:	495b      	ldr	r1, [pc, #364]	; (800144c <fnSerialMotionAction+0x2b8>)
 80012e0:	485d      	ldr	r0, [pc, #372]	; (8001458 <fnSerialMotionAction+0x2c4>)
 80012e2:	f001 fa33 	bl	800274c <HAL_CAN_AddTxMessage>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <fnSerialMotionAction+0x162>
			fnLEDsErrorState();
 80012ec:	f7ff fa92 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 80012f0:	f000 fbea 	bl	8001ac8 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 80012f4:	e0a3      	b.n	800143e <fnSerialMotionAction+0x2aa>
		else if (RxData[5] & 0b10000) {
 80012f6:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <fnSerialMotionAction+0x2cc>)
 80012f8:	795b      	ldrb	r3, [r3, #5]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 809d 	beq.w	800143e <fnSerialMotionAction+0x2aa>
			iSerialMachineStatus = 30;
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <fnSerialMotionAction+0x2b4>)
 8001306:	221e      	movs	r2, #30
 8001308:	701a      	strb	r2, [r3, #0]
		break;
 800130a:	e098      	b.n	800143e <fnSerialMotionAction+0x2aa>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <fnSerialMotionAction+0x2b8>)
 800130e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001312:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <fnSerialMotionAction+0x2b8>)
 8001316:	2208      	movs	r2, #8
 8001318:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800131c:	2222      	movs	r2, #34	; 0x22
 800131e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001328:	2260      	movs	r2, #96	; 0x60
 800132a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800132e:	2200      	movs	r2, #0
 8001330:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8001332:	4b47      	ldr	r3, [pc, #284]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001334:	220f      	movs	r2, #15
 8001336:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001338:	4b45      	ldr	r3, [pc, #276]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800133a:	2200      	movs	r2, #0
 800133c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001340:	2200      	movs	r2, #0
 8001342:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001346:	2200      	movs	r2, #0
 8001348:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <fnSerialMotionAction+0x2c0>)
 800134c:	4a40      	ldr	r2, [pc, #256]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800134e:	493f      	ldr	r1, [pc, #252]	; (800144c <fnSerialMotionAction+0x2b8>)
 8001350:	4841      	ldr	r0, [pc, #260]	; (8001458 <fnSerialMotionAction+0x2c4>)
 8001352:	f001 f9fb 	bl	800274c <HAL_CAN_AddTxMessage>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <fnSerialMotionAction+0x1d2>
			fnLEDsErrorState();
 800135c:	f7ff fa5a 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8001360:	f000 fbb2 	bl	8001ac8 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 8001364:	e06e      	b.n	8001444 <fnSerialMotionAction+0x2b0>
			iSerialMachineStatus = 35;
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <fnSerialMotionAction+0x2b4>)
 8001368:	2223      	movs	r2, #35	; 0x23
 800136a:	701a      	strb	r2, [r3, #0]
		break;
 800136c:	e06a      	b.n	8001444 <fnSerialMotionAction+0x2b0>

	case 35://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <fnSerialMotionAction+0x2b8>)
 8001370:	f240 620a 	movw	r2, #1546	; 0x60a
 8001374:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <fnSerialMotionAction+0x2b8>)
 8001378:	2208      	movs	r2, #8
 800137a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001384:	2241      	movs	r2, #65	; 0x41
 8001386:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800138a:	2260      	movs	r2, #96	; 0x60
 800138c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001390:	2200      	movs	r2, #0
 8001392:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <fnSerialMotionAction+0x2bc>)
 8001396:	2200      	movs	r2, #0
 8001398:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <fnSerialMotionAction+0x2bc>)
 800139c:	2200      	movs	r2, #0
 800139e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <fnSerialMotionAction+0x2c0>)
 80013ae:	4a28      	ldr	r2, [pc, #160]	; (8001450 <fnSerialMotionAction+0x2bc>)
 80013b0:	4926      	ldr	r1, [pc, #152]	; (800144c <fnSerialMotionAction+0x2b8>)
 80013b2:	4829      	ldr	r0, [pc, #164]	; (8001458 <fnSerialMotionAction+0x2c4>)
 80013b4:	f001 f9ca 	bl	800274c <HAL_CAN_AddTxMessage>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <fnSerialMotionAction+0x234>
			fnLEDsErrorState();
 80013be:	f7ff fa29 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 80013c2:	f000 fb81 	bl	8001ac8 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 80013c6:	e03c      	b.n	8001442 <fnSerialMotionAction+0x2ae>
		else if (RxData[5] & 0b00100) {
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <fnSerialMotionAction+0x2cc>)
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d036      	beq.n	8001442 <fnSerialMotionAction+0x2ae>
			iSerialCounter++;
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <fnSerialMotionAction+0x2d0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <fnSerialMotionAction+0x2d0>)
 80013de:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <fnSerialMotionAction+0x2b4>)
 80013e2:	2228      	movs	r2, #40	; 0x28
 80013e4:	701a      	strb	r2, [r3, #0]
		break;
 80013e6:	e02c      	b.n	8001442 <fnSerialMotionAction+0x2ae>

	case 40://REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <fnSerialMotionAction+0x2d0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <fnSerialMotionAction+0x2d4>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d10c      	bne.n	8001412 <fnSerialMotionAction+0x27e>
			//iSerialCounter = 0;
			iSerialMachineStatus = 100;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <fnSerialMotionAction+0x2b4>)
 80013fa:	2264      	movs	r2, #100	; 0x64
 80013fc:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <fnSerialMotionAction+0x2d8>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <fnSerialMotionAction+0x2d4>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 800140a:	4819      	ldr	r0, [pc, #100]	; (8001470 <fnSerialMotionAction+0x2dc>)
 800140c:	f003 fc53 	bl	8004cb6 <HAL_TIM_Base_Stop>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 8001410:	e018      	b.n	8001444 <fnSerialMotionAction+0x2b0>
		else if (iSerialCounter % 2 == 0) {
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <fnSerialMotionAction+0x2d0>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <fnSerialMotionAction+0x29c>
			iPosition = iSerialRange;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <fnSerialMotionAction+0x2d8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <fnSerialMotionAction+0x2c8>)
 8001426:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <fnSerialMotionAction+0x2b4>)
 800142a:	220a      	movs	r2, #10
 800142c:	701a      	strb	r2, [r3, #0]
		break;
 800142e:	e009      	b.n	8001444 <fnSerialMotionAction+0x2b0>
			iPosition = 0;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <fnSerialMotionAction+0x2c8>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <fnSerialMotionAction+0x2b4>)
 8001438:	220a      	movs	r2, #10
 800143a:	701a      	strb	r2, [r3, #0]
		break;
 800143c:	e002      	b.n	8001444 <fnSerialMotionAction+0x2b0>
		break;
 800143e:	bf00      	nop
 8001440:	e000      	b.n	8001444 <fnSerialMotionAction+0x2b0>
		break;
 8001442:	bf00      	nop
	}
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000005 	.word	0x20000005
 800144c:	2000012c 	.word	0x2000012c
 8001450:	200000dc 	.word	0x200000dc
 8001454:	200000f4 	.word	0x200000f4
 8001458:	200000b0 	.word	0x200000b0
 800145c:	200000d8 	.word	0x200000d8
 8001460:	200000f8 	.word	0x200000f8
 8001464:	2000000c 	.word	0x2000000c
 8001468:	20000014 	.word	0x20000014
 800146c:	20000010 	.word	0x20000010
 8001470:	20000160 	.word	0x20000160

08001474 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a16      	ldr	r2, [pc, #88]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d116      	bne.n	80014b4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if (iHomingStatus != 1) {
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d006      	beq.n	800149c <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 800148e:	f7ff f9d7 	bl	8000840 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001492:	2101      	movs	r1, #1
 8001494:	4813      	ldr	r0, [pc, #76]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001496:	f002 f904 	bl	80036a2 <HAL_GPIO_TogglePin>
	}
	else if(htim -> Instance == TIM10){
		fnSerialMotionAction();
	}

}
 800149a:	e01a      	b.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x5e>
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800149c:	213c      	movs	r1, #60	; 0x3c
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80014a0:	f003 fd7e 	bl	8004fa0 <HAL_TIM_Encoder_Start>
			fnEncReadCount();
 80014a4:	f7ff fd3e 	bl	8000f24 <fnEncReadCount>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2101      	movs	r1, #1
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80014ae:	f002 f8df 	bl	8003670 <HAL_GPIO_WritePin>
}
 80014b2:	e00e      	b.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x5e>
	else if(htim -> Instance == TIM7){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x78>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d102      	bne.n	80014c4 <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 80014be:	f7ff fddd 	bl	800107c <fnSingleMotionAction>
}
 80014c2:	e006      	b.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x5e>
	else if(htim -> Instance == TIM10){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		fnSerialMotionAction();
 80014ce:	f7ff fe61 	bl	8001194 <fnSerialMotionAction>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40001000 	.word	0x40001000
 80014e0:	20000003 	.word	0x20000003
 80014e4:	40020400 	.word	0x40020400
 80014e8:	200001ac 	.word	0x200001ac
 80014ec:	40001400 	.word	0x40001400
 80014f0:	40014400 	.word	0x40014400

080014f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001504:	d129      	bne.n	800155a <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_GPIO_EXTI_Callback+0x70>)
 8001508:	f240 620a 	movw	r2, #1546	; 0x60a
 800150c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_GPIO_EXTI_Callback+0x70>)
 8001510:	2208      	movs	r2, #8
 8001512:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 800151c:	2241      	movs	r2, #65	; 0x41
 800151e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 8001522:	2260      	movs	r2, #96	; 0x60
 8001524:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_GPIO_EXTI_Callback+0x78>)
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_GPIO_EXTI_Callback+0x74>)
 8001548:	4906      	ldr	r1, [pc, #24]	; (8001564 <HAL_GPIO_EXTI_Callback+0x70>)
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <HAL_GPIO_EXTI_Callback+0x7c>)
 800154c:	f001 f8fe 	bl	800274c <HAL_CAN_AddTxMessage>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8001556:	f000 fab7 	bl	8001ac8 <Error_Handler>

		//// ENCODER CALIBRATION - BASE
		//		fnEncCalibration();

	}
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000012c 	.word	0x2000012c
 8001568:	200000dc 	.word	0x200000dc
 800156c:	200000f4 	.word	0x200000f4
 8001570:	200000b0 	.word	0x200000b0

08001574 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001578:	f000 fe32 	bl	80021e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800157c:	f000 f85e 	bl	800163c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001580:	f7ff f85a 	bl	8000638 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001584:	f000 fcfc 	bl	8001f80 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001588:	f000 fd76 	bl	8002078 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 800158c:	f7fe ffd0 	bl	8000530 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001590:	f000 fb9a 	bl	8001cc8 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001594:	f000 fb42 	bl	8001c1c <MX_TIM3_Init>
	MX_TIM7_Init();
 8001598:	f000 fbce 	bl	8001d38 <MX_TIM7_Init>
	MX_TIM10_Init();
 800159c:	f000 fc04 	bl	8001da8 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 80015a0:	2204      	movs	r2, #4
 80015a2:	4921      	ldr	r1, [pc, #132]	; (8001628 <main+0xb4>)
 80015a4:	4821      	ldr	r0, [pc, #132]	; (800162c <main+0xb8>)
 80015a6:	f004 f924 	bl	80057f2 <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 80015aa:	4821      	ldr	r0, [pc, #132]	; (8001630 <main+0xbc>)
 80015ac:	f001 f88a 	bl	80026c4 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <main+0xc0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <main+0xc0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <main+0xc0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <main+0xc0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <main+0xc0>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <main+0xc0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <main+0xc4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <main+0xc4>)
 80015dc:	2212      	movs	r2, #18
 80015de:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <main+0xc4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <main+0xc4>)
 80015e8:	f24b 1240 	movw	r2, #45376	; 0xb140
 80015ec:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <main+0xc4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <main+0xc4>)
 80015f6:	f24b 1240 	movw	r2, #45376	; 0xb140
 80015fa:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <main+0xc4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <main+0xc4>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <main+0xc4>)
 800160a:	2201      	movs	r2, #1
 800160c:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <main+0xc4>)
 8001610:	2214      	movs	r2, #20
 8001612:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001614:	4908      	ldr	r1, [pc, #32]	; (8001638 <main+0xc4>)
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <main+0xbc>)
 8001618:	f000 ff68 	bl	80024ec <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800161c:	2102      	movs	r1, #2
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <main+0xbc>)
 8001620:	f001 fa81 	bl	8002b26 <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001624:	e7fe      	b.n	8001624 <main+0xb0>
 8001626:	bf00      	nop
 8001628:	20000100 	.word	0x20000100
 800162c:	20000290 	.word	0x20000290
 8001630:	200000b0 	.word	0x200000b0
 8001634:	2000012c 	.word	0x2000012c
 8001638:	20000104 	.word	0x20000104

0800163c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0b8      	sub	sp, #224	; 0xe0
 8001640:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001646:	2234      	movs	r2, #52	; 0x34
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f005 fe22 	bl	8007294 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	2290      	movs	r2, #144	; 0x90
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fe13 	bl	8007294 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800166e:	f002 f993 	bl	8003998 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <SystemClock_Config+0x128>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a3b      	ldr	r2, [pc, #236]	; (8001764 <SystemClock_Config+0x128>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <SystemClock_Config+0x128>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <SystemClock_Config+0x12c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001692:	4a35      	ldr	r2, [pc, #212]	; (8001768 <SystemClock_Config+0x12c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <SystemClock_Config+0x12c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80016c2:	2304      	movs	r3, #4
 80016c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d4:	2304      	movs	r3, #4
 80016d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 f9b7 	bl	8003a58 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 80016f0:	f000 f9ea 	bl	8001ac8 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016f4:	f002 f960 	bl	80039b8 <HAL_PWREx_EnableOverDrive>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80016fe:	f000 f9e3 	bl	8001ac8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	230f      	movs	r3, #15
 8001704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001722:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001726:	2103      	movs	r1, #3
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fc43 	bl	8003fb4 <HAL_RCC_ClockConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001734:	f000 f9c8 	bl	8001ac8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <SystemClock_Config+0x130>)
 800173a:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800173c:	2300      	movs	r3, #0
 800173e:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fe34 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8001756:	f000 f9b7 	bl	8001ac8 <Error_Handler>
	}
}
 800175a:	bf00      	nop
 800175c:	37e0      	adds	r7, #224	; 0xe0
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000
 800176c:	00200100 	.word	0x00200100

08001770 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4aa7      	ldr	r2, [pc, #668]	; (8001a1c <HAL_UART_RxCpltCallback+0x2ac>)
 800177e:	4293      	cmp	r3, r2
 8001780:	f040 813c 	bne.w	80019fc <HAL_UART_RxCpltCallback+0x28c>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001784:	2204      	movs	r2, #4
 8001786:	49a6      	ldr	r1, [pc, #664]	; (8001a20 <HAL_UART_RxCpltCallback+0x2b0>)
 8001788:	48a6      	ldr	r0, [pc, #664]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 800178a:	f005 fd8b 	bl	80072a4 <strncmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 8001794:	4ba4      	ldr	r3, [pc, #656]	; (8001a28 <HAL_UART_RxCpltCallback+0x2b8>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 800179a:	4ba4      	ldr	r3, [pc, #656]	; (8001a2c <HAL_UART_RxCpltCallback+0x2bc>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 80017a0:	48a3      	ldr	r0, [pc, #652]	; (8001a30 <HAL_UART_RxCpltCallback+0x2c0>)
 80017a2:	f003 faaf 	bl	8004d04 <HAL_TIM_Base_Start_IT>
 80017a6:	e12f      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 80017a8:	2204      	movs	r2, #4
 80017aa:	49a2      	ldr	r1, [pc, #648]	; (8001a34 <HAL_UART_RxCpltCallback+0x2c4>)
 80017ac:	489d      	ldr	r0, [pc, #628]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 80017ae:	f005 fd79 	bl	80072a4 <strncmp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 80017b8:	4b9f      	ldr	r3, [pc, #636]	; (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80017be:	2101      	movs	r1, #1
 80017c0:	489e      	ldr	r0, [pc, #632]	; (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 80017c2:	f001 ff6e 	bl	80036a2 <HAL_GPIO_TogglePin>
 80017c6:	e11f      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 80017c8:	2204      	movs	r2, #4
 80017ca:	499d      	ldr	r1, [pc, #628]	; (8001a40 <HAL_UART_RxCpltCallback+0x2d0>)
 80017cc:	4895      	ldr	r0, [pc, #596]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 80017ce:	f005 fd69 	bl	80072a4 <strncmp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 80017d8:	4b97      	ldr	r3, [pc, #604]	; (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	4896      	ldr	r0, [pc, #600]	; (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 80017e2:	f001 ff5e 	bl	80036a2 <HAL_GPIO_TogglePin>
 80017e6:	e10f      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 80017e8:	2204      	movs	r2, #4
 80017ea:	4996      	ldr	r1, [pc, #600]	; (8001a44 <HAL_UART_RxCpltCallback+0x2d4>)
 80017ec:	488d      	ldr	r0, [pc, #564]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 80017ee:	f005 fd59 	bl	80072a4 <strncmp>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d107      	bne.n	8001808 <HAL_UART_RxCpltCallback+0x98>
			iSelected_leg = 0;
 80017f8:	4b93      	ldr	r3, [pc, #588]	; (8001a48 <HAL_UART_RxCpltCallback+0x2d8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80017fe:	2101      	movs	r1, #1
 8001800:	488e      	ldr	r0, [pc, #568]	; (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 8001802:	f001 ff4e 	bl	80036a2 <HAL_GPIO_TogglePin>
 8001806:	e0ff      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 8001808:	2204      	movs	r2, #4
 800180a:	4990      	ldr	r1, [pc, #576]	; (8001a4c <HAL_UART_RxCpltCallback+0x2dc>)
 800180c:	4885      	ldr	r0, [pc, #532]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 800180e:	f005 fd49 	bl	80072a4 <strncmp>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d107      	bne.n	8001828 <HAL_UART_RxCpltCallback+0xb8>
			iSelected_leg = 1;
 8001818:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_UART_RxCpltCallback+0x2d8>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	4886      	ldr	r0, [pc, #536]	; (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 8001822:	f001 ff3e 	bl	80036a2 <HAL_GPIO_TogglePin>
 8001826:	e0ef      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001828:	4b7e      	ldr	r3, [pc, #504]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 800182a:	78db      	ldrb	r3, [r3, #3]
 800182c:	2b50      	cmp	r3, #80	; 0x50
 800182e:	d113      	bne.n	8001858 <HAL_UART_RxCpltCallback+0xe8>

			if(iMode == 0){
 8001830:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 80e6 	bne.w	8001a08 <HAL_UART_RxCpltCallback+0x298>
				iPosition = (uint32_t)(atoi(sUserMessage));
 800183c:	4879      	ldr	r0, [pc, #484]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 800183e:	f005 fcfb 	bl	8007238 <atoi>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_UART_RxCpltCallback+0x2e0>)
 8001848:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 800184a:	4b82      	ldr	r3, [pc, #520]	; (8001a54 <HAL_UART_RxCpltCallback+0x2e4>)
 800184c:	220a      	movs	r2, #10
 800184e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001850:	4881      	ldr	r0, [pc, #516]	; (8001a58 <HAL_UART_RxCpltCallback+0x2e8>)
 8001852:	f003 fa57 	bl	8004d04 <HAL_TIM_Base_Start_IT>
 8001856:	e0d7      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001858:	2204      	movs	r2, #4
 800185a:	4980      	ldr	r1, [pc, #512]	; (8001a5c <HAL_UART_RxCpltCallback+0x2ec>)
 800185c:	4871      	ldr	r0, [pc, #452]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 800185e:	f005 fd21 	bl	80072a4 <strncmp>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d123      	bne.n	80018b0 <HAL_UART_RxCpltCallback+0x140>

			if(iMode == 1 && iSelected_leg != 100 && iSerialReps != 0 && iSerialRange != 0){
 8001868:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	f040 80ca 	bne.w	8001a08 <HAL_UART_RxCpltCallback+0x298>
 8001874:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <HAL_UART_RxCpltCallback+0x2d8>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	f000 80c4 	beq.w	8001a08 <HAL_UART_RxCpltCallback+0x298>
 8001880:	4b77      	ldr	r3, [pc, #476]	; (8001a60 <HAL_UART_RxCpltCallback+0x2f0>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80bf 	beq.w	8001a08 <HAL_UART_RxCpltCallback+0x298>
 800188a:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_UART_RxCpltCallback+0x2f4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80ba 	beq.w	8001a08 <HAL_UART_RxCpltCallback+0x298>
				iSerialCounter = 0;
 8001894:	4b74      	ldr	r3, [pc, #464]	; (8001a68 <HAL_UART_RxCpltCallback+0x2f8>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 800189a:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <HAL_UART_RxCpltCallback+0x2fc>)
 800189c:	220a      	movs	r2, #10
 800189e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 80018a0:	4873      	ldr	r0, [pc, #460]	; (8001a70 <HAL_UART_RxCpltCallback+0x300>)
 80018a2:	f003 fa2f 	bl	8004d04 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80018a6:	2101      	movs	r1, #1
 80018a8:	4864      	ldr	r0, [pc, #400]	; (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 80018aa:	f001 fefa 	bl	80036a2 <HAL_GPIO_TogglePin>
 80018ae:	e0ab      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 80018b0:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 80018b2:	78db      	ldrb	r3, [r3, #3]
 80018b4:	2b4e      	cmp	r3, #78	; 0x4e
 80018b6:	d10d      	bne.n	80018d4 <HAL_UART_RxCpltCallback+0x164>
			if(iMode == 1){
 80018b8:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	f040 80a2 	bne.w	8001a08 <HAL_UART_RxCpltCallback+0x298>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 80018c4:	4857      	ldr	r0, [pc, #348]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 80018c6:	f005 fcb7 	bl	8007238 <atoi>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b64      	ldr	r3, [pc, #400]	; (8001a60 <HAL_UART_RxCpltCallback+0x2f0>)
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e099      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b52      	cmp	r3, #82	; 0x52
 80018da:	d111      	bne.n	8001900 <HAL_UART_RxCpltCallback+0x190>
			if(iMode == 1){
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_UART_RxCpltCallback+0x2c8>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	f040 8090 	bne.w	8001a08 <HAL_UART_RxCpltCallback+0x298>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 80018e8:	484e      	ldr	r0, [pc, #312]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 80018ea:	f005 fca5 	bl	8007238 <atoi>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_UART_RxCpltCallback+0x2f4>)
 80018f4:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_UART_RxCpltCallback+0x2f4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <HAL_UART_RxCpltCallback+0x2e0>)
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e083      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
			}
		}

		//GENERAL STOP COMMAND [HALT]
		else if(strncmp(sUserMessage, sGeneralStop, 4) == 0){
 8001900:	2204      	movs	r2, #4
 8001902:	495c      	ldr	r1, [pc, #368]	; (8001a74 <HAL_UART_RxCpltCallback+0x304>)
 8001904:	4847      	ldr	r0, [pc, #284]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 8001906:	f005 fccd 	bl	80072a4 <strncmp>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d139      	bne.n	8001984 <HAL_UART_RxCpltCallback+0x214>

			HAL_UART_Transmit(&huart3, "STOP", 4, 100);
 8001910:	2364      	movs	r3, #100	; 0x64
 8001912:	2204      	movs	r2, #4
 8001914:	4958      	ldr	r1, [pc, #352]	; (8001a78 <HAL_UART_RxCpltCallback+0x308>)
 8001916:	4859      	ldr	r0, [pc, #356]	; (8001a7c <HAL_UART_RxCpltCallback+0x30c>)
 8001918:	f003 fed8 	bl	80056cc <HAL_UART_Transmit>
			TxHeader.StdId = 0x60A;
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_UART_RxCpltCallback+0x310>)
 800191e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001922:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HAL_UART_RxCpltCallback+0x310>)
 8001926:	2208      	movs	r2, #8
 8001928:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 800192c:	2222      	movs	r2, #34	; 0x22
 800192e:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001930:	4b54      	ldr	r3, [pc, #336]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 8001938:	2260      	movs	r2, #96	; 0x60
 800193a:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 800193c:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 800193e:	2200      	movs	r2, #0
 8001940:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x02;
 8001942:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 8001944:	2202      	movs	r2, #2
 8001946:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001948:	4b4e      	ldr	r3, [pc, #312]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 800194a:	2200      	movs	r2, #0
 800194c:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 800194e:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 8001950:	2200      	movs	r2, #0
 8001952:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 8001956:	2200      	movs	r2, #0
 8001958:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800195a:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <HAL_UART_RxCpltCallback+0x318>)
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 800195e:	4948      	ldr	r1, [pc, #288]	; (8001a80 <HAL_UART_RxCpltCallback+0x310>)
 8001960:	484a      	ldr	r0, [pc, #296]	; (8001a8c <HAL_UART_RxCpltCallback+0x31c>)
 8001962:	f000 fef3 	bl	800274c <HAL_CAN_AddTxMessage>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_UART_RxCpltCallback+0x206>
				fnLEDsErrorState();
 800196c:	f7fe ff52 	bl	8000814 <fnLEDsErrorState>
				Error_Handler();
 8001970:	f000 f8aa 	bl	8001ac8 <Error_Handler>
 8001974:	e048      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
			}
			else{
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197c:	482f      	ldr	r0, [pc, #188]	; (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 800197e:	f001 fe77 	bl	8003670 <HAL_GPIO_WritePin>
 8001982:	e041      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
			}
		}

		//RESET COMMAND [RSET]
		else if(strncmp(sUserMessage, sReset, 4) == 0){
 8001984:	2204      	movs	r2, #4
 8001986:	4942      	ldr	r1, [pc, #264]	; (8001a90 <HAL_UART_RxCpltCallback+0x320>)
 8001988:	4826      	ldr	r0, [pc, #152]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 800198a:	f005 fc8b 	bl	80072a4 <strncmp>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d139      	bne.n	8001a08 <HAL_UART_RxCpltCallback+0x298>

			TxHeader.StdId = 0x60A;
 8001994:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <HAL_UART_RxCpltCallback+0x310>)
 8001996:	f240 620a 	movw	r2, #1546	; 0x60a
 800199a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_UART_RxCpltCallback+0x310>)
 800199e:	2208      	movs	r2, #8
 80019a0:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019a4:	2222      	movs	r2, #34	; 0x22
 80019a6:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 80019a8:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 80019ae:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019b0:	2260      	movs	r2, #96	; 0x60
 80019b2:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 80019b4:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x0F;
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019bc:	220f      	movs	r2, #15
 80019be:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_UART_RxCpltCallback+0x318>)
 80019d4:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <HAL_UART_RxCpltCallback+0x314>)
 80019d6:	492a      	ldr	r1, [pc, #168]	; (8001a80 <HAL_UART_RxCpltCallback+0x310>)
 80019d8:	482c      	ldr	r0, [pc, #176]	; (8001a8c <HAL_UART_RxCpltCallback+0x31c>)
 80019da:	f000 feb7 	bl	800274c <HAL_CAN_AddTxMessage>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_UART_RxCpltCallback+0x27e>
				fnLEDsErrorState();
 80019e4:	f7fe ff16 	bl	8000814 <fnLEDsErrorState>
				Error_Handler();
 80019e8:	f000 f86e 	bl	8001ac8 <Error_Handler>
 80019ec:	e00c      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>
			}
			else{
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f4:	4811      	ldr	r0, [pc, #68]	; (8001a3c <HAL_UART_RxCpltCallback+0x2cc>)
 80019f6:	f001 fe3b 	bl	8003670 <HAL_GPIO_WritePin>
 80019fa:	e005      	b.n	8001a08 <HAL_UART_RxCpltCallback+0x298>



	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 80019fc:	2364      	movs	r3, #100	; 0x64
 80019fe:	220c      	movs	r2, #12
 8001a00:	4924      	ldr	r1, [pc, #144]	; (8001a94 <HAL_UART_RxCpltCallback+0x324>)
 8001a02:	481e      	ldr	r0, [pc, #120]	; (8001a7c <HAL_UART_RxCpltCallback+0x30c>)
 8001a04:	f003 fe62 	bl	80056cc <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4906      	ldr	r1, [pc, #24]	; (8001a24 <HAL_UART_RxCpltCallback+0x2b4>)
 8001a0c:	481b      	ldr	r0, [pc, #108]	; (8001a7c <HAL_UART_RxCpltCallback+0x30c>)
 8001a0e:	f003 fef0 	bl	80057f2 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40004800 	.word	0x40004800
 8001a20:	08007464 	.word	0x08007464
 8001a24:	20000100 	.word	0x20000100
 8001a28:	20000002 	.word	0x20000002
 8001a2c:	20000003 	.word	0x20000003
 8001a30:	200001f8 	.word	0x200001f8
 8001a34:	08007494 	.word	0x08007494
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	0800749c 	.word	0x0800749c
 8001a44:	080074ac 	.word	0x080074ac
 8001a48:	20000001 	.word	0x20000001
 8001a4c:	080074a4 	.word	0x080074a4
 8001a50:	200000d8 	.word	0x200000d8
 8001a54:	20000004 	.word	0x20000004
 8001a58:	20000244 	.word	0x20000244
 8001a5c:	0800747c 	.word	0x0800747c
 8001a60:	20000014 	.word	0x20000014
 8001a64:	20000010 	.word	0x20000010
 8001a68:	2000000c 	.word	0x2000000c
 8001a6c:	20000005 	.word	0x20000005
 8001a70:	20000160 	.word	0x20000160
 8001a74:	08007484 	.word	0x08007484
 8001a78:	0800745c 	.word	0x0800745c
 8001a7c:	20000290 	.word	0x20000290
 8001a80:	2000012c 	.word	0x2000012c
 8001a84:	200000dc 	.word	0x200000dc
 8001a88:	200000f4 	.word	0x200000f4
 8001a8c:	200000b0 	.word	0x200000b0
 8001a90:	0800748c 	.word	0x0800748c
 8001a94:	0800746c 	.word	0x0800746c

08001a98 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 ff2b 	bl	8002902 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001ab0:	f001 fdf7 	bl	80036a2 <HAL_GPIO_TogglePin>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200000f8 	.word	0x200000f8
 8001ac0:	20000144 	.word	0x20000144
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <Error_Handler+0x8>
	...

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_MspInit+0x44>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_MspInit+0x44>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_MspInit+0x44>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_MspInit+0x44>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_MspInit+0x44>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_MspInit+0x44>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b68:	f000 fb80 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <CAN1_RX0_IRQHandler+0x10>)
 8001b76:	f000 fffc 	bl	8002b72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000b0 	.word	0x200000b0

08001b84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b8a:	f003 fa97 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000160 	.word	0x20000160

08001b98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIM3_IRQHandler+0x10>)
 8001b9e:	f003 fa8d 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200001ac 	.word	0x200001ac

08001bac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <USART3_IRQHandler+0x10>)
 8001bb2:	f003 fe6d 	bl	8005890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000290 	.word	0x20000290

08001bc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bc8:	f001 fd86 	bl	80036d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM6_DAC_IRQHandler+0x10>)
 8001bd6:	f003 fa71 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200001f8 	.word	0x200001f8

08001be4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM7_IRQHandler+0x10>)
 8001bea:	f003 fa67 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000244 	.word	0x20000244

08001bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	2224      	movs	r2, #36	; 0x24
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 fb32 	bl	8007294 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	463b      	mov	r3, r7
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <MX_TIM3_Init+0xa8>)
 8001c3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001c4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001c8c:	f003 f8e2 	bl	8004e54 <HAL_TIM_Encoder_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c96:	f7ff ff17 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM3_Init+0xa4>)
 8001ca8:	f003 fc16 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001cb2:	f7ff ff09 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200001ac 	.word	0x200001ac
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_TIM6_Init+0x68>)
 8001cda:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <MX_TIM6_Init+0x6c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_TIM6_Init+0x68>)
 8001ce0:	f242 527f 	movw	r2, #9599	; 0x257f
 8001ce4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_TIM6_Init+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_TIM6_Init+0x68>)
 8001cee:	f241 3287 	movw	r2, #4999	; 0x1387
 8001cf2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_TIM6_Init+0x68>)
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_TIM6_Init+0x68>)
 8001cfc:	f002 ff84 	bl	8004c08 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d06:	f7ff fedf 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_TIM6_Init+0x68>)
 8001d18:	f003 fbde 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d22:	f7ff fed1 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200001f8 	.word	0x200001f8
 8001d34:	40001000 	.word	0x40001000

08001d38 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_TIM7_Init+0x68>)
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <MX_TIM7_Init+0x6c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_TIM7_Init+0x68>)
 8001d50:	f242 527f 	movw	r2, #9599	; 0x257f
 8001d54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_TIM7_Init+0x68>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_TIM7_Init+0x68>)
 8001d5e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_TIM7_Init+0x68>)
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <MX_TIM7_Init+0x68>)
 8001d6c:	f002 ff4c 	bl	8004c08 <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001d76:	f7ff fea7 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <MX_TIM7_Init+0x68>)
 8001d88:	f003 fba6 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001d92:	f7ff fe99 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000244 	.word	0x20000244
 8001da4:	40001400 	.word	0x40001400

08001da8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_TIM10_Init+0x40>)
 8001dae:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <MX_TIM10_Init+0x44>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <MX_TIM10_Init+0x40>)
 8001db4:	f242 527f 	movw	r2, #9599	; 0x257f
 8001db8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_TIM10_Init+0x40>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_TIM10_Init+0x40>)
 8001dc2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001dc6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <MX_TIM10_Init+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_TIM10_Init+0x40>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_TIM10_Init+0x40>)
 8001dd6:	f002 ff17 	bl	8004c08 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001de0:	f7ff fe72 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000160 	.word	0x20000160
 8001dec:	40014400 	.word	0x40014400

08001df0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a29      	ldr	r2, [pc, #164]	; (8001eb4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d14b      	bne.n	8001eaa <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4811      	ldr	r0, [pc, #68]	; (8001ebc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001e76:	f001 fa4f 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001e96:	f001 fa3f 	bl	8003318 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	201d      	movs	r0, #29
 8001ea0:	f001 f971 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ea4:	201d      	movs	r0, #29
 8001ea6:	f001 f98a 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	; 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020800 	.word	0x40020800

08001ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_TIM_Base_MspInit+0xac>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d114      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2036      	movs	r0, #54	; 0x36
 8001ef4:	f001 f947 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ef8:	2036      	movs	r0, #54	; 0x36
 8001efa:	f001 f960 	bl	80031be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001efe:	e032      	b.n	8001f66 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <HAL_TIM_Base_MspInit+0xb4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d114      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2037      	movs	r0, #55	; 0x37
 8001f28:	f001 f92d 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f2c:	2037      	movs	r0, #55	; 0x37
 8001f2e:	f001 f946 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 8001f32:	e018      	b.n	8001f66 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM10)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_TIM_Base_MspInit+0xb8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d113      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_TIM_Base_MspInit+0xb0>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2019      	movs	r0, #25
 8001f5c:	f001 f913 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f60:	2019      	movs	r0, #25
 8001f62:	f001 f92c 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40001000 	.word	0x40001000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40001400 	.word	0x40001400
 8001f7c:	40014400 	.word	0x40014400

08001f80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <MX_USART3_UART_Init+0x5c>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART3_UART_Init+0x58>)
 8001fc4:	f003 fb34 	bl	8005630 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001fce:	f7ff fd7b 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000290 	.word	0x20000290
 8001fdc:	40004800 	.word	0x40004800

08001fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_UART_MspInit+0x8c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d130      	bne.n	8002064 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_UART_MspInit+0x90>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_UART_MspInit+0x90>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_UART_MspInit+0x90>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_UART_MspInit+0x90>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a14      	ldr	r2, [pc, #80]	; (8002070 <HAL_UART_MspInit+0x90>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_UART_MspInit+0x90>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002032:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002044:	2307      	movs	r3, #7
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4809      	ldr	r0, [pc, #36]	; (8002074 <HAL_UART_MspInit+0x94>)
 8002050:	f001 f962 	bl	8003318 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2027      	movs	r0, #39	; 0x27
 800205a:	f001 f894 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800205e:	2027      	movs	r0, #39	; 0x27
 8002060:	f001 f8ad 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40004800 	.word	0x40004800
 8002070:	40023800 	.word	0x40023800
 8002074:	40020c00 	.word	0x40020c00

08002078 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800207e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002082:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002086:	2206      	movs	r2, #6
 8002088:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800208c:	2202      	movs	r2, #2
 800208e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002098:	2202      	movs	r2, #2
 800209a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800209e:	2201      	movs	r2, #1
 80020a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020bc:	f001 fb24 	bl	8003708 <HAL_PCD_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80020c6:	f7ff fcff 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000314 	.word	0x20000314

080020d4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f4:	d141      	bne.n	800217a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800210e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002120:	230a      	movs	r3, #10
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <HAL_PCD_MspInit+0xb4>)
 800212c:	f001 f8f4 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <HAL_PCD_MspInit+0xb4>)
 8002146:	f001 f8e7 	bl	8003318 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	6353      	str	r3, [r2, #52]	; 0x34
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_PCD_MspInit+0xb0>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40020000 	.word	0x40020000

0800218c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002192:	490e      	ldr	r1, [pc, #56]	; (80021cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a8:	4c0b      	ldr	r4, [pc, #44]	; (80021d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b6:	f7ff fd1f 	bl	8001bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ba:	f005 f847 	bl	800724c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021be:	f7ff f9d9 	bl	8001574 <main>
  bx  lr    
 80021c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80021d0:	080075e0 	.word	0x080075e0
  ldr r2, =_sbss
 80021d4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80021d8:	2000071c 	.word	0x2000071c

080021dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC_IRQHandler>
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_Init+0x28>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <HAL_Init+0x28>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ee:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 ffbd 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f000 f808 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff fc6a 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 ffd5 	bl	80031da <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 ff9d 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000018 	.word	0x20000018
 8002264:	20000020 	.word	0x20000020
 8002268:	2000001c 	.word	0x2000001c

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000020 	.word	0x20000020
 8002290:	20000718 	.word	0x20000718

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000718 	.word	0x20000718

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff ffee 	bl	8002294 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffde 	bl	8002294 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000020 	.word	0x20000020

080022f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0ed      	b.n	80024e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe f944 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002328:	f7ff ffb4 	bl	8002294 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800232e:	e012      	b.n	8002356 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002330:	f7ff ffb0 	bl	8002294 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b0a      	cmp	r3, #10
 800233c:	d90b      	bls.n	8002356 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2205      	movs	r2, #5
 800234e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0c5      	b.n	80024e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0e5      	beq.n	8002330 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0202 	bic.w	r2, r2, #2
 8002372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002374:	f7ff ff8e 	bl	8002294 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800237a:	e012      	b.n	80023a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800237c:	f7ff ff8a 	bl	8002294 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b0a      	cmp	r3, #10
 8002388:	d90b      	bls.n	80023a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e09f      	b.n	80024e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e5      	bne.n	800237c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7e1b      	ldrb	r3, [r3, #24]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d108      	bne.n	80023ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e007      	b.n	80023da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7e5b      	ldrb	r3, [r3, #25]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e007      	b.n	8002404 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002402:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e9b      	ldrb	r3, [r3, #26]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0220 	orr.w	r2, r2, #32
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0220 	bic.w	r2, r2, #32
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7edb      	ldrb	r3, [r3, #27]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0210 	bic.w	r2, r2, #16
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0210 	orr.w	r2, r2, #16
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7f1b      	ldrb	r3, [r3, #28]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0208 	orr.w	r2, r2, #8
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0208 	bic.w	r2, r2, #8
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7f5b      	ldrb	r3, [r3, #29]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0204 	orr.w	r2, r2, #4
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0204 	bic.w	r2, r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	ea42 0103 	orr.w	r1, r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002502:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d003      	beq.n	8002512 <HAL_CAN_ConfigFilter+0x26>
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b02      	cmp	r3, #2
 800250e:	f040 80c7 	bne.w	80026a0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a69      	ldr	r2, [pc, #420]	; (80026bc <HAL_CAN_ConfigFilter+0x1d0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d001      	beq.n	8002520 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_CAN_ConfigFilter+0x1d4>)
 800251e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4a63      	ldr	r2, [pc, #396]	; (80026c0 <HAL_CAN_ConfigFilter+0x1d4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800253e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	431a      	orrs	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2201      	movs	r2, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d123      	bne.n	80025ce <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	401a      	ands	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3248      	adds	r2, #72	; 0x48
 80025ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025c4:	6979      	ldr	r1, [r7, #20]
 80025c6:	3348      	adds	r3, #72	; 0x48
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d122      	bne.n	800261c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	431a      	orrs	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3248      	adds	r2, #72	; 0x48
 80025fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002610:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002612:	6979      	ldr	r1, [r7, #20]
 8002614:	3348      	adds	r3, #72	; 0x48
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002636:	e007      	b.n	8002648 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	431a      	orrs	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002662:	e007      	b.n	8002674 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	431a      	orrs	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	431a      	orrs	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002692:	f023 0201 	bic.w	r2, r3, #1
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e006      	b.n	80026ae <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40003400 	.word	0x40003400
 80026c0:	40006400 	.word	0x40006400

080026c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d12e      	bne.n	8002736 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026f0:	f7ff fdd0 	bl	8002294 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026f6:	e012      	b.n	800271e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026f8:	f7ff fdcc 	bl	8002294 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b0a      	cmp	r3, #10
 8002704:	d90b      	bls.n	800271e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2205      	movs	r2, #5
 8002716:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e012      	b.n	8002744 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e5      	bne.n	80026f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e006      	b.n	8002744 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002760:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800276a:	7ffb      	ldrb	r3, [r7, #31]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d003      	beq.n	8002778 <HAL_CAN_AddTxMessage+0x2c>
 8002770:	7ffb      	ldrb	r3, [r7, #31]
 8002772:	2b02      	cmp	r3, #2
 8002774:	f040 80b8 	bne.w	80028e8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80a0 	beq.w	80028d8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	0e1b      	lsrs	r3, r3, #24
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d907      	bls.n	80027b8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e09e      	b.n	80028f6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027b8:	2201      	movs	r2, #1
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	409a      	lsls	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3318      	adds	r3, #24
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	440b      	add	r3, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e00f      	b.n	8002806 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027fa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3318      	adds	r3, #24
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	440b      	add	r3, r1
 8002804:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3318      	adds	r3, #24
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	440b      	add	r3, r1
 8002816:	3304      	adds	r3, #4
 8002818:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	7d1b      	ldrb	r3, [r3, #20]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d111      	bne.n	8002846 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3318      	adds	r3, #24
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	3304      	adds	r3, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	6811      	ldr	r1, [r2, #0]
 8002836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3318      	adds	r3, #24
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	440b      	add	r3, r1
 8002842:	3304      	adds	r3, #4
 8002844:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3307      	adds	r3, #7
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	061a      	lsls	r2, r3, #24
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3306      	adds	r3, #6
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3305      	adds	r3, #5
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	4313      	orrs	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	3204      	adds	r2, #4
 8002866:	7812      	ldrb	r2, [r2, #0]
 8002868:	4610      	mov	r0, r2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	6811      	ldr	r1, [r2, #0]
 800286e:	ea43 0200 	orr.w	r2, r3, r0
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	440b      	add	r3, r1
 8002878:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800287c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3303      	adds	r3, #3
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	061a      	lsls	r2, r3, #24
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3302      	adds	r3, #2
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3301      	adds	r3, #1
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	4313      	orrs	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	7812      	ldrb	r2, [r2, #0]
 800289e:	4610      	mov	r0, r2
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	ea43 0200 	orr.w	r2, r3, r0
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	440b      	add	r3, r1
 80028ae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3318      	adds	r3, #24
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	4413      	add	r3, r2
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	6811      	ldr	r1, [r2, #0]
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3318      	adds	r3, #24
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	440b      	add	r3, r1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e00e      	b.n	80028f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e006      	b.n	80028f6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002916:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d003      	beq.n	8002926 <HAL_CAN_GetRxMessage+0x24>
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b02      	cmp	r3, #2
 8002922:	f040 80f3 	bne.w	8002b0c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10e      	bne.n	800294a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0e7      	b.n	8002b1a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0d8      	b.n	8002b1a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	331b      	adds	r3, #27
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0204 	and.w	r2, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	331b      	adds	r3, #27
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	4413      	add	r3, r2
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0d5b      	lsrs	r3, r3, #21
 8002996:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	331b      	adds	r3, #27
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	08db      	lsrs	r3, r3, #3
 80029b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	331b      	adds	r3, #27
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4413      	add	r3, r2
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0202 	and.w	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	331b      	adds	r3, #27
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	3304      	adds	r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	331b      	adds	r3, #27
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	331b      	adds	r3, #27
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4413      	add	r3, r2
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0a1a      	lsrs	r2, r3, #8
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0c1a      	lsrs	r2, r3, #16
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e1a      	lsrs	r2, r3, #24
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3303      	adds	r3, #3
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0a1a      	lsrs	r2, r3, #8
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	3305      	adds	r3, #5
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0c1a      	lsrs	r2, r3, #16
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3306      	adds	r3, #6
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0e1a      	lsrs	r2, r3, #24
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	3307      	adds	r3, #7
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e007      	b.n	8002b08 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0220 	orr.w	r2, r2, #32
 8002b06:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e006      	b.n	8002b1a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b36:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d002      	beq.n	8002b44 <HAL_CAN_ActivateNotification+0x1e>
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d109      	bne.n	8002b58 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6959      	ldr	r1, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e006      	b.n	8002b66 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b08a      	sub	sp, #40	; 0x28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d07c      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d023      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f983 	bl	8002ee0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002bda:	e016      	b.n	8002c0a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	e00c      	b.n	8002c0a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
 8002c02:	e002      	b.n	8002c0a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f989 	bl	8002f1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d024      	beq.n	8002c5e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f963 	bl	8002ef4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c2e:	e016      	b.n	8002c5e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	e00c      	b.n	8002c5e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	e002      	b.n	8002c5e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f969 	bl	8002f30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d024      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f943 	bl	8002f08 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c82:	e016      	b.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	e00c      	b.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8002caa:	e002      	b.n	8002cb2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f949 	bl	8002f44 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f930 	bl	8002f58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7fe fec1 	bl	8001a98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2210      	movs	r2, #16
 8002d38:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2208      	movs	r2, #8
 8002d54:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f912 	bl	8002f80 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8f9 	bl	8002f6c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d006      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2210      	movs	r2, #16
 8002d94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8fc 	bl	8002f94 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2208      	movs	r2, #8
 8002db6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8f5 	bl	8002fa8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d07b      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d072      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d043      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03e      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e40:	2b60      	cmp	r3, #96	; 0x60
 8002e42:	d02b      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x32a>
 8002e44:	2b60      	cmp	r3, #96	; 0x60
 8002e46:	d82e      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e48:	2b50      	cmp	r3, #80	; 0x50
 8002e4a:	d022      	beq.n	8002e92 <HAL_CAN_IRQHandler+0x320>
 8002e4c:	2b50      	cmp	r3, #80	; 0x50
 8002e4e:	d82a      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d019      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x316>
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d826      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e58:	2b30      	cmp	r3, #48	; 0x30
 8002e5a:	d010      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x30c>
 8002e5c:	2b30      	cmp	r3, #48	; 0x30
 8002e5e:	d822      	bhi.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d002      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x2f8>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d005      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e68:	e01d      	b.n	8002ea6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e72:	e019      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f043 0310 	orr.w	r3, r3, #16
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e7c:	e014      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f043 0320 	orr.w	r3, r3, #32
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e86:	e00f      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e90:	e00a      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ea4:	e000      	b.n	8002ea8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ea6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002eb6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f872 	bl	8002fbc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	; 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fec:	4013      	ands	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <__NVIC_SetPriorityGrouping+0x40>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00
 8003014:	05fa0000 	.word	0x05fa0000

08003018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <__NVIC_GetPriorityGrouping+0x18>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 0307 	and.w	r3, r3, #7
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db0b      	blt.n	800305e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <__NVIC_EnableIRQ+0x38>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2001      	movs	r0, #1
 8003056:	fa00 f202 	lsl.w	r2, r0, r2
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff8e 	bl	8003070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff29 	bl	8002fd0 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff3e 	bl	8003018 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff8e 	bl	80030c4 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5d 	bl	8003070 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff31 	bl	8003034 <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff f848 	bl	8002294 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d008      	beq.n	8003224 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e052      	b.n	80032ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0216 	bic.w	r2, r2, #22
 8003232:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003242:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <HAL_DMA_Abort+0x62>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0208 	bic.w	r2, r2, #8
 8003262:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003274:	e013      	b.n	800329e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003276:	f7ff f80d 	bl	8002294 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b05      	cmp	r3, #5
 8003282:	d90c      	bls.n	800329e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2203      	movs	r2, #3
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e015      	b.n	80032ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e4      	bne.n	8003276 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	223f      	movs	r2, #63	; 0x3f
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e00c      	b.n	800330a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2205      	movs	r2, #5
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e175      	b.n	8003624 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	f040 8164 	bne.w	800361e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d005      	beq.n	800336e <HAL_GPIO_Init+0x56>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d130      	bne.n	80033d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2203      	movs	r2, #3
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 0201 	and.w	r2, r3, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d017      	beq.n	800340c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d123      	bne.n	8003460 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	08da      	lsrs	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3208      	adds	r2, #8
 8003420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	69b9      	ldr	r1, [r7, #24]
 800345c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0203 	and.w	r2, r3, #3
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80be 	beq.w	800361e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_GPIO_Init+0x324>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4a65      	ldr	r2, [pc, #404]	; (800363c <HAL_GPIO_Init+0x324>)
 80034a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_GPIO_Init+0x324>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034ba:	4a61      	ldr	r2, [pc, #388]	; (8003640 <HAL_GPIO_Init+0x328>)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	3302      	adds	r3, #2
 80034c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	220f      	movs	r2, #15
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a58      	ldr	r2, [pc, #352]	; (8003644 <HAL_GPIO_Init+0x32c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d037      	beq.n	8003556 <HAL_GPIO_Init+0x23e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a57      	ldr	r2, [pc, #348]	; (8003648 <HAL_GPIO_Init+0x330>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_GPIO_Init+0x23a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a56      	ldr	r2, [pc, #344]	; (800364c <HAL_GPIO_Init+0x334>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d02b      	beq.n	800354e <HAL_GPIO_Init+0x236>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a55      	ldr	r2, [pc, #340]	; (8003650 <HAL_GPIO_Init+0x338>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d025      	beq.n	800354a <HAL_GPIO_Init+0x232>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a54      	ldr	r2, [pc, #336]	; (8003654 <HAL_GPIO_Init+0x33c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01f      	beq.n	8003546 <HAL_GPIO_Init+0x22e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a53      	ldr	r2, [pc, #332]	; (8003658 <HAL_GPIO_Init+0x340>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d019      	beq.n	8003542 <HAL_GPIO_Init+0x22a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a52      	ldr	r2, [pc, #328]	; (800365c <HAL_GPIO_Init+0x344>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_GPIO_Init+0x226>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a51      	ldr	r2, [pc, #324]	; (8003660 <HAL_GPIO_Init+0x348>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00d      	beq.n	800353a <HAL_GPIO_Init+0x222>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a50      	ldr	r2, [pc, #320]	; (8003664 <HAL_GPIO_Init+0x34c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d007      	beq.n	8003536 <HAL_GPIO_Init+0x21e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4f      	ldr	r2, [pc, #316]	; (8003668 <HAL_GPIO_Init+0x350>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_GPIO_Init+0x21a>
 800352e:	2309      	movs	r3, #9
 8003530:	e012      	b.n	8003558 <HAL_GPIO_Init+0x240>
 8003532:	230a      	movs	r3, #10
 8003534:	e010      	b.n	8003558 <HAL_GPIO_Init+0x240>
 8003536:	2308      	movs	r3, #8
 8003538:	e00e      	b.n	8003558 <HAL_GPIO_Init+0x240>
 800353a:	2307      	movs	r3, #7
 800353c:	e00c      	b.n	8003558 <HAL_GPIO_Init+0x240>
 800353e:	2306      	movs	r3, #6
 8003540:	e00a      	b.n	8003558 <HAL_GPIO_Init+0x240>
 8003542:	2305      	movs	r3, #5
 8003544:	e008      	b.n	8003558 <HAL_GPIO_Init+0x240>
 8003546:	2304      	movs	r3, #4
 8003548:	e006      	b.n	8003558 <HAL_GPIO_Init+0x240>
 800354a:	2303      	movs	r3, #3
 800354c:	e004      	b.n	8003558 <HAL_GPIO_Init+0x240>
 800354e:	2302      	movs	r3, #2
 8003550:	e002      	b.n	8003558 <HAL_GPIO_Init+0x240>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_GPIO_Init+0x240>
 8003556:	2300      	movs	r3, #0
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	f002 0203 	and.w	r2, r2, #3
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	4093      	lsls	r3, r2
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003568:	4935      	ldr	r1, [pc, #212]	; (8003640 <HAL_GPIO_Init+0x328>)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_GPIO_Init+0x354>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800359a:	4a34      	ldr	r2, [pc, #208]	; (800366c <HAL_GPIO_Init+0x354>)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a0:	4b32      	ldr	r3, [pc, #200]	; (800366c <HAL_GPIO_Init+0x354>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c4:	4a29      	ldr	r2, [pc, #164]	; (800366c <HAL_GPIO_Init+0x354>)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ca:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_GPIO_Init+0x354>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <HAL_GPIO_Init+0x354>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_GPIO_Init+0x354>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003618:	4a14      	ldr	r2, [pc, #80]	; (800366c <HAL_GPIO_Init+0x354>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3301      	adds	r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b0f      	cmp	r3, #15
 8003628:	f67f ae86 	bls.w	8003338 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3724      	adds	r7, #36	; 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	40013800 	.word	0x40013800
 8003644:	40020000 	.word	0x40020000
 8003648:	40020400 	.word	0x40020400
 800364c:	40020800 	.word	0x40020800
 8003650:	40020c00 	.word	0x40020c00
 8003654:	40021000 	.word	0x40021000
 8003658:	40021400 	.word	0x40021400
 800365c:	40021800 	.word	0x40021800
 8003660:	40021c00 	.word	0x40021c00
 8003664:	40022000 	.word	0x40022000
 8003668:	40022400 	.word	0x40022400
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
 800367c:	4613      	mov	r3, r2
 800367e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800368c:	e003      	b.n	8003696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	041a      	lsls	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036b4:	887a      	ldrh	r2, [r7, #2]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	041a      	lsls	r2, r3, #16
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43d9      	mvns	r1, r3
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	400b      	ands	r3, r1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fefc 	bl	80014f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40013c00 	.word	0x40013c00

08003708 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	b08f      	sub	sp, #60	; 0x3c
 800370c:	af0a      	add	r7, sp, #40	; 0x28
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e116      	b.n	8003948 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fe fccd 	bl	80020d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2203      	movs	r2, #3
 800373e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fad7 	bl	8006d0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	687e      	ldr	r6, [r7, #4]
 8003766:	466d      	mov	r5, sp
 8003768:	f106 0410 	add.w	r4, r6, #16
 800376c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800376e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003774:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003778:	e885 0003 	stmia.w	r5, {r0, r1}
 800377c:	1d33      	adds	r3, r6, #4
 800377e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003780:	6838      	ldr	r0, [r7, #0]
 8003782:	f003 fa6b 	bl	8006c5c <USB_CoreInit>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0d7      	b.n	8003948 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 fac5 	bl	8006d2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e04a      	b.n	8003840 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	333d      	adds	r3, #61	; 0x3d
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	333c      	adds	r3, #60	; 0x3c
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	b298      	uxth	r0, r3
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3342      	adds	r3, #66	; 0x42
 80037e6:	4602      	mov	r2, r0
 80037e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	333f      	adds	r3, #63	; 0x3f
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	; 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3348      	adds	r3, #72	; 0x48
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3350      	adds	r3, #80	; 0x50
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	3301      	adds	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3af      	bcc.n	80037aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e044      	b.n	80038da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	3301      	adds	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3b5      	bcc.n	8003850 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	687e      	ldr	r6, [r7, #4]
 80038ec:	466d      	mov	r5, sp
 80038ee:	f106 0410 	add.w	r4, r6, #16
 80038f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003902:	1d33      	adds	r3, r6, #4
 8003904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f003 fa5e 	bl	8006dc8 <USB_DevInit>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e014      	b.n	8003948 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	2b01      	cmp	r3, #1
 8003934:	d102      	bne.n	800393c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f80a 	bl	8003950 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fc18 	bl	8007176 <USB_DevDisconnect>

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003950 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_PCDEx_ActivateLPM+0x44>)
 8003980:	4313      	orrs	r3, r2
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	10000003 	.word	0x10000003

08003998 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40007000 	.word	0x40007000

080039b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039da:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e6:	f7fe fc55 	bl	8002294 <HAL_GetTick>
 80039ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ec:	e009      	b.n	8003a02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ee:	f7fe fc51 	bl	8002294 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fc:	d901      	bls.n	8003a02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e022      	b.n	8003a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0e:	d1ee      	bne.n	80039ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1c:	f7fe fc3a 	bl	8002294 <HAL_GetTick>
 8003a20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a22:	e009      	b.n	8003a38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a24:	f7fe fc36 	bl	8002294 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a32:	d901      	bls.n	8003a38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e007      	b.n	8003a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a44:	d1ee      	bne.n	8003a24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40007000 	.word	0x40007000

08003a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e29b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8087 	beq.w	8003b8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a7c:	4b96      	ldr	r3, [pc, #600]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d00c      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a88:	4b93      	ldr	r3, [pc, #588]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d112      	bne.n	8003aba <HAL_RCC_OscConfig+0x62>
 8003a94:	4b90      	ldr	r3, [pc, #576]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa2:	4b8d      	ldr	r3, [pc, #564]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d06c      	beq.n	8003b88 <HAL_RCC_OscConfig+0x130>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d168      	bne.n	8003b88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e275      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac2:	d106      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x7a>
 8003ac4:	4b84      	ldr	r3, [pc, #528]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a83      	ldr	r2, [pc, #524]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e02e      	b.n	8003b30 <HAL_RCC_OscConfig+0xd8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x9c>
 8003ada:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7e      	ldr	r2, [pc, #504]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b7c      	ldr	r3, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a7b      	ldr	r2, [pc, #492]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0xd8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0xc0>
 8003afe:	4b76      	ldr	r3, [pc, #472]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a75      	ldr	r2, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b73      	ldr	r3, [pc, #460]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a72      	ldr	r2, [pc, #456]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0xd8>
 8003b18:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a6e      	ldr	r2, [pc, #440]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a6b      	ldr	r2, [pc, #428]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe fbac 	bl	8002294 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fe fba8 	bl	8002294 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e229      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b61      	ldr	r3, [pc, #388]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0xe8>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe fb98 	bl	8002294 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fe fb94 	bl	8002294 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e215      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x110>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d069      	beq.n	8003c6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b96:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b4d      	ldr	r3, [pc, #308]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d11c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x190>
 8003bae:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x17a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e1e9      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	493d      	ldr	r1, [pc, #244]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	e040      	b.n	8003c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d023      	beq.n	8003c38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fb4a 	bl	8002294 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fe fb46 	bl	8002294 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1c7      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4929      	ldr	r1, [pc, #164]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
 8003c36:	e018      	b.n	8003c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe fb26 	bl	8002294 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fe fb22 	bl	8002294 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e1a3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d038      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d019      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fe fb03 	bl	8002294 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fe faff 	bl	8002294 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e180      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x23a>
 8003cb0:	e01a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fae9 	bl	8002294 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe fae5 	bl	8002294 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d903      	bls.n	8003cdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e166      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
 8003cd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4b92      	ldr	r3, [pc, #584]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80a4 	beq.w	8003e3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b8c      	ldr	r3, [pc, #560]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b89      	ldr	r3, [pc, #548]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a88      	ldr	r2, [pc, #544]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b86      	ldr	r3, [pc, #536]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1e:	4b83      	ldr	r3, [pc, #524]	; (8003f2c <HAL_RCC_OscConfig+0x4d4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d2a:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <HAL_RCC_OscConfig+0x4d4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7f      	ldr	r2, [pc, #508]	; (8003f2c <HAL_RCC_OscConfig+0x4d4>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fe faad 	bl	8002294 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fe faa9 	bl	8002294 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	; 0x64
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e12a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d50:	4b76      	ldr	r3, [pc, #472]	; (8003f2c <HAL_RCC_OscConfig+0x4d4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x31a>
 8003d64:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a6f      	ldr	r2, [pc, #444]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	e02d      	b.n	8003dce <HAL_RCC_OscConfig+0x376>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x33c>
 8003d7a:	4b6b      	ldr	r3, [pc, #428]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a6a      	ldr	r2, [pc, #424]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	4b68      	ldr	r3, [pc, #416]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a67      	ldr	r2, [pc, #412]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	e01c      	b.n	8003dce <HAL_RCC_OscConfig+0x376>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d10c      	bne.n	8003db6 <HAL_RCC_OscConfig+0x35e>
 8003d9c:	4b62      	ldr	r3, [pc, #392]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a61      	ldr	r2, [pc, #388]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	4b5f      	ldr	r3, [pc, #380]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a5e      	ldr	r2, [pc, #376]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
 8003db4:	e00b      	b.n	8003dce <HAL_RCC_OscConfig+0x376>
 8003db6:	4b5c      	ldr	r3, [pc, #368]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a5b      	ldr	r2, [pc, #364]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a58      	ldr	r2, [pc, #352]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d015      	beq.n	8003e02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fa5d 	bl	8002294 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fe fa59 	bl	8002294 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0d8      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	4b4c      	ldr	r3, [pc, #304]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ee      	beq.n	8003dde <HAL_RCC_OscConfig+0x386>
 8003e00:	e014      	b.n	8003e2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fe fa47 	bl	8002294 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fe fa43 	bl	8002294 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0c2      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d105      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80ae 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e48:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d06d      	beq.n	8003f30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d14b      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a31      	ldr	r2, [pc, #196]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe fa14 	bl	8002294 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe fa10 	bl	8002294 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e091      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	071b      	lsls	r3, r3, #28
 8003eba:	491b      	ldr	r1, [pc, #108]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f9e2 	bl	8002294 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe f9de 	bl	8002294 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e05f      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x47c>
 8003ef2:	e057      	b.n	8003fa4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f9c8 	bl	8002294 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe f9c4 	bl	8002294 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e045      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4b0>
 8003f26:	e03d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x54c>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f30:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <HAL_RCC_OscConfig+0x558>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d030      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d129      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d122      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d119      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0d0      	b.n	800416e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d910      	bls.n	8003ffc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 020f 	bic.w	r2, r3, #15
 8003fe2:	4965      	ldr	r1, [pc, #404]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0b8      	b.n	800416e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004014:	4b59      	ldr	r3, [pc, #356]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 800401a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800401e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a52      	ldr	r2, [pc, #328]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004036:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b50      	ldr	r3, [pc, #320]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	494d      	ldr	r1, [pc, #308]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d040      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d115      	bne.n	8004096 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07f      	b.n	800416e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e073      	b.n	800416e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3d      	ldr	r3, [pc, #244]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e06b      	b.n	800416e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b39      	ldr	r3, [pc, #228]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4936      	ldr	r1, [pc, #216]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a8:	f7fe f8f4 	bl	8002294 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fe f8f0 	bl	8002294 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e053      	b.n	800416e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2d      	ldr	r3, [pc, #180]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d210      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 020f 	bic.w	r2, r3, #15
 80040ee:	4922      	ldr	r1, [pc, #136]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e032      	b.n	800416e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4916      	ldr	r1, [pc, #88]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	490e      	ldr	r1, [pc, #56]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004146:	f000 f821 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800414a:	4602      	mov	r2, r0
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	490a      	ldr	r1, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x1cc>)
 8004158:	5ccb      	ldrb	r3, [r1, r3]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	4a09      	ldr	r2, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1d0>)
 8004160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_ClockConfig+0x1d4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe f850 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023c00 	.word	0x40023c00
 800417c:	40023800 	.word	0x40023800
 8004180:	080074b4 	.word	0x080074b4
 8004184:	20000018 	.word	0x20000018
 8004188:	2000001c 	.word	0x2000001c

0800418c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800418c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	2300      	movs	r3, #0
 800419e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041a4:	4b67      	ldr	r3, [pc, #412]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d00d      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x40>
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	f200 80bd 	bhi.w	8004330 <HAL_RCC_GetSysClockFreq+0x1a4>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041be:	e0b7      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c0:	4b61      	ldr	r3, [pc, #388]	; (8004348 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041c2:	60bb      	str	r3, [r7, #8]
      break;
 80041c4:	e0b7      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041c6:	4b61      	ldr	r3, [pc, #388]	; (800434c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041c8:	60bb      	str	r3, [r7, #8]
      break;
 80041ca:	e0b4      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041cc:	4b5d      	ldr	r3, [pc, #372]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041d6:	4b5b      	ldr	r3, [pc, #364]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04d      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e2:	4b58      	ldr	r3, [pc, #352]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	ea02 0800 	and.w	r8, r2, r0
 80041fa:	ea03 0901 	and.w	r9, r3, r1
 80041fe:	4640      	mov	r0, r8
 8004200:	4649      	mov	r1, r9
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	014b      	lsls	r3, r1, #5
 800420c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004210:	0142      	lsls	r2, r0, #5
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	ebb0 0008 	subs.w	r0, r0, r8
 800421a:	eb61 0109 	sbc.w	r1, r1, r9
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	018b      	lsls	r3, r1, #6
 8004228:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800422c:	0182      	lsls	r2, r0, #6
 800422e:	1a12      	subs	r2, r2, r0
 8004230:	eb63 0301 	sbc.w	r3, r3, r1
 8004234:	f04f 0000 	mov.w	r0, #0
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	00d9      	lsls	r1, r3, #3
 800423e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004242:	00d0      	lsls	r0, r2, #3
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	eb12 0208 	adds.w	r2, r2, r8
 800424c:	eb43 0309 	adc.w	r3, r3, r9
 8004250:	f04f 0000 	mov.w	r0, #0
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	0259      	lsls	r1, r3, #9
 800425a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800425e:	0250      	lsls	r0, r2, #9
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	461a      	mov	r2, r3
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	f7fb ffe2 	bl	8000238 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4613      	mov	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e04a      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b31      	ldr	r3, [pc, #196]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	461a      	mov	r2, r3
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	ea02 0400 	and.w	r4, r2, r0
 8004296:	ea03 0501 	and.w	r5, r3, r1
 800429a:	4620      	mov	r0, r4
 800429c:	4629      	mov	r1, r5
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	014b      	lsls	r3, r1, #5
 80042a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042ac:	0142      	lsls	r2, r0, #5
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	1b00      	subs	r0, r0, r4
 80042b4:	eb61 0105 	sbc.w	r1, r1, r5
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	018b      	lsls	r3, r1, #6
 80042c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042c6:	0182      	lsls	r2, r0, #6
 80042c8:	1a12      	subs	r2, r2, r0
 80042ca:	eb63 0301 	sbc.w	r3, r3, r1
 80042ce:	f04f 0000 	mov.w	r0, #0
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	00d9      	lsls	r1, r3, #3
 80042d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042dc:	00d0      	lsls	r0, r2, #3
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	1912      	adds	r2, r2, r4
 80042e4:	eb45 0303 	adc.w	r3, r5, r3
 80042e8:	f04f 0000 	mov.w	r0, #0
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	0299      	lsls	r1, r3, #10
 80042f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042f6:	0290      	lsls	r0, r2, #10
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	461a      	mov	r2, r3
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	f7fb ff96 	bl	8000238 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4613      	mov	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	60bb      	str	r3, [r7, #8]
      break;
 800432e:	e002      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004332:	60bb      	str	r3, [r7, #8]
      break;
 8004334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004336:	68bb      	ldr	r3, [r7, #8]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800
 8004348:	00f42400 	.word	0x00f42400
 800434c:	007a1200 	.word	0x007a1200

08004350 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <HAL_RCC_GetHCLKFreq+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000018 	.word	0x20000018

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800436c:	f7ff fff0 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0a9b      	lsrs	r3, r3, #10
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	080074c4 	.word	0x080074c4

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004394:	f7ff ffdc 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0b5b      	lsrs	r3, r3, #13
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4903      	ldr	r1, [pc, #12]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	080074c4 	.word	0x080074c4

080043b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d012      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e0:	4b69      	ldr	r3, [pc, #420]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a68      	ldr	r2, [pc, #416]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ea:	6093      	str	r3, [r2, #8]
 80043ec:	4b66      	ldr	r3, [pc, #408]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	4964      	ldr	r1, [pc, #400]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004412:	4b5d      	ldr	r3, [pc, #372]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004420:	4959      	ldr	r1, [pc, #356]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004430:	d101      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d017      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800444e:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	494a      	ldr	r1, [pc, #296]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800447a:	2301      	movs	r3, #1
 800447c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 808b 	beq.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800449c:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	4a39      	ldr	r2, [pc, #228]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6413      	str	r3, [r2, #64]	; 0x40
 80044a8:	4b37      	ldr	r3, [pc, #220]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a34      	ldr	r2, [pc, #208]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fd fee8 	bl	8002294 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fd fee4 	bl	8002294 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e38f      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e6:	4b28      	ldr	r3, [pc, #160]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d035      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d02e      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004504:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b01      	cmp	r3, #1
 8004536:	d114      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd feac 	bl	8002294 <HAL_GetTick>
 800453c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd fea8 	bl	8002294 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e351      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ee      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456e:	d111      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800457e:	400b      	ands	r3, r1
 8004580:	4901      	ldr	r1, [pc, #4]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
 8004586:	e00b      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	0ffffcff 	.word	0x0ffffcff
 8004594:	4bb3      	ldr	r3, [pc, #716]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4ab2      	ldr	r2, [pc, #712]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800459e:	6093      	str	r3, [r2, #8]
 80045a0:	4bb0      	ldr	r3, [pc, #704]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ac:	49ad      	ldr	r1, [pc, #692]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045be:	4ba9      	ldr	r3, [pc, #676]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	4aa7      	ldr	r2, [pc, #668]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ce:	4ba5      	ldr	r3, [pc, #660]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	49a2      	ldr	r1, [pc, #648]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ec:	4b9d      	ldr	r3, [pc, #628]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fa:	499a      	ldr	r1, [pc, #616]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800460e:	4b95      	ldr	r3, [pc, #596]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461c:	4991      	ldr	r1, [pc, #580]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004630:	4b8c      	ldr	r3, [pc, #560]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	4989      	ldr	r1, [pc, #548]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004652:	4b84      	ldr	r3, [pc, #528]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4980      	ldr	r1, [pc, #512]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004674:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f023 0203 	bic.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	4978      	ldr	r1, [pc, #480]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004696:	4b73      	ldr	r3, [pc, #460]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f023 020c 	bic.w	r2, r3, #12
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	496f      	ldr	r1, [pc, #444]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046b8:	4b6a      	ldr	r3, [pc, #424]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	4967      	ldr	r1, [pc, #412]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046da:	4b62      	ldr	r3, [pc, #392]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	495e      	ldr	r1, [pc, #376]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	4956      	ldr	r1, [pc, #344]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800471e:	4b51      	ldr	r3, [pc, #324]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004740:	4b48      	ldr	r3, [pc, #288]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	4945      	ldr	r1, [pc, #276]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004762:	4b40      	ldr	r3, [pc, #256]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	493c      	ldr	r1, [pc, #240]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004784:	4b37      	ldr	r3, [pc, #220]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004792:	4934      	ldr	r1, [pc, #208]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d011      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047a6:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b4:	492b      	ldr	r1, [pc, #172]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c4:	d101      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047e6:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f4:	491b      	ldr	r1, [pc, #108]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004808:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004818:	4912      	ldr	r1, [pc, #72]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800483c:	4909      	ldr	r1, [pc, #36]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	e002      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004862:	bf00      	nop
 8004864:	40023800 	.word	0x40023800
 8004868:	4986      	ldr	r1, [pc, #536]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800487c:	4b81      	ldr	r3, [pc, #516]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004882:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488c:	497d      	ldr	r1, [pc, #500]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d006      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80d6 	beq.w	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048a8:	4b76      	ldr	r3, [pc, #472]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a75      	ldr	r2, [pc, #468]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fd fcee 	bl	8002294 <HAL_GetTick>
 80048b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048bc:	f7fd fcea 	bl	8002294 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e195      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ce:	4b6d      	ldr	r3, [pc, #436]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d021      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d11d      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048ee:	4b65      	ldr	r3, [pc, #404]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048fc:	4b61      	ldr	r3, [pc, #388]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004902:	0e1b      	lsrs	r3, r3, #24
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	019a      	lsls	r2, r3, #6
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	4958      	ldr	r1, [pc, #352]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d004      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02e      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004954:	d129      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004956:	4b4b      	ldr	r3, [pc, #300]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004964:	4b47      	ldr	r3, [pc, #284]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496a:	0f1b      	lsrs	r3, r3, #28
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	019a      	lsls	r2, r3, #6
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	071b      	lsls	r3, r3, #28
 800498a:	493e      	ldr	r1, [pc, #248]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004992:	4b3c      	ldr	r3, [pc, #240]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004998:	f023 021f 	bic.w	r2, r3, #31
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	3b01      	subs	r3, #1
 80049a2:	4938      	ldr	r1, [pc, #224]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01d      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049b6:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049c4:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ca:	0f1b      	lsrs	r3, r3, #28
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	019a      	lsls	r2, r3, #6
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	071b      	lsls	r3, r3, #28
 80049ea:	4926      	ldr	r1, [pc, #152]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d011      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	019a      	lsls	r2, r3, #6
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	071b      	lsls	r3, r3, #28
 8004a1a:	491a      	ldr	r1, [pc, #104]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a22:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2e:	f7fd fc31 	bl	8002294 <HAL_GetTick>
 8004a32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a34:	e008      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a36:	f7fd fc2d 	bl	8002294 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b64      	cmp	r3, #100	; 0x64
 8004a42:	d901      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0d8      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	f040 80ce 	bne.w	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a68:	f7fd fc14 	bl	8002294 <HAL_GetTick>
 8004a6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a6e:	e00b      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a70:	f7fd fc10 	bl	8002294 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d904      	bls.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0bb      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a88:	4b5e      	ldr	r3, [pc, #376]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a94:	d0ec      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d12a      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004abe:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004acc:	4b4d      	ldr	r3, [pc, #308]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	0f1b      	lsrs	r3, r3, #28
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	019a      	lsls	r2, r3, #6
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	061b      	lsls	r3, r3, #24
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	4944      	ldr	r1, [pc, #272]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004afa:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	493d      	ldr	r1, [pc, #244]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d022      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b28:	d11d      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b2a:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b38:	4b32      	ldr	r3, [pc, #200]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	0f1b      	lsrs	r3, r3, #28
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	431a      	orrs	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	4929      	ldr	r1, [pc, #164]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d028      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b72:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b80:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	0c1b      	lsrs	r3, r3, #16
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	019a      	lsls	r2, r3, #6
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	071b      	lsls	r3, r3, #28
 8004ba6:	4917      	ldr	r1, [pc, #92]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4911      	ldr	r1, [pc, #68]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a0e      	ldr	r2, [pc, #56]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd0:	f7fd fb60 	bl	8002294 <HAL_GetTick>
 8004bd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bd8:	f7fd fb5c 	bl	8002294 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e007      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf6:	d1ef      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800

08004c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e049      	b.n	8004cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd f948 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 fb80 	bl	800534c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <HAL_TIM_Base_Stop+0x38>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a1a      	ldr	r2, [r3, #32]
 8004cd4:	f240 4344 	movw	r3, #1092	; 0x444
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <HAL_TIM_Base_Stop+0x38>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d001      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e054      	b.n	8004dc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a26      	ldr	r2, [pc, #152]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d022      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x80>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d46:	d01d      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x80>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d018      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x80>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x80>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d009      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x80>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x80>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <HAL_TIM_Base_Start_IT+0xe8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d115      	bne.n	8004db0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_TIM_Base_Start_IT+0xec>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d015      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0xbe>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d011      	beq.n	8004dc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	e008      	b.n	8004dc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e000      	b.n	8004dc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40010400 	.word	0x40010400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40001800 	.word	0x40001800
 8004df0:	00010007 	.word	0x00010007

08004df4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0201 	bic.w	r2, r2, #1
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10f      	bne.n	8004e3c <HAL_TIM_Base_Stop_IT+0x48>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6a1a      	ldr	r2, [r3, #32]
 8004e22:	f240 4344 	movw	r3, #1092	; 0x444
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d107      	bne.n	8004e3c <HAL_TIM_Base_Stop_IT+0x48>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e08f      	b.n	8004f88 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fc ffb7 	bl	8001df0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6899      	ldr	r1, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b3e      	ldr	r3, [pc, #248]	; (8004f90 <HAL_TIM_Encoder_Init+0x13c>)
 8004e96:	400b      	ands	r3, r1
 8004e98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f000 fa51 	bl	800534c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_TIM_Encoder_Init+0x140>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	; (8004f98 <HAL_TIM_Encoder_Init+0x144>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <HAL_TIM_Encoder_Init+0x148>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	4313      	orrs	r3, r2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	011a      	lsls	r2, r3, #4
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	4313      	orrs	r3, r2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	4313      	orrs	r3, r2
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	fffebff8 	.word	0xfffebff8
 8004f94:	fffffcfc 	.word	0xfffffcfc
 8004f98:	fffff3f3 	.word	0xfffff3f3
 8004f9c:	ffff0f0f 	.word	0xffff0f0f

08004fa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d110      	bne.n	8004ff2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d102      	bne.n	8004fdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e069      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff0:	e031      	b.n	8005056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d110      	bne.n	800501a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ffe:	7b3b      	ldrb	r3, [r7, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d001      	beq.n	8005008 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e055      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005018:	e01d      	b.n	8005056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d108      	bne.n	8005032 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005026:	7b7b      	ldrb	r3, [r7, #13]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d102      	bne.n	8005032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800502c:	7b3b      	ldrb	r3, [r7, #12]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d001      	beq.n	8005036 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e03e      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_TIM_Encoder_Start+0xc4>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b04      	cmp	r3, #4
 8005060:	d008      	beq.n	8005074 <HAL_TIM_Encoder_Start+0xd4>
 8005062:	e00f      	b.n	8005084 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa0d 	bl	800548c <TIM_CCxChannelCmd>
      break;
 8005072:	e016      	b.n	80050a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	2104      	movs	r1, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fa05 	bl	800548c <TIM_CCxChannelCmd>
      break;
 8005082:	e00e      	b.n	80050a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f9fd 	bl	800548c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2201      	movs	r2, #1
 8005098:	2104      	movs	r1, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f9f6 	bl	800548c <TIM_CCxChannelCmd>
      break;
 80050a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0202 	mvn.w	r2, #2
 80050e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f905 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f8f7 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f908 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0204 	mvn.w	r2, #4
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8db 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8cd 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8de 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b08      	cmp	r3, #8
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0208 	mvn.w	r2, #8
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8b1 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8a3 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8b4 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0210 	mvn.w	r2, #16
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2208      	movs	r2, #8
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f887 	bl	800530e <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f879 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f88a 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0201 	mvn.w	r2, #1
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc f91a 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9ce 	bl	8005608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	d10e      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d107      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f9c1 	bl	800561c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f838 	bl	8005336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d10e      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0220 	mvn.w	r2, #32
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f981 	bl	80055f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a40      	ldr	r2, [pc, #256]	; (8005460 <TIM_Base_SetConfig+0x114>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d00f      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3d      	ldr	r2, [pc, #244]	; (8005464 <TIM_Base_SetConfig+0x118>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3c      	ldr	r2, [pc, #240]	; (8005468 <TIM_Base_SetConfig+0x11c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3b      	ldr	r2, [pc, #236]	; (800546c <TIM_Base_SetConfig+0x120>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3a      	ldr	r2, [pc, #232]	; (8005470 <TIM_Base_SetConfig+0x124>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d108      	bne.n	800539e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <TIM_Base_SetConfig+0x114>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d027      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <TIM_Base_SetConfig+0x118>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d023      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <TIM_Base_SetConfig+0x11c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01f      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2a      	ldr	r2, [pc, #168]	; (800546c <TIM_Base_SetConfig+0x120>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a29      	ldr	r2, [pc, #164]	; (8005470 <TIM_Base_SetConfig+0x124>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d017      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a28      	ldr	r2, [pc, #160]	; (8005474 <TIM_Base_SetConfig+0x128>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a27      	ldr	r2, [pc, #156]	; (8005478 <TIM_Base_SetConfig+0x12c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a26      	ldr	r2, [pc, #152]	; (800547c <TIM_Base_SetConfig+0x130>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a25      	ldr	r2, [pc, #148]	; (8005480 <TIM_Base_SetConfig+0x134>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a24      	ldr	r2, [pc, #144]	; (8005484 <TIM_Base_SetConfig+0x138>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <TIM_Base_SetConfig+0x13c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d108      	bne.n	8005410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <TIM_Base_SetConfig+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0xf8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <TIM_Base_SetConfig+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	615a      	str	r2, [r3, #20]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40010400 	.word	0x40010400
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800
 8005480:	40001800 	.word	0x40001800
 8005484:	40001c00 	.word	0x40001c00
 8005488:	40002000 	.word	0x40002000

0800548c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	2201      	movs	r2, #1
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	401a      	ands	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e06d      	b.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a30      	ldr	r2, [pc, #192]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2f      	ldr	r2, [pc, #188]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800552a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a20      	ldr	r2, [pc, #128]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d01d      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a16      	ldr	r2, [pc, #88]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d10c      	bne.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40001800 	.word	0x40001800

080055f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e040      	b.n	80056c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fc fcc4 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2224      	movs	r2, #36	; 0x24
 800565c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fc18 	bl	8005ea4 <UART_SetConfig>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e022      	b.n	80056c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fe6e 	bl	8006368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800569a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fef5 	bl	80064ac <UART_CheckIdleState>
 80056c2:	4603      	mov	r3, r0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	f040 8081 	bne.w	80057e8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_UART_Transmit+0x26>
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e079      	b.n	80057ea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_UART_Transmit+0x38>
 8005700:	2302      	movs	r3, #2
 8005702:	e072      	b.n	80057ea <HAL_UART_Transmit+0x11e>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2221      	movs	r2, #33	; 0x21
 8005718:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800571a:	f7fc fdbb 	bl	8002294 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	d108      	bne.n	800574c <HAL_UART_Transmit+0x80>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	e003      	b.n	8005754 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800575c:	e02c      	b.n	80057b8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2180      	movs	r1, #128	; 0x80
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fee8 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e038      	b.n	80057ea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800578c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	3302      	adds	r3, #2
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	e007      	b.n	80057a6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	781a      	ldrb	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1cc      	bne.n	800575e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	2140      	movs	r1, #64	; 0x40
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 feb5 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e005      	b.n	80057ea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e000      	b.n	80057ea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80057e8:	2302      	movs	r3, #2
  }
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3720      	adds	r7, #32
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b08a      	sub	sp, #40	; 0x28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005804:	2b20      	cmp	r3, #32
 8005806:	d13d      	bne.n	8005884 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <HAL_UART_Receive_IT+0x22>
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e036      	b.n	8005886 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_UART_Receive_IT+0x34>
 8005822:	2302      	movs	r3, #2
 8005824:	e02f      	b.n	8005886 <HAL_UART_Receive_IT+0x94>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d018      	beq.n	8005874 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	613b      	str	r3, [r7, #16]
   return(result);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	623b      	str	r3, [r7, #32]
 8005862:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	69f9      	ldr	r1, [r7, #28]
 8005866:	6a3a      	ldr	r2, [r7, #32]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	61bb      	str	r3, [r7, #24]
   return(result);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e6      	bne.n	8005842 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	461a      	mov	r2, r3
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 ff24 	bl	80066c8 <UART_Start_Receive_IT>
 8005880:	4603      	mov	r3, r0
 8005882:	e000      	b.n	8005886 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3728      	adds	r7, #40	; 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b0ba      	sub	sp, #232	; 0xe8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80058be:	4013      	ands	r3, r2
 80058c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d115      	bne.n	80058f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d0:	f003 0320 	and.w	r3, r3, #32
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d009      	beq.n	80058f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 82a4 	beq.w	8005e36 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
      }
      return;
 80058f6:	e29e      	b.n	8005e36 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8117 	beq.w	8005b30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800590e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005912:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_UART_IRQHandler+0x298>)
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 810a 	beq.w	8005b30 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d011      	beq.n	800594c <HAL_UART_IRQHandler+0xbc>
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2201      	movs	r2, #1
 800593a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005942:	f043 0201 	orr.w	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800594c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <HAL_UART_IRQHandler+0xec>
 8005958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2202      	movs	r2, #2
 800596a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005972:	f043 0204 	orr.w	r2, r3, #4
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d011      	beq.n	80059ac <HAL_UART_IRQHandler+0x11c>
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00b      	beq.n	80059ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2204      	movs	r2, #4
 800599a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a2:	f043 0202 	orr.w	r2, r3, #2
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d017      	beq.n	80059e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d105      	bne.n	80059d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2208      	movs	r2, #8
 80059d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059de:	f043 0208 	orr.w	r2, r3, #8
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d012      	beq.n	8005a1a <HAL_UART_IRQHandler+0x18a>
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00c      	beq.n	8005a1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a10:	f043 0220 	orr.w	r2, r3, #32
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 820a 	beq.w	8005e3a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d04f      	beq.n	8005b12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fef2 	bl	800685c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	d141      	bne.n	8005b0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3308      	adds	r3, #8
 8005aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1d9      	bne.n	8005a86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d013      	beq.n	8005b02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <HAL_UART_IRQHandler+0x29c>)
 8005ae0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fd fbf3 	bl	80032d2 <HAL_DMA_Abort_IT>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d017      	beq.n	8005b22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005afc:	4610      	mov	r0, r2
 8005afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	e00f      	b.n	8005b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9ae 	bl	8005e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	e00b      	b.n	8005b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f9aa 	bl	8005e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e007      	b.n	8005b22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9a6 	bl	8005e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b20:	e18b      	b.n	8005e3a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b22:	bf00      	nop
    return;
 8005b24:	e189      	b.n	8005e3a <HAL_UART_IRQHandler+0x5aa>
 8005b26:	bf00      	nop
 8005b28:	04000120 	.word	0x04000120
 8005b2c:	08006923 	.word	0x08006923

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f040 8144 	bne.w	8005dc2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 813d 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8136 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	f040 80b2 	bne.w	8005cd2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 815d 	beq.w	8005e3e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	f080 8155 	bcs.w	8005e3e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba8:	f000 8085 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1da      	bne.n	8005bac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e1      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e3      	bne.n	8005c32 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c86:	f023 0310 	bic.w	r3, r3, #16
 8005c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c9a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e4      	bne.n	8005c76 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fd fa9e 	bl	80031f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f8d4 	bl	8005e78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cd0:	e0b5      	b.n	8005e3e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80a7 	beq.w	8005e42 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80a2 	beq.w	8005e42 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
 8005d22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e4      	bne.n	8005cfe <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	623b      	str	r3, [r7, #32]
   return(result);
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3308      	adds	r3, #8
 8005d54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d58:	633a      	str	r2, [r7, #48]	; 0x30
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e3      	bne.n	8005d34 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e4      	bne.n	8005d7e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f85c 	bl	8005e78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc0:	e03f      	b.n	8005e42 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <HAL_UART_IRQHandler+0x55c>
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d008      	beq.n	8005dec <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f853 	bl	8005e90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dea:	e02d      	b.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00e      	beq.n	8005e16 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01c      	beq.n	8005e46 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
    }
    return;
 8005e14:	e017      	b.n	8005e46 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d012      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
 8005e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fd8d 	bl	800694e <UART_EndTransmit_IT>
    return;
 8005e34:	e008      	b.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005e36:	bf00      	nop
 8005e38:	e006      	b.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005e3a:	bf00      	nop
 8005e3c:	e004      	b.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005e3e:	bf00      	nop
 8005e40:	e002      	b.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005e46:	bf00      	nop
  }

}
 8005e48:	37e8      	adds	r7, #232	; 0xe8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop

08005e50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4ba7      	ldr	r3, [pc, #668]	; (800616c <UART_SetConfig+0x2c8>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a95      	ldr	r2, [pc, #596]	; (8006170 <UART_SetConfig+0x2cc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d120      	bne.n	8005f62 <UART_SetConfig+0xbe>
 8005f20:	4b94      	ldr	r3, [pc, #592]	; (8006174 <UART_SetConfig+0x2d0>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d816      	bhi.n	8005f5c <UART_SetConfig+0xb8>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0x90>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f51 	.word	0x08005f51
 8005f3c:	08005f4b 	.word	0x08005f4b
 8005f40:	08005f57 	.word	0x08005f57
 8005f44:	2301      	movs	r3, #1
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e14f      	b.n	80061ea <UART_SetConfig+0x346>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e14c      	b.n	80061ea <UART_SetConfig+0x346>
 8005f50:	2304      	movs	r3, #4
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e149      	b.n	80061ea <UART_SetConfig+0x346>
 8005f56:	2308      	movs	r3, #8
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e146      	b.n	80061ea <UART_SetConfig+0x346>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e143      	b.n	80061ea <UART_SetConfig+0x346>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a84      	ldr	r2, [pc, #528]	; (8006178 <UART_SetConfig+0x2d4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d132      	bne.n	8005fd2 <UART_SetConfig+0x12e>
 8005f6c:	4b81      	ldr	r3, [pc, #516]	; (8006174 <UART_SetConfig+0x2d0>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d828      	bhi.n	8005fcc <UART_SetConfig+0x128>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <UART_SetConfig+0xdc>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fb5 	.word	0x08005fb5
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fc1 	.word	0x08005fc1
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fbb 	.word	0x08005fbb
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005fc7 	.word	0x08005fc7
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e117      	b.n	80061ea <UART_SetConfig+0x346>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e114      	b.n	80061ea <UART_SetConfig+0x346>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e111      	b.n	80061ea <UART_SetConfig+0x346>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e10e      	b.n	80061ea <UART_SetConfig+0x346>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e10b      	b.n	80061ea <UART_SetConfig+0x346>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a69      	ldr	r2, [pc, #420]	; (800617c <UART_SetConfig+0x2d8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d120      	bne.n	800601e <UART_SetConfig+0x17a>
 8005fdc:	4b65      	ldr	r3, [pc, #404]	; (8006174 <UART_SetConfig+0x2d0>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fe6:	2b30      	cmp	r3, #48	; 0x30
 8005fe8:	d013      	beq.n	8006012 <UART_SetConfig+0x16e>
 8005fea:	2b30      	cmp	r3, #48	; 0x30
 8005fec:	d814      	bhi.n	8006018 <UART_SetConfig+0x174>
 8005fee:	2b20      	cmp	r3, #32
 8005ff0:	d009      	beq.n	8006006 <UART_SetConfig+0x162>
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d810      	bhi.n	8006018 <UART_SetConfig+0x174>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <UART_SetConfig+0x15c>
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d006      	beq.n	800600c <UART_SetConfig+0x168>
 8005ffe:	e00b      	b.n	8006018 <UART_SetConfig+0x174>
 8006000:	2300      	movs	r3, #0
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e0f1      	b.n	80061ea <UART_SetConfig+0x346>
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e0ee      	b.n	80061ea <UART_SetConfig+0x346>
 800600c:	2304      	movs	r3, #4
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0eb      	b.n	80061ea <UART_SetConfig+0x346>
 8006012:	2308      	movs	r3, #8
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e0e8      	b.n	80061ea <UART_SetConfig+0x346>
 8006018:	2310      	movs	r3, #16
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0e5      	b.n	80061ea <UART_SetConfig+0x346>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a57      	ldr	r2, [pc, #348]	; (8006180 <UART_SetConfig+0x2dc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d120      	bne.n	800606a <UART_SetConfig+0x1c6>
 8006028:	4b52      	ldr	r3, [pc, #328]	; (8006174 <UART_SetConfig+0x2d0>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006032:	2bc0      	cmp	r3, #192	; 0xc0
 8006034:	d013      	beq.n	800605e <UART_SetConfig+0x1ba>
 8006036:	2bc0      	cmp	r3, #192	; 0xc0
 8006038:	d814      	bhi.n	8006064 <UART_SetConfig+0x1c0>
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d009      	beq.n	8006052 <UART_SetConfig+0x1ae>
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d810      	bhi.n	8006064 <UART_SetConfig+0x1c0>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0x1a8>
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d006      	beq.n	8006058 <UART_SetConfig+0x1b4>
 800604a:	e00b      	b.n	8006064 <UART_SetConfig+0x1c0>
 800604c:	2300      	movs	r3, #0
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e0cb      	b.n	80061ea <UART_SetConfig+0x346>
 8006052:	2302      	movs	r3, #2
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e0c8      	b.n	80061ea <UART_SetConfig+0x346>
 8006058:	2304      	movs	r3, #4
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0c5      	b.n	80061ea <UART_SetConfig+0x346>
 800605e:	2308      	movs	r3, #8
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e0c2      	b.n	80061ea <UART_SetConfig+0x346>
 8006064:	2310      	movs	r3, #16
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0bf      	b.n	80061ea <UART_SetConfig+0x346>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a45      	ldr	r2, [pc, #276]	; (8006184 <UART_SetConfig+0x2e0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d125      	bne.n	80060c0 <UART_SetConfig+0x21c>
 8006074:	4b3f      	ldr	r3, [pc, #252]	; (8006174 <UART_SetConfig+0x2d0>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006082:	d017      	beq.n	80060b4 <UART_SetConfig+0x210>
 8006084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006088:	d817      	bhi.n	80060ba <UART_SetConfig+0x216>
 800608a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800608e:	d00b      	beq.n	80060a8 <UART_SetConfig+0x204>
 8006090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006094:	d811      	bhi.n	80060ba <UART_SetConfig+0x216>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <UART_SetConfig+0x1fe>
 800609a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609e:	d006      	beq.n	80060ae <UART_SetConfig+0x20a>
 80060a0:	e00b      	b.n	80060ba <UART_SetConfig+0x216>
 80060a2:	2300      	movs	r3, #0
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e0a0      	b.n	80061ea <UART_SetConfig+0x346>
 80060a8:	2302      	movs	r3, #2
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e09d      	b.n	80061ea <UART_SetConfig+0x346>
 80060ae:	2304      	movs	r3, #4
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e09a      	b.n	80061ea <UART_SetConfig+0x346>
 80060b4:	2308      	movs	r3, #8
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e097      	b.n	80061ea <UART_SetConfig+0x346>
 80060ba:	2310      	movs	r3, #16
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e094      	b.n	80061ea <UART_SetConfig+0x346>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a30      	ldr	r2, [pc, #192]	; (8006188 <UART_SetConfig+0x2e4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d125      	bne.n	8006116 <UART_SetConfig+0x272>
 80060ca:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <UART_SetConfig+0x2d0>)
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060d8:	d017      	beq.n	800610a <UART_SetConfig+0x266>
 80060da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060de:	d817      	bhi.n	8006110 <UART_SetConfig+0x26c>
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	d00b      	beq.n	80060fe <UART_SetConfig+0x25a>
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d811      	bhi.n	8006110 <UART_SetConfig+0x26c>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <UART_SetConfig+0x254>
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d006      	beq.n	8006104 <UART_SetConfig+0x260>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x26c>
 80060f8:	2301      	movs	r3, #1
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e075      	b.n	80061ea <UART_SetConfig+0x346>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e072      	b.n	80061ea <UART_SetConfig+0x346>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e06f      	b.n	80061ea <UART_SetConfig+0x346>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e06c      	b.n	80061ea <UART_SetConfig+0x346>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e069      	b.n	80061ea <UART_SetConfig+0x346>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <UART_SetConfig+0x2e8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d137      	bne.n	8006190 <UART_SetConfig+0x2ec>
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <UART_SetConfig+0x2d0>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800612a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800612e:	d017      	beq.n	8006160 <UART_SetConfig+0x2bc>
 8006130:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006134:	d817      	bhi.n	8006166 <UART_SetConfig+0x2c2>
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613a:	d00b      	beq.n	8006154 <UART_SetConfig+0x2b0>
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006140:	d811      	bhi.n	8006166 <UART_SetConfig+0x2c2>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <UART_SetConfig+0x2aa>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d006      	beq.n	800615a <UART_SetConfig+0x2b6>
 800614c:	e00b      	b.n	8006166 <UART_SetConfig+0x2c2>
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e04a      	b.n	80061ea <UART_SetConfig+0x346>
 8006154:	2302      	movs	r3, #2
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e047      	b.n	80061ea <UART_SetConfig+0x346>
 800615a:	2304      	movs	r3, #4
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e044      	b.n	80061ea <UART_SetConfig+0x346>
 8006160:	2308      	movs	r3, #8
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e041      	b.n	80061ea <UART_SetConfig+0x346>
 8006166:	2310      	movs	r3, #16
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e03e      	b.n	80061ea <UART_SetConfig+0x346>
 800616c:	efff69f3 	.word	0xefff69f3
 8006170:	40011000 	.word	0x40011000
 8006174:	40023800 	.word	0x40023800
 8006178:	40004400 	.word	0x40004400
 800617c:	40004800 	.word	0x40004800
 8006180:	40004c00 	.word	0x40004c00
 8006184:	40005000 	.word	0x40005000
 8006188:	40011400 	.word	0x40011400
 800618c:	40007800 	.word	0x40007800
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a71      	ldr	r2, [pc, #452]	; (800635c <UART_SetConfig+0x4b8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d125      	bne.n	80061e6 <UART_SetConfig+0x342>
 800619a:	4b71      	ldr	r3, [pc, #452]	; (8006360 <UART_SetConfig+0x4bc>)
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061a8:	d017      	beq.n	80061da <UART_SetConfig+0x336>
 80061aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061ae:	d817      	bhi.n	80061e0 <UART_SetConfig+0x33c>
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b4:	d00b      	beq.n	80061ce <UART_SetConfig+0x32a>
 80061b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ba:	d811      	bhi.n	80061e0 <UART_SetConfig+0x33c>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <UART_SetConfig+0x324>
 80061c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c4:	d006      	beq.n	80061d4 <UART_SetConfig+0x330>
 80061c6:	e00b      	b.n	80061e0 <UART_SetConfig+0x33c>
 80061c8:	2300      	movs	r3, #0
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e00d      	b.n	80061ea <UART_SetConfig+0x346>
 80061ce:	2302      	movs	r3, #2
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e00a      	b.n	80061ea <UART_SetConfig+0x346>
 80061d4:	2304      	movs	r3, #4
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e007      	b.n	80061ea <UART_SetConfig+0x346>
 80061da:	2308      	movs	r3, #8
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e004      	b.n	80061ea <UART_SetConfig+0x346>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e001      	b.n	80061ea <UART_SetConfig+0x346>
 80061e6:	2310      	movs	r3, #16
 80061e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f2:	d15a      	bne.n	80062aa <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80061f4:	7ffb      	ldrb	r3, [r7, #31]
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d827      	bhi.n	800624a <UART_SetConfig+0x3a6>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <UART_SetConfig+0x35c>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006225 	.word	0x08006225
 8006204:	0800622d 	.word	0x0800622d
 8006208:	08006235 	.word	0x08006235
 800620c:	0800624b 	.word	0x0800624b
 8006210:	0800623b 	.word	0x0800623b
 8006214:	0800624b 	.word	0x0800624b
 8006218:	0800624b 	.word	0x0800624b
 800621c:	0800624b 	.word	0x0800624b
 8006220:	08006243 	.word	0x08006243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006224:	f7fe f8a0 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8006228:	61b8      	str	r0, [r7, #24]
        break;
 800622a:	e013      	b.n	8006254 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800622c:	f7fe f8b0 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8006230:	61b8      	str	r0, [r7, #24]
        break;
 8006232:	e00f      	b.n	8006254 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006234:	4b4b      	ldr	r3, [pc, #300]	; (8006364 <UART_SetConfig+0x4c0>)
 8006236:	61bb      	str	r3, [r7, #24]
        break;
 8006238:	e00c      	b.n	8006254 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623a:	f7fd ffa7 	bl	800418c <HAL_RCC_GetSysClockFreq>
 800623e:	61b8      	str	r0, [r7, #24]
        break;
 8006240:	e008      	b.n	8006254 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006246:	61bb      	str	r3, [r7, #24]
        break;
 8006248:	e004      	b.n	8006254 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	77bb      	strb	r3, [r7, #30]
        break;
 8006252:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d074      	beq.n	8006344 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	005a      	lsls	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	441a      	add	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	fbb2 f3f3 	udiv	r3, r2, r3
 800626e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b0f      	cmp	r3, #15
 8006274:	d916      	bls.n	80062a4 <UART_SetConfig+0x400>
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627c:	d212      	bcs.n	80062a4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f023 030f 	bic.w	r3, r3, #15
 8006286:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	b29b      	uxth	r3, r3
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	b29a      	uxth	r2, r3
 8006294:	89fb      	ldrh	r3, [r7, #14]
 8006296:	4313      	orrs	r3, r2
 8006298:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	89fa      	ldrh	r2, [r7, #14]
 80062a0:	60da      	str	r2, [r3, #12]
 80062a2:	e04f      	b.n	8006344 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	77bb      	strb	r3, [r7, #30]
 80062a8:	e04c      	b.n	8006344 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062aa:	7ffb      	ldrb	r3, [r7, #31]
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d828      	bhi.n	8006302 <UART_SetConfig+0x45e>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x414>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062e5 	.word	0x080062e5
 80062c0:	080062ed 	.word	0x080062ed
 80062c4:	08006303 	.word	0x08006303
 80062c8:	080062f3 	.word	0x080062f3
 80062cc:	08006303 	.word	0x08006303
 80062d0:	08006303 	.word	0x08006303
 80062d4:	08006303 	.word	0x08006303
 80062d8:	080062fb 	.word	0x080062fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062dc:	f7fe f844 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 80062e0:	61b8      	str	r0, [r7, #24]
        break;
 80062e2:	e013      	b.n	800630c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e4:	f7fe f854 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 80062e8:	61b8      	str	r0, [r7, #24]
        break;
 80062ea:	e00f      	b.n	800630c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ec:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <UART_SetConfig+0x4c0>)
 80062ee:	61bb      	str	r3, [r7, #24]
        break;
 80062f0:	e00c      	b.n	800630c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f2:	f7fd ff4b 	bl	800418c <HAL_RCC_GetSysClockFreq>
 80062f6:	61b8      	str	r0, [r7, #24]
        break;
 80062f8:	e008      	b.n	800630c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fe:	61bb      	str	r3, [r7, #24]
        break;
 8006300:	e004      	b.n	800630c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	77bb      	strb	r3, [r7, #30]
        break;
 800630a:	bf00      	nop
    }

    if (pclk != 0U)
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d018      	beq.n	8006344 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	085a      	lsrs	r2, r3, #1
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	441a      	add	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b0f      	cmp	r3, #15
 800632a:	d909      	bls.n	8006340 <UART_SetConfig+0x49c>
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006332:	d205      	bcs.n	8006340 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	b29a      	uxth	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60da      	str	r2, [r3, #12]
 800633e:	e001      	b.n	8006344 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006350:	7fbb      	ldrb	r3, [r7, #30]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40007c00 	.word	0x40007c00
 8006360:	40023800 	.word	0x40023800
 8006364:	00f42400 	.word	0x00f42400

08006368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01a      	beq.n	800647e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006466:	d10a      	bne.n	800647e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064bc:	f7fb feea 	bl	8002294 <HAL_GetTick>
 80064c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d10e      	bne.n	80064ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f82d 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e023      	b.n	8006536 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d10e      	bne.n	800651a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f817 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e00d      	b.n	8006536 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b09c      	sub	sp, #112	; 0x70
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654e:	e0a5      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	f000 80a1 	beq.w	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fb fe9b 	bl	8002294 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <UART_WaitOnFlagUntilTimeout+0x32>
 800656a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656c:	2b00      	cmp	r3, #0
 800656e:	d13e      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006584:	667b      	str	r3, [r7, #100]	; 0x64
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006590:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e6      	bne.n	8006570 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	663b      	str	r3, [r7, #96]	; 0x60
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e067      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d04f      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660a:	d147      	bne.n	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e6      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	613b      	str	r3, [r7, #16]
   return(result);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006668:	623a      	str	r2, [r7, #32]
 800666a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	69f9      	ldr	r1, [r7, #28]
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	61bb      	str	r3, [r7, #24]
   return(result);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e010      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69da      	ldr	r2, [r3, #28]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	f43f af4a 	beq.w	8006550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3770      	adds	r7, #112	; 0x70
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b097      	sub	sp, #92	; 0x5c
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	88fa      	ldrh	r2, [r7, #6]
 80066e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fa:	d10e      	bne.n	800671a <UART_Start_Receive_IT+0x52>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d105      	bne.n	8006710 <UART_Start_Receive_IT+0x48>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f240 12ff 	movw	r2, #511	; 0x1ff
 800670a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800670e:	e02d      	b.n	800676c <UART_Start_Receive_IT+0xa4>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	22ff      	movs	r2, #255	; 0xff
 8006714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006718:	e028      	b.n	800676c <UART_Start_Receive_IT+0xa4>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10d      	bne.n	800673e <UART_Start_Receive_IT+0x76>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <UART_Start_Receive_IT+0x6c>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	22ff      	movs	r2, #255	; 0xff
 800672e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006732:	e01b      	b.n	800676c <UART_Start_Receive_IT+0xa4>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	227f      	movs	r2, #127	; 0x7f
 8006738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800673c:	e016      	b.n	800676c <UART_Start_Receive_IT+0xa4>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006746:	d10d      	bne.n	8006764 <UART_Start_Receive_IT+0x9c>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <UART_Start_Receive_IT+0x92>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	227f      	movs	r2, #127	; 0x7f
 8006754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006758:	e008      	b.n	800676c <UART_Start_Receive_IT+0xa4>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	223f      	movs	r2, #63	; 0x3f
 800675e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006762:	e003      	b.n	800676c <UART_Start_Receive_IT+0xa4>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2222      	movs	r2, #34	; 0x22
 8006778:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	657b      	str	r3, [r7, #84]	; 0x54
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800679a:	64ba      	str	r2, [r7, #72]	; 0x48
 800679c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e5      	bne.n	800677a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b6:	d107      	bne.n	80067c8 <UART_Start_Receive_IT+0x100>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d103      	bne.n	80067c8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a24      	ldr	r2, [pc, #144]	; (8006854 <UART_Start_Receive_IT+0x18c>)
 80067c4:	665a      	str	r2, [r3, #100]	; 0x64
 80067c6:	e002      	b.n	80067ce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a23      	ldr	r2, [pc, #140]	; (8006858 <UART_Start_Receive_IT+0x190>)
 80067cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d019      	beq.n	8006812 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
 80067fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_Start_Receive_IT+0x116>
 8006810:	e018      	b.n	8006844 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	613b      	str	r3, [r7, #16]
   return(result);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f043 0320 	orr.w	r3, r3, #32
 8006826:	653b      	str	r3, [r7, #80]	; 0x50
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	61bb      	str	r3, [r7, #24]
   return(result);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e6      	bne.n	8006812 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	375c      	adds	r7, #92	; 0x5c
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	08006aff 	.word	0x08006aff
 8006858:	080069a3 	.word	0x080069a3

0800685c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b095      	sub	sp, #84	; 0x54
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006882:	643b      	str	r3, [r7, #64]	; 0x40
 8006884:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d118      	bne.n	8006904 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f023 0310 	bic.w	r3, r3, #16
 80068e6:	647b      	str	r3, [r7, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6979      	ldr	r1, [r7, #20]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	613b      	str	r3, [r7, #16]
   return(result);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e6      	bne.n	80068d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006916:	bf00      	nop
 8006918:	3754      	adds	r7, #84	; 0x54
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff fa8f 	bl	8005e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b088      	sub	sp, #32
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	60bb      	str	r3, [r7, #8]
   return(result);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6979      	ldr	r1, [r7, #20]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	613b      	str	r3, [r7, #16]
   return(result);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e6      	bne.n	8006956 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fa5b 	bl	8005e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800699a:	bf00      	nop
 800699c:	3720      	adds	r7, #32
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b096      	sub	sp, #88	; 0x58
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b8:	2b22      	cmp	r3, #34	; 0x22
 80069ba:	f040 8094 	bne.w	8006ae6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80069cc:	b2d9      	uxtb	r1, r3
 80069ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	400a      	ands	r2, r1
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d177      	bne.n	8006af6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a24:	647b      	str	r3, [r7, #68]	; 0x44
 8006a26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e6      	bne.n	8006a06 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	623b      	str	r3, [r7, #32]
   return(result);
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3308      	adds	r3, #8
 8006a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a58:	633a      	str	r2, [r7, #48]	; 0x30
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e5      	bne.n	8006a38 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d12e      	bne.n	8006ade <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d103      	bne.n	8006ace <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2210      	movs	r2, #16
 8006acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff f9ce 	bl	8005e78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006adc:	e00b      	b.n	8006af6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fa fe46 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 8006ae4:	e007      	b.n	8006af6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0208 	orr.w	r2, r2, #8
 8006af4:	619a      	str	r2, [r3, #24]
}
 8006af6:	bf00      	nop
 8006af8:	3758      	adds	r7, #88	; 0x58
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b096      	sub	sp, #88	; 0x58
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b14:	2b22      	cmp	r3, #34	; 0x22
 8006b16:	f040 8094 	bne.w	8006c42 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b2a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b32:	4013      	ands	r3, r2
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	1c9a      	adds	r2, r3, #2
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d177      	bne.n	8006c52 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	643b      	str	r3, [r7, #64]	; 0x40
 8006b82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e6      	bne.n	8006b62 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e5      	bne.n	8006b94 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d12e      	bne.n	8006c3a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f023 0310 	bic.w	r3, r3, #16
 8006bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6979      	ldr	r1, [r7, #20]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b10      	cmp	r3, #16
 8006c20:	d103      	bne.n	8006c2a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2210      	movs	r2, #16
 8006c28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff f920 	bl	8005e78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c38:	e00b      	b.n	8006c52 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fa fd98 	bl	8001770 <HAL_UART_RxCpltCallback>
}
 8006c40:	e007      	b.n	8006c52 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0208 	orr.w	r2, r2, #8
 8006c50:	619a      	str	r2, [r3, #24]
}
 8006c52:	bf00      	nop
 8006c54:	3758      	adds	r7, #88	; 0x58
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	f107 001c 	add.w	r0, r7, #28
 8006c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d120      	bne.n	8006cb6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <USB_CoreInit+0xac>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d105      	bne.n	8006caa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa92 	bl	80071d4 <USB_CoreReset>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	e010      	b.n	8006cd8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa86 	bl	80071d4 <USB_CoreReset>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d10b      	bne.n	8006cf6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f043 0206 	orr.w	r2, r3, #6
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d02:	b004      	add	sp, #16
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	ffbdffbf 	.word	0xffbdffbf

08006d0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f023 0201 	bic.w	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d115      	bne.n	8006d7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d5c:	2001      	movs	r0, #1
 8006d5e:	f7fb faa5 	bl	80022ac <HAL_Delay>
      ms++;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3301      	adds	r3, #1
 8006d66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa25 	bl	80071b8 <USB_GetMode>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d01e      	beq.n	8006db2 <USB_SetCurrentMode+0x84>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b31      	cmp	r3, #49	; 0x31
 8006d78:	d9f0      	bls.n	8006d5c <USB_SetCurrentMode+0x2e>
 8006d7a:	e01a      	b.n	8006db2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d115      	bne.n	8006dae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d8e:	2001      	movs	r0, #1
 8006d90:	f7fb fa8c 	bl	80022ac <HAL_Delay>
      ms++;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa0c 	bl	80071b8 <USB_GetMode>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <USB_SetCurrentMode+0x84>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b31      	cmp	r3, #49	; 0x31
 8006daa:	d9f0      	bls.n	8006d8e <USB_SetCurrentMode+0x60>
 8006dac:	e001      	b.n	8006db2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e005      	b.n	8006dbe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b32      	cmp	r3, #50	; 0x32
 8006db6:	d101      	bne.n	8006dbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc8:	b084      	sub	sp, #16
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b086      	sub	sp, #24
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	e009      	b.n	8006dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3340      	adds	r3, #64	; 0x40
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	2200      	movs	r2, #0
 8006df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b0e      	cmp	r3, #14
 8006e00:	d9f2      	bls.n	8006de8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11c      	bne.n	8006e42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e16:	f043 0302 	orr.w	r3, r3, #2
 8006e1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	e005      	b.n	8006e4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e54:	461a      	mov	r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e60:	4619      	mov	r1, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e68:	461a      	mov	r2, r3
 8006e6a:	680b      	ldr	r3, [r1, #0]
 8006e6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d10c      	bne.n	8006e8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f961 	bl	8007144 <USB_SetDevSpeed>
 8006e82:	e008      	b.n	8006e96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e84:	2101      	movs	r1, #1
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f95c 	bl	8007144 <USB_SetDevSpeed>
 8006e8c:	e003      	b.n	8006e96 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e8e:	2103      	movs	r1, #3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f957 	bl	8007144 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e96:	2110      	movs	r1, #16
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8f3 	bl	8007084 <USB_FlushTxFifo>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f91d 	bl	80070e8 <USB_FlushRxFifo>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	e043      	b.n	8006f6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef8:	d118      	bne.n	8006f2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	e013      	b.n	8006f3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f22:	461a      	mov	r2, r3
 8006f24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	e008      	b.n	8006f3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	3301      	adds	r3, #1
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3b7      	bcc.n	8006ee2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	e043      	b.n	8007000 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f8e:	d118      	bne.n	8006fc2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10a      	bne.n	8006fac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	e013      	b.n	8006fd4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	e008      	b.n	8006fd4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ff8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	429a      	cmp	r2, r3
 8007006:	d3b7      	bcc.n	8006f78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800701a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007028:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f043 0210 	orr.w	r2, r3, #16
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	4b0e      	ldr	r3, [pc, #56]	; (800707c <USB_DevInit+0x2b4>)
 8007042:	4313      	orrs	r3, r2
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f043 0208 	orr.w	r2, r3, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800705a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d105      	bne.n	800706c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	4b06      	ldr	r3, [pc, #24]	; (8007080 <USB_DevInit+0x2b8>)
 8007066:	4313      	orrs	r3, r2
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800706c:	7dfb      	ldrb	r3, [r7, #23]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007078:	b004      	add	sp, #16
 800707a:	4770      	bx	lr
 800707c:	803c3800 	.word	0x803c3800
 8007080:	40000004 	.word	0x40000004

08007084 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <USB_FlushTxFifo+0x60>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d901      	bls.n	80070a2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e01a      	b.n	80070d8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	daf3      	bge.n	8007092 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	019b      	lsls	r3, r3, #6
 80070b2:	f043 0220 	orr.w	r2, r3, #32
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3301      	adds	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	4a08      	ldr	r2, [pc, #32]	; (80070e4 <USB_FlushTxFifo+0x60>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d901      	bls.n	80070ca <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e006      	b.n	80070d8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d0f1      	beq.n	80070ba <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	00030d40 	.word	0x00030d40

080070e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	4a11      	ldr	r2, [pc, #68]	; (8007140 <USB_FlushRxFifo+0x58>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d901      	bls.n	8007104 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e017      	b.n	8007134 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	daf3      	bge.n	80070f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2210      	movs	r2, #16
 8007114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	4a08      	ldr	r2, [pc, #32]	; (8007140 <USB_FlushRxFifo+0x58>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e006      	b.n	8007134 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b10      	cmp	r3, #16
 8007130:	d0f1      	beq.n	8007116 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	00030d40 	.word	0x00030d40

08007144 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007164:	4313      	orrs	r3, r2
 8007166:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007190:	f023 0303 	bic.w	r3, r3, #3
 8007194:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a4:	f043 0302 	orr.w	r3, r3, #2
 80071a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0301 	and.w	r3, r3, #1
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	4a13      	ldr	r2, [pc, #76]	; (8007234 <USB_CoreReset+0x60>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d901      	bls.n	80071f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e01a      	b.n	8007226 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	daf3      	bge.n	80071e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f043 0201 	orr.w	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <USB_CoreReset+0x60>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d901      	bls.n	8007218 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e006      	b.n	8007226 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d0f1      	beq.n	8007208 <USB_CoreReset+0x34>

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	00030d40 	.word	0x00030d40

08007238 <atoi>:
 8007238:	220a      	movs	r2, #10
 800723a:	2100      	movs	r1, #0
 800723c:	f000 b8c8 	b.w	80073d0 <strtol>

08007240 <__errno>:
 8007240:	4b01      	ldr	r3, [pc, #4]	; (8007248 <__errno+0x8>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000024 	.word	0x20000024

0800724c <__libc_init_array>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	4d0d      	ldr	r5, [pc, #52]	; (8007284 <__libc_init_array+0x38>)
 8007250:	4c0d      	ldr	r4, [pc, #52]	; (8007288 <__libc_init_array+0x3c>)
 8007252:	1b64      	subs	r4, r4, r5
 8007254:	10a4      	asrs	r4, r4, #2
 8007256:	2600      	movs	r6, #0
 8007258:	42a6      	cmp	r6, r4
 800725a:	d109      	bne.n	8007270 <__libc_init_array+0x24>
 800725c:	4d0b      	ldr	r5, [pc, #44]	; (800728c <__libc_init_array+0x40>)
 800725e:	4c0c      	ldr	r4, [pc, #48]	; (8007290 <__libc_init_array+0x44>)
 8007260:	f000 f8c0 	bl	80073e4 <_init>
 8007264:	1b64      	subs	r4, r4, r5
 8007266:	10a4      	asrs	r4, r4, #2
 8007268:	2600      	movs	r6, #0
 800726a:	42a6      	cmp	r6, r4
 800726c:	d105      	bne.n	800727a <__libc_init_array+0x2e>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	f855 3b04 	ldr.w	r3, [r5], #4
 8007274:	4798      	blx	r3
 8007276:	3601      	adds	r6, #1
 8007278:	e7ee      	b.n	8007258 <__libc_init_array+0xc>
 800727a:	f855 3b04 	ldr.w	r3, [r5], #4
 800727e:	4798      	blx	r3
 8007280:	3601      	adds	r6, #1
 8007282:	e7f2      	b.n	800726a <__libc_init_array+0x1e>
 8007284:	080075d8 	.word	0x080075d8
 8007288:	080075d8 	.word	0x080075d8
 800728c:	080075d8 	.word	0x080075d8
 8007290:	080075dc 	.word	0x080075dc

08007294 <memset>:
 8007294:	4402      	add	r2, r0
 8007296:	4603      	mov	r3, r0
 8007298:	4293      	cmp	r3, r2
 800729a:	d100      	bne.n	800729e <memset+0xa>
 800729c:	4770      	bx	lr
 800729e:	f803 1b01 	strb.w	r1, [r3], #1
 80072a2:	e7f9      	b.n	8007298 <memset+0x4>

080072a4 <strncmp>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	b16a      	cbz	r2, 80072c4 <strncmp+0x20>
 80072a8:	3901      	subs	r1, #1
 80072aa:	1884      	adds	r4, r0, r2
 80072ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80072b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d103      	bne.n	80072c0 <strncmp+0x1c>
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d001      	beq.n	80072c0 <strncmp+0x1c>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f5      	bne.n	80072ac <strncmp+0x8>
 80072c0:	1a98      	subs	r0, r3, r2
 80072c2:	bd10      	pop	{r4, pc}
 80072c4:	4610      	mov	r0, r2
 80072c6:	e7fc      	b.n	80072c2 <strncmp+0x1e>

080072c8 <_strtol_l.isra.0>:
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ce:	d001      	beq.n	80072d4 <_strtol_l.isra.0+0xc>
 80072d0:	2b24      	cmp	r3, #36	; 0x24
 80072d2:	d906      	bls.n	80072e2 <_strtol_l.isra.0+0x1a>
 80072d4:	f7ff ffb4 	bl	8007240 <__errno>
 80072d8:	2316      	movs	r3, #22
 80072da:	6003      	str	r3, [r0, #0]
 80072dc:	2000      	movs	r0, #0
 80072de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e2:	4f3a      	ldr	r7, [pc, #232]	; (80073cc <_strtol_l.isra.0+0x104>)
 80072e4:	468e      	mov	lr, r1
 80072e6:	4676      	mov	r6, lr
 80072e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80072ec:	5de5      	ldrb	r5, [r4, r7]
 80072ee:	f015 0508 	ands.w	r5, r5, #8
 80072f2:	d1f8      	bne.n	80072e6 <_strtol_l.isra.0+0x1e>
 80072f4:	2c2d      	cmp	r4, #45	; 0x2d
 80072f6:	d134      	bne.n	8007362 <_strtol_l.isra.0+0x9a>
 80072f8:	f89e 4000 	ldrb.w	r4, [lr]
 80072fc:	f04f 0801 	mov.w	r8, #1
 8007300:	f106 0e02 	add.w	lr, r6, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d05c      	beq.n	80073c2 <_strtol_l.isra.0+0xfa>
 8007308:	2b10      	cmp	r3, #16
 800730a:	d10c      	bne.n	8007326 <_strtol_l.isra.0+0x5e>
 800730c:	2c30      	cmp	r4, #48	; 0x30
 800730e:	d10a      	bne.n	8007326 <_strtol_l.isra.0+0x5e>
 8007310:	f89e 4000 	ldrb.w	r4, [lr]
 8007314:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007318:	2c58      	cmp	r4, #88	; 0x58
 800731a:	d14d      	bne.n	80073b8 <_strtol_l.isra.0+0xf0>
 800731c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007320:	2310      	movs	r3, #16
 8007322:	f10e 0e02 	add.w	lr, lr, #2
 8007326:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800732a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800732e:	2600      	movs	r6, #0
 8007330:	fbbc f9f3 	udiv	r9, ip, r3
 8007334:	4635      	mov	r5, r6
 8007336:	fb03 ca19 	mls	sl, r3, r9, ip
 800733a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800733e:	2f09      	cmp	r7, #9
 8007340:	d818      	bhi.n	8007374 <_strtol_l.isra.0+0xac>
 8007342:	463c      	mov	r4, r7
 8007344:	42a3      	cmp	r3, r4
 8007346:	dd24      	ble.n	8007392 <_strtol_l.isra.0+0xca>
 8007348:	2e00      	cmp	r6, #0
 800734a:	db1f      	blt.n	800738c <_strtol_l.isra.0+0xc4>
 800734c:	45a9      	cmp	r9, r5
 800734e:	d31d      	bcc.n	800738c <_strtol_l.isra.0+0xc4>
 8007350:	d101      	bne.n	8007356 <_strtol_l.isra.0+0x8e>
 8007352:	45a2      	cmp	sl, r4
 8007354:	db1a      	blt.n	800738c <_strtol_l.isra.0+0xc4>
 8007356:	fb05 4503 	mla	r5, r5, r3, r4
 800735a:	2601      	movs	r6, #1
 800735c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007360:	e7eb      	b.n	800733a <_strtol_l.isra.0+0x72>
 8007362:	2c2b      	cmp	r4, #43	; 0x2b
 8007364:	bf08      	it	eq
 8007366:	f89e 4000 	ldrbeq.w	r4, [lr]
 800736a:	46a8      	mov	r8, r5
 800736c:	bf08      	it	eq
 800736e:	f106 0e02 	addeq.w	lr, r6, #2
 8007372:	e7c7      	b.n	8007304 <_strtol_l.isra.0+0x3c>
 8007374:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007378:	2f19      	cmp	r7, #25
 800737a:	d801      	bhi.n	8007380 <_strtol_l.isra.0+0xb8>
 800737c:	3c37      	subs	r4, #55	; 0x37
 800737e:	e7e1      	b.n	8007344 <_strtol_l.isra.0+0x7c>
 8007380:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007384:	2f19      	cmp	r7, #25
 8007386:	d804      	bhi.n	8007392 <_strtol_l.isra.0+0xca>
 8007388:	3c57      	subs	r4, #87	; 0x57
 800738a:	e7db      	b.n	8007344 <_strtol_l.isra.0+0x7c>
 800738c:	f04f 36ff 	mov.w	r6, #4294967295
 8007390:	e7e4      	b.n	800735c <_strtol_l.isra.0+0x94>
 8007392:	2e00      	cmp	r6, #0
 8007394:	da05      	bge.n	80073a2 <_strtol_l.isra.0+0xda>
 8007396:	2322      	movs	r3, #34	; 0x22
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	4665      	mov	r5, ip
 800739c:	b942      	cbnz	r2, 80073b0 <_strtol_l.isra.0+0xe8>
 800739e:	4628      	mov	r0, r5
 80073a0:	e79d      	b.n	80072de <_strtol_l.isra.0+0x16>
 80073a2:	f1b8 0f00 	cmp.w	r8, #0
 80073a6:	d000      	beq.n	80073aa <_strtol_l.isra.0+0xe2>
 80073a8:	426d      	negs	r5, r5
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	d0f7      	beq.n	800739e <_strtol_l.isra.0+0xd6>
 80073ae:	b10e      	cbz	r6, 80073b4 <_strtol_l.isra.0+0xec>
 80073b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	e7f2      	b.n	800739e <_strtol_l.isra.0+0xd6>
 80073b8:	2430      	movs	r4, #48	; 0x30
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1b3      	bne.n	8007326 <_strtol_l.isra.0+0x5e>
 80073be:	2308      	movs	r3, #8
 80073c0:	e7b1      	b.n	8007326 <_strtol_l.isra.0+0x5e>
 80073c2:	2c30      	cmp	r4, #48	; 0x30
 80073c4:	d0a4      	beq.n	8007310 <_strtol_l.isra.0+0x48>
 80073c6:	230a      	movs	r3, #10
 80073c8:	e7ad      	b.n	8007326 <_strtol_l.isra.0+0x5e>
 80073ca:	bf00      	nop
 80073cc:	080074cd 	.word	0x080074cd

080073d0 <strtol>:
 80073d0:	4613      	mov	r3, r2
 80073d2:	460a      	mov	r2, r1
 80073d4:	4601      	mov	r1, r0
 80073d6:	4802      	ldr	r0, [pc, #8]	; (80073e0 <strtol+0x10>)
 80073d8:	6800      	ldr	r0, [r0, #0]
 80073da:	f7ff bf75 	b.w	80072c8 <_strtol_l.isra.0>
 80073de:	bf00      	nop
 80073e0:	20000024 	.word	0x20000024

080073e4 <_init>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr

080073f0 <_fini>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr
