
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006700  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006980  08006980  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006980  08006980  00016980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006988  08006988  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000014  080069a4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  080069a4  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f9d  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c5  00000000  00000000  00039fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cba  00000000  00000000  0003f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185ab  00000000  00000000  000694ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d35  00000000  00000000  00081a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001827aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005124  00000000  00000000  00182800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	080068e0 	.word	0x080068e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	080068e0 	.word	0x080068e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_CAN1_Init+0x68>)
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <MX_CAN1_Init+0x6c>)
 8000538:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_CAN1_Init+0x68>)
 800053c:	2210      	movs	r2, #16
 800053e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_CAN1_Init+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_CAN1_Init+0x68>)
 8000548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800054c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_CAN1_Init+0x68>)
 8000550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000554:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_CAN1_Init+0x68>)
 8000558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800055c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_CAN1_Init+0x68>)
 8000560:	2200      	movs	r2, #0
 8000562:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_CAN1_Init+0x68>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CAN1_Init+0x68>)
 8000584:	f001 f9dc 	bl	8001940 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f000 fe6b 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000003c 	.word	0x2000003c
 800059c:	40006400 	.word	0x40006400

080005a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_CAN_MspInit+0x8c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12f      	bne.n	8000622 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	2303      	movs	r3, #3
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000602:	2309      	movs	r3, #9
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_CAN_MspInit+0x94>)
 800060e:	f002 f9a9 	bl	8002964 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2014      	movs	r0, #20
 8000618:	f002 f8db 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061c:	2014      	movs	r0, #20
 800061e:	f002 f8f4 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40006400 	.word	0x40006400
 8000630:	40023800 	.word	0x40023800
 8000634:	40020c00 	.word	0x40020c00

08000638 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a6b      	ldr	r2, [pc, #428]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b69      	ldr	r3, [pc, #420]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a65      	ldr	r2, [pc, #404]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a5f      	ldr	r2, [pc, #380]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a53      	ldr	r2, [pc, #332]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e4:	4847      	ldr	r0, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1cc>)
 80006e6:	f002 fae9 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80006f0:	f002 fae4 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d4>)
 800070c:	f002 f92a 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <MX_GPIO_Init+0x1d4>)
 800072c:	f002 f91a 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000730:	2386      	movs	r3, #134	; 0x86
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x1d8>)
 800074c:	f002 f90a 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000750:	f244 0381 	movw	r3, #16513	; 0x4081
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800076a:	f002 f8fb 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800078c:	f002 f8ea 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007a8:	f002 f8dc 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007c0:	f002 f8d0 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007e2:	f002 f8bf 	bl	8002964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f001 fff1 	bl	80027d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f002 f80a 	bl	800280a <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <fnLEDsErrorState+0x28>)
 800081e:	f002 fa4d 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <fnLEDsErrorState+0x28>)
 8000828:	f002 fa48 	bl	8002cbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000832:	4802      	ldr	r0, [pc, #8]	; (800083c <fnLEDsErrorState+0x28>)
 8000834:	f002 fa42 	bl	8002cbc <HAL_GPIO_WritePin>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020400 	.word	0x40020400

08000840 <fnInit>:


//INIT FUNCTION
void fnInit(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000844:	4bc6      	ldr	r3, [pc, #792]	; (8000b60 <fnInit+0x320>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b50      	cmp	r3, #80	; 0x50
 800084a:	f200 82d0 	bhi.w	8000dee <fnInit+0x5ae>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <fnInit+0x14>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000999 	.word	0x08000999
 8000858:	08000def 	.word	0x08000def
 800085c:	08000def 	.word	0x08000def
 8000860:	08000def 	.word	0x08000def
 8000864:	08000def 	.word	0x08000def
 8000868:	080009e1 	.word	0x080009e1
 800086c:	08000def 	.word	0x08000def
 8000870:	08000def 	.word	0x08000def
 8000874:	08000def 	.word	0x08000def
 8000878:	08000def 	.word	0x08000def
 800087c:	08000a29 	.word	0x08000a29
 8000880:	08000def 	.word	0x08000def
 8000884:	08000def 	.word	0x08000def
 8000888:	08000def 	.word	0x08000def
 800088c:	08000def 	.word	0x08000def
 8000890:	08000def 	.word	0x08000def
 8000894:	08000def 	.word	0x08000def
 8000898:	08000def 	.word	0x08000def
 800089c:	08000def 	.word	0x08000def
 80008a0:	08000def 	.word	0x08000def
 80008a4:	08000a97 	.word	0x08000a97
 80008a8:	08000def 	.word	0x08000def
 80008ac:	08000def 	.word	0x08000def
 80008b0:	08000def 	.word	0x08000def
 80008b4:	08000def 	.word	0x08000def
 80008b8:	08000b05 	.word	0x08000b05
 80008bc:	08000def 	.word	0x08000def
 80008c0:	08000def 	.word	0x08000def
 80008c4:	08000def 	.word	0x08000def
 80008c8:	08000def 	.word	0x08000def
 80008cc:	08000b9d 	.word	0x08000b9d
 80008d0:	08000def 	.word	0x08000def
 80008d4:	08000def 	.word	0x08000def
 80008d8:	08000def 	.word	0x08000def
 80008dc:	08000def 	.word	0x08000def
 80008e0:	08000def 	.word	0x08000def
 80008e4:	08000def 	.word	0x08000def
 80008e8:	08000def 	.word	0x08000def
 80008ec:	08000def 	.word	0x08000def
 80008f0:	08000def 	.word	0x08000def
 80008f4:	08000c0b 	.word	0x08000c0b
 80008f8:	08000def 	.word	0x08000def
 80008fc:	08000def 	.word	0x08000def
 8000900:	08000def 	.word	0x08000def
 8000904:	08000def 	.word	0x08000def
 8000908:	08000def 	.word	0x08000def
 800090c:	08000def 	.word	0x08000def
 8000910:	08000def 	.word	0x08000def
 8000914:	08000def 	.word	0x08000def
 8000918:	08000def 	.word	0x08000def
 800091c:	08000c79 	.word	0x08000c79
 8000920:	08000def 	.word	0x08000def
 8000924:	08000def 	.word	0x08000def
 8000928:	08000def 	.word	0x08000def
 800092c:	08000def 	.word	0x08000def
 8000930:	08000def 	.word	0x08000def
 8000934:	08000def 	.word	0x08000def
 8000938:	08000def 	.word	0x08000def
 800093c:	08000def 	.word	0x08000def
 8000940:	08000def 	.word	0x08000def
 8000944:	08000ce7 	.word	0x08000ce7
 8000948:	08000def 	.word	0x08000def
 800094c:	08000def 	.word	0x08000def
 8000950:	08000def 	.word	0x08000def
 8000954:	08000def 	.word	0x08000def
 8000958:	08000def 	.word	0x08000def
 800095c:	08000def 	.word	0x08000def
 8000960:	08000def 	.word	0x08000def
 8000964:	08000def 	.word	0x08000def
 8000968:	08000def 	.word	0x08000def
 800096c:	08000d55 	.word	0x08000d55
 8000970:	08000def 	.word	0x08000def
 8000974:	08000def 	.word	0x08000def
 8000978:	08000def 	.word	0x08000def
 800097c:	08000def 	.word	0x08000def
 8000980:	08000def 	.word	0x08000def
 8000984:	08000def 	.word	0x08000def
 8000988:	08000def 	.word	0x08000def
 800098c:	08000def 	.word	0x08000def
 8000990:	08000def 	.word	0x08000def
 8000994:	08000dc3 	.word	0x08000dc3

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000998:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <fnInit+0x324>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 800099e:	4b71      	ldr	r3, [pc, #452]	; (8000b64 <fnInit+0x324>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 80009a4:	4b70      	ldr	r3, [pc, #448]	; (8000b68 <fnInit+0x328>)
 80009a6:	2282      	movs	r2, #130	; 0x82
 80009a8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009aa:	4b6f      	ldr	r3, [pc, #444]	; (8000b68 <fnInit+0x328>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009b0:	4b6e      	ldr	r3, [pc, #440]	; (8000b6c <fnInit+0x32c>)
 80009b2:	4a6d      	ldr	r2, [pc, #436]	; (8000b68 <fnInit+0x328>)
 80009b4:	496b      	ldr	r1, [pc, #428]	; (8000b64 <fnInit+0x324>)
 80009b6:	486e      	ldr	r0, [pc, #440]	; (8000b70 <fnInit+0x330>)
 80009b8:	f001 f9ee 	bl	8001d98 <HAL_CAN_AddTxMessage>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <fnInit+0x18c>
			fnLEDsErrorState();
 80009c2:	f7ff ff27 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 80009c6:	f000 fc4f 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 80009ca:	e210      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 5;
 80009cc:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <fnInit+0x320>)
 80009ce:	2205      	movs	r2, #5
 80009d0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	2204      	movs	r2, #4
 80009d6:	4967      	ldr	r1, [pc, #412]	; (8000b74 <fnInit+0x334>)
 80009d8:	4867      	ldr	r0, [pc, #412]	; (8000b78 <fnInit+0x338>)
 80009da:	f004 f98d 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 80009de:	e206      	b.n	8000dee <fnInit+0x5ae>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 80009e0:	4b60      	ldr	r3, [pc, #384]	; (8000b64 <fnInit+0x324>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <fnInit+0x324>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 80009ec:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <fnInit+0x328>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009f2:	4b5d      	ldr	r3, [pc, #372]	; (8000b68 <fnInit+0x328>)
 80009f4:	220a      	movs	r2, #10
 80009f6:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009f8:	4b5c      	ldr	r3, [pc, #368]	; (8000b6c <fnInit+0x32c>)
 80009fa:	4a5b      	ldr	r2, [pc, #364]	; (8000b68 <fnInit+0x328>)
 80009fc:	4959      	ldr	r1, [pc, #356]	; (8000b64 <fnInit+0x324>)
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <fnInit+0x330>)
 8000a00:	f001 f9ca 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <fnInit+0x1d4>
			fnLEDsErrorState();
 8000a0a:	f7ff ff03 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000a0e:	f000 fc2b 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000a12:	e1ec      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 10;
 8000a14:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <fnInit+0x320>)
 8000a16:	220a      	movs	r2, #10
 8000a18:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4957      	ldr	r1, [pc, #348]	; (8000b7c <fnInit+0x33c>)
 8000a20:	4855      	ldr	r0, [pc, #340]	; (8000b78 <fnInit+0x338>)
 8000a22:	f004 f969 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000a26:	e1e2      	b.n	8000dee <fnInit+0x5ae>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000a28:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <fnInit+0x324>)
 8000a2a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a2e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a30:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <fnInit+0x324>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000a36:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <fnInit+0x328>)
 8000a38:	2222      	movs	r2, #34	; 0x22
 8000a3a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <fnInit+0x328>)
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000a42:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <fnInit+0x328>)
 8000a44:	2260      	movs	r2, #96	; 0x60
 8000a46:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <fnInit+0x328>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000a4e:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <fnInit+0x328>)
 8000a50:	2206      	movs	r2, #6
 8000a52:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <fnInit+0x328>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <fnInit+0x328>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <fnInit+0x328>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <fnInit+0x32c>)
 8000a68:	4a3f      	ldr	r2, [pc, #252]	; (8000b68 <fnInit+0x328>)
 8000a6a:	493e      	ldr	r1, [pc, #248]	; (8000b64 <fnInit+0x324>)
 8000a6c:	4840      	ldr	r0, [pc, #256]	; (8000b70 <fnInit+0x330>)
 8000a6e:	f001 f993 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <fnInit+0x242>
			fnLEDsErrorState();
 8000a78:	f7ff fecc 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000a7c:	f000 fbf4 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000a80:	e1b5      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 20;
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <fnInit+0x320>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	493c      	ldr	r1, [pc, #240]	; (8000b80 <fnInit+0x340>)
 8000a8e:	483a      	ldr	r0, [pc, #232]	; (8000b78 <fnInit+0x338>)
 8000a90:	f004 f932 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000a94:	e1ab      	b.n	8000dee <fnInit+0x5ae>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <fnInit+0x324>)
 8000a98:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a9c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <fnInit+0x324>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <fnInit+0x328>)
 8000aa6:	2222      	movs	r2, #34	; 0x22
 8000aa8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <fnInit+0x328>)
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <fnInit+0x328>)
 8000ab2:	2260      	movs	r2, #96	; 0x60
 8000ab4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <fnInit+0x328>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <fnInit+0x328>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <fnInit+0x328>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <fnInit+0x328>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <fnInit+0x328>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <fnInit+0x32c>)
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <fnInit+0x328>)
 8000ad8:	4922      	ldr	r1, [pc, #136]	; (8000b64 <fnInit+0x324>)
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <fnInit+0x330>)
 8000adc:	f001 f95c 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d004      	beq.n	8000af0 <fnInit+0x2b0>
			fnLEDsErrorState();
 8000ae6:	f7ff fe95 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000aea:	f000 fbbd 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000aee:	e17e      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 25;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <fnInit+0x320>)
 8000af2:	2219      	movs	r2, #25
 8000af4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2204      	movs	r2, #4
 8000afa:	4922      	ldr	r1, [pc, #136]	; (8000b84 <fnInit+0x344>)
 8000afc:	481e      	ldr	r0, [pc, #120]	; (8000b78 <fnInit+0x338>)
 8000afe:	f004 f8fb 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000b02:	e174      	b.n	8000dee <fnInit+0x5ae>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <fnInit+0x324>)
 8000b06:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b0a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <fnInit+0x324>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <fnInit+0x328>)
 8000b14:	2222      	movs	r2, #34	; 0x22
 8000b16:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <fnInit+0x328>)
 8000b1a:	2240      	movs	r2, #64	; 0x40
 8000b1c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <fnInit+0x328>)
 8000b20:	2260      	movs	r2, #96	; 0x60
 8000b22:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <fnInit+0x328>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <fnInit+0x328>)
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <fnInit+0x328>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <fnInit+0x328>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <fnInit+0x328>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <fnInit+0x32c>)
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <fnInit+0x328>)
 8000b46:	4907      	ldr	r1, [pc, #28]	; (8000b64 <fnInit+0x324>)
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <fnInit+0x330>)
 8000b4a:	f001 f925 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d019      	beq.n	8000b88 <fnInit+0x348>
			fnLEDsErrorState();
 8000b54:	f7ff fe5e 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000b58:	f000 fb86 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000b5c:	e147      	b.n	8000dee <fnInit+0x5ae>
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	200000a4 	.word	0x200000a4
 8000b68:	20000064 	.word	0x20000064
 8000b6c:	2000006c 	.word	0x2000006c
 8000b70:	2000003c 	.word	0x2000003c
 8000b74:	080068f8 	.word	0x080068f8
 8000b78:	20000170 	.word	0x20000170
 8000b7c:	08006900 	.word	0x08006900
 8000b80:	08006908 	.word	0x08006908
 8000b84:	08006910 	.word	0x08006910
			iMachineStatus = 30;
 8000b88:	4b9a      	ldr	r3, [pc, #616]	; (8000df4 <fnInit+0x5b4>)
 8000b8a:	221e      	movs	r2, #30
 8000b8c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2204      	movs	r2, #4
 8000b92:	4999      	ldr	r1, [pc, #612]	; (8000df8 <fnInit+0x5b8>)
 8000b94:	4899      	ldr	r0, [pc, #612]	; (8000dfc <fnInit+0x5bc>)
 8000b96:	f004 f8af 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000b9a:	e128      	b.n	8000dee <fnInit+0x5ae>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000b9c:	4b98      	ldr	r3, [pc, #608]	; (8000e00 <fnInit+0x5c0>)
 8000b9e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ba2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ba4:	4b96      	ldr	r3, [pc, #600]	; (8000e00 <fnInit+0x5c0>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000baa:	4b96      	ldr	r3, [pc, #600]	; (8000e04 <fnInit+0x5c4>)
 8000bac:	2222      	movs	r2, #34	; 0x22
 8000bae:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000bb0:	4b94      	ldr	r3, [pc, #592]	; (8000e04 <fnInit+0x5c4>)
 8000bb2:	2260      	movs	r2, #96	; 0x60
 8000bb4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bb6:	4b93      	ldr	r3, [pc, #588]	; (8000e04 <fnInit+0x5c4>)
 8000bb8:	2260      	movs	r2, #96	; 0x60
 8000bba:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bbc:	4b91      	ldr	r3, [pc, #580]	; (8000e04 <fnInit+0x5c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000bc2:	4b90      	ldr	r3, [pc, #576]	; (8000e04 <fnInit+0x5c4>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bc8:	4b8e      	ldr	r3, [pc, #568]	; (8000e04 <fnInit+0x5c4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bce:	4b8d      	ldr	r3, [pc, #564]	; (8000e04 <fnInit+0x5c4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000bd4:	4b8b      	ldr	r3, [pc, #556]	; (8000e04 <fnInit+0x5c4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000bda:	4b8b      	ldr	r3, [pc, #556]	; (8000e08 <fnInit+0x5c8>)
 8000bdc:	4a89      	ldr	r2, [pc, #548]	; (8000e04 <fnInit+0x5c4>)
 8000bde:	4988      	ldr	r1, [pc, #544]	; (8000e00 <fnInit+0x5c0>)
 8000be0:	488a      	ldr	r0, [pc, #552]	; (8000e0c <fnInit+0x5cc>)
 8000be2:	f001 f8d9 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <fnInit+0x3b6>
			fnLEDsErrorState();
 8000bec:	f7ff fe12 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000bf0:	f000 fb3a 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000bf4:	e0fb      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 40;
 8000bf6:	4b7f      	ldr	r3, [pc, #508]	; (8000df4 <fnInit+0x5b4>)
 8000bf8:	2228      	movs	r2, #40	; 0x28
 8000bfa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4983      	ldr	r1, [pc, #524]	; (8000e10 <fnInit+0x5d0>)
 8000c02:	487e      	ldr	r0, [pc, #504]	; (8000dfc <fnInit+0x5bc>)
 8000c04:	f004 f878 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000c08:	e0f1      	b.n	8000dee <fnInit+0x5ae>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000c0a:	4b7d      	ldr	r3, [pc, #500]	; (8000e00 <fnInit+0x5c0>)
 8000c0c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c10:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <fnInit+0x5c0>)
 8000c14:	2208      	movs	r2, #8
 8000c16:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000c18:	4b7a      	ldr	r3, [pc, #488]	; (8000e04 <fnInit+0x5c4>)
 8000c1a:	2222      	movs	r2, #34	; 0x22
 8000c1c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000c1e:	4b79      	ldr	r3, [pc, #484]	; (8000e04 <fnInit+0x5c4>)
 8000c20:	227a      	movs	r2, #122	; 0x7a
 8000c22:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c24:	4b77      	ldr	r3, [pc, #476]	; (8000e04 <fnInit+0x5c4>)
 8000c26:	2260      	movs	r2, #96	; 0x60
 8000c28:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c2a:	4b76      	ldr	r3, [pc, #472]	; (8000e04 <fnInit+0x5c4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000c30:	4b74      	ldr	r3, [pc, #464]	; (8000e04 <fnInit+0x5c4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c36:	4b73      	ldr	r3, [pc, #460]	; (8000e04 <fnInit+0x5c4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c3c:	4b71      	ldr	r3, [pc, #452]	; (8000e04 <fnInit+0x5c4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c42:	4b70      	ldr	r3, [pc, #448]	; (8000e04 <fnInit+0x5c4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c48:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <fnInit+0x5c8>)
 8000c4a:	4a6e      	ldr	r2, [pc, #440]	; (8000e04 <fnInit+0x5c4>)
 8000c4c:	496c      	ldr	r1, [pc, #432]	; (8000e00 <fnInit+0x5c0>)
 8000c4e:	486f      	ldr	r0, [pc, #444]	; (8000e0c <fnInit+0x5cc>)
 8000c50:	f001 f8a2 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <fnInit+0x424>
			fnLEDsErrorState();
 8000c5a:	f7ff fddb 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000c5e:	f000 fb03 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000c62:	e0c4      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 50;
 8000c64:	4b63      	ldr	r3, [pc, #396]	; (8000df4 <fnInit+0x5b4>)
 8000c66:	2232      	movs	r2, #50	; 0x32
 8000c68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	4969      	ldr	r1, [pc, #420]	; (8000e14 <fnInit+0x5d4>)
 8000c70:	4862      	ldr	r0, [pc, #392]	; (8000dfc <fnInit+0x5bc>)
 8000c72:	f004 f841 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000c76:	e0ba      	b.n	8000dee <fnInit+0x5ae>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000c78:	4b61      	ldr	r3, [pc, #388]	; (8000e00 <fnInit+0x5c0>)
 8000c7a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c7e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c80:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <fnInit+0x5c0>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c86:	4b5f      	ldr	r3, [pc, #380]	; (8000e04 <fnInit+0x5c4>)
 8000c88:	2222      	movs	r2, #34	; 0x22
 8000c8a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c8c:	4b5d      	ldr	r3, [pc, #372]	; (8000e04 <fnInit+0x5c4>)
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c92:	4b5c      	ldr	r3, [pc, #368]	; (8000e04 <fnInit+0x5c4>)
 8000c94:	2260      	movs	r2, #96	; 0x60
 8000c96:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c98:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <fnInit+0x5c4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000c9e:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <fnInit+0x5c4>)
 8000ca0:	221f      	movs	r2, #31
 8000ca2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ca4:	4b57      	ldr	r3, [pc, #348]	; (8000e04 <fnInit+0x5c4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <fnInit+0x5c4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cb0:	4b54      	ldr	r3, [pc, #336]	; (8000e04 <fnInit+0x5c4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cb6:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <fnInit+0x5c8>)
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <fnInit+0x5c4>)
 8000cba:	4951      	ldr	r1, [pc, #324]	; (8000e00 <fnInit+0x5c0>)
 8000cbc:	4853      	ldr	r0, [pc, #332]	; (8000e0c <fnInit+0x5cc>)
 8000cbe:	f001 f86b 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <fnInit+0x492>
			fnLEDsErrorState();
 8000cc8:	f7ff fda4 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000ccc:	f000 facc 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000cd0:	e08d      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 60;
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <fnInit+0x5b4>)
 8000cd4:	223c      	movs	r2, #60	; 0x3c
 8000cd6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	2204      	movs	r2, #4
 8000cdc:	494e      	ldr	r1, [pc, #312]	; (8000e18 <fnInit+0x5d8>)
 8000cde:	4847      	ldr	r0, [pc, #284]	; (8000dfc <fnInit+0x5bc>)
 8000ce0:	f004 f80a 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000ce4:	e083      	b.n	8000dee <fnInit+0x5ae>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <fnInit+0x5c0>)
 8000ce8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cec:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <fnInit+0x5c0>)
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <fnInit+0x5c4>)
 8000cf6:	2222      	movs	r2, #34	; 0x22
 8000cf8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000cfa:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <fnInit+0x5c4>)
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d00:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <fnInit+0x5c4>)
 8000d02:	2260      	movs	r2, #96	; 0x60
 8000d04:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d06:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <fnInit+0x5c4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <fnInit+0x5c4>)
 8000d0e:	220f      	movs	r2, #15
 8000d10:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <fnInit+0x5c4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <fnInit+0x5c4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <fnInit+0x5c4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <fnInit+0x5c8>)
 8000d26:	4a37      	ldr	r2, [pc, #220]	; (8000e04 <fnInit+0x5c4>)
 8000d28:	4935      	ldr	r1, [pc, #212]	; (8000e00 <fnInit+0x5c0>)
 8000d2a:	4838      	ldr	r0, [pc, #224]	; (8000e0c <fnInit+0x5cc>)
 8000d2c:	f001 f834 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <fnInit+0x500>
			fnLEDsErrorState();
 8000d36:	f7ff fd6d 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000d3a:	f000 fa95 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000d3e:	e056      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 70;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <fnInit+0x5b4>)
 8000d42:	2246      	movs	r2, #70	; 0x46
 8000d44:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000d46:	2364      	movs	r3, #100	; 0x64
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4934      	ldr	r1, [pc, #208]	; (8000e1c <fnInit+0x5dc>)
 8000d4c:	482b      	ldr	r0, [pc, #172]	; (8000dfc <fnInit+0x5bc>)
 8000d4e:	f003 ffd3 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000d52:	e04c      	b.n	8000dee <fnInit+0x5ae>

	case 70://SEND STATUS CHECK
		TxHeader.StdId = 0x60A;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <fnInit+0x5c0>)
 8000d56:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d5a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <fnInit+0x5c0>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <fnInit+0x5c4>)
 8000d64:	2240      	movs	r2, #64	; 0x40
 8000d66:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <fnInit+0x5c4>)
 8000d6a:	2241      	movs	r2, #65	; 0x41
 8000d6c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <fnInit+0x5c4>)
 8000d70:	2260      	movs	r2, #96	; 0x60
 8000d72:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <fnInit+0x5c4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <fnInit+0x5c4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <fnInit+0x5c4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <fnInit+0x5c4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <fnInit+0x5c4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <fnInit+0x5c8>)
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <fnInit+0x5c4>)
 8000d96:	491a      	ldr	r1, [pc, #104]	; (8000e00 <fnInit+0x5c0>)
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <fnInit+0x5cc>)
 8000d9a:	f000 fffd 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <fnInit+0x56e>
			fnLEDsErrorState();
 8000da4:	f7ff fd36 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000da8:	f000 fa5e 	bl	8001268 <Error_Handler>
		}
		else{
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000dac:	e01f      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 80;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <fnInit+0x5b4>)
 8000db0:	2250      	movs	r2, #80	; 0x50
 8000db2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	2204      	movs	r2, #4
 8000db8:	4919      	ldr	r1, [pc, #100]	; (8000e20 <fnInit+0x5e0>)
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <fnInit+0x5bc>)
 8000dbc:	f003 ff9c 	bl	8004cf8 <HAL_UART_Transmit>
		break;
 8000dc0:	e015      	b.n	8000dee <fnInit+0x5ae>

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <fnInit+0x5e4>)
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	2b27      	cmp	r3, #39	; 0x27
 8000dc8:	d10c      	bne.n	8000de4 <fnInit+0x5a4>
			iMachineStatus = 1;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <fnInit+0x5b4>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <fnInit+0x5e8>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C080", 4, 100);
 8000dd6:	2364      	movs	r3, #100	; 0x64
 8000dd8:	2204      	movs	r2, #4
 8000dda:	4914      	ldr	r1, [pc, #80]	; (8000e2c <fnInit+0x5ec>)
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <fnInit+0x5bc>)
 8000dde:	f003 ff8b 	bl	8004cf8 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000de2:	e003      	b.n	8000dec <fnInit+0x5ac>
			fnLEDsErrorState();
 8000de4:	f7ff fd16 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000de8:	f000 fa3e 	bl	8001268 <Error_Handler>
		break;
 8000dec:	bf00      	nop
	}
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000
 8000df8:	08006918 	.word	0x08006918
 8000dfc:	20000170 	.word	0x20000170
 8000e00:	200000a4 	.word	0x200000a4
 8000e04:	20000064 	.word	0x20000064
 8000e08:	2000006c 	.word	0x2000006c
 8000e0c:	2000003c 	.word	0x2000003c
 8000e10:	08006920 	.word	0x08006920
 8000e14:	08006928 	.word	0x08006928
 8000e18:	08006930 	.word	0x08006930
 8000e1c:	08006938 	.word	0x08006938
 8000e20:	08006940 	.word	0x08006940
 8000e24:	20000070 	.word	0x20000070
 8000e28:	20000001 	.word	0x20000001
 8000e2c:	08006948 	.word	0x08006948

08000e30 <fnEncCounts2Angle>:

//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(iCounts)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <fnEncCounts2Angle+0x38>)
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <fnEncCounts2Angle+0x3c>)
 8000e4e:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <fnEncCounts2Angle+0x3c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	ee07 3a90 	vmov	s15, r3
}
 8000e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000038 	.word	0x20000038

08000e70 <fnEncReadCount>:
	fnEncReadCount();
}

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <fnEncReadCount+0x50>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <fnEncReadCount+0x54>)
 8000e7e:	701a      	strb	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 8000e80:	2328      	movs	r3, #40	; 0x28
 8000e82:	085b      	lsrs	r3, r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <fnEncReadCount+0x54>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d207      	bcs.n	8000e9e <fnEncReadCount+0x2e>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8000e8e:	2228      	movs	r2, #40	; 0x28
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <fnEncReadCount+0x54>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <fnEncReadCount+0x58>)
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e003      	b.n	8000ea6 <fnEncReadCount+0x36>
	}
	else
	{
		iEncCount = iEncCountReal;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <fnEncReadCount+0x54>)
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <fnEncReadCount+0x58>)
 8000ea4:	701a      	strb	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount);
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <fnEncReadCount+0x58>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ffc0 	bl	8000e30 <fnEncCounts2Angle>
 8000eb0:	eef0 7a40 	vmov.f32	s15, s0
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <fnEncReadCount+0x5c>)
 8000eb6:	edc3 7a00 	vstr	s15, [r3]
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000d8 	.word	0x200000d8
 8000ec4:	20000030 	.word	0x20000030
 8000ec8:	20000031 	.word	0x20000031
 8000ecc:	20000034 	.word	0x20000034

08000ed0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d112      	bne.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (iHomingStatus != 1) {
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d006      	beq.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 8000eea:	f7ff fca9 	bl	8000840 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ef2:	f001 fefc 	bl	8002cee <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}

}
 8000ef6:	e007      	b.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x38>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000efe:	f001 fedd 	bl	8002cbc <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim6);
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f04:	f003 fa76 	bl	80043f4 <HAL_TIM_Base_Stop_IT>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40001000 	.word	0x40001000
 8000f14:	20000001 	.word	0x20000001
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	20000124 	.word	0x20000124

08000f20 <HAL_TIM_IC_CaptureCallback>:

// ENCODER TIMER'S INTERRUPT
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_TIM_IC_CaptureCallback+0x16>
		fnEncReadCount();
 8000f32:	f7ff ff9d 	bl	8000e70 <fnEncReadCount>
		}
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40000400 	.word	0x40000400

08000f44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f54:	d129      	bne.n	8000faa <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f58:	f240 620a 	movw	r2, #1546	; 0x60a
 8000f5c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f6c:	2241      	movs	r2, #65	; 0x41
 8000f6e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f72:	2260      	movs	r2, #96	; 0x60
 8000f74:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x78>)
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f9c:	f000 fefc 	bl	8001d98 <HAL_CAN_AddTxMessage>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8000fa6:	f000 f95f 	bl	8001268 <Error_Handler>

//// ENCODER CALIBRATION - BASE
//		fnEncCalibration();

	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000a4 	.word	0x200000a4
 8000fb8:	20000064 	.word	0x20000064
 8000fbc:	2000006c 	.word	0x2000006c
 8000fc0:	2000003c 	.word	0x2000003c

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 fc30 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f860 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f7ff fb32 	bl	8000638 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fd4:	f000 fafa 	bl	80015cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fd8:	f000 fb74 	bl	80016c4 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000fdc:	f7ff faa8 	bl	8000530 <MX_CAN1_Init>
  MX_TIM6_Init();
 8000fe0:	f000 fa2c 	bl	800143c <MX_TIM6_Init>
  MX_TIM3_Init();
 8000fe4:	f000 f9d6 	bl	8001394 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4923      	ldr	r1, [pc, #140]	; (8001078 <main+0xb4>)
 8000fec:	4823      	ldr	r0, [pc, #140]	; (800107c <main+0xb8>)
 8000fee:	f003 ff16 	bl	8004e1e <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8000ff2:	4823      	ldr	r0, [pc, #140]	; (8001080 <main+0xbc>)
 8000ff4:	f000 fe8c 	bl	8001d10 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <main+0xc0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <main+0xc0>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <main+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <main+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <main+0xc0>)
 8001012:	2202      	movs	r2, #2
 8001014:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <main+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <main+0xc4>)
 800101e:	2201      	movs	r2, #1
 8001020:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <main+0xc4>)
 8001024:	2212      	movs	r2, #18
 8001026:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <main+0xc4>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <main+0xc4>)
 8001030:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001034:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <main+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <main+0xc4>)
 800103e:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001042:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <main+0xc4>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <main+0xc4>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <main+0xc4>)
 8001052:	2201      	movs	r2, #1
 8001054:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <main+0xc4>)
 8001058:	2214      	movs	r2, #20
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 800105c:	490a      	ldr	r1, [pc, #40]	; (8001088 <main+0xc4>)
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <main+0xbc>)
 8001060:	f000 fd6a 	bl	8001b38 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001064:	2102      	movs	r1, #2
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <main+0xbc>)
 8001068:	f001 f883 	bl	8002172 <HAL_CAN_ActivateNotification>

	// ENCODER TIMER START
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 800106c:	213c      	movs	r1, #60	; 0x3c
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <main+0xc8>)
 8001070:	f003 fa96 	bl	80045a0 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001074:	e7fe      	b.n	8001074 <main+0xb0>
 8001076:	bf00      	nop
 8001078:	20000078 	.word	0x20000078
 800107c:	20000170 	.word	0x20000170
 8001080:	2000003c 	.word	0x2000003c
 8001084:	200000a4 	.word	0x200000a4
 8001088:	2000007c 	.word	0x2000007c
 800108c:	200000d8 	.word	0x200000d8

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0b8      	sub	sp, #224	; 0xe0
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800109a:	2234      	movs	r2, #52	; 0x34
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 fc04 	bl	80068ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	2290      	movs	r2, #144	; 0x90
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f005 fbf5 	bl	80068ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010c2:	f001 ff8f 	bl	8002fe4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <SystemClock_Config+0x128>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a3b      	ldr	r2, [pc, #236]	; (80011b8 <SystemClock_Config+0x128>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <SystemClock_Config+0x128>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010de:	4b37      	ldr	r3, [pc, #220]	; (80011bc <SystemClock_Config+0x12c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e6:	4a35      	ldr	r2, [pc, #212]	; (80011bc <SystemClock_Config+0x12c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <SystemClock_Config+0x12c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001100:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001116:	2304      	movs	r3, #4
 8001118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800111c:	2360      	movs	r3, #96	; 0x60
 800111e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001138:	4618      	mov	r0, r3
 800113a:	f001 ffb3 	bl	80030a4 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001144:	f000 f890 	bl	8001268 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001148:	f001 ff5c 	bl	8003004 <HAL_PWREx_EnableOverDrive>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001152:	f000 f889 	bl	8001268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001156:	230f      	movs	r3, #15
 8001158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001176:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800117a:	2103      	movs	r1, #3
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fa3f 	bl	8003600 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001188:	f000 f86e 	bl	8001268 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <SystemClock_Config+0x130>)
 800118e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fc30 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80011aa:	f000 f85d 	bl	8001268 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	37e0      	adds	r7, #224	; 0xe0
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000
 80011c0:	00200100 	.word	0x00200100

080011c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_UART_RxCpltCallback+0x54>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d111      	bne.n	80011fa <HAL_UART_RxCpltCallback+0x36>

		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 80011d6:	2204      	movs	r2, #4
 80011d8:	4910      	ldr	r1, [pc, #64]	; (800121c <HAL_UART_RxCpltCallback+0x58>)
 80011da:	4811      	ldr	r0, [pc, #68]	; (8001220 <HAL_UART_RxCpltCallback+0x5c>)
 80011dc:	f005 fb6e 	bl	80068bc <strncmp>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_UART_RxCpltCallback+0x42>
			iMachineStatus = 0;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_UART_RxCpltCallback+0x60>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_UART_RxCpltCallback+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <HAL_UART_RxCpltCallback+0x68>)
 80011f4:	f003 f886 	bl	8004304 <HAL_TIM_Base_Start_IT>
 80011f8:	e005      	b.n	8001206 <HAL_UART_RxCpltCallback+0x42>
		}
	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	220c      	movs	r2, #12
 80011fe:	490c      	ldr	r1, [pc, #48]	; (8001230 <HAL_UART_RxCpltCallback+0x6c>)
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <HAL_UART_RxCpltCallback+0x70>)
 8001202:	f003 fd79 	bl	8004cf8 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001206:	2204      	movs	r2, #4
 8001208:	4905      	ldr	r1, [pc, #20]	; (8001220 <HAL_UART_RxCpltCallback+0x5c>)
 800120a:	480a      	ldr	r0, [pc, #40]	; (8001234 <HAL_UART_RxCpltCallback+0x70>)
 800120c:	f003 fe07 	bl	8004e1e <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40004800 	.word	0x40004800
 800121c:	08006950 	.word	0x08006950
 8001220:	20000078 	.word	0x20000078
 8001224:	20000000 	.word	0x20000000
 8001228:	20000001 	.word	0x20000001
 800122c:	20000124 	.word	0x20000124
 8001230:	08006958 	.word	0x08006958
 8001234:	20000170 	.word	0x20000170

08001238 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001244:	2100      	movs	r1, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fe81 	bl	8001f4e <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001250:	f001 fd4d 	bl	8002cee <HAL_GPIO_TogglePin>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000070 	.word	0x20000070
 8001260:	200000bc 	.word	0x200000bc
 8001264:	40020400 	.word	0x40020400

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x44>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x44>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x44>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x44>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x44>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 fad6 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <CAN1_RX0_IRQHandler+0x10>)
 8001316:	f000 ff52 	bl	80021be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000003c 	.word	0x2000003c

08001324 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM3_IRQHandler+0x10>)
 800132a:	f003 f9e7 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000d8 	.word	0x200000d8

08001338 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <USART3_IRQHandler+0x10>)
 800133e:	f003 fdbd 	bl	8004ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000170 	.word	0x20000170

0800134c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001354:	f001 fce6 	bl	8002d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <TIM6_DAC_IRQHandler+0x10>)
 8001362:	f003 f9cb 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000124 	.word	0x20000124

08001370 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	; 0x30
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2224      	movs	r2, #36	; 0x24
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fa82 	bl	80068ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <MX_TIM3_Init+0xa0>)
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <MX_TIM3_Init+0xa4>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_TIM3_Init+0xa0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_TIM3_Init+0xa0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_TIM3_Init+0xa0>)
 80013c6:	2227      	movs	r2, #39	; 0x27
 80013c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_TIM3_Init+0xa0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_TIM3_Init+0xa0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_TIM3_Init+0xa0>)
 8001402:	f003 f827 	bl	8004454 <HAL_TIM_Encoder_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800140c:	f7ff ff2c 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_TIM3_Init+0xa0>)
 800141e:	f003 fb71 	bl	8004b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001428:	f7ff ff1e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3730      	adds	r7, #48	; 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200000d8 	.word	0x200000d8
 8001438:	40000400 	.word	0x40000400

0800143c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM6_Init+0x68>)
 800144e:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <MX_TIM6_Init+0x6c>)
 8001450:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_TIM6_Init+0x68>)
 8001454:	f242 527f 	movw	r2, #9599	; 0x257f
 8001458:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_TIM6_Init+0x68>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_TIM6_Init+0x68>)
 8001462:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001466:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_TIM6_Init+0x68>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_TIM6_Init+0x68>)
 8001470:	f002 fef0 	bl	8004254 <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800147a:	f7ff fef5 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_TIM6_Init+0x68>)
 800148c:	f003 fb3a 	bl	8004b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001496:	f7ff fee7 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000124 	.word	0x20000124
 80014a8:	40001000 	.word	0x40001000

080014ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a29      	ldr	r2, [pc, #164]	; (8001570 <HAL_TIM_Encoder_MspInit+0xc4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d14b      	bne.n	8001566 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_TIM_Encoder_MspInit+0xc8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001526:	2302      	movs	r3, #2
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001532:	f001 fa17 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001546:	2302      	movs	r3, #2
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001552:	f001 fa07 	bl	8002964 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	201d      	movs	r0, #29
 800155c:	f001 f939 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001560:	201d      	movs	r0, #29
 8001562:	f001 f952 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40000400 	.word	0x40000400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020800 	.word	0x40020800

08001580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_TIM_Base_MspInit+0x44>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d113      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_TIM_Base_MspInit+0x48>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_TIM_Base_MspInit+0x48>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_TIM_Base_MspInit+0x48>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2036      	movs	r0, #54	; 0x36
 80015b0:	f001 f90f 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b4:	2036      	movs	r0, #54	; 0x36
 80015b6:	f001 f928 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40001000 	.word	0x40001000
 80015c8:	40023800 	.word	0x40023800

080015cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015d2:	4a15      	ldr	r2, [pc, #84]	; (8001628 <MX_USART3_UART_Init+0x5c>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_USART3_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART3_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_USART3_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_USART3_UART_Init+0x58>)
 8001610:	f003 fb24 	bl	8004c5c <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800161a:	f7ff fe25 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000170 	.word	0x20000170
 8001628:	40004800 	.word	0x40004800

0800162c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_UART_MspInit+0x8c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d130      	bne.n	80016b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_UART_MspInit+0x90>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <HAL_UART_MspInit+0x90>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_UART_MspInit+0x90>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x90>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x90>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x90>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800167e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001690:	2307      	movs	r3, #7
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_UART_MspInit+0x94>)
 800169c:	f001 f962 	bl	8002964 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2027      	movs	r0, #39	; 0x27
 80016a6:	f001 f894 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016aa:	2027      	movs	r0, #39	; 0x27
 80016ac:	f001 f8ad 	bl	800280a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40004800 	.word	0x40004800
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020c00 	.word	0x40020c00

080016c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d2:	2206      	movs	r2, #6
 80016d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d8:	2202      	movs	r2, #2
 80016da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001708:	f001 fb24 	bl	8002d54 <HAL_PCD_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001712:	f7ff fda9 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001f4 	.word	0x200001f4

08001720 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001740:	d141      	bne.n	80017c6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800175a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800176c:	230a      	movs	r3, #10
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4817      	ldr	r0, [pc, #92]	; (80017d4 <HAL_PCD_MspInit+0xb4>)
 8001778:	f001 f8f4 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800177c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4810      	ldr	r0, [pc, #64]	; (80017d4 <HAL_PCD_MspInit+0xb4>)
 8001792:	f001 f8e7 	bl	8002964 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a0:	6353      	str	r3, [r2, #52]	; 0x34
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 80017a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_PCD_MspInit+0xb0>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001810 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017de:	490e      	ldr	r1, [pc, #56]	; (8001818 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f4:	4c0b      	ldr	r4, [pc, #44]	; (8001824 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001802:	f7ff fdb5 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001806:	f005 f82d 	bl	8006864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7ff fbdb 	bl	8000fc4 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800181c:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 8001820:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001824:	200005fc 	.word	0x200005fc

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x28>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x28>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 ffbd 	bl	80027bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fd14 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 ffd5 	bl	8002826 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 ff9d 	bl	80027d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000010 	.word	0x20000010
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000010 	.word	0x20000010
 80018dc:	200005f8 	.word	0x200005f8

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200005f8 	.word	0x200005f8

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000010 	.word	0x20000010

08001940 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0ed      	b.n	8001b2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7fe fe1e 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001974:	f7ff ffb4 	bl	80018e0 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800197a:	e012      	b.n	80019a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800197c:	f7ff ffb0 	bl	80018e0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b0a      	cmp	r3, #10
 8001988:	d90b      	bls.n	80019a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2205      	movs	r2, #5
 800199a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0c5      	b.n	8001b2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0e5      	beq.n	800197c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0202 	bic.w	r2, r2, #2
 80019be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c0:	f7ff ff8e 	bl	80018e0 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019c6:	e012      	b.n	80019ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019c8:	f7ff ff8a 	bl	80018e0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b0a      	cmp	r3, #10
 80019d4:	d90b      	bls.n	80019ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2205      	movs	r2, #5
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e09f      	b.n	8001b2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e5      	bne.n	80019c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7e1b      	ldrb	r3, [r3, #24]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d108      	bne.n	8001a16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e007      	b.n	8001a26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7e5b      	ldrb	r3, [r3, #25]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e007      	b.n	8001a50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7e9b      	ldrb	r3, [r3, #26]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0220 	orr.w	r2, r2, #32
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0220 	bic.w	r2, r2, #32
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7edb      	ldrb	r3, [r3, #27]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0210 	bic.w	r2, r2, #16
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e007      	b.n	8001aa4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0210 	orr.w	r2, r2, #16
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7f1b      	ldrb	r3, [r3, #28]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0208 	orr.w	r2, r2, #8
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e007      	b.n	8001ace <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0208 	bic.w	r2, r2, #8
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7f5b      	ldrb	r3, [r3, #29]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0204 	orr.w	r2, r2, #4
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0204 	bic.w	r2, r2, #4
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	ea42 0103 	orr.w	r1, r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b50:	7cfb      	ldrb	r3, [r7, #19]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d003      	beq.n	8001b5e <HAL_CAN_ConfigFilter+0x26>
 8001b56:	7cfb      	ldrb	r3, [r7, #19]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f040 80c7 	bne.w	8001cec <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a69      	ldr	r2, [pc, #420]	; (8001d08 <HAL_CAN_ConfigFilter+0x1d0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d001      	beq.n	8001b6c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001b68:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <HAL_CAN_ConfigFilter+0x1d4>)
 8001b6a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_CAN_ConfigFilter+0x1d4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d111      	bne.n	8001ba8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d123      	bne.n	8001c1a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	401a      	ands	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bf4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3248      	adds	r2, #72	; 0x48
 8001bfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c10:	6979      	ldr	r1, [r7, #20]
 8001c12:	3348      	adds	r3, #72	; 0x48
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d122      	bne.n	8001c68 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3248      	adds	r2, #72	; 0x48
 8001c48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c5e:	6979      	ldr	r1, [r7, #20]
 8001c60:	3348      	adds	r3, #72	; 0x48
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c82:	e007      	b.n	8001c94 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001cae:	e007      	b.n	8001cc0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d107      	bne.n	8001cd8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cde:	f023 0201 	bic.w	r2, r3, #1
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e006      	b.n	8001cfa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40003400 	.word	0x40003400
 8001d0c:	40006400 	.word	0x40006400

08001d10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d12e      	bne.n	8001d82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fdd0 	bl	80018e0 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d42:	e012      	b.n	8001d6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d44:	f7ff fdcc 	bl	80018e0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b0a      	cmp	r3, #10
 8001d50:	d90b      	bls.n	8001d6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2205      	movs	r2, #5
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e012      	b.n	8001d90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e5      	bne.n	8001d44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e006      	b.n	8001d90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
  }
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d003      	beq.n	8001dc4 <HAL_CAN_AddTxMessage+0x2c>
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	f040 80b8 	bne.w	8001f34 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80a0 	beq.w	8001f24 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	0e1b      	lsrs	r3, r3, #24
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d907      	bls.n	8001e04 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e09e      	b.n	8001f42 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e04:	2201      	movs	r2, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e20:	68f9      	ldr	r1, [r7, #12]
 8001e22:	6809      	ldr	r1, [r1, #0]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3318      	adds	r3, #24
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	440b      	add	r3, r1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e00f      	b.n	8001e52 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3318      	adds	r3, #24
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	440b      	add	r3, r1
 8001e50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3318      	adds	r3, #24
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	440b      	add	r3, r1
 8001e62:	3304      	adds	r3, #4
 8001e64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	7d1b      	ldrb	r3, [r3, #20]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d111      	bne.n	8001e92 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3318      	adds	r3, #24
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6811      	ldr	r1, [r2, #0]
 8001e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3318      	adds	r3, #24
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3304      	adds	r3, #4
 8001e90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3307      	adds	r3, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	061a      	lsls	r2, r3, #24
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3305      	adds	r3, #5
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	4313      	orrs	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	3204      	adds	r2, #4
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6811      	ldr	r1, [r2, #0]
 8001eba:	ea43 0200 	orr.w	r2, r3, r0
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ec8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3303      	adds	r3, #3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	061a      	lsls	r2, r3, #24
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	4610      	mov	r0, r2
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6811      	ldr	r1, [r2, #0]
 8001ef0:	ea43 0200 	orr.w	r2, r3, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001efe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3318      	adds	r3, #24
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	6811      	ldr	r1, [r2, #0]
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	440b      	add	r3, r1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e00e      	b.n	8001f42 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e006      	b.n	8001f42 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b087      	sub	sp, #28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f62:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d003      	beq.n	8001f72 <HAL_CAN_GetRxMessage+0x24>
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	f040 80f3 	bne.w	8002158 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10e      	bne.n	8001f96 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0e7      	b.n	8002166 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0d8      	b.n	8002166 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	331b      	adds	r3, #27
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0204 	and.w	r2, r3, #4
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	331b      	adds	r3, #27
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0d5b      	lsrs	r3, r3, #21
 8001fe2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	331b      	adds	r3, #27
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	331b      	adds	r3, #27
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0202 	and.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	331b      	adds	r3, #27
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	4413      	add	r3, r2
 8002026:	3304      	adds	r3, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	331b      	adds	r3, #27
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b2da      	uxtb	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	331b      	adds	r3, #27
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	3304      	adds	r3, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0c1b      	lsrs	r3, r3, #16
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0a1a      	lsrs	r2, r3, #8
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	4413      	add	r3, r2
 800209c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0c1a      	lsrs	r2, r3, #16
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	3302      	adds	r3, #2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0e1a      	lsrs	r2, r3, #24
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3303      	adds	r3, #3
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	3304      	adds	r3, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0a1a      	lsrs	r2, r3, #8
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	3305      	adds	r3, #5
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	4413      	add	r3, r2
 8002102:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0c1a      	lsrs	r2, r3, #16
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3306      	adds	r3, #6
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e1a      	lsrs	r2, r3, #24
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	3307      	adds	r3, #7
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	e007      	b.n	8002154 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e006      	b.n	8002166 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002182:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d002      	beq.n	8002190 <HAL_CAN_ActivateNotification+0x1e>
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d109      	bne.n	80021a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6959      	ldr	r1, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e006      	b.n	80021b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b08a      	sub	sp, #40	; 0x28
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d07c      	beq.n	80022fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d023      	beq.n	8002256 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f983 	bl	800252c <HAL_CAN_TxMailbox0CompleteCallback>
 8002226:	e016      	b.n	8002256 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	e00c      	b.n	8002256 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e002      	b.n	8002256 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f989 	bl	8002568 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d024      	beq.n	80022aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002268:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f963 	bl	8002540 <HAL_CAN_TxMailbox1CompleteCallback>
 800227a:	e016      	b.n	80022aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	e00c      	b.n	80022aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	e002      	b.n	80022aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f969 	bl	800257c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d024      	beq.n	80022fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f943 	bl	8002554 <HAL_CAN_TxMailbox2CompleteCallback>
 80022ce:	e016      	b.n	80022fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	e00c      	b.n	80022fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
 80022f6:	e002      	b.n	80022fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f949 	bl	8002590 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002318:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2210      	movs	r2, #16
 8002320:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2208      	movs	r2, #8
 800233c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f930 	bl	80025a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7fe ff6b 	bl	8001238 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2210      	movs	r2, #16
 8002384:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2208      	movs	r2, #8
 80023a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f912 	bl	80025cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f8f9 	bl	80025b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00b      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2210      	movs	r2, #16
 80023e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8fc 	bl	80025e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2208      	movs	r2, #8
 8002402:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f8f5 	bl	80025f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d07b      	beq.n	800250c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d072      	beq.n	8002504 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002478:	2b00      	cmp	r3, #0
 800247a:	d043      	beq.n	8002504 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03e      	beq.n	8002504 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800248c:	2b60      	cmp	r3, #96	; 0x60
 800248e:	d02b      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x32a>
 8002490:	2b60      	cmp	r3, #96	; 0x60
 8002492:	d82e      	bhi.n	80024f2 <HAL_CAN_IRQHandler+0x334>
 8002494:	2b50      	cmp	r3, #80	; 0x50
 8002496:	d022      	beq.n	80024de <HAL_CAN_IRQHandler+0x320>
 8002498:	2b50      	cmp	r3, #80	; 0x50
 800249a:	d82a      	bhi.n	80024f2 <HAL_CAN_IRQHandler+0x334>
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d019      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x316>
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d826      	bhi.n	80024f2 <HAL_CAN_IRQHandler+0x334>
 80024a4:	2b30      	cmp	r3, #48	; 0x30
 80024a6:	d010      	beq.n	80024ca <HAL_CAN_IRQHandler+0x30c>
 80024a8:	2b30      	cmp	r3, #48	; 0x30
 80024aa:	d822      	bhi.n	80024f2 <HAL_CAN_IRQHandler+0x334>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d002      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x2f8>
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d005      	beq.n	80024c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024b4:	e01d      	b.n	80024f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f043 0308 	orr.w	r3, r3, #8
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024be:	e019      	b.n	80024f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024c8:	e014      	b.n	80024f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024d2:	e00f      	b.n	80024f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024dc:	e00a      	b.n	80024f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024e6:	e005      	b.n	80024f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024f0:	e000      	b.n	80024f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80024f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002502:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2204      	movs	r2, #4
 800250a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f872 	bl	8002608 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	4313      	orrs	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00
 8002660:	05fa0000 	.word	0x05fa0000

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d301      	bcc.n	800278e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <SysTick_Config+0x40>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002796:	210f      	movs	r1, #15
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f7ff ff8e 	bl	80026bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SysTick_Config+0x40>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <SysTick_Config+0x40>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff29 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e4:	f7ff ff3e 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7ff ff8e 	bl	8002710 <NVIC_EncodePriority>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff5d 	bl	80026bc <__NVIC_SetPriority>
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff31 	bl	8002680 <__NVIC_EnableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffa2 	bl	8002778 <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff f848 	bl	80018e0 <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d008      	beq.n	8002870 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e052      	b.n	8002916 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0216 	bic.w	r2, r2, #22
 800287e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <HAL_DMA_Abort+0x62>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0208 	bic.w	r2, r2, #8
 80028ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c0:	e013      	b.n	80028ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c2:	f7ff f80d 	bl	80018e0 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d90c      	bls.n	80028ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e015      	b.n	8002916 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e4      	bne.n	80028c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	223f      	movs	r2, #63	; 0x3f
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d004      	beq.n	800293c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e00c      	b.n	8002956 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2205      	movs	r2, #5
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e175      	b.n	8002c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 8164 	bne.w	8002c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_GPIO_Init+0x56>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d130      	bne.n	8002a1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d017      	beq.n	8002a58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80be 	beq.w	8002c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af8:	6453      	str	r3, [r2, #68]	; 0x44
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b06:	4a61      	ldr	r2, [pc, #388]	; (8002c8c <HAL_GPIO_Init+0x328>)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_GPIO_Init+0x32c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d037      	beq.n	8002ba2 <HAL_GPIO_Init+0x23e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_GPIO_Init+0x330>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d031      	beq.n	8002b9e <HAL_GPIO_Init+0x23a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_GPIO_Init+0x334>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02b      	beq.n	8002b9a <HAL_GPIO_Init+0x236>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a55      	ldr	r2, [pc, #340]	; (8002c9c <HAL_GPIO_Init+0x338>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x232>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a54      	ldr	r2, [pc, #336]	; (8002ca0 <HAL_GPIO_Init+0x33c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x22e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a53      	ldr	r2, [pc, #332]	; (8002ca4 <HAL_GPIO_Init+0x340>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x22a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_GPIO_Init+0x344>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x226>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a51      	ldr	r2, [pc, #324]	; (8002cac <HAL_GPIO_Init+0x348>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x222>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	; (8002cb0 <HAL_GPIO_Init+0x34c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x21e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x350>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x21a>
 8002b7a:	2309      	movs	r3, #9
 8002b7c:	e012      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b7e:	230a      	movs	r3, #10
 8002b80:	e010      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b82:	2308      	movs	r3, #8
 8002b84:	e00e      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b86:	2307      	movs	r3, #7
 8002b88:	e00c      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e00a      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b8e:	2305      	movs	r3, #5
 8002b90:	e008      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b92:	2304      	movs	r3, #4
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b96:	2303      	movs	r3, #3
 8002b98:	e004      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_GPIO_Init+0x240>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f002 0203 	and.w	r2, r2, #3
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4093      	lsls	r3, r2
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bb4:	4935      	ldr	r1, [pc, #212]	; (8002c8c <HAL_GPIO_Init+0x328>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be6:	4a34      	ldr	r2, [pc, #208]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c10:	4a29      	ldr	r2, [pc, #164]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_GPIO_Init+0x354>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	f67f ae86 	bls.w	8002984 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40021400 	.word	0x40021400
 8002ca8:	40021800 	.word	0x40021800
 8002cac:	40021c00 	.word	0x40021c00
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40022400 	.word	0x40022400
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d00:	887a      	ldrh	r2, [r7, #2]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	041a      	lsls	r2, r3, #16
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	400b      	ands	r3, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe f8fe 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	b08f      	sub	sp, #60	; 0x3c
 8002d58:	af0a      	add	r7, sp, #40	; 0x28
 8002d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e116      	b.n	8002f94 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fe fccd 	bl	8001720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fac7 	bl	8006338 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	687e      	ldr	r6, [r7, #4]
 8002db2:	466d      	mov	r5, sp
 8002db4:	f106 0410 	add.w	r4, r6, #16
 8002db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dc8:	1d33      	adds	r3, r6, #4
 8002dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dcc:	6838      	ldr	r0, [r7, #0]
 8002dce:	f003 fa5b 	bl	8006288 <USB_CoreInit>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0d7      	b.n	8002f94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fab5 	bl	800635a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e04a      	b.n	8002e8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	333d      	adds	r3, #61	; 0x3d
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	333c      	adds	r3, #60	; 0x3c
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	b298      	uxth	r0, r3
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3342      	adds	r3, #66	; 0x42
 8002e32:	4602      	mov	r2, r0
 8002e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	333f      	adds	r3, #63	; 0x3f
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3344      	adds	r3, #68	; 0x44
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3348      	adds	r3, #72	; 0x48
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3350      	adds	r3, #80	; 0x50
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3af      	bcc.n	8002df6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	e044      	b.n	8002f26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	3301      	adds	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3b5      	bcc.n	8002e9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	687e      	ldr	r6, [r7, #4]
 8002f38:	466d      	mov	r5, sp
 8002f3a:	f106 0410 	add.w	r4, r6, #16
 8002f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f4e:	1d33      	adds	r3, r6, #4
 8002f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f52:	6838      	ldr	r0, [r7, #0]
 8002f54:	f003 fa4e 	bl	80063f4 <USB_DevInit>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e014      	b.n	8002f94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f80a 	bl	8002f9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 fc08 	bl	80067a2 <USB_DevDisconnect>

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	10000003 	.word	0x10000003

08002fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000

08003004 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_PWREx_EnableOverDrive+0x98>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a22      	ldr	r2, [pc, #136]	; (800309c <HAL_PWREx_EnableOverDrive+0x98>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_PWREx_EnableOverDrive+0x98>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003026:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003032:	f7fe fc55 	bl	80018e0 <HAL_GetTick>
 8003036:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003038:	e009      	b.n	800304e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800303a:	f7fe fc51 	bl	80018e0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003048:	d901      	bls.n	800304e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e022      	b.n	8003094 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305a:	d1ee      	bne.n	800303a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003066:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003068:	f7fe fc3a 	bl	80018e0 <HAL_GetTick>
 800306c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800306e:	e009      	b.n	8003084 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003070:	f7fe fc36 	bl	80018e0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307e:	d901      	bls.n	8003084 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e007      	b.n	8003094 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003090:	d1ee      	bne.n	8003070 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e29b      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8087 	beq.w	80031d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c8:	4b96      	ldr	r3, [pc, #600]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d00c      	beq.n	80030ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d4:	4b93      	ldr	r3, [pc, #588]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d112      	bne.n	8003106 <HAL_RCC_OscConfig+0x62>
 80030e0:	4b90      	ldr	r3, [pc, #576]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ec:	d10b      	bne.n	8003106 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ee:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d06c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x130>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d168      	bne.n	80031d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e275      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x7a>
 8003110:	4b84      	ldr	r3, [pc, #528]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a83      	ldr	r2, [pc, #524]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e02e      	b.n	800317c <HAL_RCC_OscConfig+0xd8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x9c>
 8003126:	4b7f      	ldr	r3, [pc, #508]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7e      	ldr	r2, [pc, #504]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b7c      	ldr	r3, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7b      	ldr	r2, [pc, #492]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xd8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0xc0>
 800314a:	4b76      	ldr	r3, [pc, #472]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a75      	ldr	r2, [pc, #468]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b73      	ldr	r3, [pc, #460]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a72      	ldr	r2, [pc, #456]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xd8>
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a6e      	ldr	r2, [pc, #440]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6b      	ldr	r2, [pc, #428]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fbac 	bl	80018e0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fba8 	bl	80018e0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e229      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fb98 	bl	80018e0 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fb94 	bl	80018e0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e215      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b57      	ldr	r3, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x110>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d069      	beq.n	80032b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031e2:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ee:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_OscConfig+0x190>
 80031fa:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x17a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1e9      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	493d      	ldr	r1, [pc, #244]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	e040      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d023      	beq.n	8003284 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a38      	ldr	r2, [pc, #224]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe fb4a 	bl	80018e0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe fb46 	bl	80018e0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1c7      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4929      	ldr	r1, [pc, #164]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
 8003282:	e018      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a26      	ldr	r2, [pc, #152]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fb26 	bl	80018e0 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7fe fb22 	bl	80018e0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1a3      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d038      	beq.n	8003334 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d019      	beq.n	80032fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	4a15      	ldr	r2, [pc, #84]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe fb03 	bl	80018e0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032de:	f7fe faff 	bl	80018e0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e180      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x23a>
 80032fc:	e01a      	b.n	8003334 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_RCC_OscConfig+0x280>)
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe fae9 	bl	80018e0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003312:	f7fe fae5 	bl	80018e0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d903      	bls.n	8003328 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e166      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
 8003324:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b92      	ldr	r3, [pc, #584]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ee      	bne.n	8003312 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a4 	beq.w	800348a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	4b89      	ldr	r3, [pc, #548]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a88      	ldr	r2, [pc, #544]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b86      	ldr	r3, [pc, #536]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336a:	4b83      	ldr	r3, [pc, #524]	; (8003578 <HAL_RCC_OscConfig+0x4d4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003376:	4b80      	ldr	r3, [pc, #512]	; (8003578 <HAL_RCC_OscConfig+0x4d4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7f      	ldr	r2, [pc, #508]	; (8003578 <HAL_RCC_OscConfig+0x4d4>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fe faad 	bl	80018e0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe faa9 	bl	80018e0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	; 0x64
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e12a      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339c:	4b76      	ldr	r3, [pc, #472]	; (8003578 <HAL_RCC_OscConfig+0x4d4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x31a>
 80033b0:	4b70      	ldr	r3, [pc, #448]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a6f      	ldr	r2, [pc, #444]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	e02d      	b.n	800341a <HAL_RCC_OscConfig+0x376>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x33c>
 80033c6:	4b6b      	ldr	r3, [pc, #428]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a6a      	ldr	r2, [pc, #424]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
 80033d2:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a67      	ldr	r2, [pc, #412]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	e01c      	b.n	800341a <HAL_RCC_OscConfig+0x376>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d10c      	bne.n	8003402 <HAL_RCC_OscConfig+0x35e>
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a61      	ldr	r2, [pc, #388]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a5e      	ldr	r2, [pc, #376]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003400:	e00b      	b.n	800341a <HAL_RCC_OscConfig+0x376>
 8003402:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a5b      	ldr	r2, [pc, #364]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a58      	ldr	r2, [pc, #352]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d015      	beq.n	800344e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe fa5d 	bl	80018e0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe fa59 	bl	80018e0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0d8      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ee      	beq.n	800342a <HAL_RCC_OscConfig+0x386>
 800344c:	e014      	b.n	8003478 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe fa47 	bl	80018e0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fa43 	bl	80018e0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0c2      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ee      	bne.n	8003456 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80ae 	beq.w	80035f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003494:	4b37      	ldr	r3, [pc, #220]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d06d      	beq.n	800357c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d14b      	bne.n	8003540 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80034ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fa14 	bl	80018e0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe fa10 	bl	80018e0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e091      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	3b01      	subs	r3, #1
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	061b      	lsls	r3, r3, #24
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	071b      	lsls	r3, r3, #28
 8003506:	491b      	ldr	r1, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe f9e2 	bl	80018e0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe f9de 	bl	80018e0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e05f      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x47c>
 800353e:	e057      	b.n	80035f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe f9c8 	bl	80018e0 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe f9c4 	bl	80018e0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e045      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x4b0>
 8003572:	e03d      	b.n	80035f0 <HAL_RCC_OscConfig+0x54c>
 8003574:	40023800 	.word	0x40023800
 8003578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <HAL_RCC_OscConfig+0x558>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d030      	beq.n	80035ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d129      	bne.n	80035ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d122      	bne.n	80035ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d119      	bne.n	80035ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	3b01      	subs	r3, #1
 80035c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d10f      	bne.n	80035ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d107      	bne.n	80035ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800

08003600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0d0      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d910      	bls.n	8003648 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 020f 	bic.w	r2, r3, #15
 800362e:	4965      	ldr	r1, [pc, #404]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003682:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d040      	beq.n	8003724 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d115      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e073      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06b      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4936      	ldr	r1, [pc, #216]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f4:	f7fe f8f4 	bl	80018e0 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe f8f0 	bl	80018e0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e053      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d210      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 020f 	bic.w	r2, r3, #15
 800373a:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f821 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	490a      	ldr	r1, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1cc>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1d0>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1d4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe f850 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08006968 	.word	0x08006968
 80037d0:	20000008 	.word	0x20000008
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	2300      	movs	r3, #0
 80037ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f0:	4b67      	ldr	r3, [pc, #412]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d00d      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x40>
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	f200 80bd 	bhi.w	800397c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x34>
 8003806:	2b04      	cmp	r3, #4
 8003808:	d003      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x3a>
 800380a:	e0b7      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800380e:	60bb      	str	r3, [r7, #8]
      break;
 8003810:	e0b7      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003812:	4b61      	ldr	r3, [pc, #388]	; (8003998 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003814:	60bb      	str	r3, [r7, #8]
      break;
 8003816:	e0b4      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003818:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003822:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d04d      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382e:	4b58      	ldr	r3, [pc, #352]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	461a      	mov	r2, r3
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	ea02 0800 	and.w	r8, r2, r0
 8003846:	ea03 0901 	and.w	r9, r3, r1
 800384a:	4640      	mov	r0, r8
 800384c:	4649      	mov	r1, r9
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	014b      	lsls	r3, r1, #5
 8003858:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800385c:	0142      	lsls	r2, r0, #5
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	ebb0 0008 	subs.w	r0, r0, r8
 8003866:	eb61 0109 	sbc.w	r1, r1, r9
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	018b      	lsls	r3, r1, #6
 8003874:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003878:	0182      	lsls	r2, r0, #6
 800387a:	1a12      	subs	r2, r2, r0
 800387c:	eb63 0301 	sbc.w	r3, r3, r1
 8003880:	f04f 0000 	mov.w	r0, #0
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	00d9      	lsls	r1, r3, #3
 800388a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800388e:	00d0      	lsls	r0, r2, #3
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	eb12 0208 	adds.w	r2, r2, r8
 8003898:	eb43 0309 	adc.w	r3, r3, r9
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	0259      	lsls	r1, r3, #9
 80038a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038aa:	0250      	lsls	r0, r2, #9
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	f7fc fcbc 	bl	8000238 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e04a      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b31      	ldr	r3, [pc, #196]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	461a      	mov	r2, r3
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	ea02 0400 	and.w	r4, r2, r0
 80038e2:	ea03 0501 	and.w	r5, r3, r1
 80038e6:	4620      	mov	r0, r4
 80038e8:	4629      	mov	r1, r5
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	014b      	lsls	r3, r1, #5
 80038f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038f8:	0142      	lsls	r2, r0, #5
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	1b00      	subs	r0, r0, r4
 8003900:	eb61 0105 	sbc.w	r1, r1, r5
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	018b      	lsls	r3, r1, #6
 800390e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003912:	0182      	lsls	r2, r0, #6
 8003914:	1a12      	subs	r2, r2, r0
 8003916:	eb63 0301 	sbc.w	r3, r3, r1
 800391a:	f04f 0000 	mov.w	r0, #0
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	00d9      	lsls	r1, r3, #3
 8003924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003928:	00d0      	lsls	r0, r2, #3
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	1912      	adds	r2, r2, r4
 8003930:	eb45 0303 	adc.w	r3, r5, r3
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	0299      	lsls	r1, r3, #10
 800393e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003942:	0290      	lsls	r0, r2, #10
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	461a      	mov	r2, r3
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	f7fc fc70 	bl	8000238 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	60bb      	str	r3, [r7, #8]
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800397e:	60bb      	str	r3, [r7, #8]
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	68bb      	ldr	r3, [r7, #8]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000008 	.word	0x20000008

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08006978 	.word	0x08006978

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffdc 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0b5b      	lsrs	r3, r3, #13
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08006978 	.word	0x08006978

08003a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a2c:	4b69      	ldr	r3, [pc, #420]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a68      	ldr	r2, [pc, #416]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a36:	6093      	str	r3, [r2, #8]
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	4964      	ldr	r1, [pc, #400]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d017      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a5e:	4b5d      	ldr	r3, [pc, #372]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	4959      	ldr	r1, [pc, #356]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d017      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a9a:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	494a      	ldr	r1, [pc, #296]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 808b 	beq.w	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae8:	4b3a      	ldr	r3, [pc, #232]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a39      	ldr	r2, [pc, #228]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
 8003af4:	4b37      	ldr	r3, [pc, #220]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b00:	4b35      	ldr	r3, [pc, #212]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a34      	ldr	r2, [pc, #208]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fee8 	bl	80018e0 <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b14:	f7fd fee4 	bl	80018e0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e38f      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b26:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b32:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d035      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d02e      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b50:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a1a      	ldr	r2, [pc, #104]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d114      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd feac 	bl	80018e0 <HAL_GetTick>
 8003b88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fea8 	bl	80018e0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e351      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ee      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d111      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bca:	400b      	ands	r3, r1
 8003bcc:	4901      	ldr	r1, [pc, #4]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	0ffffcff 	.word	0x0ffffcff
 8003be0:	4bb3      	ldr	r3, [pc, #716]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4ab2      	ldr	r2, [pc, #712]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bea:	6093      	str	r3, [r2, #8]
 8003bec:	4bb0      	ldr	r3, [pc, #704]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	49ad      	ldr	r1, [pc, #692]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c0a:	4ba9      	ldr	r3, [pc, #676]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c10:	4aa7      	ldr	r2, [pc, #668]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c1a:	4ba5      	ldr	r3, [pc, #660]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	49a2      	ldr	r1, [pc, #648]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c38:	4b9d      	ldr	r3, [pc, #628]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c46:	499a      	ldr	r1, [pc, #616]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5a:	4b95      	ldr	r3, [pc, #596]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c68:	4991      	ldr	r1, [pc, #580]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7c:	4b8c      	ldr	r3, [pc, #560]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8a:	4989      	ldr	r1, [pc, #548]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c9e:	4b84      	ldr	r3, [pc, #528]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4980      	ldr	r1, [pc, #512]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc0:	4b7b      	ldr	r3, [pc, #492]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4978      	ldr	r1, [pc, #480]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ce2:	4b73      	ldr	r3, [pc, #460]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f023 020c 	bic.w	r2, r3, #12
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf0:	496f      	ldr	r1, [pc, #444]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d04:	4b6a      	ldr	r3, [pc, #424]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d12:	4967      	ldr	r1, [pc, #412]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d26:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	495e      	ldr	r1, [pc, #376]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	4956      	ldr	r1, [pc, #344]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d6a:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	494d      	ldr	r1, [pc, #308]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d8c:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	4945      	ldr	r1, [pc, #276]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	493c      	ldr	r1, [pc, #240]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dd0:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dde:	4934      	ldr	r1, [pc, #208]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d011      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e00:	492b      	ldr	r1, [pc, #172]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	491b      	ldr	r1, [pc, #108]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e64:	4912      	ldr	r1, [pc, #72]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e88:	4909      	ldr	r1, [pc, #36]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00f      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	e002      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	4986      	ldr	r1, [pc, #536]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ec8:	4b81      	ldr	r3, [pc, #516]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed8:	497d      	ldr	r1, [pc, #500]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d006      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80d6 	beq.w	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ef4:	4b76      	ldr	r3, [pc, #472]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a75      	ldr	r2, [pc, #468]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd fcee 	bl	80018e0 <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f08:	f7fd fcea 	bl	80018e0 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e195      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f1a:	4b6d      	ldr	r3, [pc, #436]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d021      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11d      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f3a:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f48:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4e:	0e1b      	lsrs	r3, r3, #24
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	019a      	lsls	r2, r3, #6
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	4958      	ldr	r1, [pc, #352]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d02e      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d129      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fa2:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fb0:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb6:	0f1b      	lsrs	r3, r3, #28
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	019a      	lsls	r2, r3, #6
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	071b      	lsls	r3, r3, #28
 8003fd6:	493e      	ldr	r1, [pc, #248]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fde:	4b3c      	ldr	r3, [pc, #240]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe4:	f023 021f 	bic.w	r2, r3, #31
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	3b01      	subs	r3, #1
 8003fee:	4938      	ldr	r1, [pc, #224]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01d      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004002:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004008:	0e1b      	lsrs	r3, r3, #24
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004010:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004016:	0f1b      	lsrs	r3, r3, #28
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	019a      	lsls	r2, r3, #6
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	4926      	ldr	r1, [pc, #152]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	019a      	lsls	r2, r3, #6
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	071b      	lsls	r3, r3, #28
 8004066:	491a      	ldr	r1, [pc, #104]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407a:	f7fd fc31 	bl	80018e0 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004082:	f7fd fc2d 	bl	80018e0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	; 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0d8      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	f040 80ce 	bne.w	8004244 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b4:	f7fd fc14 	bl	80018e0 <HAL_GetTick>
 80040b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040ba:	e00b      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040bc:	f7fd fc10 	bl	80018e0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d904      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e0bb      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d4:	4b5e      	ldr	r3, [pc, #376]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e0:	d0ec      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d02e      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d12a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800410a:	4b51      	ldr	r3, [pc, #324]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004118:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	0f1b      	lsrs	r3, r3, #28
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	019a      	lsls	r2, r3, #6
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	041b      	lsls	r3, r3, #16
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	071b      	lsls	r3, r3, #28
 800413e:	4944      	ldr	r1, [pc, #272]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004146:	4b42      	ldr	r3, [pc, #264]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800414c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	3b01      	subs	r3, #1
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	493d      	ldr	r1, [pc, #244]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d022      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004174:	d11d      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004176:	4b36      	ldr	r3, [pc, #216]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	0e1b      	lsrs	r3, r3, #24
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004184:	4b32      	ldr	r3, [pc, #200]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	0f1b      	lsrs	r3, r3, #28
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	019a      	lsls	r2, r3, #6
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	431a      	orrs	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	071b      	lsls	r3, r3, #28
 80041aa:	4929      	ldr	r1, [pc, #164]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d028      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	0e1b      	lsrs	r3, r3, #24
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041cc:	4b20      	ldr	r3, [pc, #128]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	019a      	lsls	r2, r3, #6
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	431a      	orrs	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	071b      	lsls	r3, r3, #28
 80041f2:	4917      	ldr	r1, [pc, #92]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4911      	ldr	r1, [pc, #68]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd fb60 	bl	80018e0 <HAL_GetTick>
 8004220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004224:	f7fd fb5c 	bl	80018e0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e007      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004242:	d1ef      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800

08004254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e049      	b.n	80042fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd f980 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 fb70 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d001      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e054      	b.n	80043c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d022      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004346:	d01d      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d115      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_TIM_Base_Start_IT+0xec>)
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b06      	cmp	r3, #6
 8004394:	d015      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d011      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e008      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40001800 	.word	0x40001800
 80043f0:	00010007 	.word	0x00010007

080043f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	f241 1311 	movw	r3, #4369	; 0x1111
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10f      	bne.n	800443c <HAL_TIM_Base_Stop_IT+0x48>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	f240 4344 	movw	r3, #1092	; 0x444
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d107      	bne.n	800443c <HAL_TIM_Base_Stop_IT+0x48>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e08f      	b.n	8004588 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d106      	bne.n	8004482 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fd f815 	bl	80014ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6899      	ldr	r1, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_TIM_Encoder_Init+0x13c>)
 8004496:	400b      	ands	r3, r1
 8004498:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f000 fa67 	bl	8004978 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <HAL_TIM_Encoder_Init+0x140>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	4313      	orrs	r3, r2
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_TIM_Encoder_Init+0x144>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4b2a      	ldr	r3, [pc, #168]	; (800459c <HAL_TIM_Encoder_Init+0x148>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	4313      	orrs	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	011a      	lsls	r2, r3, #4
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	031b      	lsls	r3, r3, #12
 8004514:	4313      	orrs	r3, r2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4313      	orrs	r3, r2
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	fffebff8 	.word	0xfffebff8
 8004594:	fffffcfc 	.word	0xfffffcfc
 8004598:	fffff3f3 	.word	0xfffff3f3
 800459c:	ffff0f0f 	.word	0xffff0f0f

080045a0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d110      	bne.n	80045f2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045d6:	7b7b      	ldrb	r3, [r7, #13]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d001      	beq.n	80045e0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e089      	b.n	80046f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f0:	e031      	b.n	8004656 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d110      	bne.n	800461a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045f8:	7bbb      	ldrb	r3, [r7, #14]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d102      	bne.n	8004604 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045fe:	7b3b      	ldrb	r3, [r7, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e075      	b.n	80046f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004618:	e01d      	b.n	8004656 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d108      	bne.n	8004632 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004626:	7b7b      	ldrb	r3, [r7, #13]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d102      	bne.n	8004632 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800462c:	7b3b      	ldrb	r3, [r7, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e05e      	b.n	80046f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_TIM_Encoder_Start_IT+0xc4>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b04      	cmp	r3, #4
 8004660:	d010      	beq.n	8004684 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004662:	e01f      	b.n	80046a4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2201      	movs	r2, #1
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fa23 	bl	8004ab8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0202 	orr.w	r2, r2, #2
 8004680:	60da      	str	r2, [r3, #12]
      break;
 8004682:	e02e      	b.n	80046e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2201      	movs	r2, #1
 800468a:	2104      	movs	r1, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fa13 	bl	8004ab8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0204 	orr.w	r2, r2, #4
 80046a0:	60da      	str	r2, [r3, #12]
      break;
 80046a2:	e01e      	b.n	80046e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2201      	movs	r2, #1
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fa03 	bl	8004ab8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2201      	movs	r2, #1
 80046b8:	2104      	movs	r1, #4
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f9fc 	bl	8004ab8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0202 	orr.w	r2, r2, #2
 80046ce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0204 	orr.w	r2, r2, #4
 80046de:	60da      	str	r2, [r3, #12]
      break;
 80046e0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0202 	mvn.w	r2, #2
 8004728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fbee 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8f7 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8fe 	bl	800494e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b04      	cmp	r3, #4
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0204 	mvn.w	r2, #4
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc fbc4 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8cd 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f8d4 	bl	800494e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0208 	mvn.w	r2, #8
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2204      	movs	r2, #4
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fb9a 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8a3 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f8aa 	bl	800494e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b10      	cmp	r3, #16
 800480c:	d122      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b10      	cmp	r3, #16
 800481a:	d11b      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0210 	mvn.w	r2, #16
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2208      	movs	r2, #8
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fb70 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f879 	bl	800493a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f880 	bl	800494e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0201 	mvn.w	r2, #1
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fc fb28 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b80      	cmp	r3, #128	; 0x80
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f9c4 	bl	8004c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d10e      	bne.n	80048da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d107      	bne.n	80048da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9b7 	bl	8004c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d10e      	bne.n	8004906 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d107      	bne.n	8004906 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f82e 	bl	8004962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b20      	cmp	r3, #32
 8004912:	d10e      	bne.n	8004932 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d107      	bne.n	8004932 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0220 	mvn.w	r2, #32
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f977 	bl	8004c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a40      	ldr	r2, [pc, #256]	; (8004a8c <TIM_Base_SetConfig+0x114>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d00f      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3d      	ldr	r2, [pc, #244]	; (8004a90 <TIM_Base_SetConfig+0x118>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <TIM_Base_SetConfig+0x11c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3b      	ldr	r2, [pc, #236]	; (8004a98 <TIM_Base_SetConfig+0x120>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3a      	ldr	r2, [pc, #232]	; (8004a9c <TIM_Base_SetConfig+0x124>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d108      	bne.n	80049ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2f      	ldr	r2, [pc, #188]	; (8004a8c <TIM_Base_SetConfig+0x114>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02b      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d8:	d027      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2c      	ldr	r2, [pc, #176]	; (8004a90 <TIM_Base_SetConfig+0x118>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d023      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <TIM_Base_SetConfig+0x11c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01f      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <TIM_Base_SetConfig+0x120>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01b      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <TIM_Base_SetConfig+0x124>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d017      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a28      	ldr	r2, [pc, #160]	; (8004aa0 <TIM_Base_SetConfig+0x128>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a27      	ldr	r2, [pc, #156]	; (8004aa4 <TIM_Base_SetConfig+0x12c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a26      	ldr	r2, [pc, #152]	; (8004aa8 <TIM_Base_SetConfig+0x130>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a25      	ldr	r2, [pc, #148]	; (8004aac <TIM_Base_SetConfig+0x134>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <TIM_Base_SetConfig+0x138>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a23      	ldr	r2, [pc, #140]	; (8004ab4 <TIM_Base_SetConfig+0x13c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <TIM_Base_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0xf8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d103      	bne.n	8004a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	615a      	str	r2, [r3, #20]
}
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40010400 	.word	0x40010400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800
 8004aac:	40001800 	.word	0x40001800
 8004ab0:	40001c00 	.word	0x40001c00
 8004ab4:	40002000 	.word	0x40002000

08004ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2201      	movs	r2, #1
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	401a      	ands	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1a      	ldr	r2, [r3, #32]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e06d      	b.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a30      	ldr	r2, [pc, #192]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2f      	ldr	r2, [pc, #188]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d108      	bne.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d01d      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1a      	ldr	r2, [pc, #104]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d10c      	bne.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40010400 	.word	0x40010400
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40000c00 	.word	0x40000c00
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40001800 	.word	0x40001800

08004c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e040      	b.n	8004cf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc fcd4 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fc18 	bl	80054d0 <UART_SetConfig>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e022      	b.n	8004cf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fe6e 	bl	8005994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fef5 	bl	8005ad8 <UART_CheckIdleState>
 8004cee:	4603      	mov	r3, r0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	f040 8081 	bne.w	8004e14 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_UART_Transmit+0x26>
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e079      	b.n	8004e16 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Transmit+0x38>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e072      	b.n	8004e16 <HAL_UART_Transmit+0x11e>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2221      	movs	r2, #33	; 0x21
 8004d44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d46:	f7fc fdcb 	bl	80018e0 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d108      	bne.n	8004d78 <HAL_UART_Transmit+0x80>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e003      	b.n	8004d80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d88:	e02c      	b.n	8004de4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2180      	movs	r1, #128	; 0x80
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fee8 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e038      	b.n	8004e16 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e007      	b.n	8004dd2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1cc      	bne.n	8004d8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2140      	movs	r1, #64	; 0x40
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 feb5 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e005      	b.n	8004e16 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	e000      	b.n	8004e16 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
  }
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b08a      	sub	sp, #40	; 0x28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d13d      	bne.n	8004eb0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_UART_Receive_IT+0x22>
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e036      	b.n	8004eb2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Receive_IT+0x34>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e02f      	b.n	8004eb2 <HAL_UART_Receive_IT+0x94>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	69f9      	ldr	r1, [r7, #28]
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 ff24 	bl	8005cf4 <UART_Start_Receive_IT>
 8004eac:	4603      	mov	r3, r0
 8004eae:	e000      	b.n	8004eb2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3728      	adds	r7, #40	; 0x28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b0ba      	sub	sp, #232	; 0xe8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ee2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ee6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004eea:	4013      	ands	r3, r2
 8004eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d115      	bne.n	8004f24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00f      	beq.n	8004f24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 82a4 	beq.w	8005462 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
      }
      return;
 8004f22:	e29e      	b.n	8005462 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8117 	beq.w	800515c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f3e:	4b85      	ldr	r3, [pc, #532]	; (8005154 <HAL_UART_IRQHandler+0x298>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 810a 	beq.w	800515c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d011      	beq.n	8004f78 <HAL_UART_IRQHandler+0xbc>
 8004f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00b      	beq.n	8004f78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xec>
 8004f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2202      	movs	r2, #2
 8004f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d011      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x11c>
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2208      	movs	r2, #8
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500a:	f043 0208 	orr.w	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501c:	2b00      	cmp	r3, #0
 800501e:	d012      	beq.n	8005046 <HAL_UART_IRQHandler+0x18a>
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 820a 	beq.w	8005466 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d005      	beq.n	800509e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005096:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04f      	beq.n	800513e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fef2 	bl	8005e88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d141      	bne.n	8005136 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3308      	adds	r3, #8
 80050b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1d9      	bne.n	80050b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <HAL_UART_IRQHandler+0x29c>)
 800510c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd fc03 	bl	800291e <HAL_DMA_Abort_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005128:	4610      	mov	r0, r2
 800512a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	e00f      	b.n	800514e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9ae 	bl	8005490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	e00b      	b.n	800514e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9aa 	bl	8005490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e007      	b.n	800514e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9a6 	bl	8005490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800514c:	e18b      	b.n	8005466 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514e:	bf00      	nop
    return;
 8005150:	e189      	b.n	8005466 <HAL_UART_IRQHandler+0x5aa>
 8005152:	bf00      	nop
 8005154:	04000120 	.word	0x04000120
 8005158:	08005f4f 	.word	0x08005f4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005160:	2b01      	cmp	r3, #1
 8005162:	f040 8144 	bne.w	80053ee <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 813d 	beq.w	80053ee <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8136 	beq.w	80053ee <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2210      	movs	r2, #16
 8005188:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	f040 80b2 	bne.w	80052fe <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 815d 	beq.w	800546a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ba:	429a      	cmp	r2, r3
 80051bc:	f080 8155 	bcs.w	800546a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d4:	f000 8085 	beq.w	80052e2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005206:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800520e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800521a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1da      	bne.n	80051d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800524a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800524e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e1      	bne.n	8005222 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800526e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3308      	adds	r3, #8
 800527e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e3      	bne.n	800525e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e4      	bne.n	80052a2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fd faae 	bl	800283e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8d4 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052fc:	e0b5      	b.n	800546a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800530a:	b29b      	uxth	r3, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80a7 	beq.w	800546e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80a2 	beq.w	800546e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800534c:	647b      	str	r3, [r7, #68]	; 0x44
 800534e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e4      	bne.n	800532a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	623b      	str	r3, [r7, #32]
   return(result);
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005384:	633a      	str	r2, [r7, #48]	; 0x30
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800538a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e3      	bne.n	8005360 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0310 	bic.w	r3, r3, #16
 80053be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	617b      	str	r3, [r7, #20]
   return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e4      	bne.n	80053aa <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f85c 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ec:	e03f      	b.n	800546e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <HAL_UART_IRQHandler+0x55c>
 80053fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800540e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f853 	bl	80054bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005416:	e02d      	b.n	8005474 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00e      	beq.n	8005442 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01c      	beq.n	8005472 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	4798      	blx	r3
    }
    return;
 8005440:	e017      	b.n	8005472 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d012      	beq.n	8005474 <HAL_UART_IRQHandler+0x5b8>
 800544e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00c      	beq.n	8005474 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fd8d 	bl	8005f7a <UART_EndTransmit_IT>
    return;
 8005460:	e008      	b.n	8005474 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005462:	bf00      	nop
 8005464:	e006      	b.n	8005474 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005466:	bf00      	nop
 8005468:	e004      	b.n	8005474 <HAL_UART_IRQHandler+0x5b8>
      return;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <HAL_UART_IRQHandler+0x5b8>
      return;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005472:	bf00      	nop
  }

}
 8005474:	37e8      	adds	r7, #232	; 0xe8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4ba7      	ldr	r3, [pc, #668]	; (8005798 <UART_SetConfig+0x2c8>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	6979      	ldr	r1, [r7, #20]
 8005504:	430b      	orrs	r3, r1
 8005506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	430a      	orrs	r2, r1
 8005540:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a95      	ldr	r2, [pc, #596]	; (800579c <UART_SetConfig+0x2cc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d120      	bne.n	800558e <UART_SetConfig+0xbe>
 800554c:	4b94      	ldr	r3, [pc, #592]	; (80057a0 <UART_SetConfig+0x2d0>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b03      	cmp	r3, #3
 8005558:	d816      	bhi.n	8005588 <UART_SetConfig+0xb8>
 800555a:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <UART_SetConfig+0x90>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005571 	.word	0x08005571
 8005564:	0800557d 	.word	0x0800557d
 8005568:	08005577 	.word	0x08005577
 800556c:	08005583 	.word	0x08005583
 8005570:	2301      	movs	r3, #1
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e14f      	b.n	8005816 <UART_SetConfig+0x346>
 8005576:	2302      	movs	r3, #2
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e14c      	b.n	8005816 <UART_SetConfig+0x346>
 800557c:	2304      	movs	r3, #4
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e149      	b.n	8005816 <UART_SetConfig+0x346>
 8005582:	2308      	movs	r3, #8
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e146      	b.n	8005816 <UART_SetConfig+0x346>
 8005588:	2310      	movs	r3, #16
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e143      	b.n	8005816 <UART_SetConfig+0x346>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a84      	ldr	r2, [pc, #528]	; (80057a4 <UART_SetConfig+0x2d4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d132      	bne.n	80055fe <UART_SetConfig+0x12e>
 8005598:	4b81      	ldr	r3, [pc, #516]	; (80057a0 <UART_SetConfig+0x2d0>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d828      	bhi.n	80055f8 <UART_SetConfig+0x128>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0xdc>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	080055ed 	.word	0x080055ed
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	080055f9 	.word	0x080055f9
 80055c8:	080055f9 	.word	0x080055f9
 80055cc:	080055e7 	.word	0x080055e7
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	080055f3 	.word	0x080055f3
 80055e0:	2300      	movs	r3, #0
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e117      	b.n	8005816 <UART_SetConfig+0x346>
 80055e6:	2302      	movs	r3, #2
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e114      	b.n	8005816 <UART_SetConfig+0x346>
 80055ec:	2304      	movs	r3, #4
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e111      	b.n	8005816 <UART_SetConfig+0x346>
 80055f2:	2308      	movs	r3, #8
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e10e      	b.n	8005816 <UART_SetConfig+0x346>
 80055f8:	2310      	movs	r3, #16
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e10b      	b.n	8005816 <UART_SetConfig+0x346>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a69      	ldr	r2, [pc, #420]	; (80057a8 <UART_SetConfig+0x2d8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d120      	bne.n	800564a <UART_SetConfig+0x17a>
 8005608:	4b65      	ldr	r3, [pc, #404]	; (80057a0 <UART_SetConfig+0x2d0>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d013      	beq.n	800563e <UART_SetConfig+0x16e>
 8005616:	2b30      	cmp	r3, #48	; 0x30
 8005618:	d814      	bhi.n	8005644 <UART_SetConfig+0x174>
 800561a:	2b20      	cmp	r3, #32
 800561c:	d009      	beq.n	8005632 <UART_SetConfig+0x162>
 800561e:	2b20      	cmp	r3, #32
 8005620:	d810      	bhi.n	8005644 <UART_SetConfig+0x174>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <UART_SetConfig+0x15c>
 8005626:	2b10      	cmp	r3, #16
 8005628:	d006      	beq.n	8005638 <UART_SetConfig+0x168>
 800562a:	e00b      	b.n	8005644 <UART_SetConfig+0x174>
 800562c:	2300      	movs	r3, #0
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e0f1      	b.n	8005816 <UART_SetConfig+0x346>
 8005632:	2302      	movs	r3, #2
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e0ee      	b.n	8005816 <UART_SetConfig+0x346>
 8005638:	2304      	movs	r3, #4
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e0eb      	b.n	8005816 <UART_SetConfig+0x346>
 800563e:	2308      	movs	r3, #8
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e0e8      	b.n	8005816 <UART_SetConfig+0x346>
 8005644:	2310      	movs	r3, #16
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e0e5      	b.n	8005816 <UART_SetConfig+0x346>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a57      	ldr	r2, [pc, #348]	; (80057ac <UART_SetConfig+0x2dc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d120      	bne.n	8005696 <UART_SetConfig+0x1c6>
 8005654:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <UART_SetConfig+0x2d0>)
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800565e:	2bc0      	cmp	r3, #192	; 0xc0
 8005660:	d013      	beq.n	800568a <UART_SetConfig+0x1ba>
 8005662:	2bc0      	cmp	r3, #192	; 0xc0
 8005664:	d814      	bhi.n	8005690 <UART_SetConfig+0x1c0>
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d009      	beq.n	800567e <UART_SetConfig+0x1ae>
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d810      	bhi.n	8005690 <UART_SetConfig+0x1c0>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <UART_SetConfig+0x1a8>
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d006      	beq.n	8005684 <UART_SetConfig+0x1b4>
 8005676:	e00b      	b.n	8005690 <UART_SetConfig+0x1c0>
 8005678:	2300      	movs	r3, #0
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e0cb      	b.n	8005816 <UART_SetConfig+0x346>
 800567e:	2302      	movs	r3, #2
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e0c8      	b.n	8005816 <UART_SetConfig+0x346>
 8005684:	2304      	movs	r3, #4
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e0c5      	b.n	8005816 <UART_SetConfig+0x346>
 800568a:	2308      	movs	r3, #8
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e0c2      	b.n	8005816 <UART_SetConfig+0x346>
 8005690:	2310      	movs	r3, #16
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e0bf      	b.n	8005816 <UART_SetConfig+0x346>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a45      	ldr	r2, [pc, #276]	; (80057b0 <UART_SetConfig+0x2e0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d125      	bne.n	80056ec <UART_SetConfig+0x21c>
 80056a0:	4b3f      	ldr	r3, [pc, #252]	; (80057a0 <UART_SetConfig+0x2d0>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ae:	d017      	beq.n	80056e0 <UART_SetConfig+0x210>
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	d817      	bhi.n	80056e6 <UART_SetConfig+0x216>
 80056b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ba:	d00b      	beq.n	80056d4 <UART_SetConfig+0x204>
 80056bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c0:	d811      	bhi.n	80056e6 <UART_SetConfig+0x216>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <UART_SetConfig+0x1fe>
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d006      	beq.n	80056da <UART_SetConfig+0x20a>
 80056cc:	e00b      	b.n	80056e6 <UART_SetConfig+0x216>
 80056ce:	2300      	movs	r3, #0
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e0a0      	b.n	8005816 <UART_SetConfig+0x346>
 80056d4:	2302      	movs	r3, #2
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e09d      	b.n	8005816 <UART_SetConfig+0x346>
 80056da:	2304      	movs	r3, #4
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e09a      	b.n	8005816 <UART_SetConfig+0x346>
 80056e0:	2308      	movs	r3, #8
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e097      	b.n	8005816 <UART_SetConfig+0x346>
 80056e6:	2310      	movs	r3, #16
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e094      	b.n	8005816 <UART_SetConfig+0x346>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a30      	ldr	r2, [pc, #192]	; (80057b4 <UART_SetConfig+0x2e4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d125      	bne.n	8005742 <UART_SetConfig+0x272>
 80056f6:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <UART_SetConfig+0x2d0>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005704:	d017      	beq.n	8005736 <UART_SetConfig+0x266>
 8005706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800570a:	d817      	bhi.n	800573c <UART_SetConfig+0x26c>
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005710:	d00b      	beq.n	800572a <UART_SetConfig+0x25a>
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005716:	d811      	bhi.n	800573c <UART_SetConfig+0x26c>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <UART_SetConfig+0x254>
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005720:	d006      	beq.n	8005730 <UART_SetConfig+0x260>
 8005722:	e00b      	b.n	800573c <UART_SetConfig+0x26c>
 8005724:	2301      	movs	r3, #1
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e075      	b.n	8005816 <UART_SetConfig+0x346>
 800572a:	2302      	movs	r3, #2
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e072      	b.n	8005816 <UART_SetConfig+0x346>
 8005730:	2304      	movs	r3, #4
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e06f      	b.n	8005816 <UART_SetConfig+0x346>
 8005736:	2308      	movs	r3, #8
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e06c      	b.n	8005816 <UART_SetConfig+0x346>
 800573c:	2310      	movs	r3, #16
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e069      	b.n	8005816 <UART_SetConfig+0x346>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1c      	ldr	r2, [pc, #112]	; (80057b8 <UART_SetConfig+0x2e8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d137      	bne.n	80057bc <UART_SetConfig+0x2ec>
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <UART_SetConfig+0x2d0>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005756:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800575a:	d017      	beq.n	800578c <UART_SetConfig+0x2bc>
 800575c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005760:	d817      	bhi.n	8005792 <UART_SetConfig+0x2c2>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005766:	d00b      	beq.n	8005780 <UART_SetConfig+0x2b0>
 8005768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576c:	d811      	bhi.n	8005792 <UART_SetConfig+0x2c2>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <UART_SetConfig+0x2aa>
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005776:	d006      	beq.n	8005786 <UART_SetConfig+0x2b6>
 8005778:	e00b      	b.n	8005792 <UART_SetConfig+0x2c2>
 800577a:	2300      	movs	r3, #0
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e04a      	b.n	8005816 <UART_SetConfig+0x346>
 8005780:	2302      	movs	r3, #2
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e047      	b.n	8005816 <UART_SetConfig+0x346>
 8005786:	2304      	movs	r3, #4
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e044      	b.n	8005816 <UART_SetConfig+0x346>
 800578c:	2308      	movs	r3, #8
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e041      	b.n	8005816 <UART_SetConfig+0x346>
 8005792:	2310      	movs	r3, #16
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e03e      	b.n	8005816 <UART_SetConfig+0x346>
 8005798:	efff69f3 	.word	0xefff69f3
 800579c:	40011000 	.word	0x40011000
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40004400 	.word	0x40004400
 80057a8:	40004800 	.word	0x40004800
 80057ac:	40004c00 	.word	0x40004c00
 80057b0:	40005000 	.word	0x40005000
 80057b4:	40011400 	.word	0x40011400
 80057b8:	40007800 	.word	0x40007800
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a71      	ldr	r2, [pc, #452]	; (8005988 <UART_SetConfig+0x4b8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d125      	bne.n	8005812 <UART_SetConfig+0x342>
 80057c6:	4b71      	ldr	r3, [pc, #452]	; (800598c <UART_SetConfig+0x4bc>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057d4:	d017      	beq.n	8005806 <UART_SetConfig+0x336>
 80057d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057da:	d817      	bhi.n	800580c <UART_SetConfig+0x33c>
 80057dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e0:	d00b      	beq.n	80057fa <UART_SetConfig+0x32a>
 80057e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e6:	d811      	bhi.n	800580c <UART_SetConfig+0x33c>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <UART_SetConfig+0x324>
 80057ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f0:	d006      	beq.n	8005800 <UART_SetConfig+0x330>
 80057f2:	e00b      	b.n	800580c <UART_SetConfig+0x33c>
 80057f4:	2300      	movs	r3, #0
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e00d      	b.n	8005816 <UART_SetConfig+0x346>
 80057fa:	2302      	movs	r3, #2
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e00a      	b.n	8005816 <UART_SetConfig+0x346>
 8005800:	2304      	movs	r3, #4
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e007      	b.n	8005816 <UART_SetConfig+0x346>
 8005806:	2308      	movs	r3, #8
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e004      	b.n	8005816 <UART_SetConfig+0x346>
 800580c:	2310      	movs	r3, #16
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e001      	b.n	8005816 <UART_SetConfig+0x346>
 8005812:	2310      	movs	r3, #16
 8005814:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581e:	d15a      	bne.n	80058d6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005820:	7ffb      	ldrb	r3, [r7, #31]
 8005822:	2b08      	cmp	r3, #8
 8005824:	d827      	bhi.n	8005876 <UART_SetConfig+0x3a6>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x35c>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	08005877 	.word	0x08005877
 800583c:	08005867 	.word	0x08005867
 8005840:	08005877 	.word	0x08005877
 8005844:	08005877 	.word	0x08005877
 8005848:	08005877 	.word	0x08005877
 800584c:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fe f8b0 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8005854:	61b8      	str	r0, [r7, #24]
        break;
 8005856:	e013      	b.n	8005880 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fe f8c0 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 800585c:	61b8      	str	r0, [r7, #24]
        break;
 800585e:	e00f      	b.n	8005880 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <UART_SetConfig+0x4c0>)
 8005862:	61bb      	str	r3, [r7, #24]
        break;
 8005864:	e00c      	b.n	8005880 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fd ffb7 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800586a:	61b8      	str	r0, [r7, #24]
        break;
 800586c:	e008      	b.n	8005880 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	61bb      	str	r3, [r7, #24]
        break;
 8005874:	e004      	b.n	8005880 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	77bb      	strb	r3, [r7, #30]
        break;
 800587e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d074      	beq.n	8005970 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	005a      	lsls	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d916      	bls.n	80058d0 <UART_SetConfig+0x400>
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a8:	d212      	bcs.n	80058d0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	b29a      	uxth	r2, r3
 80058c0:	89fb      	ldrh	r3, [r7, #14]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	89fa      	ldrh	r2, [r7, #14]
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	e04f      	b.n	8005970 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	77bb      	strb	r3, [r7, #30]
 80058d4:	e04c      	b.n	8005970 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d828      	bhi.n	800592e <UART_SetConfig+0x45e>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <UART_SetConfig+0x414>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005919 	.word	0x08005919
 80058f0:	0800592f 	.word	0x0800592f
 80058f4:	0800591f 	.word	0x0800591f
 80058f8:	0800592f 	.word	0x0800592f
 80058fc:	0800592f 	.word	0x0800592f
 8005900:	0800592f 	.word	0x0800592f
 8005904:	08005927 	.word	0x08005927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fe f854 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 800590c:	61b8      	str	r0, [r7, #24]
        break;
 800590e:	e013      	b.n	8005938 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005910:	f7fe f864 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 8005914:	61b8      	str	r0, [r7, #24]
        break;
 8005916:	e00f      	b.n	8005938 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <UART_SetConfig+0x4c0>)
 800591a:	61bb      	str	r3, [r7, #24]
        break;
 800591c:	e00c      	b.n	8005938 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591e:	f7fd ff5b 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8005922:	61b8      	str	r0, [r7, #24]
        break;
 8005924:	e008      	b.n	8005938 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592a:	61bb      	str	r3, [r7, #24]
        break;
 800592c:	e004      	b.n	8005938 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	77bb      	strb	r3, [r7, #30]
        break;
 8005936:	bf00      	nop
    }

    if (pclk != 0U)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085a      	lsrs	r2, r3, #1
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	441a      	add	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d909      	bls.n	800596c <UART_SetConfig+0x49c>
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595e:	d205      	bcs.n	800596c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e001      	b.n	8005970 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800597c:	7fbb      	ldrb	r3, [r7, #30]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40007c00 	.word	0x40007c00
 800598c:	40023800 	.word	0x40023800
 8005990:	00f42400 	.word	0x00f42400

08005994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d10a      	bne.n	8005aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae8:	f7fb fefa 	bl	80018e0 <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10e      	bne.n	8005b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f82d 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e023      	b.n	8005b62 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d10e      	bne.n	8005b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f817 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e00d      	b.n	8005b62 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b09c      	sub	sp, #112	; 0x70
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	4613      	mov	r3, r2
 8005b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7a:	e0a5      	b.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	f000 80a1 	beq.w	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fb feab 	bl	80018e0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d13e      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bbc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	663b      	str	r3, [r7, #96]	; 0x60
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e5      	bne.n	8005bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e067      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d04f      	beq.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c36:	d147      	bne.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
 8005c62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e6      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	613b      	str	r3, [r7, #16]
   return(result);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c94:	623a      	str	r2, [r7, #32]
 8005c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	69f9      	ldr	r1, [r7, #28]
 8005c9a:	6a3a      	ldr	r2, [r7, #32]
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e5      	bne.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e010      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	f43f af4a 	beq.w	8005b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3770      	adds	r7, #112	; 0x70
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b097      	sub	sp, #92	; 0x5c
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	88fa      	ldrh	r2, [r7, #6]
 8005d0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d26:	d10e      	bne.n	8005d46 <UART_Start_Receive_IT+0x52>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <UART_Start_Receive_IT+0x48>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d3a:	e02d      	b.n	8005d98 <UART_Start_Receive_IT+0xa4>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	22ff      	movs	r2, #255	; 0xff
 8005d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d44:	e028      	b.n	8005d98 <UART_Start_Receive_IT+0xa4>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <UART_Start_Receive_IT+0x76>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <UART_Start_Receive_IT+0x6c>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	22ff      	movs	r2, #255	; 0xff
 8005d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d5e:	e01b      	b.n	8005d98 <UART_Start_Receive_IT+0xa4>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	227f      	movs	r2, #127	; 0x7f
 8005d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d68:	e016      	b.n	8005d98 <UART_Start_Receive_IT+0xa4>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d72:	d10d      	bne.n	8005d90 <UART_Start_Receive_IT+0x9c>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <UART_Start_Receive_IT+0x92>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	227f      	movs	r2, #127	; 0x7f
 8005d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d84:	e008      	b.n	8005d98 <UART_Start_Receive_IT+0xa4>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	223f      	movs	r2, #63	; 0x3f
 8005d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d8e:	e003      	b.n	8005d98 <UART_Start_Receive_IT+0xa4>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2222      	movs	r2, #34	; 0x22
 8005da4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e5      	bne.n	8005da6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	d107      	bne.n	8005df4 <UART_Start_Receive_IT+0x100>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d103      	bne.n	8005df4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a24      	ldr	r2, [pc, #144]	; (8005e80 <UART_Start_Receive_IT+0x18c>)
 8005df0:	665a      	str	r2, [r3, #100]	; 0x64
 8005df2:	e002      	b.n	8005dfa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <UART_Start_Receive_IT+0x190>)
 8005df8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e6      	bne.n	8005e0a <UART_Start_Receive_IT+0x116>
 8005e3c:	e018      	b.n	8005e70 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f043 0320 	orr.w	r3, r3, #32
 8005e52:	653b      	str	r3, [r7, #80]	; 0x50
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e6      	bne.n	8005e3e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	375c      	adds	r7, #92	; 0x5c
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	0800612b 	.word	0x0800612b
 8005e84:	08005fcf 	.word	0x08005fcf

08005e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b095      	sub	sp, #84	; 0x54
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eae:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e6      	bne.n	8005e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d118      	bne.n	8005f30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f023 0310 	bic.w	r3, r3, #16
 8005f12:	647b      	str	r3, [r7, #68]	; 0x44
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6979      	ldr	r1, [r7, #20]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e6      	bne.n	8005efe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f42:	bf00      	nop
 8005f44:	3754      	adds	r7, #84	; 0x54
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7ff fa8f 	bl	8005490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b088      	sub	sp, #32
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6979      	ldr	r1, [r7, #20]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	613b      	str	r3, [r7, #16]
   return(result);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e6      	bne.n	8005f82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fa5b 	bl	800547c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc6:	bf00      	nop
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b096      	sub	sp, #88	; 0x58
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe4:	2b22      	cmp	r3, #34	; 0x22
 8005fe6:	f040 8094 	bne.w	8006112 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ff4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ff8:	b2d9      	uxtb	r1, r3
 8005ffa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006004:	400a      	ands	r2, r1
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d177      	bne.n	8006122 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006046:	653b      	str	r3, [r7, #80]	; 0x50
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006050:	647b      	str	r3, [r7, #68]	; 0x44
 8006052:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	623b      	str	r3, [r7, #32]
   return(result);
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006084:	633a      	str	r2, [r7, #48]	; 0x30
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800608a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d12e      	bne.n	800610a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	60fb      	str	r3, [r7, #12]
   return(result);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0310 	bic.w	r3, r3, #16
 80060c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69b9      	ldr	r1, [r7, #24]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	617b      	str	r3, [r7, #20]
   return(result);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e6      	bne.n	80060b2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d103      	bne.n	80060fa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2210      	movs	r2, #16
 80060f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff f9ce 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006108:	e00b      	b.n	8006122 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb f85a 	bl	80011c4 <HAL_UART_RxCpltCallback>
}
 8006110:	e007      	b.n	8006122 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0208 	orr.w	r2, r2, #8
 8006120:	619a      	str	r2, [r3, #24]
}
 8006122:	bf00      	nop
 8006124:	3758      	adds	r7, #88	; 0x58
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b096      	sub	sp, #88	; 0x58
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006138:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006140:	2b22      	cmp	r3, #34	; 0x22
 8006142:	f040 8094 	bne.w	800626e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006156:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800615a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800615e:	4013      	ands	r3, r2
 8006160:	b29a      	uxth	r2, r3
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d177      	bne.n	800627e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ac:	643b      	str	r3, [r7, #64]	; 0x40
 80061ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e6      	bne.n	800618e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3308      	adds	r3, #8
 80061de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006204:	2b01      	cmp	r3, #1
 8006206:	d12e      	bne.n	8006266 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	60bb      	str	r3, [r7, #8]
   return(result);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	647b      	str	r3, [r7, #68]	; 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6979      	ldr	r1, [r7, #20]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	613b      	str	r3, [r7, #16]
   return(result);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e6      	bne.n	800620e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	d103      	bne.n	8006256 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2210      	movs	r2, #16
 8006254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff f920 	bl	80054a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006264:	e00b      	b.n	800627e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fa ffac 	bl	80011c4 <HAL_UART_RxCpltCallback>
}
 800626c:	e007      	b.n	800627e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0208 	orr.w	r2, r2, #8
 800627c:	619a      	str	r2, [r3, #24]
}
 800627e:	bf00      	nop
 8006280:	3758      	adds	r7, #88	; 0x58
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006288:	b084      	sub	sp, #16
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	f107 001c 	add.w	r0, r7, #28
 8006296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b01      	cmp	r3, #1
 800629e:	d120      	bne.n	80062e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	4b20      	ldr	r3, [pc, #128]	; (8006334 <USB_CoreInit+0xac>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d105      	bne.n	80062d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa92 	bl	8006800 <USB_CoreReset>
 80062dc:	4603      	mov	r3, r0
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e010      	b.n	8006304 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa86 	bl	8006800 <USB_CoreReset>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	2b01      	cmp	r3, #1
 8006308:	d10b      	bne.n	8006322 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f043 0206 	orr.w	r2, r3, #6
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006322:	7bfb      	ldrb	r3, [r7, #15]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800632e:	b004      	add	sp, #16
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	ffbdffbf 	.word	0xffbdffbf

08006338 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f023 0201 	bic.w	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d115      	bne.n	80063a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006388:	2001      	movs	r0, #1
 800638a:	f7fb fab5 	bl	80018f8 <HAL_Delay>
      ms++;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fa25 	bl	80067e4 <USB_GetMode>
 800639a:	4603      	mov	r3, r0
 800639c:	2b01      	cmp	r3, #1
 800639e:	d01e      	beq.n	80063de <USB_SetCurrentMode+0x84>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b31      	cmp	r3, #49	; 0x31
 80063a4:	d9f0      	bls.n	8006388 <USB_SetCurrentMode+0x2e>
 80063a6:	e01a      	b.n	80063de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d115      	bne.n	80063da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063ba:	2001      	movs	r0, #1
 80063bc:	f7fb fa9c 	bl	80018f8 <HAL_Delay>
      ms++;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3301      	adds	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa0c 	bl	80067e4 <USB_GetMode>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <USB_SetCurrentMode+0x84>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b31      	cmp	r3, #49	; 0x31
 80063d6:	d9f0      	bls.n	80063ba <USB_SetCurrentMode+0x60>
 80063d8:	e001      	b.n	80063de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e005      	b.n	80063ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b32      	cmp	r3, #50	; 0x32
 80063e2:	d101      	bne.n	80063e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f4:	b084      	sub	sp, #16
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800640e:	2300      	movs	r3, #0
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	e009      	b.n	8006428 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	3340      	adds	r3, #64	; 0x40
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	2200      	movs	r2, #0
 8006420:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3301      	adds	r3, #1
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2b0e      	cmp	r3, #14
 800642c:	d9f2      	bls.n	8006414 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800642e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11c      	bne.n	800646e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006442:	f043 0302 	orr.w	r3, r3, #2
 8006446:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e005      	b.n	800647a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006480:	461a      	mov	r2, r3
 8006482:	2300      	movs	r3, #0
 8006484:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648c:	4619      	mov	r1, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006494:	461a      	mov	r2, r3
 8006496:	680b      	ldr	r3, [r1, #0]
 8006498:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	2b01      	cmp	r3, #1
 800649e:	d10c      	bne.n	80064ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064a6:	2100      	movs	r1, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f961 	bl	8006770 <USB_SetDevSpeed>
 80064ae:	e008      	b.n	80064c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064b0:	2101      	movs	r1, #1
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f95c 	bl	8006770 <USB_SetDevSpeed>
 80064b8:	e003      	b.n	80064c2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064ba:	2103      	movs	r1, #3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f957 	bl	8006770 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c2:	2110      	movs	r1, #16
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f8f3 	bl	80066b0 <USB_FlushTxFifo>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f91d 	bl	8006714 <USB_FlushRxFifo>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	461a      	mov	r2, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	461a      	mov	r2, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	461a      	mov	r2, r3
 8006504:	2300      	movs	r3, #0
 8006506:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e043      	b.n	8006596 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006524:	d118      	bne.n	8006558 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006538:	461a      	mov	r2, r3
 800653a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	e013      	b.n	800656a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	461a      	mov	r2, r3
 8006550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e008      	b.n	800656a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	461a      	mov	r2, r3
 8006566:	2300      	movs	r3, #0
 8006568:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006588:	461a      	mov	r2, r3
 800658a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800658e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3301      	adds	r3, #1
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	429a      	cmp	r2, r3
 800659c:	d3b7      	bcc.n	800650e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e043      	b.n	800662c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ba:	d118      	bne.n	80065ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	461a      	mov	r2, r3
 80065d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	e013      	b.n	8006600 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	461a      	mov	r2, r3
 80065e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e008      	b.n	8006600 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	2300      	movs	r3, #0
 80065fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	461a      	mov	r2, r3
 800660e:	2300      	movs	r3, #0
 8006610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661e:	461a      	mov	r2, r3
 8006620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006624:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	3301      	adds	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	429a      	cmp	r2, r3
 8006632:	d3b7      	bcc.n	80065a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006646:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006654:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	f043 0210 	orr.w	r2, r3, #16
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <USB_DevInit+0x2b4>)
 800666e:	4313      	orrs	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	f043 0208 	orr.w	r2, r3, #8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d105      	bne.n	8006698 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <USB_DevInit+0x2b8>)
 8006692:	4313      	orrs	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066a4:	b004      	add	sp, #16
 80066a6:	4770      	bx	lr
 80066a8:	803c3800 	.word	0x803c3800
 80066ac:	40000004 	.word	0x40000004

080066b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	4a12      	ldr	r2, [pc, #72]	; (8006710 <USB_FlushTxFifo+0x60>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e01a      	b.n	8006704 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	daf3      	bge.n	80066be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	019b      	lsls	r3, r3, #6
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	4a08      	ldr	r2, [pc, #32]	; (8006710 <USB_FlushTxFifo+0x60>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e006      	b.n	8006704 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d0f1      	beq.n	80066e6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	00030d40 	.word	0x00030d40

08006714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	4a11      	ldr	r2, [pc, #68]	; (800676c <USB_FlushRxFifo+0x58>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d901      	bls.n	8006730 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e017      	b.n	8006760 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	daf3      	bge.n	8006720 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2210      	movs	r2, #16
 8006740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	4a08      	ldr	r2, [pc, #32]	; (800676c <USB_FlushRxFifo+0x58>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e006      	b.n	8006760 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	d0f1      	beq.n	8006742 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	00030d40 	.word	0x00030d40

08006770 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006790:	4313      	orrs	r3, r2
 8006792:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067bc:	f023 0303 	bic.w	r3, r3, #3
 80067c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d0:	f043 0302 	orr.w	r3, r3, #2
 80067d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0301 	and.w	r3, r3, #1
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	4a13      	ldr	r2, [pc, #76]	; (8006860 <USB_CoreReset+0x60>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e01a      	b.n	8006852 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	daf3      	bge.n	800680c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f043 0201 	orr.w	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <USB_CoreReset+0x60>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e006      	b.n	8006852 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b01      	cmp	r3, #1
 800684e:	d0f1      	beq.n	8006834 <USB_CoreReset+0x34>

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	00030d40 	.word	0x00030d40

08006864 <__libc_init_array>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	4d0d      	ldr	r5, [pc, #52]	; (800689c <__libc_init_array+0x38>)
 8006868:	4c0d      	ldr	r4, [pc, #52]	; (80068a0 <__libc_init_array+0x3c>)
 800686a:	1b64      	subs	r4, r4, r5
 800686c:	10a4      	asrs	r4, r4, #2
 800686e:	2600      	movs	r6, #0
 8006870:	42a6      	cmp	r6, r4
 8006872:	d109      	bne.n	8006888 <__libc_init_array+0x24>
 8006874:	4d0b      	ldr	r5, [pc, #44]	; (80068a4 <__libc_init_array+0x40>)
 8006876:	4c0c      	ldr	r4, [pc, #48]	; (80068a8 <__libc_init_array+0x44>)
 8006878:	f000 f832 	bl	80068e0 <_init>
 800687c:	1b64      	subs	r4, r4, r5
 800687e:	10a4      	asrs	r4, r4, #2
 8006880:	2600      	movs	r6, #0
 8006882:	42a6      	cmp	r6, r4
 8006884:	d105      	bne.n	8006892 <__libc_init_array+0x2e>
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	f855 3b04 	ldr.w	r3, [r5], #4
 800688c:	4798      	blx	r3
 800688e:	3601      	adds	r6, #1
 8006890:	e7ee      	b.n	8006870 <__libc_init_array+0xc>
 8006892:	f855 3b04 	ldr.w	r3, [r5], #4
 8006896:	4798      	blx	r3
 8006898:	3601      	adds	r6, #1
 800689a:	e7f2      	b.n	8006882 <__libc_init_array+0x1e>
 800689c:	08006988 	.word	0x08006988
 80068a0:	08006988 	.word	0x08006988
 80068a4:	08006988 	.word	0x08006988
 80068a8:	0800698c 	.word	0x0800698c

080068ac <memset>:
 80068ac:	4402      	add	r2, r0
 80068ae:	4603      	mov	r3, r0
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d100      	bne.n	80068b6 <memset+0xa>
 80068b4:	4770      	bx	lr
 80068b6:	f803 1b01 	strb.w	r1, [r3], #1
 80068ba:	e7f9      	b.n	80068b0 <memset+0x4>

080068bc <strncmp>:
 80068bc:	b510      	push	{r4, lr}
 80068be:	b16a      	cbz	r2, 80068dc <strncmp+0x20>
 80068c0:	3901      	subs	r1, #1
 80068c2:	1884      	adds	r4, r0, r2
 80068c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d103      	bne.n	80068d8 <strncmp+0x1c>
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	d001      	beq.n	80068d8 <strncmp+0x1c>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f5      	bne.n	80068c4 <strncmp+0x8>
 80068d8:	1a98      	subs	r0, r3, r2
 80068da:	bd10      	pop	{r4, pc}
 80068dc:	4610      	mov	r0, r2
 80068de:	e7fc      	b.n	80068da <strncmp+0x1e>

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
