
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a750  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800a950  0800a950  0001a950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adcc  0800adcc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800add4  0800add4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800add4  0800add4  0001add4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800addc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  200001f8  0800afd4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800afd4  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019980  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ce  00000000  00000000  00039ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9e2  00000000  00000000  0003f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001995c  00000000  00000000  0006a2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102233  00000000  00000000  00083c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185e71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  00185ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a938 	.word	0x0800a938

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800a938 	.word	0x0800a938

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_CAN1_Init+0x68>)
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <MX_CAN1_Init+0x6c>)
 80005fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_CAN1_Init+0x68>)
 8000600:	2210      	movs	r2, #16
 8000602:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_CAN1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_CAN1_Init+0x68>)
 800060c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000610:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_CAN1_Init+0x68>)
 8000614:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000618:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_CAN1_Init+0x68>)
 800061c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000620:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_CAN1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_CAN1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_CAN1_Init+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_CAN1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_CAN1_Init+0x68>)
 8000648:	f002 fa9c 	bl	8002b84 <HAL_CAN_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000652:	f001 fd27 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000214 	.word	0x20000214
 8000660:	40006400 	.word	0x40006400

08000664 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <HAL_CAN_MspInit+0x8c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d12f      	bne.n	80006e6 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 800068c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006a4:	f043 0308 	orr.w	r3, r3, #8
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_CAN_MspInit+0x90>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0308 	and.w	r3, r3, #8
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006b6:	2303      	movs	r3, #3
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006c6:	2309      	movs	r3, #9
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_CAN_MspInit+0x94>)
 80006d2:	f003 fa69 	bl	8003ba8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2014      	movs	r0, #20
 80006dc:	f003 f99b 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006e0:	2014      	movs	r0, #20
 80006e2:	f003 f9b4 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40006400 	.word	0x40006400
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020c00 	.word	0x40020c00

080006fc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a6b      	ldr	r2, [pc, #428]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a65      	ldr	r2, [pc, #404]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b60      	ldr	r3, [pc, #384]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a5f      	ldr	r2, [pc, #380]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a59      	ldr	r2, [pc, #356]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b57      	ldr	r3, [pc, #348]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a53      	ldr	r2, [pc, #332]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078a:	4b4e      	ldr	r3, [pc, #312]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4d      	ldr	r2, [pc, #308]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <MX_GPIO_Init+0x1c8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a8:	4847      	ldr	r0, [pc, #284]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 80007aa:	f003 fba9 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4846      	ldr	r0, [pc, #280]	; (80008cc <MX_GPIO_Init+0x1d0>)
 80007b4:	f003 fba4 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4840      	ldr	r0, [pc, #256]	; (80008d0 <MX_GPIO_Init+0x1d4>)
 80007d0:	f003 f9ea 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d4:	2332      	movs	r3, #50	; 0x32
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_GPIO_Init+0x1d4>)
 80007f0:	f003 f9da 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f4:	2386      	movs	r3, #134	; 0x86
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4831      	ldr	r0, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x1d8>)
 8000810:	f003 f9ca 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000814:	f244 0381 	movw	r3, #16513	; 0x4081
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4826      	ldr	r0, [pc, #152]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 800082e:	f003 f9bb 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000844:	230b      	movs	r3, #11
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	481e      	ldr	r0, [pc, #120]	; (80008c8 <MX_GPIO_Init+0x1cc>)
 8000850:	f003 f9aa 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <MX_GPIO_Init+0x1d0>)
 800086c:	f003 f99c 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0x1d0>)
 8000884:	f003 f990 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000888:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089a:	230b      	movs	r3, #11
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_GPIO_Init+0x1d0>)
 80008a6:	f003 f97f 	bl	8003ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f003 f8b1 	bl	8003a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f003 f8ca 	bl	8003a4e <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021800 	.word	0x40021800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <fnLEDsErrorState+0x28>)
 80008e2:	f003 fb0d 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <fnLEDsErrorState+0x28>)
 80008ec:	f003 fb08 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <fnLEDsErrorState+0x28>)
 80008f8:	f003 fb02 	bl	8003f00 <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020400 	.word	0x40020400

08000904 <fnInit>:


//INIT FUNCTION
void fnInit(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

	switch(iMachineStatus){
 8000908:	4bc0      	ldr	r3, [pc, #768]	; (8000c0c <fnInit+0x308>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b50      	cmp	r3, #80	; 0x50
 800090e:	f200 830b 	bhi.w	8000f28 <fnInit+0x624>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <fnInit+0x14>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000a5d 	.word	0x08000a5d
 800091c:	08000f29 	.word	0x08000f29
 8000920:	08000f29 	.word	0x08000f29
 8000924:	08000f29 	.word	0x08000f29
 8000928:	08000f29 	.word	0x08000f29
 800092c:	08000aa9 	.word	0x08000aa9
 8000930:	08000f29 	.word	0x08000f29
 8000934:	08000f29 	.word	0x08000f29
 8000938:	08000f29 	.word	0x08000f29
 800093c:	08000f29 	.word	0x08000f29
 8000940:	08000ae5 	.word	0x08000ae5
 8000944:	08000f29 	.word	0x08000f29
 8000948:	08000f29 	.word	0x08000f29
 800094c:	08000f29 	.word	0x08000f29
 8000950:	08000f29 	.word	0x08000f29
 8000954:	08000f29 	.word	0x08000f29
 8000958:	08000f29 	.word	0x08000f29
 800095c:	08000f29 	.word	0x08000f29
 8000960:	08000f29 	.word	0x08000f29
 8000964:	08000f29 	.word	0x08000f29
 8000968:	08000b47 	.word	0x08000b47
 800096c:	08000f29 	.word	0x08000f29
 8000970:	08000f29 	.word	0x08000f29
 8000974:	08000f29 	.word	0x08000f29
 8000978:	08000f29 	.word	0x08000f29
 800097c:	08000ba9 	.word	0x08000ba9
 8000980:	08000f29 	.word	0x08000f29
 8000984:	08000f29 	.word	0x08000f29
 8000988:	08000f29 	.word	0x08000f29
 800098c:	08000f29 	.word	0x08000f29
 8000990:	08000c2d 	.word	0x08000c2d
 8000994:	08000f29 	.word	0x08000f29
 8000998:	08000f29 	.word	0x08000f29
 800099c:	08000f29 	.word	0x08000f29
 80009a0:	08000f29 	.word	0x08000f29
 80009a4:	08000f29 	.word	0x08000f29
 80009a8:	08000f29 	.word	0x08000f29
 80009ac:	08000f29 	.word	0x08000f29
 80009b0:	08000f29 	.word	0x08000f29
 80009b4:	08000f29 	.word	0x08000f29
 80009b8:	08000c8f 	.word	0x08000c8f
 80009bc:	08000f29 	.word	0x08000f29
 80009c0:	08000f29 	.word	0x08000f29
 80009c4:	08000f29 	.word	0x08000f29
 80009c8:	08000f29 	.word	0x08000f29
 80009cc:	08000f29 	.word	0x08000f29
 80009d0:	08000f29 	.word	0x08000f29
 80009d4:	08000f29 	.word	0x08000f29
 80009d8:	08000f29 	.word	0x08000f29
 80009dc:	08000f29 	.word	0x08000f29
 80009e0:	08000cf1 	.word	0x08000cf1
 80009e4:	08000f29 	.word	0x08000f29
 80009e8:	08000f29 	.word	0x08000f29
 80009ec:	08000f29 	.word	0x08000f29
 80009f0:	08000f29 	.word	0x08000f29
 80009f4:	08000d53 	.word	0x08000d53
 80009f8:	08000f29 	.word	0x08000f29
 80009fc:	08000f29 	.word	0x08000f29
 8000a00:	08000f29 	.word	0x08000f29
 8000a04:	08000f29 	.word	0x08000f29
 8000a08:	08000dc3 	.word	0x08000dc3
 8000a0c:	08000f29 	.word	0x08000f29
 8000a10:	08000f29 	.word	0x08000f29
 8000a14:	08000f29 	.word	0x08000f29
 8000a18:	08000f29 	.word	0x08000f29
 8000a1c:	08000f29 	.word	0x08000f29
 8000a20:	08000f29 	.word	0x08000f29
 8000a24:	08000f29 	.word	0x08000f29
 8000a28:	08000f29 	.word	0x08000f29
 8000a2c:	08000f29 	.word	0x08000f29
 8000a30:	08000e25 	.word	0x08000e25
 8000a34:	08000f29 	.word	0x08000f29
 8000a38:	08000f29 	.word	0x08000f29
 8000a3c:	08000f29 	.word	0x08000f29
 8000a40:	08000f29 	.word	0x08000f29
 8000a44:	08000f29 	.word	0x08000f29
 8000a48:	08000f29 	.word	0x08000f29
 8000a4c:	08000f29 	.word	0x08000f29
 8000a50:	08000f29 	.word	0x08000f29
 8000a54:	08000f29 	.word	0x08000f29
 8000a58:	08000ec9 	.word	0x08000ec9

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000a5c:	4b6c      	ldr	r3, [pc, #432]	; (8000c10 <fnInit+0x30c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000a62:	4b6b      	ldr	r3, [pc, #428]	; (8000c10 <fnInit+0x30c>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 8000a68:	4b6a      	ldr	r3, [pc, #424]	; (8000c14 <fnInit+0x310>)
 8000a6a:	2282      	movs	r2, #130	; 0x82
 8000a6c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000a6e:	4b69      	ldr	r3, [pc, #420]	; (8000c14 <fnInit+0x310>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a74:	4b68      	ldr	r3, [pc, #416]	; (8000c18 <fnInit+0x314>)
 8000a76:	4a67      	ldr	r2, [pc, #412]	; (8000c14 <fnInit+0x310>)
 8000a78:	4965      	ldr	r1, [pc, #404]	; (8000c10 <fnInit+0x30c>)
 8000a7a:	4868      	ldr	r0, [pc, #416]	; (8000c1c <fnInit+0x318>)
 8000a7c:	f002 faae 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <fnInit+0x18c>
			fnLEDsErrorState();
 8000a86:	f7ff ff27 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000a8a:	f001 fb0b 	bl	80020a4 <Error_Handler>
		else{
			iMachineStatus = 5;
			//SEND INFO THAT ENGINE IS INITIALIZING
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
		}
		break;
 8000a8e:	e24b      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 5;
 8000a90:	4b5e      	ldr	r3, [pc, #376]	; (8000c0c <fnInit+0x308>)
 8000a92:	2205      	movs	r2, #5
 8000a94:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sInitState, iLengthOut, 100);
 8000a96:	4b62      	ldr	r3, [pc, #392]	; (8000c20 <fnInit+0x31c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	4961      	ldr	r1, [pc, #388]	; (8000c24 <fnInit+0x320>)
 8000aa0:	4861      	ldr	r0, [pc, #388]	; (8000c28 <fnInit+0x324>)
 8000aa2:	f005 fa7f 	bl	8005fa4 <HAL_UART_Transmit>
		break;
 8000aa6:	e23f      	b.n	8000f28 <fnInit+0x624>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 8000aa8:	4b59      	ldr	r3, [pc, #356]	; (8000c10 <fnInit+0x30c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000aae:	4b58      	ldr	r3, [pc, #352]	; (8000c10 <fnInit+0x30c>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 8000ab4:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <fnInit+0x310>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000aba:	4b56      	ldr	r3, [pc, #344]	; (8000c14 <fnInit+0x310>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ac0:	4b55      	ldr	r3, [pc, #340]	; (8000c18 <fnInit+0x314>)
 8000ac2:	4a54      	ldr	r2, [pc, #336]	; (8000c14 <fnInit+0x310>)
 8000ac4:	4952      	ldr	r1, [pc, #328]	; (8000c10 <fnInit+0x30c>)
 8000ac6:	4855      	ldr	r0, [pc, #340]	; (8000c1c <fnInit+0x318>)
 8000ac8:	f002 fa88 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <fnInit+0x1d8>
			fnLEDsErrorState();
 8000ad2:	f7ff ff01 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000ad6:	f001 fae5 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
		}
		break;
 8000ada:	e225      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 10;
 8000adc:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <fnInit+0x308>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	701a      	strb	r2, [r3, #0]
		break;
 8000ae2:	e221      	b.n	8000f28 <fnInit+0x624>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <fnInit+0x30c>)
 8000ae6:	f240 620a 	movw	r2, #1546	; 0x60a
 8000aea:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000aec:	4b48      	ldr	r3, [pc, #288]	; (8000c10 <fnInit+0x30c>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000af2:	4b48      	ldr	r3, [pc, #288]	; (8000c14 <fnInit+0x310>)
 8000af4:	2222      	movs	r2, #34	; 0x22
 8000af6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000af8:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <fnInit+0x310>)
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <fnInit+0x310>)
 8000b00:	2260      	movs	r2, #96	; 0x60
 8000b02:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b04:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <fnInit+0x310>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <fnInit+0x310>)
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b10:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <fnInit+0x310>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b16:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <fnInit+0x310>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b1c:	4b3d      	ldr	r3, [pc, #244]	; (8000c14 <fnInit+0x310>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <fnInit+0x314>)
 8000b24:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <fnInit+0x310>)
 8000b26:	493a      	ldr	r1, [pc, #232]	; (8000c10 <fnInit+0x30c>)
 8000b28:	483c      	ldr	r0, [pc, #240]	; (8000c1c <fnInit+0x318>)
 8000b2a:	f002 fa57 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d004      	beq.n	8000b3e <fnInit+0x23a>
			fnLEDsErrorState();
 8000b34:	f7ff fed0 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000b38:	f001 fab4 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
		}
		break;
 8000b3c:	e1f4      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 20;
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <fnInit+0x308>)
 8000b40:	2214      	movs	r2, #20
 8000b42:	701a      	strb	r2, [r3, #0]
		break;
 8000b44:	e1f0      	b.n	8000f28 <fnInit+0x624>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000b46:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <fnInit+0x30c>)
 8000b48:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b4c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <fnInit+0x30c>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <fnInit+0x310>)
 8000b56:	2222      	movs	r2, #34	; 0x22
 8000b58:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <fnInit+0x310>)
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <fnInit+0x310>)
 8000b62:	2260      	movs	r2, #96	; 0x60
 8000b64:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <fnInit+0x310>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <fnInit+0x310>)
 8000b6e:	2207      	movs	r2, #7
 8000b70:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <fnInit+0x310>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <fnInit+0x310>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <fnInit+0x310>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <fnInit+0x314>)
 8000b86:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <fnInit+0x310>)
 8000b88:	4921      	ldr	r1, [pc, #132]	; (8000c10 <fnInit+0x30c>)
 8000b8a:	4824      	ldr	r0, [pc, #144]	; (8000c1c <fnInit+0x318>)
 8000b8c:	f002 fa26 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d004      	beq.n	8000ba0 <fnInit+0x29c>
			fnLEDsErrorState();
 8000b96:	f7ff fe9f 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000b9a:	f001 fa83 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
		}
		break;
 8000b9e:	e1c3      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 25;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <fnInit+0x308>)
 8000ba2:	2219      	movs	r2, #25
 8000ba4:	701a      	strb	r2, [r3, #0]
		break;
 8000ba6:	e1bf      	b.n	8000f28 <fnInit+0x624>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <fnInit+0x30c>)
 8000baa:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bae:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <fnInit+0x30c>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <fnInit+0x310>)
 8000bb8:	2222      	movs	r2, #34	; 0x22
 8000bba:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <fnInit+0x310>)
 8000bbe:	2240      	movs	r2, #64	; 0x40
 8000bc0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <fnInit+0x310>)
 8000bc4:	2260      	movs	r2, #96	; 0x60
 8000bc6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <fnInit+0x310>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <fnInit+0x310>)
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <fnInit+0x310>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <fnInit+0x310>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <fnInit+0x310>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <fnInit+0x314>)
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <fnInit+0x310>)
 8000bea:	4909      	ldr	r1, [pc, #36]	; (8000c10 <fnInit+0x30c>)
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <fnInit+0x318>)
 8000bee:	f002 f9f5 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <fnInit+0x2fe>
			fnLEDsErrorState();
 8000bf8:	f7ff fe6e 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000bfc:	f001 fa52 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
		}
		break;
 8000c00:	e192      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 30;
 8000c02:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <fnInit+0x308>)
 8000c04:	221e      	movs	r2, #30
 8000c06:	701a      	strb	r2, [r3, #0]
		break;
 8000c08:	e18e      	b.n	8000f28 <fnInit+0x624>
 8000c0a:	bf00      	nop
 8000c0c:	20000006 	.word	0x20000006
 8000c10:	20000254 	.word	0x20000254
 8000c14:	2000026c 	.word	0x2000026c
 8000c18:	20000274 	.word	0x20000274
 8000c1c:	20000214 	.word	0x20000214
 8000c20:	20000000 	.word	0x20000000
 8000c24:	0800a99c 	.word	0x0800a99c
 8000c28:	200004a0 	.word	0x200004a0

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000c2c:	4b9d      	ldr	r3, [pc, #628]	; (8000ea4 <fnInit+0x5a0>)
 8000c2e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c32:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c34:	4b9b      	ldr	r3, [pc, #620]	; (8000ea4 <fnInit+0x5a0>)
 8000c36:	2208      	movs	r2, #8
 8000c38:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c3a:	4b9b      	ldr	r3, [pc, #620]	; (8000ea8 <fnInit+0x5a4>)
 8000c3c:	2222      	movs	r2, #34	; 0x22
 8000c3e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000c40:	4b99      	ldr	r3, [pc, #612]	; (8000ea8 <fnInit+0x5a4>)
 8000c42:	2260      	movs	r2, #96	; 0x60
 8000c44:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c46:	4b98      	ldr	r3, [pc, #608]	; (8000ea8 <fnInit+0x5a4>)
 8000c48:	2260      	movs	r2, #96	; 0x60
 8000c4a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c4c:	4b96      	ldr	r3, [pc, #600]	; (8000ea8 <fnInit+0x5a4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000c52:	4b95      	ldr	r3, [pc, #596]	; (8000ea8 <fnInit+0x5a4>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c58:	4b93      	ldr	r3, [pc, #588]	; (8000ea8 <fnInit+0x5a4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c5e:	4b92      	ldr	r3, [pc, #584]	; (8000ea8 <fnInit+0x5a4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c64:	4b90      	ldr	r3, [pc, #576]	; (8000ea8 <fnInit+0x5a4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c6a:	4b90      	ldr	r3, [pc, #576]	; (8000eac <fnInit+0x5a8>)
 8000c6c:	4a8e      	ldr	r2, [pc, #568]	; (8000ea8 <fnInit+0x5a4>)
 8000c6e:	498d      	ldr	r1, [pc, #564]	; (8000ea4 <fnInit+0x5a0>)
 8000c70:	488f      	ldr	r0, [pc, #572]	; (8000eb0 <fnInit+0x5ac>)
 8000c72:	f002 f9b3 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d004      	beq.n	8000c86 <fnInit+0x382>
			fnLEDsErrorState();
 8000c7c:	f7ff fe2c 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000c80:	f001 fa10 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
		}
		break;
 8000c84:	e150      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 40;
 8000c86:	4b8b      	ldr	r3, [pc, #556]	; (8000eb4 <fnInit+0x5b0>)
 8000c88:	2228      	movs	r2, #40	; 0x28
 8000c8a:	701a      	strb	r2, [r3, #0]
		break;
 8000c8c:	e14c      	b.n	8000f28 <fnInit+0x624>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000c8e:	4b85      	ldr	r3, [pc, #532]	; (8000ea4 <fnInit+0x5a0>)
 8000c90:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c94:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c96:	4b83      	ldr	r3, [pc, #524]	; (8000ea4 <fnInit+0x5a0>)
 8000c98:	2208      	movs	r2, #8
 8000c9a:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000c9c:	4b82      	ldr	r3, [pc, #520]	; (8000ea8 <fnInit+0x5a4>)
 8000c9e:	2222      	movs	r2, #34	; 0x22
 8000ca0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <fnInit+0x5a4>)
 8000ca4:	227a      	movs	r2, #122	; 0x7a
 8000ca6:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ca8:	4b7f      	ldr	r3, [pc, #508]	; (8000ea8 <fnInit+0x5a4>)
 8000caa:	2260      	movs	r2, #96	; 0x60
 8000cac:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000cae:	4b7e      	ldr	r3, [pc, #504]	; (8000ea8 <fnInit+0x5a4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000cb4:	4b7c      	ldr	r3, [pc, #496]	; (8000ea8 <fnInit+0x5a4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cba:	4b7b      	ldr	r3, [pc, #492]	; (8000ea8 <fnInit+0x5a4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000cc0:	4b79      	ldr	r3, [pc, #484]	; (8000ea8 <fnInit+0x5a4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cc6:	4b78      	ldr	r3, [pc, #480]	; (8000ea8 <fnInit+0x5a4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ccc:	4b77      	ldr	r3, [pc, #476]	; (8000eac <fnInit+0x5a8>)
 8000cce:	4a76      	ldr	r2, [pc, #472]	; (8000ea8 <fnInit+0x5a4>)
 8000cd0:	4974      	ldr	r1, [pc, #464]	; (8000ea4 <fnInit+0x5a0>)
 8000cd2:	4877      	ldr	r0, [pc, #476]	; (8000eb0 <fnInit+0x5ac>)
 8000cd4:	f002 f982 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d004      	beq.n	8000ce8 <fnInit+0x3e4>
			fnLEDsErrorState();
 8000cde:	f7ff fdfb 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000ce2:	f001 f9df 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
		}
		break;
 8000ce6:	e11f      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 50;
 8000ce8:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <fnInit+0x5b0>)
 8000cea:	2232      	movs	r2, #50	; 0x32
 8000cec:	701a      	strb	r2, [r3, #0]
		break;
 8000cee:	e11b      	b.n	8000f28 <fnInit+0x624>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000cf0:	4b6c      	ldr	r3, [pc, #432]	; (8000ea4 <fnInit+0x5a0>)
 8000cf2:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cf6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cf8:	4b6a      	ldr	r3, [pc, #424]	; (8000ea4 <fnInit+0x5a0>)
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000cfe:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <fnInit+0x5a4>)
 8000d00:	2222      	movs	r2, #34	; 0x22
 8000d02:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d04:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <fnInit+0x5a4>)
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d0a:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <fnInit+0x5a4>)
 8000d0c:	2260      	movs	r2, #96	; 0x60
 8000d0e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d10:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <fnInit+0x5a4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000d16:	4b64      	ldr	r3, [pc, #400]	; (8000ea8 <fnInit+0x5a4>)
 8000d18:	221f      	movs	r2, #31
 8000d1a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d1c:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <fnInit+0x5a4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d22:	4b61      	ldr	r3, [pc, #388]	; (8000ea8 <fnInit+0x5a4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d28:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <fnInit+0x5a4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d2e:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <fnInit+0x5a8>)
 8000d30:	4a5d      	ldr	r2, [pc, #372]	; (8000ea8 <fnInit+0x5a4>)
 8000d32:	495c      	ldr	r1, [pc, #368]	; (8000ea4 <fnInit+0x5a0>)
 8000d34:	485e      	ldr	r0, [pc, #376]	; (8000eb0 <fnInit+0x5ac>)
 8000d36:	f002 f951 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <fnInit+0x446>
			fnLEDsErrorState();
 8000d40:	f7ff fdca 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000d44:	f001 f9ae 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 55;
		}
		break;
 8000d48:	e0ee      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 55;
 8000d4a:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <fnInit+0x5b0>)
 8000d4c:	2237      	movs	r2, #55	; 0x37
 8000d4e:	701a      	strb	r2, [r3, #0]
		break;
 8000d50:	e0ea      	b.n	8000f28 <fnInit+0x624>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000d52:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <fnInit+0x5a0>)
 8000d54:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d58:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <fnInit+0x5a0>)
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d60:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <fnInit+0x5a4>)
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d66:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <fnInit+0x5a4>)
 8000d68:	2241      	movs	r2, #65	; 0x41
 8000d6a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <fnInit+0x5a4>)
 8000d6e:	2260      	movs	r2, #96	; 0x60
 8000d70:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d72:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <fnInit+0x5a4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d78:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <fnInit+0x5a4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <fnInit+0x5a4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d84:	4b48      	ldr	r3, [pc, #288]	; (8000ea8 <fnInit+0x5a4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <fnInit+0x5a4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d90:	4b46      	ldr	r3, [pc, #280]	; (8000eac <fnInit+0x5a8>)
 8000d92:	4a45      	ldr	r2, [pc, #276]	; (8000ea8 <fnInit+0x5a4>)
 8000d94:	4943      	ldr	r1, [pc, #268]	; (8000ea4 <fnInit+0x5a0>)
 8000d96:	4846      	ldr	r0, [pc, #280]	; (8000eb0 <fnInit+0x5ac>)
 8000d98:	f002 f920 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <fnInit+0x4a8>
			fnLEDsErrorState();
 8000da2:	f7ff fd99 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000da6:	f001 f97d 	bl	80020a4 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
		}
		break;
 8000daa:	e0ba      	b.n	8000f22 <fnInit+0x61e>
		else if (RxData[5] & 0b10000) {
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <fnInit+0x5b4>)
 8000dae:	795b      	ldrb	r3, [r3, #5]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80b4 	beq.w	8000f22 <fnInit+0x61e>
			iMachineStatus = 60;
 8000dba:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <fnInit+0x5b0>)
 8000dbc:	223c      	movs	r2, #60	; 0x3c
 8000dbe:	701a      	strb	r2, [r3, #0]
		break;
 8000dc0:	e0af      	b.n	8000f22 <fnInit+0x61e>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <fnInit+0x5a0>)
 8000dc4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000dc8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <fnInit+0x5a0>)
 8000dcc:	2208      	movs	r2, #8
 8000dce:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000dd0:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <fnInit+0x5a4>)
 8000dd2:	2222      	movs	r2, #34	; 0x22
 8000dd4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <fnInit+0x5a4>)
 8000dd8:	2240      	movs	r2, #64	; 0x40
 8000dda:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ddc:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <fnInit+0x5a4>)
 8000dde:	2260      	movs	r2, #96	; 0x60
 8000de0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <fnInit+0x5a4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <fnInit+0x5a4>)
 8000dea:	220f      	movs	r2, #15
 8000dec:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <fnInit+0x5a4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <fnInit+0x5a4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <fnInit+0x5a4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <fnInit+0x5a8>)
 8000e02:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <fnInit+0x5a4>)
 8000e04:	4927      	ldr	r1, [pc, #156]	; (8000ea4 <fnInit+0x5a0>)
 8000e06:	482a      	ldr	r0, [pc, #168]	; (8000eb0 <fnInit+0x5ac>)
 8000e08:	f002 f8e8 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <fnInit+0x518>
			fnLEDsErrorState();
 8000e12:	f7ff fd61 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000e16:	f001 f945 	bl	80020a4 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
		}
		break;
 8000e1a:	e085      	b.n	8000f28 <fnInit+0x624>
			iMachineStatus = 70;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <fnInit+0x5b0>)
 8000e1e:	2246      	movs	r2, #70	; 0x46
 8000e20:	701a      	strb	r2, [r3, #0]
		break;
 8000e22:	e081      	b.n	8000f28 <fnInit+0x624>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <fnInit+0x5a0>)
 8000e26:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e2a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <fnInit+0x5a0>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <fnInit+0x5a4>)
 8000e34:	2240      	movs	r2, #64	; 0x40
 8000e36:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <fnInit+0x5a4>)
 8000e3a:	2241      	movs	r2, #65	; 0x41
 8000e3c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <fnInit+0x5a4>)
 8000e40:	2260      	movs	r2, #96	; 0x60
 8000e42:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <fnInit+0x5a4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <fnInit+0x5a4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <fnInit+0x5a4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <fnInit+0x5a4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <fnInit+0x5a4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <fnInit+0x5a8>)
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <fnInit+0x5a4>)
 8000e66:	490f      	ldr	r1, [pc, #60]	; (8000ea4 <fnInit+0x5a0>)
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <fnInit+0x5ac>)
 8000e6a:	f002 f8b7 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <fnInit+0x57a>
			fnLEDsErrorState();
 8000e74:	f7ff fd30 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000e78:	f001 f914 	bl	80020a4 <Error_Handler>
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 8000e7c:	e053      	b.n	8000f26 <fnInit+0x622>
		else if (RxData[5] & 0b00100) {
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <fnInit+0x5b4>)
 8000e80:	795b      	ldrb	r3, [r3, #5]
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d04d      	beq.n	8000f26 <fnInit+0x622>
			iMachineStatus = 80;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <fnInit+0x5b0>)
 8000e8c:	2250      	movs	r2, #80	; 0x50
 8000e8e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <fnInit+0x5b8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	2364      	movs	r3, #100	; 0x64
 8000e98:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <fnInit+0x5bc>)
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <fnInit+0x5c0>)
 8000e9c:	f005 f882 	bl	8005fa4 <HAL_UART_Transmit>
		break;
 8000ea0:	e041      	b.n	8000f26 <fnInit+0x622>
 8000ea2:	bf00      	nop
 8000ea4:	20000254 	.word	0x20000254
 8000ea8:	2000026c 	.word	0x2000026c
 8000eac:	20000274 	.word	0x20000274
 8000eb0:	20000214 	.word	0x20000214
 8000eb4:	20000006 	.word	0x20000006
 8000eb8:	20000294 	.word	0x20000294
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	0800a9ac 	.word	0x0800a9ac
 8000ec4:	200004a0 	.word	0x200004a0

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <fnInit+0x628>)
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	2b27      	cmp	r3, #39	; 0x27
 8000ece:	d123      	bne.n	8000f18 <fnInit+0x614>
			iMachineStatus = 1;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <fnInit+0x62c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <fnInit+0x630>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000edc:	213c      	movs	r1, #60	; 0x3c
 8000ede:	4816      	ldr	r0, [pc, #88]	; (8000f38 <fnInit+0x634>)
 8000ee0:	f004 fcca 	bl	8005878 <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000ee4:	f000 f992 	bl	800120c <fnEncCalibration>

			//SEND ENCODER VALUE AFTER INIT
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <fnInit+0x638>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef2:	ec53 2b17 	vmov	r2, r3, d7
 8000ef6:	4912      	ldr	r1, [pc, #72]	; (8000f40 <fnInit+0x63c>)
 8000ef8:	4812      	ldr	r0, [pc, #72]	; (8000f44 <fnInit+0x640>)
 8000efa:	f007 fa83 	bl	8008404 <siprintf>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <fnInit+0x644>)
 8000f02:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <fnInit+0x644>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <fnInit+0x640>)
 8000f10:	480e      	ldr	r0, [pc, #56]	; (8000f4c <fnInit+0x648>)
 8000f12:	f005 f847 	bl	8005fa4 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000f16:	e007      	b.n	8000f28 <fnInit+0x624>
			fnLEDsErrorState();
 8000f18:	f7ff fcde 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000f1c:	f001 f8c2 	bl	80020a4 <Error_Handler>
		break;
 8000f20:	e002      	b.n	8000f28 <fnInit+0x624>
		break;
 8000f22:	bf00      	nop
 8000f24:	e000      	b.n	8000f28 <fnInit+0x624>
		break;
 8000f26:	bf00      	nop
	}
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000294 	.word	0x20000294
 8000f30:	20000006 	.word	0x20000006
 8000f34:	20000007 	.word	0x20000007
 8000f38:	200002d8 	.word	0x200002d8
 8000f3c:	200002c8 	.word	0x200002c8
 8000f40:	0800a950 	.word	0x0800a950
 8000f44:	20000244 	.word	0x20000244
 8000f48:	20000240 	.word	0x20000240
 8000f4c:	200004a0 	.word	0x200004a0

08000f50 <fnReset>:

void fnReset(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000f54:	4b79      	ldr	r3, [pc, #484]	; (800113c <fnReset+0x1ec>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b50      	cmp	r3, #80	; 0x50
 8000f5a:	f000 80d7 	beq.w	800110c <fnReset+0x1bc>
 8000f5e:	2b50      	cmp	r3, #80	; 0x50
 8000f60:	f300 80ea 	bgt.w	8001138 <fnReset+0x1e8>
 8000f64:	2b46      	cmp	r3, #70	; 0x46
 8000f66:	f000 80a0 	beq.w	80010aa <fnReset+0x15a>
 8000f6a:	2b46      	cmp	r3, #70	; 0x46
 8000f6c:	f300 80e4 	bgt.w	8001138 <fnReset+0x1e8>
 8000f70:	2b19      	cmp	r3, #25
 8000f72:	d069      	beq.n	8001048 <fnReset+0xf8>
 8000f74:	2b19      	cmp	r3, #25
 8000f76:	f300 80df 	bgt.w	8001138 <fnReset+0x1e8>
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d002      	beq.n	8000f84 <fnReset+0x34>
 8000f7e:	2b14      	cmp	r3, #20
 8000f80:	d031      	beq.n	8000fe6 <fnReset+0x96>
			Error_Handler();
		}

		break;
	}
}
 8000f82:	e0d9      	b.n	8001138 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 8000f84:	4b6e      	ldr	r3, [pc, #440]	; (8001140 <fnReset+0x1f0>)
 8000f86:	f240 620a 	movw	r2, #1546	; 0x60a
 8000f8a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000f8c:	4b6c      	ldr	r3, [pc, #432]	; (8001140 <fnReset+0x1f0>)
 8000f8e:	2208      	movs	r2, #8
 8000f90:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000f92:	4b6c      	ldr	r3, [pc, #432]	; (8001144 <fnReset+0x1f4>)
 8000f94:	2222      	movs	r2, #34	; 0x22
 8000f96:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000f98:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <fnReset+0x1f4>)
 8000f9a:	2240      	movs	r2, #64	; 0x40
 8000f9c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000f9e:	4b69      	ldr	r3, [pc, #420]	; (8001144 <fnReset+0x1f4>)
 8000fa0:	2260      	movs	r2, #96	; 0x60
 8000fa2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <fnReset+0x1f4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000faa:	4b66      	ldr	r3, [pc, #408]	; (8001144 <fnReset+0x1f4>)
 8000fac:	2206      	movs	r2, #6
 8000fae:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000fb0:	4b64      	ldr	r3, [pc, #400]	; (8001144 <fnReset+0x1f4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000fb6:	4b63      	ldr	r3, [pc, #396]	; (8001144 <fnReset+0x1f4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <fnReset+0x1f4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000fc2:	4b61      	ldr	r3, [pc, #388]	; (8001148 <fnReset+0x1f8>)
 8000fc4:	4a5f      	ldr	r2, [pc, #380]	; (8001144 <fnReset+0x1f4>)
 8000fc6:	495e      	ldr	r1, [pc, #376]	; (8001140 <fnReset+0x1f0>)
 8000fc8:	4860      	ldr	r0, [pc, #384]	; (800114c <fnReset+0x1fc>)
 8000fca:	f002 f807 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <fnReset+0x8e>
			fnLEDsErrorState();
 8000fd4:	f7ff fc80 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8000fd8:	f001 f864 	bl	80020a4 <Error_Handler>
		break;
 8000fdc:	e0ac      	b.n	8001138 <fnReset+0x1e8>
			iMachineStatus = 20;
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <fnReset+0x1ec>)
 8000fe0:	2214      	movs	r2, #20
 8000fe2:	701a      	strb	r2, [r3, #0]
		break;
 8000fe4:	e0a8      	b.n	8001138 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 8000fe6:	4b56      	ldr	r3, [pc, #344]	; (8001140 <fnReset+0x1f0>)
 8000fe8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fec:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <fnReset+0x1f0>)
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000ff4:	4b53      	ldr	r3, [pc, #332]	; (8001144 <fnReset+0x1f4>)
 8000ff6:	2222      	movs	r2, #34	; 0x22
 8000ff8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000ffa:	4b52      	ldr	r3, [pc, #328]	; (8001144 <fnReset+0x1f4>)
 8000ffc:	2240      	movs	r2, #64	; 0x40
 8000ffe:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001000:	4b50      	ldr	r3, [pc, #320]	; (8001144 <fnReset+0x1f4>)
 8001002:	2260      	movs	r2, #96	; 0x60
 8001004:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001006:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <fnReset+0x1f4>)
 8001008:	2200      	movs	r2, #0
 800100a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 800100c:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <fnReset+0x1f4>)
 800100e:	2207      	movs	r2, #7
 8001010:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <fnReset+0x1f4>)
 8001014:	2200      	movs	r2, #0
 8001016:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <fnReset+0x1f4>)
 800101a:	2200      	movs	r2, #0
 800101c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <fnReset+0x1f4>)
 8001020:	2200      	movs	r2, #0
 8001022:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001024:	4b48      	ldr	r3, [pc, #288]	; (8001148 <fnReset+0x1f8>)
 8001026:	4a47      	ldr	r2, [pc, #284]	; (8001144 <fnReset+0x1f4>)
 8001028:	4945      	ldr	r1, [pc, #276]	; (8001140 <fnReset+0x1f0>)
 800102a:	4848      	ldr	r0, [pc, #288]	; (800114c <fnReset+0x1fc>)
 800102c:	f001 ffd6 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <fnReset+0xf0>
			fnLEDsErrorState();
 8001036:	f7ff fc4f 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800103a:	f001 f833 	bl	80020a4 <Error_Handler>
		break;
 800103e:	e07b      	b.n	8001138 <fnReset+0x1e8>
			iMachineStatus = 25;
 8001040:	4b3e      	ldr	r3, [pc, #248]	; (800113c <fnReset+0x1ec>)
 8001042:	2219      	movs	r2, #25
 8001044:	701a      	strb	r2, [r3, #0]
		break;
 8001046:	e077      	b.n	8001138 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <fnReset+0x1f0>)
 800104a:	f240 620a 	movw	r2, #1546	; 0x60a
 800104e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <fnReset+0x1f0>)
 8001052:	2208      	movs	r2, #8
 8001054:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <fnReset+0x1f4>)
 8001058:	2222      	movs	r2, #34	; 0x22
 800105a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <fnReset+0x1f4>)
 800105e:	2240      	movs	r2, #64	; 0x40
 8001060:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <fnReset+0x1f4>)
 8001064:	2260      	movs	r2, #96	; 0x60
 8001066:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <fnReset+0x1f4>)
 800106a:	2200      	movs	r2, #0
 800106c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <fnReset+0x1f4>)
 8001070:	220f      	movs	r2, #15
 8001072:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <fnReset+0x1f4>)
 8001076:	2200      	movs	r2, #0
 8001078:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <fnReset+0x1f4>)
 800107c:	2200      	movs	r2, #0
 800107e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <fnReset+0x1f4>)
 8001082:	2200      	movs	r2, #0
 8001084:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <fnReset+0x1f8>)
 8001088:	4a2e      	ldr	r2, [pc, #184]	; (8001144 <fnReset+0x1f4>)
 800108a:	492d      	ldr	r1, [pc, #180]	; (8001140 <fnReset+0x1f0>)
 800108c:	482f      	ldr	r0, [pc, #188]	; (800114c <fnReset+0x1fc>)
 800108e:	f001 ffa5 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <fnReset+0x152>
			fnLEDsErrorState();
 8001098:	f7ff fc1e 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800109c:	f001 f802 	bl	80020a4 <Error_Handler>
		break;
 80010a0:	e04a      	b.n	8001138 <fnReset+0x1e8>
			iMachineStatus = 70;
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <fnReset+0x1ec>)
 80010a4:	2246      	movs	r2, #70	; 0x46
 80010a6:	701a      	strb	r2, [r3, #0]
		break;
 80010a8:	e046      	b.n	8001138 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <fnReset+0x1f0>)
 80010ac:	f240 620a 	movw	r2, #1546	; 0x60a
 80010b0:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <fnReset+0x1f0>)
 80010b4:	2208      	movs	r2, #8
 80010b6:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <fnReset+0x1f4>)
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <fnReset+0x1f4>)
 80010c0:	2241      	movs	r2, #65	; 0x41
 80010c2:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <fnReset+0x1f4>)
 80010c6:	2260      	movs	r2, #96	; 0x60
 80010c8:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <fnReset+0x1f4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <fnReset+0x1f4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <fnReset+0x1f4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <fnReset+0x1f4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <fnReset+0x1f4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <fnReset+0x1f8>)
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <fnReset+0x1f4>)
 80010ec:	4914      	ldr	r1, [pc, #80]	; (8001140 <fnReset+0x1f0>)
 80010ee:	4817      	ldr	r0, [pc, #92]	; (800114c <fnReset+0x1fc>)
 80010f0:	f001 ff74 	bl	8002fdc <HAL_CAN_AddTxMessage>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d004      	beq.n	8001104 <fnReset+0x1b4>
			fnLEDsErrorState();
 80010fa:	f7ff fbed 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80010fe:	f000 ffd1 	bl	80020a4 <Error_Handler>
		break;
 8001102:	e019      	b.n	8001138 <fnReset+0x1e8>
			iMachineStatus = 80;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <fnReset+0x1ec>)
 8001106:	2250      	movs	r2, #80	; 0x50
 8001108:	701a      	strb	r2, [r3, #0]
		break;
 800110a:	e015      	b.n	8001138 <fnReset+0x1e8>
		if (RxData[4] == 39) {
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <fnReset+0x200>)
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	2b27      	cmp	r3, #39	; 0x27
 8001112:	d10c      	bne.n	800112e <fnReset+0x1de>
			iMachineStatus = 1;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <fnReset+0x1ec>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <fnReset+0x204>)
 8001122:	f002 feed 	bl	8003f00 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim14);
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <fnReset+0x208>)
 8001128:	f004 fad0 	bl	80056cc <HAL_TIM_Base_Stop_IT>
		break;
 800112c:	e003      	b.n	8001136 <fnReset+0x1e6>
			fnLEDsErrorState();
 800112e:	f7ff fbd3 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001132:	f000 ffb7 	bl	80020a4 <Error_Handler>
		break;
 8001136:	bf00      	nop
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000006 	.word	0x20000006
 8001140:	20000254 	.word	0x20000254
 8001144:	2000026c 	.word	0x2000026c
 8001148:	20000274 	.word	0x20000274
 800114c:	20000214 	.word	0x20000214
 8001150:	20000294 	.word	0x20000294
 8001154:	40020400 	.word	0x40020400
 8001158:	20000454 	.word	0x20000454

0800115c <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <fnEncCounts2Angle+0x3c>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <fnEncCounts2Angle+0x40>)
 800117c:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <fnEncCounts2Angle+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000000c 	.word	0x2000000c
 800119c:	200002cc 	.word	0x200002cc

080011a0 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <fnEncReadCount+0x5c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <fnEncReadCount+0x60>)
 80011ae:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	085b      	lsrs	r3, r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <fnEncReadCount+0x60>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d208      	bcs.n	80011d2 <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 80011c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <fnEncReadCount+0x60>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <fnEncReadCount+0x64>)
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	e003      	b.n	80011da <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <fnEncReadCount+0x60>)
 80011d4:	881a      	ldrh	r2, [r3, #0]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <fnEncReadCount+0x64>)
 80011d8:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount)/2;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <fnEncReadCount+0x64>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffbc 	bl	800115c <fnEncCounts2Angle>
 80011e4:	eeb0 7a40 	vmov.f32	s14, s0
 80011e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <fnEncReadCount+0x68>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200002d8 	.word	0x200002d8
 8001200:	200002c4 	.word	0x200002c4
 8001204:	200002c6 	.word	0x200002c6
 8001208:	200002c8 	.word	0x200002c8

0800120c <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <fnEncCalibration+0x14>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 8001216:	f7ff ffc3 	bl	80011a0 <fnEncReadCount>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40000400 	.word	0x40000400

08001224 <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b5a      	cmp	r3, #90	; 0x5a
 8001234:	d901      	bls.n	800123a <fnMoveAbsolute+0x16>
		iNumber = 90;
 8001236:	235a      	movs	r3, #90	; 0x5a
 8001238:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <fnMoveAbsolute+0xc4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d108      	bne.n	8001256 <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e00e      	b.n	8001274 <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <fnMoveAbsolute+0xc4>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d107      	bne.n	8001270 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <fnMoveAbsolute+0xc8>)
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e001      	b.n	8001274 <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d132      	bne.n	80012e0 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <fnMoveAbsolute+0xcc>)
 800127c:	f240 620a 	movw	r2, #1546	; 0x60a
 8001280:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <fnMoveAbsolute+0xcc>)
 8001284:	2208      	movs	r2, #8
 8001286:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <fnMoveAbsolute+0xd0>)
 800128a:	2222      	movs	r2, #34	; 0x22
 800128c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <fnMoveAbsolute+0xd0>)
 8001290:	227a      	movs	r2, #122	; 0x7a
 8001292:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <fnMoveAbsolute+0xd0>)
 8001296:	2260      	movs	r2, #96	; 0x60
 8001298:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <fnMoveAbsolute+0xd0>)
 800129c:	2200      	movs	r2, #0
 800129e:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <fnMoveAbsolute+0xd0>)
 80012a6:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <fnMoveAbsolute+0xd0>)
 80012b0:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <fnMoveAbsolute+0xd0>)
 80012ba:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0e1b      	lsrs	r3, r3, #24
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <fnMoveAbsolute+0xd0>)
 80012c4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <fnMoveAbsolute+0xd4>)
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <fnMoveAbsolute+0xd0>)
 80012ca:	4909      	ldr	r1, [pc, #36]	; (80012f0 <fnMoveAbsolute+0xcc>)
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <fnMoveAbsolute+0xd8>)
 80012ce:	f001 fe85 	bl	8002fdc <HAL_CAN_AddTxMessage>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 80012d8:	f7ff fafe 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80012dc:	f000 fee2 	bl	80020a4 <Error_Handler>
		}

	}
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000005 	.word	0x20000005
 80012ec:	fffffc18 	.word	0xfffffc18
 80012f0:	20000254 	.word	0x20000254
 80012f4:	2000026c 	.word	0x2000026c
 80012f8:	20000274 	.word	0x20000274
 80012fc:	20000214 	.word	0x20000214

08001300 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	switch (iSingleMachineStatus){
 8001304:	4b97      	ldr	r3, [pc, #604]	; (8001564 <fnSingleMotionAction+0x264>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	3b0a      	subs	r3, #10
 800130a:	2b19      	cmp	r3, #25
 800130c:	f200 8127 	bhi.w	800155e <fnSingleMotionAction+0x25e>
 8001310:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <fnSingleMotionAction+0x18>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001381 	.word	0x08001381
 800131c:	0800155f 	.word	0x0800155f
 8001320:	0800155f 	.word	0x0800155f
 8001324:	0800155f 	.word	0x0800155f
 8001328:	0800155f 	.word	0x0800155f
 800132c:	0800155f 	.word	0x0800155f
 8001330:	0800155f 	.word	0x0800155f
 8001334:	0800155f 	.word	0x0800155f
 8001338:	0800155f 	.word	0x0800155f
 800133c:	0800155f 	.word	0x0800155f
 8001340:	080013f3 	.word	0x080013f3
 8001344:	0800155f 	.word	0x0800155f
 8001348:	0800155f 	.word	0x0800155f
 800134c:	0800155f 	.word	0x0800155f
 8001350:	0800155f 	.word	0x0800155f
 8001354:	08001405 	.word	0x08001405
 8001358:	0800155f 	.word	0x0800155f
 800135c:	0800155f 	.word	0x0800155f
 8001360:	0800155f 	.word	0x0800155f
 8001364:	0800155f 	.word	0x0800155f
 8001368:	08001473 	.word	0x08001473
 800136c:	0800155f 	.word	0x0800155f
 8001370:	0800155f 	.word	0x0800155f
 8001374:	0800155f 	.word	0x0800155f
 8001378:	0800155f 	.word	0x0800155f
 800137c:	080014d5 	.word	0x080014d5
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001380:	4b79      	ldr	r3, [pc, #484]	; (8001568 <fnSingleMotionAction+0x268>)
 8001382:	f240 620a 	movw	r2, #1546	; 0x60a
 8001386:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001388:	4b77      	ldr	r3, [pc, #476]	; (8001568 <fnSingleMotionAction+0x268>)
 800138a:	2208      	movs	r2, #8
 800138c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800138e:	4b77      	ldr	r3, [pc, #476]	; (800156c <fnSingleMotionAction+0x26c>)
 8001390:	2222      	movs	r2, #34	; 0x22
 8001392:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001394:	4b75      	ldr	r3, [pc, #468]	; (800156c <fnSingleMotionAction+0x26c>)
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800139a:	4b74      	ldr	r3, [pc, #464]	; (800156c <fnSingleMotionAction+0x26c>)
 800139c:	2260      	movs	r2, #96	; 0x60
 800139e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80013a0:	4b72      	ldr	r3, [pc, #456]	; (800156c <fnSingleMotionAction+0x26c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80013a6:	4b71      	ldr	r3, [pc, #452]	; (800156c <fnSingleMotionAction+0x26c>)
 80013a8:	221f      	movs	r2, #31
 80013aa:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80013ac:	4b6f      	ldr	r3, [pc, #444]	; (800156c <fnSingleMotionAction+0x26c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80013b2:	4b6e      	ldr	r3, [pc, #440]	; (800156c <fnSingleMotionAction+0x26c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80013b8:	4b6c      	ldr	r3, [pc, #432]	; (800156c <fnSingleMotionAction+0x26c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <fnSingleMotionAction+0x270>)
 80013c0:	4a6a      	ldr	r2, [pc, #424]	; (800156c <fnSingleMotionAction+0x26c>)
 80013c2:	4969      	ldr	r1, [pc, #420]	; (8001568 <fnSingleMotionAction+0x268>)
 80013c4:	486b      	ldr	r0, [pc, #428]	; (8001574 <fnSingleMotionAction+0x274>)
 80013c6:	f001 fe09 	bl	8002fdc <HAL_CAN_AddTxMessage>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <fnSingleMotionAction+0xda>
			fnLEDsErrorState();
 80013d0:	f7ff fa82 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80013d4:	f000 fe66 	bl	80020a4 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 20;
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
		}
		break;
 80013d8:	e0c1      	b.n	800155e <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 20;
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <fnSingleMotionAction+0x264>)
 80013dc:	2214      	movs	r2, #20
 80013de:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 80013e0:	4b65      	ldr	r3, [pc, #404]	; (8001578 <fnSingleMotionAction+0x278>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	2364      	movs	r3, #100	; 0x64
 80013e8:	4964      	ldr	r1, [pc, #400]	; (800157c <fnSingleMotionAction+0x27c>)
 80013ea:	4865      	ldr	r0, [pc, #404]	; (8001580 <fnSingleMotionAction+0x280>)
 80013ec:	f004 fdda 	bl	8005fa4 <HAL_UART_Transmit>
		break;
 80013f0:	e0b5      	b.n	800155e <fnSingleMotionAction+0x25e>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 80013f2:	4b64      	ldr	r3, [pc, #400]	; (8001584 <fnSingleMotionAction+0x284>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff14 	bl	8001224 <fnMoveAbsolute>
		iSingleMachineStatus = 25;
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <fnSingleMotionAction+0x264>)
 80013fe:	2219      	movs	r2, #25
 8001400:	701a      	strb	r2, [r3, #0]
		break;
 8001402:	e0ac      	b.n	800155e <fnSingleMotionAction+0x25e>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8001404:	4b58      	ldr	r3, [pc, #352]	; (8001568 <fnSingleMotionAction+0x268>)
 8001406:	f240 620a 	movw	r2, #1546	; 0x60a
 800140a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800140c:	4b56      	ldr	r3, [pc, #344]	; (8001568 <fnSingleMotionAction+0x268>)
 800140e:	2208      	movs	r2, #8
 8001410:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <fnSingleMotionAction+0x26c>)
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001418:	4b54      	ldr	r3, [pc, #336]	; (800156c <fnSingleMotionAction+0x26c>)
 800141a:	2241      	movs	r2, #65	; 0x41
 800141c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <fnSingleMotionAction+0x26c>)
 8001420:	2260      	movs	r2, #96	; 0x60
 8001422:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <fnSingleMotionAction+0x26c>)
 8001426:	2200      	movs	r2, #0
 8001428:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <fnSingleMotionAction+0x26c>)
 800142c:	2200      	movs	r2, #0
 800142e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <fnSingleMotionAction+0x26c>)
 8001432:	2200      	movs	r2, #0
 8001434:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001436:	4b4d      	ldr	r3, [pc, #308]	; (800156c <fnSingleMotionAction+0x26c>)
 8001438:	2200      	movs	r2, #0
 800143a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800143c:	4b4b      	ldr	r3, [pc, #300]	; (800156c <fnSingleMotionAction+0x26c>)
 800143e:	2200      	movs	r2, #0
 8001440:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001442:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <fnSingleMotionAction+0x270>)
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <fnSingleMotionAction+0x26c>)
 8001446:	4948      	ldr	r1, [pc, #288]	; (8001568 <fnSingleMotionAction+0x268>)
 8001448:	484a      	ldr	r0, [pc, #296]	; (8001574 <fnSingleMotionAction+0x274>)
 800144a:	f001 fdc7 	bl	8002fdc <HAL_CAN_AddTxMessage>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <fnSingleMotionAction+0x15e>
			fnLEDsErrorState();
 8001454:	f7ff fa40 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001458:	f000 fe24 	bl	80020a4 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSingleMachineStatus = 30;
		}
		break;
 800145c:	e07c      	b.n	8001558 <fnSingleMotionAction+0x258>
		else if (RxData[5] & 0b10000) {
 800145e:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <fnSingleMotionAction+0x288>)
 8001460:	795b      	ldrb	r3, [r3, #5]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	d076      	beq.n	8001558 <fnSingleMotionAction+0x258>
			iSingleMachineStatus = 30;
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <fnSingleMotionAction+0x264>)
 800146c:	221e      	movs	r2, #30
 800146e:	701a      	strb	r2, [r3, #0]
		break;
 8001470:	e072      	b.n	8001558 <fnSingleMotionAction+0x258>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <fnSingleMotionAction+0x268>)
 8001474:	f240 620a 	movw	r2, #1546	; 0x60a
 8001478:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <fnSingleMotionAction+0x268>)
 800147c:	2208      	movs	r2, #8
 800147e:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <fnSingleMotionAction+0x26c>)
 8001482:	2222      	movs	r2, #34	; 0x22
 8001484:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <fnSingleMotionAction+0x26c>)
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <fnSingleMotionAction+0x26c>)
 800148e:	2260      	movs	r2, #96	; 0x60
 8001490:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001492:	4b36      	ldr	r3, [pc, #216]	; (800156c <fnSingleMotionAction+0x26c>)
 8001494:	2200      	movs	r2, #0
 8001496:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <fnSingleMotionAction+0x26c>)
 800149a:	220f      	movs	r2, #15
 800149c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <fnSingleMotionAction+0x26c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <fnSingleMotionAction+0x26c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <fnSingleMotionAction+0x26c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <fnSingleMotionAction+0x270>)
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <fnSingleMotionAction+0x26c>)
 80014b4:	492c      	ldr	r1, [pc, #176]	; (8001568 <fnSingleMotionAction+0x268>)
 80014b6:	482f      	ldr	r0, [pc, #188]	; (8001574 <fnSingleMotionAction+0x274>)
 80014b8:	f001 fd90 	bl	8002fdc <HAL_CAN_AddTxMessage>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <fnSingleMotionAction+0x1cc>
			fnLEDsErrorState();
 80014c2:	f7ff fa09 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80014c6:	f000 fded 	bl	80020a4 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 35;
		}
		break;
 80014ca:	e048      	b.n	800155e <fnSingleMotionAction+0x25e>
			iSingleMachineStatus = 35;
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <fnSingleMotionAction+0x264>)
 80014ce:	2223      	movs	r2, #35	; 0x23
 80014d0:	701a      	strb	r2, [r3, #0]
		break;
 80014d2:	e044      	b.n	800155e <fnSingleMotionAction+0x25e>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <fnSingleMotionAction+0x268>)
 80014d6:	f240 620a 	movw	r2, #1546	; 0x60a
 80014da:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <fnSingleMotionAction+0x268>)
 80014de:	2208      	movs	r2, #8
 80014e0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <fnSingleMotionAction+0x26c>)
 80014e4:	2240      	movs	r2, #64	; 0x40
 80014e6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <fnSingleMotionAction+0x26c>)
 80014ea:	2241      	movs	r2, #65	; 0x41
 80014ec:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <fnSingleMotionAction+0x26c>)
 80014f0:	2260      	movs	r2, #96	; 0x60
 80014f2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <fnSingleMotionAction+0x26c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <fnSingleMotionAction+0x26c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <fnSingleMotionAction+0x26c>)
 8001502:	2200      	movs	r2, #0
 8001504:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <fnSingleMotionAction+0x26c>)
 8001508:	2200      	movs	r2, #0
 800150a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <fnSingleMotionAction+0x26c>)
 800150e:	2200      	movs	r2, #0
 8001510:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <fnSingleMotionAction+0x270>)
 8001514:	4a15      	ldr	r2, [pc, #84]	; (800156c <fnSingleMotionAction+0x26c>)
 8001516:	4914      	ldr	r1, [pc, #80]	; (8001568 <fnSingleMotionAction+0x268>)
 8001518:	4816      	ldr	r0, [pc, #88]	; (8001574 <fnSingleMotionAction+0x274>)
 800151a:	f001 fd5f 	bl	8002fdc <HAL_CAN_AddTxMessage>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <fnSingleMotionAction+0x22e>
			fnLEDsErrorState();
 8001524:	f7ff f9d8 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001528:	f000 fdbc 	bl	80020a4 <Error_Handler>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
		}
		break;
 800152c:	e016      	b.n	800155c <fnSingleMotionAction+0x25c>
		else if (RxData[5] & 0b00100) {
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <fnSingleMotionAction+0x288>)
 8001530:	795b      	ldrb	r3, [r3, #5]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d010      	beq.n	800155c <fnSingleMotionAction+0x25c>
			iSingleMachineStatus = 100;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <fnSingleMotionAction+0x264>)
 800153c:	2264      	movs	r2, #100	; 0x64
 800153e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <fnSingleMotionAction+0x28c>)
 8001542:	f004 f8c3 	bl	80056cc <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <fnSingleMotionAction+0x278>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	4910      	ldr	r1, [pc, #64]	; (8001590 <fnSingleMotionAction+0x290>)
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <fnSingleMotionAction+0x280>)
 8001552:	f004 fd27 	bl	8005fa4 <HAL_UART_Transmit>
		break;
 8001556:	e001      	b.n	800155c <fnSingleMotionAction+0x25c>
		break;
 8001558:	bf00      	nop
 800155a:	e000      	b.n	800155e <fnSingleMotionAction+0x25e>
		break;
 800155c:	bf00      	nop
	}
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008
 8001568:	20000254 	.word	0x20000254
 800156c:	2000026c 	.word	0x2000026c
 8001570:	20000274 	.word	0x20000274
 8001574:	20000214 	.word	0x20000214
 8001578:	20000000 	.word	0x20000000
 800157c:	0800a9a4 	.word	0x0800a9a4
 8001580:	200004a0 	.word	0x200004a0
 8001584:	200002d0 	.word	0x200002d0
 8001588:	20000294 	.word	0x20000294
 800158c:	20000370 	.word	0x20000370
 8001590:	0800a9ac 	.word	0x0800a9ac

08001594 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	HAL_UART_Transmit(&huart3, sWorkState, iLengthOut, 100);
 8001598:	4bb3      	ldr	r3, [pc, #716]	; (8001868 <fnSerialMotionAction+0x2d4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29a      	uxth	r2, r3
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	49b2      	ldr	r1, [pc, #712]	; (800186c <fnSerialMotionAction+0x2d8>)
 80015a2:	48b3      	ldr	r0, [pc, #716]	; (8001870 <fnSerialMotionAction+0x2dc>)
 80015a4:	f004 fcfe 	bl	8005fa4 <HAL_UART_Transmit>

	switch (iSerialMachineStatus){
 80015a8:	4bb2      	ldr	r3, [pc, #712]	; (8001874 <fnSerialMotionAction+0x2e0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3b0a      	subs	r3, #10
 80015ae:	2b1e      	cmp	r3, #30
 80015b0:	f200 8158 	bhi.w	8001864 <fnSerialMotionAction+0x2d0>
 80015b4:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <fnSerialMotionAction+0x28>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	08001639 	.word	0x08001639
 80015c0:	08001865 	.word	0x08001865
 80015c4:	08001865 	.word	0x08001865
 80015c8:	08001865 	.word	0x08001865
 80015cc:	08001865 	.word	0x08001865
 80015d0:	08001865 	.word	0x08001865
 80015d4:	08001865 	.word	0x08001865
 80015d8:	08001865 	.word	0x08001865
 80015dc:	08001865 	.word	0x08001865
 80015e0:	08001865 	.word	0x08001865
 80015e4:	0800169b 	.word	0x0800169b
 80015e8:	08001865 	.word	0x08001865
 80015ec:	08001865 	.word	0x08001865
 80015f0:	08001865 	.word	0x08001865
 80015f4:	08001865 	.word	0x08001865
 80015f8:	080016ad 	.word	0x080016ad
 80015fc:	08001865 	.word	0x08001865
 8001600:	08001865 	.word	0x08001865
 8001604:	08001865 	.word	0x08001865
 8001608:	08001865 	.word	0x08001865
 800160c:	0800171d 	.word	0x0800171d
 8001610:	08001865 	.word	0x08001865
 8001614:	08001865 	.word	0x08001865
 8001618:	08001865 	.word	0x08001865
 800161c:	08001865 	.word	0x08001865
 8001620:	0800177f 	.word	0x0800177f
 8001624:	08001865 	.word	0x08001865
 8001628:	08001865 	.word	0x08001865
 800162c:	08001865 	.word	0x08001865
 8001630:	08001865 	.word	0x08001865
 8001634:	080017f9 	.word	0x080017f9
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001638:	4b8f      	ldr	r3, [pc, #572]	; (8001878 <fnSerialMotionAction+0x2e4>)
 800163a:	f240 620a 	movw	r2, #1546	; 0x60a
 800163e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001640:	4b8d      	ldr	r3, [pc, #564]	; (8001878 <fnSerialMotionAction+0x2e4>)
 8001642:	2208      	movs	r2, #8
 8001644:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001646:	4b8d      	ldr	r3, [pc, #564]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001648:	2222      	movs	r2, #34	; 0x22
 800164a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 800164c:	4b8b      	ldr	r3, [pc, #556]	; (800187c <fnSerialMotionAction+0x2e8>)
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001652:	4b8a      	ldr	r3, [pc, #552]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001654:	2260      	movs	r2, #96	; 0x60
 8001656:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001658:	4b88      	ldr	r3, [pc, #544]	; (800187c <fnSerialMotionAction+0x2e8>)
 800165a:	2200      	movs	r2, #0
 800165c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 800165e:	4b87      	ldr	r3, [pc, #540]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001660:	221f      	movs	r2, #31
 8001662:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001664:	4b85      	ldr	r3, [pc, #532]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001666:	2200      	movs	r2, #0
 8001668:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800166a:	4b84      	ldr	r3, [pc, #528]	; (800187c <fnSerialMotionAction+0x2e8>)
 800166c:	2200      	movs	r2, #0
 800166e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001670:	4b82      	ldr	r3, [pc, #520]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001672:	2200      	movs	r2, #0
 8001674:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001676:	4b82      	ldr	r3, [pc, #520]	; (8001880 <fnSerialMotionAction+0x2ec>)
 8001678:	4a80      	ldr	r2, [pc, #512]	; (800187c <fnSerialMotionAction+0x2e8>)
 800167a:	497f      	ldr	r1, [pc, #508]	; (8001878 <fnSerialMotionAction+0x2e4>)
 800167c:	4881      	ldr	r0, [pc, #516]	; (8001884 <fnSerialMotionAction+0x2f0>)
 800167e:	f001 fcad 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <fnSerialMotionAction+0xfe>
			fnLEDsErrorState();
 8001688:	f7ff f926 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 800168c:	f000 fd0a 	bl	80020a4 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 20;
		}
		break;
 8001690:	e0e8      	b.n	8001864 <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 20;
 8001692:	4b78      	ldr	r3, [pc, #480]	; (8001874 <fnSerialMotionAction+0x2e0>)
 8001694:	2214      	movs	r2, #20
 8001696:	701a      	strb	r2, [r3, #0]
		break;
 8001698:	e0e4      	b.n	8001864 <fnSerialMotionAction+0x2d0>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 800169a:	4b7b      	ldr	r3, [pc, #492]	; (8001888 <fnSerialMotionAction+0x2f4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fdc0 	bl	8001224 <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 80016a4:	4b73      	ldr	r3, [pc, #460]	; (8001874 <fnSerialMotionAction+0x2e0>)
 80016a6:	2219      	movs	r2, #25
 80016a8:	701a      	strb	r2, [r3, #0]
		break;
 80016aa:	e0db      	b.n	8001864 <fnSerialMotionAction+0x2d0>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 80016ac:	4b72      	ldr	r3, [pc, #456]	; (8001878 <fnSerialMotionAction+0x2e4>)
 80016ae:	f240 620a 	movw	r2, #1546	; 0x60a
 80016b2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80016b4:	4b70      	ldr	r3, [pc, #448]	; (8001878 <fnSerialMotionAction+0x2e4>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80016ba:	4b70      	ldr	r3, [pc, #448]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016bc:	2240      	movs	r2, #64	; 0x40
 80016be:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80016c0:	4b6e      	ldr	r3, [pc, #440]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016c2:	2241      	movs	r2, #65	; 0x41
 80016c4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80016c6:	4b6d      	ldr	r3, [pc, #436]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016c8:	2260      	movs	r2, #96	; 0x60
 80016ca:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80016cc:	4b6b      	ldr	r3, [pc, #428]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80016d2:	4b6a      	ldr	r3, [pc, #424]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80016e4:	4b65      	ldr	r3, [pc, #404]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80016ea:	4b65      	ldr	r3, [pc, #404]	; (8001880 <fnSerialMotionAction+0x2ec>)
 80016ec:	4a63      	ldr	r2, [pc, #396]	; (800187c <fnSerialMotionAction+0x2e8>)
 80016ee:	4962      	ldr	r1, [pc, #392]	; (8001878 <fnSerialMotionAction+0x2e4>)
 80016f0:	4864      	ldr	r0, [pc, #400]	; (8001884 <fnSerialMotionAction+0x2f0>)
 80016f2:	f001 fc73 	bl	8002fdc <HAL_CAN_AddTxMessage>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <fnSerialMotionAction+0x172>
			fnLEDsErrorState();
 80016fc:	f7ff f8ec 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001700:	f000 fcd0 	bl	80020a4 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 8001704:	e0ab      	b.n	800185e <fnSerialMotionAction+0x2ca>
		else if (RxData[5] & 0b10000) {
 8001706:	4b61      	ldr	r3, [pc, #388]	; (800188c <fnSerialMotionAction+0x2f8>)
 8001708:	795b      	ldrb	r3, [r3, #5]
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a5 	beq.w	800185e <fnSerialMotionAction+0x2ca>
			iSerialMachineStatus = 30;
 8001714:	4b57      	ldr	r3, [pc, #348]	; (8001874 <fnSerialMotionAction+0x2e0>)
 8001716:	221e      	movs	r2, #30
 8001718:	701a      	strb	r2, [r3, #0]
		break;
 800171a:	e0a0      	b.n	800185e <fnSerialMotionAction+0x2ca>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 800171c:	4b56      	ldr	r3, [pc, #344]	; (8001878 <fnSerialMotionAction+0x2e4>)
 800171e:	f240 620a 	movw	r2, #1546	; 0x60a
 8001722:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001724:	4b54      	ldr	r3, [pc, #336]	; (8001878 <fnSerialMotionAction+0x2e4>)
 8001726:	2208      	movs	r2, #8
 8001728:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800172a:	4b54      	ldr	r3, [pc, #336]	; (800187c <fnSerialMotionAction+0x2e8>)
 800172c:	2222      	movs	r2, #34	; 0x22
 800172e:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001730:	4b52      	ldr	r3, [pc, #328]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001736:	4b51      	ldr	r3, [pc, #324]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001738:	2260      	movs	r2, #96	; 0x60
 800173a:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800173c:	4b4f      	ldr	r3, [pc, #316]	; (800187c <fnSerialMotionAction+0x2e8>)
 800173e:	2200      	movs	r2, #0
 8001740:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8001742:	4b4e      	ldr	r3, [pc, #312]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001744:	220f      	movs	r2, #15
 8001746:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001748:	4b4c      	ldr	r3, [pc, #304]	; (800187c <fnSerialMotionAction+0x2e8>)
 800174a:	2200      	movs	r2, #0
 800174c:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800174e:	4b4b      	ldr	r3, [pc, #300]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001750:	2200      	movs	r2, #0
 8001752:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001754:	4b49      	ldr	r3, [pc, #292]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001756:	2200      	movs	r2, #0
 8001758:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800175a:	4b49      	ldr	r3, [pc, #292]	; (8001880 <fnSerialMotionAction+0x2ec>)
 800175c:	4a47      	ldr	r2, [pc, #284]	; (800187c <fnSerialMotionAction+0x2e8>)
 800175e:	4946      	ldr	r1, [pc, #280]	; (8001878 <fnSerialMotionAction+0x2e4>)
 8001760:	4848      	ldr	r0, [pc, #288]	; (8001884 <fnSerialMotionAction+0x2f0>)
 8001762:	f001 fc3b 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <fnSerialMotionAction+0x1e2>
			fnLEDsErrorState();
 800176c:	f7ff f8b4 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 8001770:	f000 fc98 	bl	80020a4 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 8001774:	e076      	b.n	8001864 <fnSerialMotionAction+0x2d0>
			iSerialMachineStatus = 35;
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <fnSerialMotionAction+0x2e0>)
 8001778:	2223      	movs	r2, #35	; 0x23
 800177a:	701a      	strb	r2, [r3, #0]
		break;
 800177c:	e072      	b.n	8001864 <fnSerialMotionAction+0x2d0>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <fnSerialMotionAction+0x2e4>)
 8001780:	f240 620a 	movw	r2, #1546	; 0x60a
 8001784:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <fnSerialMotionAction+0x2e4>)
 8001788:	2208      	movs	r2, #8
 800178a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 800178c:	4b3b      	ldr	r3, [pc, #236]	; (800187c <fnSerialMotionAction+0x2e8>)
 800178e:	2240      	movs	r2, #64	; 0x40
 8001790:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <fnSerialMotionAction+0x2e8>)
 8001794:	2241      	movs	r2, #65	; 0x41
 8001796:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001798:	4b38      	ldr	r3, [pc, #224]	; (800187c <fnSerialMotionAction+0x2e8>)
 800179a:	2260      	movs	r2, #96	; 0x60
 800179c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <fnSerialMotionAction+0x2e8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <fnSerialMotionAction+0x2e8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <fnSerialMotionAction+0x2e8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <fnSerialMotionAction+0x2e8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <fnSerialMotionAction+0x2e8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <fnSerialMotionAction+0x2ec>)
 80017be:	4a2f      	ldr	r2, [pc, #188]	; (800187c <fnSerialMotionAction+0x2e8>)
 80017c0:	492d      	ldr	r1, [pc, #180]	; (8001878 <fnSerialMotionAction+0x2e4>)
 80017c2:	4830      	ldr	r0, [pc, #192]	; (8001884 <fnSerialMotionAction+0x2f0>)
 80017c4:	f001 fc0a 	bl	8002fdc <HAL_CAN_AddTxMessage>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <fnSerialMotionAction+0x244>
			fnLEDsErrorState();
 80017ce:	f7ff f883 	bl	80008d8 <fnLEDsErrorState>
			Error_Handler();
 80017d2:	f000 fc67 	bl	80020a4 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 80017d6:	e044      	b.n	8001862 <fnSerialMotionAction+0x2ce>
		else if (RxData[5] & 0b00100) {
 80017d8:	4b2c      	ldr	r3, [pc, #176]	; (800188c <fnSerialMotionAction+0x2f8>)
 80017da:	795b      	ldrb	r3, [r3, #5]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d03e      	beq.n	8001862 <fnSerialMotionAction+0x2ce>
			iSerialCounter++;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <fnSerialMotionAction+0x2fc>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <fnSerialMotionAction+0x2fc>)
 80017ee:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <fnSerialMotionAction+0x2e0>)
 80017f2:	2228      	movs	r2, #40	; 0x28
 80017f4:	701a      	strb	r2, [r3, #0]
		break;
 80017f6:	e034      	b.n	8001862 <fnSerialMotionAction+0x2ce>

	case 40:
		//REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <fnSerialMotionAction+0x2fc>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <fnSerialMotionAction+0x300>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d114      	bne.n	8001832 <fnSerialMotionAction+0x29e>
			iSerialMachineStatus = 100;
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <fnSerialMotionAction+0x2e0>)
 800180a:	2264      	movs	r2, #100	; 0x64
 800180c:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <fnSerialMotionAction+0x304>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <fnSerialMotionAction+0x300>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 800181a:	4820      	ldr	r0, [pc, #128]	; (800189c <fnSerialMotionAction+0x308>)
 800181c:	f003 feb7 	bl	800558e <HAL_TIM_Base_Stop>
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, sReadyState, iLengthOut, 100);
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <fnSerialMotionAction+0x2d4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	491d      	ldr	r1, [pc, #116]	; (80018a0 <fnSerialMotionAction+0x30c>)
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <fnSerialMotionAction+0x2dc>)
 800182c:	f004 fbba 	bl	8005fa4 <HAL_UART_Transmit>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 8001830:	e018      	b.n	8001864 <fnSerialMotionAction+0x2d0>
		else if (iSerialCounter % 2 == 0) {
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <fnSerialMotionAction+0x2fc>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <fnSerialMotionAction+0x2bc>
			iPosition = iSerialRange;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <fnSerialMotionAction+0x304>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a10      	ldr	r2, [pc, #64]	; (8001888 <fnSerialMotionAction+0x2f4>)
 8001846:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <fnSerialMotionAction+0x2e0>)
 800184a:	220a      	movs	r2, #10
 800184c:	701a      	strb	r2, [r3, #0]
		break;
 800184e:	e009      	b.n	8001864 <fnSerialMotionAction+0x2d0>
			iPosition = 0;
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <fnSerialMotionAction+0x2f4>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <fnSerialMotionAction+0x2e0>)
 8001858:	220a      	movs	r2, #10
 800185a:	701a      	strb	r2, [r3, #0]
		break;
 800185c:	e002      	b.n	8001864 <fnSerialMotionAction+0x2d0>
		break;
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <fnSerialMotionAction+0x2d0>
		break;
 8001862:	bf00      	nop
	}
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000000 	.word	0x20000000
 800186c:	0800a9a4 	.word	0x0800a9a4
 8001870:	200004a0 	.word	0x200004a0
 8001874:	20000009 	.word	0x20000009
 8001878:	20000254 	.word	0x20000254
 800187c:	2000026c 	.word	0x2000026c
 8001880:	20000274 	.word	0x20000274
 8001884:	20000214 	.word	0x20000214
 8001888:	200002d0 	.word	0x200002d0
 800188c:	20000294 	.word	0x20000294
 8001890:	20000010 	.word	0x20000010
 8001894:	20000018 	.word	0x20000018
 8001898:	20000014 	.word	0x20000014
 800189c:	200003bc 	.word	0x200003bc
 80018a0:	0800a9ac 	.word	0x0800a9ac

080018a4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d112      	bne.n	80018dc <HAL_TIM_PeriodElapsedCallback+0x38>
		if (iHomingStatus != 1) {
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d006      	beq.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 80018be:	f7ff f821 	bl	8000904 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80018c2:	2101      	movs	r1, #1
 80018c4:	483c      	ldr	r0, [pc, #240]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018c6:	f002 fb34 	bl	8003f32 <HAL_GPIO_TogglePin>
	else if(htim -> Instance == TIM14){
		fnReset();
	}


}
 80018ca:	e06d      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2101      	movs	r1, #1
 80018d0:	4839      	ldr	r0, [pc, #228]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018d2:	f002 fb15 	bl	8003f00 <HAL_GPIO_WritePin>
			fnEncReadCount();
 80018d6:	f7ff fc63 	bl	80011a0 <fnEncReadCount>
}
 80018da:	e065      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM7){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a36      	ldr	r2, [pc, #216]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d106      	bne.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 80018e6:	f7ff fd0b 	bl	8001300 <fnSingleMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	4832      	ldr	r0, [pc, #200]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80018ee:	f002 fb20 	bl	8003f32 <HAL_GPIO_TogglePin>
}
 80018f2:	e059      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM10){
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d106      	bne.n	800190c <HAL_TIM_PeriodElapsedCallback+0x68>
		fnSerialMotionAction();
 80018fe:	f7ff fe49 	bl	8001594 <fnSerialMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	482c      	ldr	r0, [pc, #176]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001906:	f002 fb14 	bl	8003f32 <HAL_GPIO_TogglePin>
}
 800190a:	e04d      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM11){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d141      	bne.n	800199a <HAL_TIM_PeriodElapsedCallback+0xf6>
		if (iMode == 0 && iSingleMachineStatus != 100) {
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11b      	bne.n	8001958 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d017      	beq.n	8001958 <HAL_TIM_PeriodElapsedCallback+0xb4>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001932:	ec53 2b17 	vmov	r2, r3, d7
 8001936:	4927      	ldr	r1, [pc, #156]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001938:	4827      	ldr	r0, [pc, #156]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800193a:	f006 fd63 	bl	8008404 <siprintf>
 800193e:	4603      	mov	r3, r0
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001942:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29a      	uxth	r2, r3
 800194a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194e:	4922      	ldr	r1, [pc, #136]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001950:	4823      	ldr	r0, [pc, #140]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001952:	f004 fb27 	bl	8005fa4 <HAL_UART_Transmit>
}
 8001956:	e027      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
		else if (iMode == 1 && iSerialMachineStatus != 100) {
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d122      	bne.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d01e      	beq.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
			length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001974:	ec53 2b17 	vmov	r2, r3, d7
 8001978:	4916      	ldr	r1, [pc, #88]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800197a:	4817      	ldr	r0, [pc, #92]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800197c:	f006 fd42 	bl	8008404 <siprintf>
 8001980:	4603      	mov	r3, r0
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001984:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29a      	uxth	r2, r3
 800198c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001990:	4911      	ldr	r1, [pc, #68]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001992:	4813      	ldr	r0, [pc, #76]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001994:	f004 fb06 	bl	8005fa4 <HAL_UART_Transmit>
}
 8001998:	e006      	b.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
	else if(htim -> Instance == TIM14){
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d101      	bne.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x104>
		fnReset();
 80019a4:	f7ff fad4 	bl	8000f50 <fnReset>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40001000 	.word	0x40001000
 80019b4:	20000007 	.word	0x20000007
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40001400 	.word	0x40001400
 80019c0:	40014400 	.word	0x40014400
 80019c4:	40014800 	.word	0x40014800
 80019c8:	20000004 	.word	0x20000004
 80019cc:	20000008 	.word	0x20000008
 80019d0:	200002c8 	.word	0x200002c8
 80019d4:	0800a950 	.word	0x0800a950
 80019d8:	20000244 	.word	0x20000244
 80019dc:	20000240 	.word	0x20000240
 80019e0:	200004a0 	.word	0x200004a0
 80019e4:	20000009 	.word	0x20000009
 80019e8:	40002000 	.word	0x40002000

080019ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fc:	d129      	bne.n	8001a52 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x70>)
 8001a00:	f240 620a 	movw	r2, #1546	; 0x60a
 8001a04:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x70>)
 8001a08:	2208      	movs	r2, #8
 8001a0a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a14:	2241      	movs	r2, #65	; 0x41
 8001a16:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a1a:	2260      	movs	r2, #96	; 0x60
 8001a1c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x78>)
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a40:	4906      	ldr	r1, [pc, #24]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x70>)
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001a44:	f001 faca 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8001a4e:	f000 fb29 	bl	80020a4 <Error_Handler>

		}
	}
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000254 	.word	0x20000254
 8001a60:	2000026c 	.word	0x2000026c
 8001a64:	20000274 	.word	0x20000274
 8001a68:	20000214 	.word	0x20000214

08001a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a70:	f000 fffe 	bl	8002a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a74:	f000 f874 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a78:	f7fe fe40 	bl	80006fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a7c:	f000 fec8 	bl	8002810 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a80:	f000 ff42 	bl	8002908 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8001a84:	f7fe fdb6 	bl	80005f4 <MX_CAN1_Init>
  MX_TIM6_Init();
 8001a88:	f000 fce6 	bl	8002458 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001a8c:	f000 fc8e 	bl	80023ac <MX_TIM3_Init>
  MX_TIM7_Init();
 8001a90:	f000 fd1a 	bl	80024c8 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001a94:	f000 fd50 	bl	8002538 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001a98:	f000 fd72 	bl	8002580 <MX_TIM11_Init>
  MX_TIM14_Init();
 8001a9c:	f000 fd94 	bl	80025c8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001aa0:	f7fe fe2c 	bl	80006fc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001aa4:	f000 feb4 	bl	8002810 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001aa8:	f000 ff2e 	bl	8002908 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001aac:	f7fe fda2 	bl	80005f4 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001ab0:	f000 fcd2 	bl	8002458 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001ab4:	f000 fc7a 	bl	80023ac <MX_TIM3_Init>
	MX_TIM7_Init();
 8001ab8:	f000 fd06 	bl	80024c8 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001abc:	f000 fd3c 	bl	8002538 <MX_TIM10_Init>
	MX_TIM14_Init();
 8001ac0:	f000 fd82 	bl	80025c8 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4921      	ldr	r1, [pc, #132]	; (8001b4c <main+0xe0>)
 8001ac8:	4821      	ldr	r0, [pc, #132]	; (8001b50 <main+0xe4>)
 8001aca:	f004 fafe 	bl	80060ca <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8001ace:	4821      	ldr	r0, [pc, #132]	; (8001b54 <main+0xe8>)
 8001ad0:	f001 fa40 	bl	8002f54 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <main+0xec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <main+0xec>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <main+0xec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <main+0xec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <main+0xec>)
 8001aee:	2202      	movs	r2, #2
 8001af0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <main+0xec>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <main+0xf0>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <main+0xf0>)
 8001b00:	2212      	movs	r2, #18
 8001b02:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <main+0xf0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <main+0xf0>)
 8001b0c:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001b10:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <main+0xf0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <main+0xf0>)
 8001b1a:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001b1e:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <main+0xf0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <main+0xf0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <main+0xf0>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <main+0xf0>)
 8001b34:	2214      	movs	r2, #20
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001b38:	4908      	ldr	r1, [pc, #32]	; (8001b5c <main+0xf0>)
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <main+0xe8>)
 8001b3c:	f001 f91e 	bl	8002d7c <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001b40:	2102      	movs	r1, #2
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <main+0xe8>)
 8001b44:	f001 fc37 	bl	80033b6 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001b48:	e7fe      	b.n	8001b48 <main+0xdc>
 8001b4a:	bf00      	nop
 8001b4c:	2000023c 	.word	0x2000023c
 8001b50:	200004a0 	.word	0x200004a0
 8001b54:	20000214 	.word	0x20000214
 8001b58:	20000254 	.word	0x20000254
 8001b5c:	2000029c 	.word	0x2000029c

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b8      	sub	sp, #224	; 0xe0
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b6a:	2234      	movs	r2, #52	; 0x34
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fffe 	bl	8007b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	2290      	movs	r2, #144	; 0x90
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 ffef 	bl	8007b70 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b92:	f002 fb49 	bl	8004228 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <SystemClock_Config+0x128>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a3b      	ldr	r2, [pc, #236]	; (8001c88 <SystemClock_Config+0x128>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <SystemClock_Config+0x128>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <SystemClock_Config+0x12c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bb6:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <SystemClock_Config+0x12c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <SystemClock_Config+0x12c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be6:	2304      	movs	r3, #4
 8001be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001bec:	2360      	movs	r3, #96	; 0x60
 8001bee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fb6d 	bl	80042e8 <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001c14:	f000 fa46 	bl	80020a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c18:	f002 fb16 	bl	8004248 <HAL_PWREx_EnableOverDrive>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c22:	f000 fa3f 	bl	80020a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c26:	230f      	movs	r3, #15
 8001c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c4a:	2103      	movs	r1, #3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fdf9 	bl	8004844 <HAL_RCC_ClockConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001c58:	f000 fa24 	bl	80020a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <SystemClock_Config+0x130>)
 8001c5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f80e 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001c7a:	f000 fa13 	bl	80020a4 <Error_Handler>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	37e0      	adds	r7, #224	; 0xe0
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	00200100 	.word	0x00200100

08001c94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4aab      	ldr	r2, [pc, #684]	; (8001f50 <HAL_UART_RxCpltCallback+0x2bc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f040 81c8 	bne.w	8002038 <HAL_UART_RxCpltCallback+0x3a4>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001ca8:	2204      	movs	r2, #4
 8001caa:	49aa      	ldr	r1, [pc, #680]	; (8001f54 <HAL_UART_RxCpltCallback+0x2c0>)
 8001cac:	48aa      	ldr	r0, [pc, #680]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001cae:	f006 fbc9 	bl	8008444 <strncmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 8001cb8:	4ba8      	ldr	r3, [pc, #672]	; (8001f5c <HAL_UART_RxCpltCallback+0x2c8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 8001cbe:	4ba8      	ldr	r3, [pc, #672]	; (8001f60 <HAL_UART_RxCpltCallback+0x2cc>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8001cc4:	48a7      	ldr	r0, [pc, #668]	; (8001f64 <HAL_UART_RxCpltCallback+0x2d0>)
 8001cc6:	f003 fc89 	bl	80055dc <HAL_TIM_Base_Start_IT>
 8001cca:	e1bb      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 8001ccc:	2204      	movs	r2, #4
 8001cce:	49a6      	ldr	r1, [pc, #664]	; (8001f68 <HAL_UART_RxCpltCallback+0x2d4>)
 8001cd0:	48a1      	ldr	r0, [pc, #644]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001cd2:	f006 fbb7 	bl	8008444 <strncmp>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 8001cdc:	4ba3      	ldr	r3, [pc, #652]	; (8001f6c <HAL_UART_RxCpltCallback+0x2d8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	48a2      	ldr	r0, [pc, #648]	; (8001f70 <HAL_UART_RxCpltCallback+0x2dc>)
 8001ce6:	f002 f924 	bl	8003f32 <HAL_GPIO_TogglePin>
 8001cea:	e1ab      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 8001cec:	2204      	movs	r2, #4
 8001cee:	49a1      	ldr	r1, [pc, #644]	; (8001f74 <HAL_UART_RxCpltCallback+0x2e0>)
 8001cf0:	4899      	ldr	r0, [pc, #612]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001cf2:	f006 fba7 	bl	8008444 <strncmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d107      	bne.n	8001d0c <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 8001cfc:	4b9b      	ldr	r3, [pc, #620]	; (8001f6c <HAL_UART_RxCpltCallback+0x2d8>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	489a      	ldr	r0, [pc, #616]	; (8001f70 <HAL_UART_RxCpltCallback+0x2dc>)
 8001d06:	f002 f914 	bl	8003f32 <HAL_GPIO_TogglePin>
 8001d0a:	e19b      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	499a      	ldr	r1, [pc, #616]	; (8001f78 <HAL_UART_RxCpltCallback+0x2e4>)
 8001d10:	4891      	ldr	r0, [pc, #580]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d12:	f006 fb97 	bl	8008444 <strncmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <HAL_UART_RxCpltCallback+0x96>
			iSelected_leg = 0;
 8001d1c:	4b97      	ldr	r3, [pc, #604]	; (8001f7c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001d22:	4897      	ldr	r0, [pc, #604]	; (8001f80 <HAL_UART_RxCpltCallback+0x2ec>)
 8001d24:	f003 fc5a 	bl	80055dc <HAL_TIM_Base_Start_IT>
 8001d28:	e18c      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4995      	ldr	r1, [pc, #596]	; (8001f84 <HAL_UART_RxCpltCallback+0x2f0>)
 8001d2e:	488a      	ldr	r0, [pc, #552]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d30:	f006 fb88 	bl	8008444 <strncmp>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_UART_RxCpltCallback+0xb4>
			iSelected_leg = 1;
 8001d3a:	4b90      	ldr	r3, [pc, #576]	; (8001f7c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001d40:	488f      	ldr	r0, [pc, #572]	; (8001f80 <HAL_UART_RxCpltCallback+0x2ec>)
 8001d42:	f003 fc4b 	bl	80055dc <HAL_TIM_Base_Start_IT>
 8001d46:	e17d      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001d48:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	2b50      	cmp	r3, #80	; 0x50
 8001d4e:	d113      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0xe4>

			if(iMode == 0){
 8001d50:	4b86      	ldr	r3, [pc, #536]	; (8001f6c <HAL_UART_RxCpltCallback+0x2d8>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 8174 	bne.w	8002044 <HAL_UART_RxCpltCallback+0x3b0>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001d5c:	487e      	ldr	r0, [pc, #504]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d5e:	f005 fed9 	bl	8007b14 <atoi>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_UART_RxCpltCallback+0x2f4>)
 8001d68:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_UART_RxCpltCallback+0x2f8>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001d70:	4887      	ldr	r0, [pc, #540]	; (8001f90 <HAL_UART_RxCpltCallback+0x2fc>)
 8001d72:	f003 fc33 	bl	80055dc <HAL_TIM_Base_Start_IT>
 8001d76:	e165      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001d78:	2204      	movs	r2, #4
 8001d7a:	4986      	ldr	r1, [pc, #536]	; (8001f94 <HAL_UART_RxCpltCallback+0x300>)
 8001d7c:	4876      	ldr	r0, [pc, #472]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d7e:	f006 fb61 	bl	8008444 <strncmp>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11f      	bne.n	8001dc8 <HAL_UART_RxCpltCallback+0x134>

			if(iMode == 1 && iSelected_leg != 100 && iSerialReps != 0 && iSerialRange != 0){
 8001d88:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <HAL_UART_RxCpltCallback+0x2d8>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	f040 8158 	bne.w	8002044 <HAL_UART_RxCpltCallback+0x3b0>
 8001d94:	4b79      	ldr	r3, [pc, #484]	; (8001f7c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	f000 8152 	beq.w	8002044 <HAL_UART_RxCpltCallback+0x3b0>
 8001da0:	4b7d      	ldr	r3, [pc, #500]	; (8001f98 <HAL_UART_RxCpltCallback+0x304>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 814d 	beq.w	8002044 <HAL_UART_RxCpltCallback+0x3b0>
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <HAL_UART_RxCpltCallback+0x308>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8148 	beq.w	8002044 <HAL_UART_RxCpltCallback+0x3b0>
				iSerialCounter = 0;
 8001db4:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <HAL_UART_RxCpltCallback+0x30c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 8001dba:	4b7a      	ldr	r3, [pc, #488]	; (8001fa4 <HAL_UART_RxCpltCallback+0x310>)
 8001dbc:	220a      	movs	r2, #10
 8001dbe:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 8001dc0:	4879      	ldr	r0, [pc, #484]	; (8001fa8 <HAL_UART_RxCpltCallback+0x314>)
 8001dc2:	f003 fc0b 	bl	80055dc <HAL_TIM_Base_Start_IT>
 8001dc6:	e13d      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 8001dc8:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dca:	78db      	ldrb	r3, [r3, #3]
 8001dcc:	2b4e      	cmp	r3, #78	; 0x4e
 8001dce:	d10d      	bne.n	8001dec <HAL_UART_RxCpltCallback+0x158>
			if(iMode == 1){
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_UART_RxCpltCallback+0x2d8>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	f040 8134 	bne.w	8002044 <HAL_UART_RxCpltCallback+0x3b0>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 8001ddc:	485e      	ldr	r0, [pc, #376]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dde:	f005 fe99 	bl	8007b14 <atoi>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_UART_RxCpltCallback+0x304>)
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e12b      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 8001dec:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dee:	78db      	ldrb	r3, [r3, #3]
 8001df0:	2b52      	cmp	r3, #82	; 0x52
 8001df2:	d111      	bne.n	8001e18 <HAL_UART_RxCpltCallback+0x184>
			if(iMode == 1){
 8001df4:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_UART_RxCpltCallback+0x2d8>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 8122 	bne.w	8002044 <HAL_UART_RxCpltCallback+0x3b0>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 8001e00:	4855      	ldr	r0, [pc, #340]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001e02:	f005 fe87 	bl	8007b14 <atoi>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <HAL_UART_RxCpltCallback+0x308>)
 8001e0c:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_UART_RxCpltCallback+0x308>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <HAL_UART_RxCpltCallback+0x2f4>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e115      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
			}
		}

		//GENERAL STOP COMMAND [HALT]
		else if(strncmp(sUserMessage, sGeneralStop, 4) == 0){
 8001e18:	2204      	movs	r2, #4
 8001e1a:	4964      	ldr	r1, [pc, #400]	; (8001fac <HAL_UART_RxCpltCallback+0x318>)
 8001e1c:	484e      	ldr	r0, [pc, #312]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001e1e:	f006 fb11 	bl	8008444 <strncmp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d166      	bne.n	8001ef6 <HAL_UART_RxCpltCallback+0x262>

			//QUICK STOP
			TxHeader.StdId = 0x60A;
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_UART_RxCpltCallback+0x31c>)
 8001e2a:	f240 620a 	movw	r2, #1546	; 0x60a
 8001e2e:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001e30:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HAL_UART_RxCpltCallback+0x31c>)
 8001e32:	2208      	movs	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e38:	2222      	movs	r2, #34	; 0x22
 8001e3a:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e44:	2260      	movs	r2, #96	; 0x60
 8001e46:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001e48:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x02;
 8001e4e:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e50:	2202      	movs	r2, #2
 8001e52:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001e54:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001e5a:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001e60:	4b54      	ldr	r3, [pc, #336]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HAL_UART_RxCpltCallback+0x324>)
 8001e68:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e6a:	4951      	ldr	r1, [pc, #324]	; (8001fb0 <HAL_UART_RxCpltCallback+0x31c>)
 8001e6c:	4853      	ldr	r0, [pc, #332]	; (8001fbc <HAL_UART_RxCpltCallback+0x328>)
 8001e6e:	f001 f8b5 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_UART_RxCpltCallback+0x1ee>
				fnLEDsErrorState();
 8001e78:	f7fe fd2e 	bl	80008d8 <fnLEDsErrorState>
				Error_Handler();
 8001e7c:	f000 f912 	bl	80020a4 <Error_Handler>
 8001e80:	e0e0      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
			}
			else{
				//DISBALE VOLTAGE
				TxHeader.StdId = 0x60A;
 8001e82:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <HAL_UART_RxCpltCallback+0x31c>)
 8001e84:	f240 620a 	movw	r2, #1546	; 0x60a
 8001e88:	601a      	str	r2, [r3, #0]
				TxHeader.DLC = 8;
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_UART_RxCpltCallback+0x31c>)
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	611a      	str	r2, [r3, #16]
				TxData[0] = 0x22;
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e92:	2222      	movs	r2, #34	; 0x22
 8001e94:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x40;
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e98:	2240      	movs	r2, #64	; 0x40
 8001e9a:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0x60;
 8001e9c:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001e9e:	2260      	movs	r2, #96	; 0x60
 8001ea0:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0x00;
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0x00;
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	711a      	strb	r2, [r3, #4]
				TxData[5] = 0x00;
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	715a      	strb	r2, [r3, #5]
				TxData[6] = 0x00;
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	719a      	strb	r2, [r3, #6]
				TxData[7] = 0x00;
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	71da      	strb	r2, [r3, #7]

				if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_UART_RxCpltCallback+0x324>)
 8001ec2:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <HAL_UART_RxCpltCallback+0x320>)
 8001ec4:	493a      	ldr	r1, [pc, #232]	; (8001fb0 <HAL_UART_RxCpltCallback+0x31c>)
 8001ec6:	483d      	ldr	r0, [pc, #244]	; (8001fbc <HAL_UART_RxCpltCallback+0x328>)
 8001ec8:	f001 f888 	bl	8002fdc <HAL_CAN_AddTxMessage>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <HAL_UART_RxCpltCallback+0x248>
					fnLEDsErrorState();
 8001ed2:	f7fe fd01 	bl	80008d8 <fnLEDsErrorState>
					Error_Handler();
 8001ed6:	f000 f8e5 	bl	80020a4 <Error_Handler>
 8001eda:	e0b3      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
				}
				else {
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ee2:	4823      	ldr	r0, [pc, #140]	; (8001f70 <HAL_UART_RxCpltCallback+0x2dc>)
 8001ee4:	f002 f80c 	bl	8003f00 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart3, "STOP", 4, 100);
 8001ee8:	2364      	movs	r3, #100	; 0x64
 8001eea:	2204      	movs	r2, #4
 8001eec:	4934      	ldr	r1, [pc, #208]	; (8001fc0 <HAL_UART_RxCpltCallback+0x32c>)
 8001eee:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <HAL_UART_RxCpltCallback+0x330>)
 8001ef0:	f004 f858 	bl	8005fa4 <HAL_UART_Transmit>
 8001ef4:	e0a6      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
				}
			}
		}

		//RESET COMMAND [RSET]
		else if(strncmp(sUserMessage, sReset, 4) == 0){
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	4933      	ldr	r1, [pc, #204]	; (8001fc8 <HAL_UART_RxCpltCallback+0x334>)
 8001efa:	4817      	ldr	r0, [pc, #92]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001efc:	f006 faa2 	bl	8008444 <strncmp>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d162      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0x338>
			iMachineStatus = 10;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_UART_RxCpltCallback+0x2c8>)
 8001f08:	220a      	movs	r2, #10
 8001f0a:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 100;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_UART_RxCpltCallback+0x2cc>)
 8001f0e:	2264      	movs	r2, #100	; 0x64
 8001f10:	701a      	strb	r2, [r3, #0]
			iMode = 100;
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_UART_RxCpltCallback+0x2d8>)
 8001f14:	2264      	movs	r2, #100	; 0x64
 8001f16:	701a      	strb	r2, [r3, #0]

			iSerialMachineStatus = 100;
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_UART_RxCpltCallback+0x310>)
 8001f1a:	2264      	movs	r2, #100	; 0x64
 8001f1c:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_UART_RxCpltCallback+0x308>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_UART_RxCpltCallback+0x304>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]

			iSingleMachineStatus = 100;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_UART_RxCpltCallback+0x2f8>)
 8001f2c:	2264      	movs	r2, #100	; 0x64
 8001f2e:	701a      	strb	r2, [r3, #0]
			iPosition = 0;
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_UART_RxCpltCallback+0x2f4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim7);
 8001f36:	4816      	ldr	r0, [pc, #88]	; (8001f90 <HAL_UART_RxCpltCallback+0x2fc>)
 8001f38:	f003 fbc8 	bl	80056cc <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim10);
 8001f3c:	481a      	ldr	r0, [pc, #104]	; (8001fa8 <HAL_UART_RxCpltCallback+0x314>)
 8001f3e:	f003 fbc5 	bl	80056cc <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <HAL_UART_RxCpltCallback+0x2dc>)
 8001f4a:	f001 ffd9 	bl	8003f00 <HAL_GPIO_WritePin>
 8001f4e:	e079      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
 8001f50:	40004800 	.word	0x40004800
 8001f54:	0800a964 	.word	0x0800a964
 8001f58:	2000023c 	.word	0x2000023c
 8001f5c:	20000006 	.word	0x20000006
 8001f60:	20000007 	.word	0x20000007
 8001f64:	20000324 	.word	0x20000324
 8001f68:	0800a9b4 	.word	0x0800a9b4
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	40020400 	.word	0x40020400
 8001f74:	0800a9bc 	.word	0x0800a9bc
 8001f78:	0800a9cc 	.word	0x0800a9cc
 8001f7c:	20000005 	.word	0x20000005
 8001f80:	20000408 	.word	0x20000408
 8001f84:	0800a9c4 	.word	0x0800a9c4
 8001f88:	200002d0 	.word	0x200002d0
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000370 	.word	0x20000370
 8001f94:	0800a97c 	.word	0x0800a97c
 8001f98:	20000018 	.word	0x20000018
 8001f9c:	20000014 	.word	0x20000014
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	20000009 	.word	0x20000009
 8001fa8:	200003bc 	.word	0x200003bc
 8001fac:	0800a984 	.word	0x0800a984
 8001fb0:	20000254 	.word	0x20000254
 8001fb4:	2000026c 	.word	0x2000026c
 8001fb8:	20000274 	.word	0x20000274
 8001fbc:	20000214 	.word	0x20000214
 8001fc0:	0800a95c 	.word	0x0800a95c
 8001fc4:	200004a0 	.word	0x200004a0
 8001fc8:	0800a98c 	.word	0x0800a98c
		}

		//CONTINUE COMMAND [CONT]
		else if(strncmp(sUserMessage, sContinue, 4) == 0){
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4922      	ldr	r1, [pc, #136]	; (8002058 <HAL_UART_RxCpltCallback+0x3c4>)
 8001fd0:	4822      	ldr	r0, [pc, #136]	; (800205c <HAL_UART_RxCpltCallback+0x3c8>)
 8001fd2:	f006 fa37 	bl	8008444 <strncmp>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d133      	bne.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
			iMachineStatus=10;
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_UART_RxCpltCallback+0x3cc>)
 8001fde:	220a      	movs	r2, #10
 8001fe0:	701a      	strb	r2, [r3, #0]

			if (iMode == 0 && iSingleMachineStatus != 100) {
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_UART_RxCpltCallback+0x3d0>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_UART_RxCpltCallback+0x368>
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_UART_RxCpltCallback+0x3d4>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d003      	beq.n	8001ffc <HAL_UART_RxCpltCallback+0x368>
				iSingleMachineStatus=10;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_UART_RxCpltCallback+0x3d4>)
 8001ff6:	220a      	movs	r2, #10
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e019      	b.n	8002030 <HAL_UART_RxCpltCallback+0x39c>
			}
			else if (iMode == 1 && iSerialMachineStatus != 100) {
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_UART_RxCpltCallback+0x3d0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d114      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x39c>
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_UART_RxCpltCallback+0x3d8>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d010      	beq.n	8002030 <HAL_UART_RxCpltCallback+0x39c>
				if (iSerialMachineStatus == 40) {
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_UART_RxCpltCallback+0x3d8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b28      	cmp	r3, #40	; 0x28
 8002014:	d109      	bne.n	800202a <HAL_UART_RxCpltCallback+0x396>
					iSerialCounter--;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_UART_RxCpltCallback+0x3dc>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_UART_RxCpltCallback+0x3dc>)
 8002020:	701a      	strb	r2, [r3, #0]
					iSerialMachineStatus = 10;
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_UART_RxCpltCallback+0x3d8>)
 8002024:	220a      	movs	r2, #10
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e002      	b.n	8002030 <HAL_UART_RxCpltCallback+0x39c>
				}
				else{
					iSerialMachineStatus = 10;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_UART_RxCpltCallback+0x3d8>)
 800202c:	220a      	movs	r2, #10
 800202e:	701a      	strb	r2, [r3, #0]
				}
			}

			HAL_TIM_Base_Start_IT(&htim14);
 8002030:	4810      	ldr	r0, [pc, #64]	; (8002074 <HAL_UART_RxCpltCallback+0x3e0>)
 8002032:	f003 fad3 	bl	80055dc <HAL_TIM_Base_Start_IT>
 8002036:	e005      	b.n	8002044 <HAL_UART_RxCpltCallback+0x3b0>
		}


	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 8002038:	2364      	movs	r3, #100	; 0x64
 800203a:	220c      	movs	r2, #12
 800203c:	490e      	ldr	r1, [pc, #56]	; (8002078 <HAL_UART_RxCpltCallback+0x3e4>)
 800203e:	480f      	ldr	r0, [pc, #60]	; (800207c <HAL_UART_RxCpltCallback+0x3e8>)
 8002040:	f003 ffb0 	bl	8005fa4 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8002044:	2204      	movs	r2, #4
 8002046:	4905      	ldr	r1, [pc, #20]	; (800205c <HAL_UART_RxCpltCallback+0x3c8>)
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <HAL_UART_RxCpltCallback+0x3e8>)
 800204a:	f004 f83e 	bl	80060ca <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	0800a994 	.word	0x0800a994
 800205c:	2000023c 	.word	0x2000023c
 8002060:	20000006 	.word	0x20000006
 8002064:	20000004 	.word	0x20000004
 8002068:	20000008 	.word	0x20000008
 800206c:	20000009 	.word	0x20000009
 8002070:	20000010 	.word	0x20000010
 8002074:	20000454 	.word	0x20000454
 8002078:	0800a96c 	.word	0x0800a96c
 800207c:	200004a0 	.word	0x200004a0

08002080 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800208c:	2100      	movs	r1, #0
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f001 f87f 	bl	8003192 <HAL_CAN_GetRxMessage>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000294 	.word	0x20000294
 80020a0:	20000278 	.word	0x20000278

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_MspInit+0x44>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_MspInit+0x44>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_MspInit+0x44>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_MspInit+0x44>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <HAL_MspInit+0x44>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_MspInit+0x44>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <NMI_Handler+0x4>

080020fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler+0x4>

0800210a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <UsageFault_Handler+0x4>

08002116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002144:	f000 fcda 	bl	8002afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <CAN1_RX0_IRQHandler+0x10>)
 8002152:	f001 f956 	bl	8003402 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000214 	.word	0x20000214

08002160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002166:	f003 fc15 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200003bc 	.word	0x200003bc

08002174 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800217a:	f003 fc0b 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000408 	.word	0x20000408

08002188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM3_IRQHandler+0x10>)
 800218e:	f003 fc01 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200002d8 	.word	0x200002d8

0800219c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <USART3_IRQHandler+0x10>)
 80021a2:	f003 ffe1 	bl	8006168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200004a0 	.word	0x200004a0

080021b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021b8:	f001 fed6 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80021c6:	f003 fbe5 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000454 	.word	0x20000454

080021d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <TIM6_DAC_IRQHandler+0x10>)
 80021da:	f003 fbdb 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000324 	.word	0x20000324

080021e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <TIM7_IRQHandler+0x10>)
 80021ee:	f003 fbd1 	bl	8005994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000370 	.word	0x20000370

080021fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_kill>:

int _kill(int pid, int sig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002216:	f005 fc81 	bl	8007b1c <__errno>
 800221a:	4603      	mov	r3, r0
 800221c:	2216      	movs	r2, #22
 800221e:	601a      	str	r2, [r3, #0]
	return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_exit>:

void _exit (int status)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffe7 	bl	800220c <_kill>
	while (1) {}		/* Make sure we hang here */
 800223e:	e7fe      	b.n	800223e <_exit+0x12>

08002240 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e00a      	b.n	8002268 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002252:	f3af 8000 	nop.w
 8002256:	4601      	mov	r1, r0
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	60ba      	str	r2, [r7, #8]
 800225e:	b2ca      	uxtb	r2, r1
 8002260:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3301      	adds	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	dbf0      	blt.n	8002252 <_read+0x12>
	}

return len;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e009      	b.n	80022a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	60ba      	str	r2, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbf1      	blt.n	800228c <_write+0x12>
	}
	return len;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_close>:

int _close(int file)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	return -1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022da:	605a      	str	r2, [r3, #4]
	return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_isatty>:

int _isatty(int file)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return 1;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
	return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <_sbrk+0x5c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <_sbrk+0x60>)
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <_sbrk+0x64>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <_sbrk+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d207      	bcs.n	800235c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800234c:	f005 fbe6 	bl	8007b1c <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	220c      	movs	r2, #12
 8002354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	e009      	b.n	8002370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <_sbrk+0x64>)
 800236c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20080000 	.word	0x20080000
 800237c:	00000400 	.word	0x00000400
 8002380:	200002d4 	.word	0x200002d4
 8002384:	20000940 	.word	0x20000940

08002388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <SystemInit+0x20>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <SystemInit+0x20>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f005 fbd8 	bl	8007b70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	463b      	mov	r3, r7
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_TIM3_Init+0xa4>)
 80023cc:	4a21      	ldr	r2, [pc, #132]	; (8002454 <MX_TIM3_Init+0xa8>)
 80023ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_TIM3_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <MX_TIM3_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_TIM3_Init+0xa4>)
 80023de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_TIM3_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_TIM3_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023f8:	2301      	movs	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002408:	2301      	movs	r3, #1
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	4619      	mov	r1, r3
 800241a:	480d      	ldr	r0, [pc, #52]	; (8002450 <MX_TIM3_Init+0xa4>)
 800241c:	f003 f986 	bl	800572c <HAL_TIM_Encoder_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002426:	f7ff fe3d 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	; (8002450 <MX_TIM3_Init+0xa4>)
 8002438:	f003 fcba 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002442:	f7ff fe2f 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3730      	adds	r7, #48	; 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200002d8 	.word	0x200002d8
 8002454:	40000400 	.word	0x40000400

08002458 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <MX_TIM6_Init+0x68>)
 800246a:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <MX_TIM6_Init+0x6c>)
 800246c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_TIM6_Init+0x68>)
 8002470:	f242 527f 	movw	r2, #9599	; 0x257f
 8002474:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <MX_TIM6_Init+0x68>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <MX_TIM6_Init+0x68>)
 800247e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002482:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <MX_TIM6_Init+0x68>)
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800248a:	480d      	ldr	r0, [pc, #52]	; (80024c0 <MX_TIM6_Init+0x68>)
 800248c:	f003 f828 	bl	80054e0 <HAL_TIM_Base_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002496:	f7ff fe05 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	4619      	mov	r1, r3
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <MX_TIM6_Init+0x68>)
 80024a8:	f003 fc82 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80024b2:	f7ff fdf7 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000324 	.word	0x20000324
 80024c4:	40001000 	.word	0x40001000

080024c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_TIM7_Init+0x68>)
 80024da:	4a16      	ldr	r2, [pc, #88]	; (8002534 <MX_TIM7_Init+0x6c>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MX_TIM7_Init+0x68>)
 80024e0:	f242 527f 	movw	r2, #9599	; 0x257f
 80024e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <MX_TIM7_Init+0x68>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <MX_TIM7_Init+0x68>)
 80024ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80024f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_TIM7_Init+0x68>)
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <MX_TIM7_Init+0x68>)
 80024fc:	f002 fff0 	bl	80054e0 <HAL_TIM_Base_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002506:	f7ff fdcd 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_TIM7_Init+0x68>)
 8002518:	f003 fc4a 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002522:	f7ff fdbf 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000370 	.word	0x20000370
 8002534:	40001400 	.word	0x40001400

08002538 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_TIM10_Init+0x40>)
 800253e:	4a0f      	ldr	r2, [pc, #60]	; (800257c <MX_TIM10_Init+0x44>)
 8002540:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <MX_TIM10_Init+0x40>)
 8002544:	f242 527f 	movw	r2, #9599	; 0x257f
 8002548:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_TIM10_Init+0x40>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_TIM10_Init+0x40>)
 8002552:	f241 3287 	movw	r2, #4999	; 0x1387
 8002556:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <MX_TIM10_Init+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_TIM10_Init+0x40>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002564:	4804      	ldr	r0, [pc, #16]	; (8002578 <MX_TIM10_Init+0x40>)
 8002566:	f002 ffbb 	bl	80054e0 <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002570:	f7ff fd98 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200003bc 	.word	0x200003bc
 800257c:	40014400 	.word	0x40014400

08002580 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <MX_TIM11_Init+0x40>)
 8002586:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <MX_TIM11_Init+0x44>)
 8002588:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9600-1;
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <MX_TIM11_Init+0x40>)
 800258c:	f242 527f 	movw	r2, #9599	; 0x257f
 8002590:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <MX_TIM11_Init+0x40>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <MX_TIM11_Init+0x40>)
 800259a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800259e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <MX_TIM11_Init+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <MX_TIM11_Init+0x40>)
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025ac:	4804      	ldr	r0, [pc, #16]	; (80025c0 <MX_TIM11_Init+0x40>)
 80025ae:	f002 ff97 	bl	80054e0 <HAL_TIM_Base_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80025b8:	f7ff fd74 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000408 	.word	0x20000408
 80025c4:	40014800 	.word	0x40014800

080025c8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_TIM14_Init+0x40>)
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <MX_TIM14_Init+0x44>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9599;
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <MX_TIM14_Init+0x40>)
 80025d4:	f242 527f 	movw	r2, #9599	; 0x257f
 80025d8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_TIM14_Init+0x40>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_TIM14_Init+0x40>)
 80025e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80025e6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MX_TIM14_Init+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_TIM14_Init+0x40>)
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_TIM14_Init+0x40>)
 80025f6:	f002 ff73 	bl	80054e0 <HAL_TIM_Base_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002600:	f7ff fd50 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000454 	.word	0x20000454
 800260c:	40002000 	.word	0x40002000

08002610 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d14b      	bne.n	80026ca <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800267a:	2340      	movs	r3, #64	; 0x40
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800268a:	2302      	movs	r3, #2
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <HAL_TIM_Encoder_MspInit+0xcc>)
 8002696:	f001 fa87 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026aa:	2302      	movs	r3, #2
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	480a      	ldr	r0, [pc, #40]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xd0>)
 80026b6:	f001 fa77 	bl	8003ba8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	201d      	movs	r0, #29
 80026c0:	f001 f9a9 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026c4:	201d      	movs	r0, #29
 80026c6:	f001 f9c2 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026ca:	bf00      	nop
 80026cc:	3728      	adds	r7, #40	; 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020800 	.word	0x40020800

080026e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a41      	ldr	r2, [pc, #260]	; (80027f8 <HAL_TIM_Base_MspInit+0x114>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d114      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a40      	ldr	r2, [pc, #256]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 80026fc:	f043 0310 	orr.w	r3, r3, #16
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	2036      	movs	r0, #54	; 0x36
 8002714:	f001 f97f 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002718:	2036      	movs	r0, #54	; 0x36
 800271a:	f001 f998 	bl	8003a4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800271e:	e066      	b.n	80027ee <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM7)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a36      	ldr	r2, [pc, #216]	; (8002800 <HAL_TIM_Base_MspInit+0x11c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d114      	bne.n	8002754 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800272a:	4b34      	ldr	r3, [pc, #208]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a33      	ldr	r2, [pc, #204]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2037      	movs	r0, #55	; 0x37
 8002748:	f001 f965 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800274c:	2037      	movs	r0, #55	; 0x37
 800274e:	f001 f97e 	bl	8003a4e <HAL_NVIC_EnableIRQ>
}
 8002752:	e04c      	b.n	80027ee <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM10)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_TIM_Base_MspInit+0x120>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d114      	bne.n	8002788 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	2019      	movs	r0, #25
 800277c:	f001 f94b 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002780:	2019      	movs	r0, #25
 8002782:	f001 f964 	bl	8003a4e <HAL_NVIC_EnableIRQ>
}
 8002786:	e032      	b.n	80027ee <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM11)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <HAL_TIM_Base_MspInit+0x124>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d114      	bne.n	80027bc <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	201a      	movs	r0, #26
 80027b0:	f001 f931 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027b4:	201a      	movs	r0, #26
 80027b6:	f001 f94a 	bl	8003a4e <HAL_NVIC_EnableIRQ>
}
 80027ba:	e018      	b.n	80027ee <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM14)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_TIM_Base_MspInit+0x128>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d113      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_TIM_Base_MspInit+0x118>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	202d      	movs	r0, #45	; 0x2d
 80027e4:	f001 f917 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80027e8:	202d      	movs	r0, #45	; 0x2d
 80027ea:	f001 f930 	bl	8003a4e <HAL_NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40001000 	.word	0x40001000
 80027fc:	40023800 	.word	0x40023800
 8002800:	40001400 	.word	0x40001400
 8002804:	40014400 	.word	0x40014400
 8002808:	40014800 	.word	0x40014800
 800280c:	40002000 	.word	0x40002000

08002810 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <MX_USART3_UART_Init+0x58>)
 8002816:	4a15      	ldr	r2, [pc, #84]	; (800286c <MX_USART3_UART_Init+0x5c>)
 8002818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <MX_USART3_UART_Init+0x58>)
 800281c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_USART3_UART_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <MX_USART3_UART_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_USART3_UART_Init+0x58>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_USART3_UART_Init+0x58>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_USART3_UART_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_USART3_UART_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <MX_USART3_UART_Init+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_USART3_UART_Init+0x58>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_USART3_UART_Init+0x58>)
 8002854:	f003 fb58 	bl	8005f08 <HAL_UART_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800285e:	f7ff fc21 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200004a0 	.word	0x200004a0
 800286c:	40004800 	.word	0x40004800

08002870 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_UART_MspInit+0x8c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d130      	bne.n	80028f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_UART_MspInit+0x90>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_UART_MspInit+0x90>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_UART_MspInit+0x90>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_UART_MspInit+0x90>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_UART_MspInit+0x90>)
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_UART_MspInit+0x90>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028d4:	2307      	movs	r3, #7
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	4619      	mov	r1, r3
 80028de:	4809      	ldr	r0, [pc, #36]	; (8002904 <HAL_UART_MspInit+0x94>)
 80028e0:	f001 f962 	bl	8003ba8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	2027      	movs	r0, #39	; 0x27
 80028ea:	f001 f894 	bl	8003a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028ee:	2027      	movs	r0, #39	; 0x27
 80028f0:	f001 f8ad 	bl	8003a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028f4:	bf00      	nop
 80028f6:	3728      	adds	r7, #40	; 0x28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40004800 	.word	0x40004800
 8002900:	40023800 	.word	0x40023800
 8002904:	40020c00 	.word	0x40020c00

08002908 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800290e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002916:	2206      	movs	r2, #6
 8002918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800291c:	2202      	movs	r2, #2
 800291e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002928:	2202      	movs	r2, #2
 800292a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800292e:	2201      	movs	r2, #1
 8002930:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002934:	2200      	movs	r2, #0
 8002936:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800293a:	2200      	movs	r2, #0
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002940:	2201      	movs	r2, #1
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800294c:	f001 fb24 	bl	8003f98 <HAL_PCD_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002956:	f7ff fba5 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000524 	.word	0x20000524

08002964 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002984:	d141      	bne.n	8002a0a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800299e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029b0:	230a      	movs	r3, #10
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4817      	ldr	r0, [pc, #92]	; (8002a18 <HAL_PCD_MspInit+0xb4>)
 80029bc:	f001 f8f4 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	4810      	ldr	r0, [pc, #64]	; (8002a18 <HAL_PCD_MspInit+0xb4>)
 80029d6:	f001 f8e7 	bl	8003ba8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	6353      	str	r3, [r2, #52]	; 0x34
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_PCD_MspInit+0xb0>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020000 	.word	0x40020000

08002a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a22:	490e      	ldr	r1, [pc, #56]	; (8002a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a28:	e002      	b.n	8002a30 <LoopCopyDataInit>

08002a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2e:	3304      	adds	r3, #4

08002a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a34:	d3f9      	bcc.n	8002a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a36:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a38:	4c0b      	ldr	r4, [pc, #44]	; (8002a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a3c:	e001      	b.n	8002a42 <LoopFillZerobss>

08002a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a40:	3204      	adds	r2, #4

08002a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a44:	d3fb      	bcc.n	8002a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a46:	f7ff fc9f 	bl	8002388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f005 f86d 	bl	8007b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a4e:	f7ff f80d 	bl	8001a6c <main>
  bx  lr    
 8002a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a5c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002a60:	0800addc 	.word	0x0800addc
  ldr r2, =_sbss
 8002a64:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002a68:	2000093c 	.word	0x2000093c

08002a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a6c:	e7fe      	b.n	8002a6c <ADC_IRQHandler>
	...

08002a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_Init+0x28>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_Init+0x28>)
 8002a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a7e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a80:	2003      	movs	r0, #3
 8002a82:	f000 ffbd 	bl	8003a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f000 f808 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8c:	f7ff fb10 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_InitTick+0x54>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_InitTick+0x58>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 ffd5 	bl	8003a6a <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00e      	b.n	8002ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d80a      	bhi.n	8002ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f000 ff9d 	bl	8003a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <HAL_InitTick+0x5c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	2000001c 	.word	0x2000001c
 8002af4:	20000024 	.word	0x20000024
 8002af8:	20000020 	.word	0x20000020

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000024 	.word	0x20000024
 8002b20:	20000928 	.word	0x20000928

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000928 	.word	0x20000928

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff ffee 	bl	8002b24 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b62:	bf00      	nop
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000024 	.word	0x20000024

08002b84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0ed      	b.n	8002d72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fd5e 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb8:	f7ff ffb4 	bl	8002b24 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bbe:	e012      	b.n	8002be6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bc0:	f7ff ffb0 	bl	8002b24 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b0a      	cmp	r3, #10
 8002bcc:	d90b      	bls.n	8002be6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2205      	movs	r2, #5
 8002bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0c5      	b.n	8002d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0e5      	beq.n	8002bc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0202 	bic.w	r2, r2, #2
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c04:	f7ff ff8e 	bl	8002b24 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c0a:	e012      	b.n	8002c32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c0c:	f7ff ff8a 	bl	8002b24 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b0a      	cmp	r3, #10
 8002c18:	d90b      	bls.n	8002c32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2205      	movs	r2, #5
 8002c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e09f      	b.n	8002d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e5      	bne.n	8002c0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d108      	bne.n	8002c5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e007      	b.n	8002c6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7e5b      	ldrb	r3, [r3, #25]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e007      	b.n	8002c94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7e9b      	ldrb	r3, [r3, #26]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e007      	b.n	8002cbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0220 	bic.w	r2, r2, #32
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7edb      	ldrb	r3, [r3, #27]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d108      	bne.n	8002cd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0210 	bic.w	r2, r2, #16
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e007      	b.n	8002ce8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0210 	orr.w	r2, r2, #16
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7f1b      	ldrb	r3, [r3, #28]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d108      	bne.n	8002d02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0208 	orr.w	r2, r2, #8
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e007      	b.n	8002d12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7f5b      	ldrb	r3, [r3, #29]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d108      	bne.n	8002d2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0204 	orr.w	r2, r2, #4
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e007      	b.n	8002d3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	ea42 0103 	orr.w	r1, r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	1e5a      	subs	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d003      	beq.n	8002da2 <HAL_CAN_ConfigFilter+0x26>
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f040 80c7 	bne.w	8002f30 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_CAN_ConfigFilter+0x1d0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d001      	beq.n	8002db0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_CAN_ConfigFilter+0x1d4>)
 8002dae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_CAN_ConfigFilter+0x1d4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2201      	movs	r2, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d123      	bne.n	8002e5e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	401a      	ands	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3248      	adds	r2, #72	; 0x48
 8002e3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	3348      	adds	r3, #72	; 0x48
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d122      	bne.n	8002eac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3248      	adds	r2, #72	; 0x48
 8002e8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ea0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ea2:	6979      	ldr	r1, [r7, #20]
 8002ea4:	3348      	adds	r3, #72	; 0x48
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ec6:	e007      	b.n	8002ed8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ef2:	e007      	b.n	8002f04 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d107      	bne.n	8002f1c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e006      	b.n	8002f3e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40003400 	.word	0x40003400
 8002f50:	40006400 	.word	0x40006400

08002f54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d12e      	bne.n	8002fc6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f80:	f7ff fdd0 	bl	8002b24 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f86:	e012      	b.n	8002fae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f88:	f7ff fdcc 	bl	8002b24 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b0a      	cmp	r3, #10
 8002f94:	d90b      	bls.n	8002fae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e012      	b.n	8002fd4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e5      	bne.n	8002f88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e006      	b.n	8002fd4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ffa:	7ffb      	ldrb	r3, [r7, #31]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d003      	beq.n	8003008 <HAL_CAN_AddTxMessage+0x2c>
 8003000:	7ffb      	ldrb	r3, [r7, #31]
 8003002:	2b02      	cmp	r3, #2
 8003004:	f040 80b8 	bne.w	8003178 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80a0 	beq.w	8003168 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	0e1b      	lsrs	r3, r3, #24
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d907      	bls.n	8003048 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e09e      	b.n	8003186 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003048:	2201      	movs	r2, #1
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	409a      	lsls	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	6809      	ldr	r1, [r1, #0]
 8003068:	431a      	orrs	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3318      	adds	r3, #24
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	440b      	add	r3, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e00f      	b.n	8003096 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003080:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800308a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3318      	adds	r3, #24
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	440b      	add	r3, r1
 8003094:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	3318      	adds	r3, #24
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	440b      	add	r3, r1
 80030a6:	3304      	adds	r3, #4
 80030a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	7d1b      	ldrb	r3, [r3, #20]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d111      	bne.n	80030d6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3318      	adds	r3, #24
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	6811      	ldr	r1, [r2, #0]
 80030c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3318      	adds	r3, #24
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	440b      	add	r3, r1
 80030d2:	3304      	adds	r3, #4
 80030d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3307      	adds	r3, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	061a      	lsls	r2, r3, #24
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3306      	adds	r3, #6
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3305      	adds	r3, #5
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	4313      	orrs	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	3204      	adds	r2, #4
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	4610      	mov	r0, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	ea43 0200 	orr.w	r2, r3, r0
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	440b      	add	r3, r1
 8003108:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800310c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3303      	adds	r3, #3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	061a      	lsls	r2, r3, #24
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3302      	adds	r3, #2
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3301      	adds	r3, #1
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	4313      	orrs	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	7812      	ldrb	r2, [r2, #0]
 800312e:	4610      	mov	r0, r2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	6811      	ldr	r1, [r2, #0]
 8003134:	ea43 0200 	orr.w	r2, r3, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	440b      	add	r3, r1
 800313e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003142:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3318      	adds	r3, #24
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	4413      	add	r3, r2
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3318      	adds	r3, #24
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	440b      	add	r3, r1
 8003162:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e00e      	b.n	8003186 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e006      	b.n	8003186 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003192:	b480      	push	{r7}
 8003194:	b087      	sub	sp, #28
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d003      	beq.n	80031b6 <HAL_CAN_GetRxMessage+0x24>
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	f040 80f3 	bne.w	800339c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10e      	bne.n	80031da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0e7      	b.n	80033aa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0d8      	b.n	80033aa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	331b      	adds	r3, #27
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0204 	and.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	331b      	adds	r3, #27
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4413      	add	r3, r2
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0d5b      	lsrs	r3, r3, #21
 8003226:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e00b      	b.n	8003248 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	331b      	adds	r3, #27
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	08db      	lsrs	r3, r3, #3
 8003240:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	331b      	adds	r3, #27
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0202 	and.w	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	331b      	adds	r3, #27
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	331b      	adds	r3, #27
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	b2da      	uxtb	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	331b      	adds	r3, #27
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0a1a      	lsrs	r2, r3, #8
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0c1a      	lsrs	r2, r3, #16
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	3302      	adds	r3, #2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e1a      	lsrs	r2, r3, #24
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	3303      	adds	r3, #3
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	4413      	add	r3, r2
 8003314:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3304      	adds	r3, #4
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0a1a      	lsrs	r2, r3, #8
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	3305      	adds	r3, #5
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4413      	add	r3, r2
 8003346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0c1a      	lsrs	r2, r3, #16
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	3306      	adds	r3, #6
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	4413      	add	r3, r2
 8003360:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e1a      	lsrs	r2, r3, #24
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	3307      	adds	r3, #7
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0220 	orr.w	r2, r2, #32
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	e007      	b.n	8003398 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0220 	orr.w	r2, r2, #32
 8003396:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e006      	b.n	80033aa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d002      	beq.n	80033d4 <HAL_CAN_ActivateNotification+0x1e>
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d109      	bne.n	80033e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6959      	ldr	r1, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e006      	b.n	80033f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d07c      	beq.n	8003542 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d023      	beq.n	800349a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f983 	bl	8003770 <HAL_CAN_TxMailbox0CompleteCallback>
 800346a:	e016      	b.n	800349a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	e00c      	b.n	800349a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
 8003492:	e002      	b.n	800349a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f989 	bl	80037ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d024      	beq.n	80034ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f963 	bl	8003784 <HAL_CAN_TxMailbox1CompleteCallback>
 80034be:	e016      	b.n	80034ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	e00c      	b.n	80034ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	e002      	b.n	80034ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f969 	bl	80037c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d024      	beq.n	8003542 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f943 	bl	8003798 <HAL_CAN_TxMailbox2CompleteCallback>
 8003512:	e016      	b.n	8003542 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	e00c      	b.n	8003542 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e002      	b.n	8003542 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f949 	bl	80037d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00c      	beq.n	8003566 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2210      	movs	r2, #16
 8003564:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2208      	movs	r2, #8
 8003580:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f930 	bl	80037e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe fd6d 	bl	8002080 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2210      	movs	r2, #16
 80035c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2208      	movs	r2, #8
 80035e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f912 	bl	8003810 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8f9 	bl	80037fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	d006      	beq.n	800362c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2210      	movs	r2, #16
 8003624:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8fc 	bl	8003824 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2208      	movs	r2, #8
 8003646:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f8f5 	bl	8003838 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d07b      	beq.n	8003750 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d072      	beq.n	8003748 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f043 0304 	orr.w	r3, r3, #4
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d043      	beq.n	8003748 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d03e      	beq.n	8003748 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d0:	2b60      	cmp	r3, #96	; 0x60
 80036d2:	d02b      	beq.n	800372c <HAL_CAN_IRQHandler+0x32a>
 80036d4:	2b60      	cmp	r3, #96	; 0x60
 80036d6:	d82e      	bhi.n	8003736 <HAL_CAN_IRQHandler+0x334>
 80036d8:	2b50      	cmp	r3, #80	; 0x50
 80036da:	d022      	beq.n	8003722 <HAL_CAN_IRQHandler+0x320>
 80036dc:	2b50      	cmp	r3, #80	; 0x50
 80036de:	d82a      	bhi.n	8003736 <HAL_CAN_IRQHandler+0x334>
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d019      	beq.n	8003718 <HAL_CAN_IRQHandler+0x316>
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d826      	bhi.n	8003736 <HAL_CAN_IRQHandler+0x334>
 80036e8:	2b30      	cmp	r3, #48	; 0x30
 80036ea:	d010      	beq.n	800370e <HAL_CAN_IRQHandler+0x30c>
 80036ec:	2b30      	cmp	r3, #48	; 0x30
 80036ee:	d822      	bhi.n	8003736 <HAL_CAN_IRQHandler+0x334>
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d002      	beq.n	80036fa <HAL_CAN_IRQHandler+0x2f8>
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d005      	beq.n	8003704 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036f8:	e01d      	b.n	8003736 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003702:	e019      	b.n	8003738 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f043 0310 	orr.w	r3, r3, #16
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800370c:	e014      	b.n	8003738 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f043 0320 	orr.w	r3, r3, #32
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003716:	e00f      	b.n	8003738 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003720:	e00a      	b.n	8003738 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800372a:	e005      	b.n	8003738 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003734:	e000      	b.n	8003738 <HAL_CAN_IRQHandler+0x336>
            break;
 8003736:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003746:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2204      	movs	r2, #4
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f872 	bl	800384c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003768:	bf00      	nop
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800387c:	4013      	ands	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <__NVIC_SetPriorityGrouping+0x44>)
 800388a:	4313      	orrs	r3, r2
 800388c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	60d3      	str	r3, [r2, #12]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00
 80038a4:	05fa0000 	.word	0x05fa0000

080038a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <__NVIC_GetPriorityGrouping+0x18>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	f003 0307 	and.w	r3, r3, #7
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	db0b      	blt.n	80038ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	4907      	ldr	r1, [pc, #28]	; (80038fc <__NVIC_EnableIRQ+0x38>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2001      	movs	r0, #1
 80038e6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	e000e100 	.word	0xe000e100

08003900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db0a      	blt.n	800392a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	490c      	ldr	r1, [pc, #48]	; (800394c <__NVIC_SetPriority+0x4c>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	0112      	lsls	r2, r2, #4
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	440b      	add	r3, r1
 8003924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003928:	e00a      	b.n	8003940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4908      	ldr	r1, [pc, #32]	; (8003950 <__NVIC_SetPriority+0x50>)
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	3b04      	subs	r3, #4
 8003938:	0112      	lsls	r2, r2, #4
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	440b      	add	r3, r1
 800393e:	761a      	strb	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000e100 	.word	0xe000e100
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	; 0x24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f1c3 0307 	rsb	r3, r3, #7
 800396e:	2b04      	cmp	r3, #4
 8003970:	bf28      	it	cs
 8003972:	2304      	movcs	r3, #4
 8003974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3304      	adds	r3, #4
 800397a:	2b06      	cmp	r3, #6
 800397c:	d902      	bls.n	8003984 <NVIC_EncodePriority+0x30>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3b03      	subs	r3, #3
 8003982:	e000      	b.n	8003986 <NVIC_EncodePriority+0x32>
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003988:	f04f 32ff 	mov.w	r2, #4294967295
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	401a      	ands	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800399c:	f04f 31ff 	mov.w	r1, #4294967295
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	43d9      	mvns	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	4313      	orrs	r3, r2
         );
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039cc:	d301      	bcc.n	80039d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00f      	b.n	80039f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <SysTick_Config+0x40>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039da:	210f      	movs	r1, #15
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f7ff ff8e 	bl	8003900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <SysTick_Config+0x40>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <SysTick_Config+0x40>)
 80039ec:	2207      	movs	r2, #7
 80039ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	e000e010 	.word	0xe000e010

08003a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff29 	bl	8003860 <__NVIC_SetPriorityGrouping>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a28:	f7ff ff3e 	bl	80038a8 <__NVIC_GetPriorityGrouping>
 8003a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	6978      	ldr	r0, [r7, #20]
 8003a34:	f7ff ff8e 	bl	8003954 <NVIC_EncodePriority>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff5d 	bl	8003900 <__NVIC_SetPriority>
}
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff31 	bl	80038c4 <__NVIC_EnableIRQ>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ffa2 	bl	80039bc <SysTick_Config>
 8003a78:	4603      	mov	r3, r0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a90:	f7ff f848 	bl	8002b24 <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d008      	beq.n	8003ab4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e052      	b.n	8003b5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0216 	bic.w	r2, r2, #22
 8003ac2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <HAL_DMA_Abort+0x62>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0208 	bic.w	r2, r2, #8
 8003af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b04:	e013      	b.n	8003b2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b06:	f7ff f80d 	bl	8002b24 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d90c      	bls.n	8003b2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e015      	b.n	8003b5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e4      	bne.n	8003b06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	223f      	movs	r2, #63	; 0x3f
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d004      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e00c      	b.n	8003b9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2205      	movs	r2, #5
 8003b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	; 0x24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e175      	b.n	8003eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bc8:	2201      	movs	r2, #1
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	f040 8164 	bne.w	8003eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d005      	beq.n	8003bfe <HAL_GPIO_Init+0x56>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d130      	bne.n	8003c60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c34:	2201      	movs	r2, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 0201 	and.w	r2, r3, #1
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d017      	beq.n	8003c9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d123      	bne.n	8003cf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	08da      	lsrs	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3208      	adds	r2, #8
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0203 	and.w	r2, r3, #3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80be 	beq.w	8003eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d32:	4b66      	ldr	r3, [pc, #408]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a65      	ldr	r2, [pc, #404]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d4a:	4a61      	ldr	r2, [pc, #388]	; (8003ed0 <HAL_GPIO_Init+0x328>)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	3302      	adds	r3, #2
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	220f      	movs	r2, #15
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a58      	ldr	r2, [pc, #352]	; (8003ed4 <HAL_GPIO_Init+0x32c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d037      	beq.n	8003de6 <HAL_GPIO_Init+0x23e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a57      	ldr	r2, [pc, #348]	; (8003ed8 <HAL_GPIO_Init+0x330>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d031      	beq.n	8003de2 <HAL_GPIO_Init+0x23a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a56      	ldr	r2, [pc, #344]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02b      	beq.n	8003dde <HAL_GPIO_Init+0x236>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a55      	ldr	r2, [pc, #340]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d025      	beq.n	8003dda <HAL_GPIO_Init+0x232>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a54      	ldr	r2, [pc, #336]	; (8003ee4 <HAL_GPIO_Init+0x33c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01f      	beq.n	8003dd6 <HAL_GPIO_Init+0x22e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a53      	ldr	r2, [pc, #332]	; (8003ee8 <HAL_GPIO_Init+0x340>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d019      	beq.n	8003dd2 <HAL_GPIO_Init+0x22a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_GPIO_Init+0x344>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <HAL_GPIO_Init+0x226>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a51      	ldr	r2, [pc, #324]	; (8003ef0 <HAL_GPIO_Init+0x348>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00d      	beq.n	8003dca <HAL_GPIO_Init+0x222>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a50      	ldr	r2, [pc, #320]	; (8003ef4 <HAL_GPIO_Init+0x34c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <HAL_GPIO_Init+0x21e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <HAL_GPIO_Init+0x350>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_GPIO_Init+0x21a>
 8003dbe:	2309      	movs	r3, #9
 8003dc0:	e012      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dc2:	230a      	movs	r3, #10
 8003dc4:	e010      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	e00e      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dca:	2307      	movs	r3, #7
 8003dcc:	e00c      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dce:	2306      	movs	r3, #6
 8003dd0:	e00a      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	e008      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	e006      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e004      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e002      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_GPIO_Init+0x240>
 8003de6:	2300      	movs	r3, #0
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	f002 0203 	and.w	r2, r2, #3
 8003dee:	0092      	lsls	r2, r2, #2
 8003df0:	4093      	lsls	r3, r2
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003df8:	4935      	ldr	r1, [pc, #212]	; (8003ed0 <HAL_GPIO_Init+0x328>)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	3302      	adds	r3, #2
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e06:	4b3d      	ldr	r3, [pc, #244]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e2a:	4a34      	ldr	r2, [pc, #208]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e30:	4b32      	ldr	r3, [pc, #200]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e54:	4a29      	ldr	r2, [pc, #164]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e84:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <HAL_GPIO_Init+0x354>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b0f      	cmp	r3, #15
 8003eb8:	f67f ae86 	bls.w	8003bc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3724      	adds	r7, #36	; 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	40020000 	.word	0x40020000
 8003ed8:	40020400 	.word	0x40020400
 8003edc:	40020800 	.word	0x40020800
 8003ee0:	40020c00 	.word	0x40020c00
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40021400 	.word	0x40021400
 8003eec:	40021800 	.word	0x40021800
 8003ef0:	40021c00 	.word	0x40021c00
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	40022400 	.word	0x40022400
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f1c:	e003      	b.n	8003f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	041a      	lsls	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	041a      	lsls	r2, r3, #16
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	43d9      	mvns	r1, r3
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	400b      	ands	r3, r1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	619a      	str	r2, [r3, #24]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd fd30 	bl	80019ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40013c00 	.word	0x40013c00

08003f98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9a:	b08f      	sub	sp, #60	; 0x3c
 8003f9c:	af0a      	add	r7, sp, #40	; 0x28
 8003f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e116      	b.n	80041d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fe fccd 	bl	8002964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 fafd 	bl	80075e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	687e      	ldr	r6, [r7, #4]
 8003ff6:	466d      	mov	r5, sp
 8003ff8:	f106 0410 	add.w	r4, r6, #16
 8003ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004004:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004008:	e885 0003 	stmia.w	r5, {r0, r1}
 800400c:	1d33      	adds	r3, r6, #4
 800400e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004010:	6838      	ldr	r0, [r7, #0]
 8004012:	f003 fa91 	bl	8007538 <USB_CoreInit>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0d7      	b.n	80041d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f003 faeb 	bl	800760a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e04a      	b.n	80040d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	333d      	adds	r3, #61	; 0x3d
 800404a:	2201      	movs	r2, #1
 800404c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	333c      	adds	r3, #60	; 0x3c
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	b298      	uxth	r0, r3
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3342      	adds	r3, #66	; 0x42
 8004076:	4602      	mov	r2, r0
 8004078:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	333f      	adds	r3, #63	; 0x3f
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	3344      	adds	r3, #68	; 0x44
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3348      	adds	r3, #72	; 0x48
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	3350      	adds	r3, #80	; 0x50
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	3301      	adds	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d3af      	bcc.n	800403a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040da:	2300      	movs	r3, #0
 80040dc:	73fb      	strb	r3, [r7, #15]
 80040de:	e044      	b.n	800416a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	3301      	adds	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d3b5      	bcc.n	80040e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	687e      	ldr	r6, [r7, #4]
 800417c:	466d      	mov	r5, sp
 800417e:	f106 0410 	add.w	r4, r6, #16
 8004182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800418e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004192:	1d33      	adds	r3, r6, #4
 8004194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004196:	6838      	ldr	r0, [r7, #0]
 8004198:	f003 fa84 	bl	80076a4 <USB_DevInit>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e014      	b.n	80041d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d102      	bne.n	80041cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f80a 	bl	80041e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 fc3e 	bl	8007a52 <USB_DevDisconnect>

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_PCDEx_ActivateLPM+0x44>)
 8004210:	4313      	orrs	r3, r2
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	10000003 	.word	0x10000003

08004228 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004236:	6013      	str	r3, [r2, #0]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40007000 	.word	0x40007000

08004248 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004276:	f7fe fc55 	bl	8002b24 <HAL_GetTick>
 800427a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800427c:	e009      	b.n	8004292 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800427e:	f7fe fc51 	bl	8002b24 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800428c:	d901      	bls.n	8004292 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e022      	b.n	80042d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d1ee      	bne.n	800427e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042ac:	f7fe fc3a 	bl	8002b24 <HAL_GetTick>
 80042b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042b2:	e009      	b.n	80042c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042b4:	f7fe fc36 	bl	8002b24 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042c2:	d901      	bls.n	80042c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e007      	b.n	80042d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042d4:	d1ee      	bne.n	80042b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000

080042e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e29b      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8087 	beq.w	800441a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800430c:	4b96      	ldr	r3, [pc, #600]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 030c 	and.w	r3, r3, #12
 8004314:	2b04      	cmp	r3, #4
 8004316:	d00c      	beq.n	8004332 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004318:	4b93      	ldr	r3, [pc, #588]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d112      	bne.n	800434a <HAL_RCC_OscConfig+0x62>
 8004324:	4b90      	ldr	r3, [pc, #576]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d10b      	bne.n	800434a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004332:	4b8d      	ldr	r3, [pc, #564]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d06c      	beq.n	8004418 <HAL_RCC_OscConfig+0x130>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d168      	bne.n	8004418 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e275      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x7a>
 8004354:	4b84      	ldr	r3, [pc, #528]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a83      	ldr	r2, [pc, #524]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800435a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	e02e      	b.n	80043c0 <HAL_RCC_OscConfig+0xd8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x9c>
 800436a:	4b7f      	ldr	r3, [pc, #508]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7e      	ldr	r2, [pc, #504]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	4b7c      	ldr	r3, [pc, #496]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a7b      	ldr	r2, [pc, #492]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800437c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e01d      	b.n	80043c0 <HAL_RCC_OscConfig+0xd8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0xc0>
 800438e:	4b76      	ldr	r3, [pc, #472]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a75      	ldr	r2, [pc, #468]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b73      	ldr	r3, [pc, #460]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a72      	ldr	r2, [pc, #456]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e00b      	b.n	80043c0 <HAL_RCC_OscConfig+0xd8>
 80043a8:	4b6f      	ldr	r3, [pc, #444]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6e      	ldr	r2, [pc, #440]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80043ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b6c      	ldr	r3, [pc, #432]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6b      	ldr	r2, [pc, #428]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80043ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fe fbac 	bl	8002b24 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fe fba8 	bl	8002b24 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e229      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b61      	ldr	r3, [pc, #388]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0xe8>
 80043ee:	e014      	b.n	800441a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fb98 	bl	8002b24 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fe fb94 	bl	8002b24 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e215      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	4b57      	ldr	r3, [pc, #348]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x110>
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d069      	beq.n	80044fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004426:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004432:	4b4d      	ldr	r3, [pc, #308]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b08      	cmp	r3, #8
 800443c:	d11c      	bne.n	8004478 <HAL_RCC_OscConfig+0x190>
 800443e:	4b4a      	ldr	r3, [pc, #296]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d116      	bne.n	8004478 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_RCC_OscConfig+0x17a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d001      	beq.n	8004462 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e1e9      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	493d      	ldr	r1, [pc, #244]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	e040      	b.n	80044fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d023      	beq.n	80044c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004480:	4b39      	ldr	r3, [pc, #228]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a38      	ldr	r2, [pc, #224]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fe fb4a 	bl	8002b24 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004494:	f7fe fb46 	bl	8002b24 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1c7      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a6:	4b30      	ldr	r3, [pc, #192]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4929      	ldr	r1, [pc, #164]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
 80044c6:	e018      	b.n	80044fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c8:	4b27      	ldr	r3, [pc, #156]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fe fb26 	bl	8002b24 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044dc:	f7fe fb22 	bl	8002b24 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1a3      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d038      	beq.n	8004578 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d019      	beq.n	8004542 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004512:	4a15      	ldr	r2, [pc, #84]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fe fb03 	bl	8002b24 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004522:	f7fe faff 	bl	8002b24 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e180      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004534:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x23a>
 8004540:	e01a      	b.n	8004578 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004546:	4a08      	ldr	r2, [pc, #32]	; (8004568 <HAL_RCC_OscConfig+0x280>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454e:	f7fe fae9 	bl	8002b24 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004556:	f7fe fae5 	bl	8002b24 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d903      	bls.n	800456c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e166      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
 8004568:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	4b92      	ldr	r3, [pc, #584]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ee      	bne.n	8004556 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a4 	beq.w	80046ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004586:	4b8c      	ldr	r3, [pc, #560]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4b89      	ldr	r3, [pc, #548]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a88      	ldr	r2, [pc, #544]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
 800459e:	4b86      	ldr	r3, [pc, #536]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ae:	4b83      	ldr	r3, [pc, #524]	; (80047bc <HAL_RCC_OscConfig+0x4d4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d118      	bne.n	80045ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045ba:	4b80      	ldr	r3, [pc, #512]	; (80047bc <HAL_RCC_OscConfig+0x4d4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7f      	ldr	r2, [pc, #508]	; (80047bc <HAL_RCC_OscConfig+0x4d4>)
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c6:	f7fe faad 	bl	8002b24 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ce:	f7fe faa9 	bl	8002b24 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b64      	cmp	r3, #100	; 0x64
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e12a      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e0:	4b76      	ldr	r3, [pc, #472]	; (80047bc <HAL_RCC_OscConfig+0x4d4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d106      	bne.n	8004602 <HAL_RCC_OscConfig+0x31a>
 80045f4:	4b70      	ldr	r3, [pc, #448]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	4a6f      	ldr	r2, [pc, #444]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004600:	e02d      	b.n	800465e <HAL_RCC_OscConfig+0x376>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x33c>
 800460a:	4b6b      	ldr	r3, [pc, #428]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460e:	4a6a      	ldr	r2, [pc, #424]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6713      	str	r3, [r2, #112]	; 0x70
 8004616:	4b68      	ldr	r3, [pc, #416]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	4a67      	ldr	r2, [pc, #412]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	6713      	str	r3, [r2, #112]	; 0x70
 8004622:	e01c      	b.n	800465e <HAL_RCC_OscConfig+0x376>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b05      	cmp	r3, #5
 800462a:	d10c      	bne.n	8004646 <HAL_RCC_OscConfig+0x35e>
 800462c:	4b62      	ldr	r3, [pc, #392]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a61      	ldr	r2, [pc, #388]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	4b5f      	ldr	r3, [pc, #380]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a5e      	ldr	r2, [pc, #376]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	e00b      	b.n	800465e <HAL_RCC_OscConfig+0x376>
 8004646:	4b5c      	ldr	r3, [pc, #368]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a5b      	ldr	r2, [pc, #364]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
 8004652:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a58      	ldr	r2, [pc, #352]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d015      	beq.n	8004692 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fe fa5d 	bl	8002b24 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fe fa59 	bl	8002b24 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0d8      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	4b4c      	ldr	r3, [pc, #304]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ee      	beq.n	800466e <HAL_RCC_OscConfig+0x386>
 8004690:	e014      	b.n	80046bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fe fa47 	bl	8002b24 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fe fa43 	bl	8002b24 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0c2      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b0:	4b41      	ldr	r3, [pc, #260]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ee      	bne.n	800469a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c2:	4b3d      	ldr	r3, [pc, #244]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	4a3c      	ldr	r2, [pc, #240]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80046c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80ae 	beq.w	8004834 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d8:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d06d      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d14b      	bne.n	8004784 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b32      	ldr	r3, [pc, #200]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80046f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fe fa14 	bl	8002b24 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fe fa10 	bl	8002b24 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e091      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	491b      	ldr	r1, [pc, #108]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fe f9e2 	bl	8002b24 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe f9de 	bl	8002b24 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e05f      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x47c>
 8004782:	e057      	b.n	8004834 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0b      	ldr	r2, [pc, #44]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 800478a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fe f9c8 	bl	8002b24 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fe f9c4 	bl	8002b24 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e045      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <HAL_RCC_OscConfig+0x4d0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x4b0>
 80047b6:	e03d      	b.n	8004834 <HAL_RCC_OscConfig+0x54c>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047c0:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <HAL_RCC_OscConfig+0x558>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d030      	beq.n	8004830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d129      	bne.n	8004830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d122      	bne.n	8004830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f0:	4013      	ands	r3, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d119      	bne.n	8004830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	3b01      	subs	r3, #1
 800480a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d10f      	bne.n	8004830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0d0      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d910      	bls.n	800488c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b67      	ldr	r3, [pc, #412]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 020f 	bic.w	r2, r3, #15
 8004872:	4965      	ldr	r1, [pc, #404]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b8      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a58      	ldr	r2, [pc, #352]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a52      	ldr	r2, [pc, #328]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80048c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c8:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	494d      	ldr	r1, [pc, #308]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d040      	beq.n	8004968 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d115      	bne.n	8004926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b41      	ldr	r3, [pc, #260]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e073      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b3d      	ldr	r3, [pc, #244]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e06b      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4936      	ldr	r1, [pc, #216]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fe f8f4 	bl	8002b24 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	e00a      	b.n	8004956 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004940:	f7fe f8f0 	bl	8002b24 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e053      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 020c 	and.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d1eb      	bne.n	8004940 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d210      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 020f 	bic.w	r2, r3, #15
 800497e:	4922      	ldr	r1, [pc, #136]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e032      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4916      	ldr	r1, [pc, #88]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	490e      	ldr	r1, [pc, #56]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049d6:	f000 f821 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	490a      	ldr	r1, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x1cc>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1d0>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1d4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe f850 	bl	8002a9c <HAL_InitTick>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023c00 	.word	0x40023c00
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	0800a9d4 	.word	0x0800a9d4
 8004a14:	2000001c 	.word	0x2000001c
 8004a18:	20000020 	.word	0x20000020

08004a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b094      	sub	sp, #80	; 0x50
 8004a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a34:	4b79      	ldr	r3, [pc, #484]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x40>
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	f200 80e1 	bhi.w	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4e:	e0db      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a54:	e0db      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b73      	ldr	r3, [pc, #460]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a5a:	e0d8      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5c:	4b6f      	ldr	r3, [pc, #444]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a66:	4b6d      	ldr	r3, [pc, #436]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d063      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	2200      	movs	r2, #0
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a84:	633b      	str	r3, [r7, #48]	; 0x30
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	0159      	lsls	r1, r3, #5
 8004a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa0:	0150      	lsls	r0, r2, #5
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	1a51      	subs	r1, r2, r1
 8004aaa:	6139      	str	r1, [r7, #16]
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	018b      	lsls	r3, r1, #6
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aca:	4651      	mov	r1, sl
 8004acc:	018a      	lsls	r2, r1, #6
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aee:	4690      	mov	r8, r2
 8004af0:	4699      	mov	r9, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	eb18 0303 	adds.w	r3, r8, r3
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	462b      	mov	r3, r5
 8004afc:	eb49 0303 	adc.w	r3, r9, r3
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b0e:	4629      	mov	r1, r5
 8004b10:	024b      	lsls	r3, r1, #9
 8004b12:	4621      	mov	r1, r4
 8004b14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b18:	4621      	mov	r1, r4
 8004b1a:	024a      	lsls	r2, r1, #9
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b22:	2200      	movs	r2, #0
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b2c:	f7fb fbe0 	bl	80002f0 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e058      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	2200      	movs	r2, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	4611      	mov	r1, r2
 8004b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	0159      	lsls	r1, r3, #5
 8004b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b66:	0150      	lsls	r0, r2, #5
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b72:	4649      	mov	r1, r9
 8004b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b90:	eb63 050b 	sbc.w	r5, r3, fp
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	00eb      	lsls	r3, r5, #3
 8004b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba2:	00e2      	lsls	r2, r4, #3
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	461d      	mov	r5, r3
 8004ba8:	4643      	mov	r3, r8
 8004baa:	18e3      	adds	r3, r4, r3
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	eb45 0303 	adc.w	r3, r5, r3
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	028b      	lsls	r3, r1, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bcc:	4621      	mov	r1, r4
 8004bce:	028a      	lsls	r2, r1, #10
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	61fa      	str	r2, [r7, #28]
 8004bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be0:	f7fb fb86 	bl	80002f0 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3750      	adds	r7, #80	; 0x50
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	007a1200 	.word	0x007a1200

08004c28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	2000001c 	.word	0x2000001c

08004c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c44:	f7ff fff0 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4903      	ldr	r1, [pc, #12]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	0800a9e4 	.word	0x0800a9e4

08004c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c6c:	f7ff ffdc 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	0b5b      	lsrs	r3, r3, #13
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4903      	ldr	r1, [pc, #12]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	0800a9e4 	.word	0x0800a9e4

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d012      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cb8:	4b69      	ldr	r3, [pc, #420]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a68      	ldr	r2, [pc, #416]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cc2:	6093      	str	r3, [r2, #8]
 8004cc4:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	4964      	ldr	r1, [pc, #400]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d017      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cea:	4b5d      	ldr	r3, [pc, #372]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	4959      	ldr	r1, [pc, #356]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d08:	d101      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d16:	2301      	movs	r3, #1
 8004d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d017      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d26:	4b4e      	ldr	r3, [pc, #312]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	494a      	ldr	r1, [pc, #296]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d44:	d101      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 808b 	beq.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d74:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d80:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d8c:	4b35      	ldr	r3, [pc, #212]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fd fec4 	bl	8002b24 <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da0:	f7fd fec0 	bl	8002b24 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e38f      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004db2:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dbe:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d035      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d02e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ddc:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004de6:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a1a      	ldr	r2, [pc, #104]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dfe:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e04:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d114      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fd fe88 	bl	8002b24 <HAL_GetTick>
 8004e14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fd fe84 	bl	8002b24 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e351      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ee      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e46:	d111      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e56:	400b      	ands	r3, r1
 8004e58:	4901      	ldr	r1, [pc, #4]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40007000 	.word	0x40007000
 8004e68:	0ffffcff 	.word	0x0ffffcff
 8004e6c:	4bac      	ldr	r3, [pc, #688]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4aab      	ldr	r2, [pc, #684]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e76:	6093      	str	r3, [r2, #8]
 8004e78:	4ba9      	ldr	r3, [pc, #676]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e84:	49a6      	ldr	r1, [pc, #664]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d010      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e96:	4ba2      	ldr	r3, [pc, #648]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e9c:	4aa0      	ldr	r2, [pc, #640]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ea6:	4b9e      	ldr	r3, [pc, #632]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	499b      	ldr	r1, [pc, #620]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ec4:	4b96      	ldr	r3, [pc, #600]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed2:	4993      	ldr	r1, [pc, #588]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ee6:	4b8e      	ldr	r3, [pc, #568]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef4:	498a      	ldr	r1, [pc, #552]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f08:	4b85      	ldr	r3, [pc, #532]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f16:	4982      	ldr	r1, [pc, #520]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f2a:	4b7d      	ldr	r3, [pc, #500]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4979      	ldr	r1, [pc, #484]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f4c:	4b74      	ldr	r3, [pc, #464]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f023 0203 	bic.w	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	4971      	ldr	r1, [pc, #452]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f6e:	4b6c      	ldr	r3, [pc, #432]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	f023 020c 	bic.w	r2, r3, #12
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7c:	4968      	ldr	r1, [pc, #416]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f90:	4b63      	ldr	r3, [pc, #396]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9e:	4960      	ldr	r1, [pc, #384]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fb2:	4b5b      	ldr	r3, [pc, #364]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc0:	4957      	ldr	r1, [pc, #348]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fd4:	4b52      	ldr	r3, [pc, #328]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	494f      	ldr	r1, [pc, #316]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ff6:	4b4a      	ldr	r3, [pc, #296]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	4946      	ldr	r1, [pc, #280]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005018:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005026:	493e      	ldr	r1, [pc, #248]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005048:	4935      	ldr	r1, [pc, #212]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800505c:	4b30      	ldr	r3, [pc, #192]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506a:	492d      	ldr	r1, [pc, #180]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d011      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800508c:	4924      	ldr	r1, [pc, #144]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800509c:	d101      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800509e:	2301      	movs	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050ae:	2301      	movs	r3, #1
 80050b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050cc:	4914      	ldr	r1, [pc, #80]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f0:	490b      	ldr	r1, [pc, #44]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00f      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005114:	4902      	ldr	r1, [pc, #8]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800511c:	e002      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005130:	4b8a      	ldr	r3, [pc, #552]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005136:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	4986      	ldr	r1, [pc, #536]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005154:	4b81      	ldr	r3, [pc, #516]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005164:	497d      	ldr	r1, [pc, #500]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d006      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80d6 	beq.w	800532c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005180:	4b76      	ldr	r3, [pc, #472]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a75      	ldr	r2, [pc, #468]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800518a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518c:	f7fd fcca 	bl	8002b24 <HAL_GetTick>
 8005190:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005194:	f7fd fcc6 	bl	8002b24 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b64      	cmp	r3, #100	; 0x64
 80051a0:	d901      	bls.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e195      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a6:	4b6d      	ldr	r3, [pc, #436]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d021      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11d      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051c6:	4b65      	ldr	r3, [pc, #404]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051cc:	0c1b      	lsrs	r3, r3, #16
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051da:	0e1b      	lsrs	r3, r3, #24
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	019a      	lsls	r2, r3, #6
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	071b      	lsls	r3, r3, #28
 80051fa:	4958      	ldr	r1, [pc, #352]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02e      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800522c:	d129      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800522e:	4b4b      	ldr	r3, [pc, #300]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800523c:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005242:	0f1b      	lsrs	r3, r3, #28
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	019a      	lsls	r2, r3, #6
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	061b      	lsls	r3, r3, #24
 800525c:	431a      	orrs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	071b      	lsls	r3, r3, #28
 8005262:	493e      	ldr	r1, [pc, #248]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800526a:	4b3c      	ldr	r3, [pc, #240]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005270:	f023 021f 	bic.w	r2, r3, #31
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	3b01      	subs	r3, #1
 800527a:	4938      	ldr	r1, [pc, #224]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01d      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800528e:	4b33      	ldr	r3, [pc, #204]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800529c:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800529e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a2:	0f1b      	lsrs	r3, r3, #28
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	019a      	lsls	r2, r3, #6
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	431a      	orrs	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	071b      	lsls	r3, r3, #28
 80052c2:	4926      	ldr	r1, [pc, #152]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d011      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	019a      	lsls	r2, r3, #6
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	071b      	lsls	r3, r3, #28
 80052f2:	491a      	ldr	r1, [pc, #104]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a17      	ldr	r2, [pc, #92]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005306:	f7fd fc0d 	bl	8002b24 <HAL_GetTick>
 800530a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800530e:	f7fd fc09 	bl	8002b24 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b64      	cmp	r3, #100	; 0x64
 800531a:	d901      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e0d8      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005320:	4b0e      	ldr	r3, [pc, #56]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b01      	cmp	r3, #1
 8005330:	f040 80ce 	bne.w	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005334:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a08      	ldr	r2, [pc, #32]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005340:	f7fd fbf0 	bl	8002b24 <HAL_GetTick>
 8005344:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005346:	e00b      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005348:	f7fd fbec 	bl	8002b24 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	; 0x64
 8005354:	d904      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0bb      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800535a:	bf00      	nop
 800535c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005360:	4b5e      	ldr	r3, [pc, #376]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d0ec      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800538a:	2b00      	cmp	r3, #0
 800538c:	d02e      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d12a      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005396:	4b51      	ldr	r3, [pc, #324]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053a4:	4b4d      	ldr	r3, [pc, #308]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	0f1b      	lsrs	r3, r3, #28
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	019a      	lsls	r2, r3, #6
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	061b      	lsls	r3, r3, #24
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	071b      	lsls	r3, r3, #28
 80053ca:	4944      	ldr	r1, [pc, #272]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053d2:	4b42      	ldr	r3, [pc, #264]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	493d      	ldr	r1, [pc, #244]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005400:	d11d      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005402:	4b36      	ldr	r3, [pc, #216]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005410:	4b32      	ldr	r3, [pc, #200]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	0f1b      	lsrs	r3, r3, #28
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	019a      	lsls	r2, r3, #6
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	431a      	orrs	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	071b      	lsls	r3, r3, #28
 8005436:	4929      	ldr	r1, [pc, #164]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d028      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	0e1b      	lsrs	r3, r3, #24
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	0c1b      	lsrs	r3, r3, #16
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	019a      	lsls	r2, r3, #6
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	4917      	ldr	r1, [pc, #92]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005486:	4b15      	ldr	r3, [pc, #84]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4911      	ldr	r1, [pc, #68]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a8:	f7fd fb3c 	bl	8002b24 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054b0:	f7fd fb38 	bl	8002b24 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e007      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ce:	d1ef      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800

080054e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e049      	b.n	8005586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fd f8ec 	bl	80026e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f000 fb80 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	f241 1311 	movw	r3, #4369	; 0x1111
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_TIM_Base_Stop+0x38>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	f240 4344 	movw	r3, #1092	; 0x444
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_Base_Stop+0x38>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d001      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e054      	b.n	800569e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a26      	ldr	r2, [pc, #152]	; (80056ac <HAL_TIM_Base_Start_IT+0xd0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d022      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x80>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561e:	d01d      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x80>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d018      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x80>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d013      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x80>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00e      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x80>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <HAL_TIM_Base_Start_IT+0xe0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d009      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x80>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1b      	ldr	r2, [pc, #108]	; (80056c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d115      	bne.n	8005688 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	4b19      	ldr	r3, [pc, #100]	; (80056c8 <HAL_TIM_Base_Start_IT+0xec>)
 8005664:	4013      	ands	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b06      	cmp	r3, #6
 800566c:	d015      	beq.n	800569a <HAL_TIM_Base_Start_IT+0xbe>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005674:	d011      	beq.n	800569a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005686:	e008      	b.n	800569a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	e000      	b.n	800569c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00
 80056bc:	40010400 	.word	0x40010400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40001800 	.word	0x40001800
 80056c8:	00010007 	.word	0x00010007

080056cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10f      	bne.n	8005714 <HAL_TIM_Base_Stop_IT+0x48>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	f240 4344 	movw	r3, #1092	; 0x444
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d107      	bne.n	8005714 <HAL_TIM_Base_Stop_IT+0x48>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e08f      	b.n	8005860 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fc ff5b 	bl	8002610 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6899      	ldr	r1, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b3e      	ldr	r3, [pc, #248]	; (8005868 <HAL_TIM_Encoder_Init+0x13c>)
 800576e:	400b      	ands	r3, r1
 8005770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f000 fa51 	bl	8005c24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4b31      	ldr	r3, [pc, #196]	; (800586c <HAL_TIM_Encoder_Init+0x140>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	4313      	orrs	r3, r2
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <HAL_TIM_Encoder_Init+0x144>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <HAL_TIM_Encoder_Init+0x148>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	4313      	orrs	r3, r2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	011a      	lsls	r2, r3, #4
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	031b      	lsls	r3, r3, #12
 80057ec:	4313      	orrs	r3, r2
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	4313      	orrs	r3, r2
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	fffebff8 	.word	0xfffebff8
 800586c:	fffffcfc 	.word	0xfffffcfc
 8005870:	fffff3f3 	.word	0xfffff3f3
 8005874:	ffff0f0f 	.word	0xffff0f0f

08005878 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005888:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005890:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005898:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d110      	bne.n	80058ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d102      	bne.n	80058b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ae:	7b7b      	ldrb	r3, [r7, #13]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d001      	beq.n	80058b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e069      	b.n	800598c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c8:	e031      	b.n	800592e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d110      	bne.n	80058f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d102      	bne.n	80058dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058d6:	7b3b      	ldrb	r3, [r7, #12]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d001      	beq.n	80058e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e055      	b.n	800598c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f0:	e01d      	b.n	800592e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d108      	bne.n	800590a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d105      	bne.n	800590a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058fe:	7b7b      	ldrb	r3, [r7, #13]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d102      	bne.n	800590a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005904:	7b3b      	ldrb	r3, [r7, #12]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d001      	beq.n	800590e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e03e      	b.n	800598c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_TIM_Encoder_Start+0xc4>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b04      	cmp	r3, #4
 8005938:	d008      	beq.n	800594c <HAL_TIM_Encoder_Start+0xd4>
 800593a:	e00f      	b.n	800595c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fa0d 	bl	8005d64 <TIM_CCxChannelCmd>
      break;
 800594a:	e016      	b.n	800597a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2201      	movs	r2, #1
 8005952:	2104      	movs	r1, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fa05 	bl	8005d64 <TIM_CCxChannelCmd>
      break;
 800595a:	e00e      	b.n	800597a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f9fd 	bl	8005d64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	2104      	movs	r1, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f9f6 	bl	8005d64 <TIM_CCxChannelCmd>
      break;
 8005978:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d122      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0202 	mvn.w	r2, #2
 80059c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f905 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8f7 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f908 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0204 	mvn.w	r2, #4
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8db 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8cd 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8de 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0208 	mvn.w	r2, #8
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8b1 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8a3 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8b4 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0210 	mvn.w	r2, #16
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f887 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f879 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f88a 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0201 	mvn.w	r2, #1
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb fec6 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9ce 	bl	8005ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b52:	d10e      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d107      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f9c1 	bl	8005ef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d10e      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d107      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f838 	bl	8005c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d10e      	bne.n	8005bca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d107      	bne.n	8005bca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f06f 0220 	mvn.w	r2, #32
 8005bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f981 	bl	8005ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a40      	ldr	r2, [pc, #256]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3d      	ldr	r2, [pc, #244]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3c      	ldr	r2, [pc, #240]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3b      	ldr	r2, [pc, #236]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3a      	ldr	r2, [pc, #232]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d027      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <TIM_Base_SetConfig+0x118>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d023      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <TIM_Base_SetConfig+0x11c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2a      	ldr	r2, [pc, #168]	; (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d017      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a28      	ldr	r2, [pc, #160]	; (8005d4c <TIM_Base_SetConfig+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a27      	ldr	r2, [pc, #156]	; (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <TIM_Base_SetConfig+0x130>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <TIM_Base_SetConfig+0x134>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d007      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a24      	ldr	r2, [pc, #144]	; (8005d5c <TIM_Base_SetConfig+0x138>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <TIM_Base_SetConfig+0x13c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <TIM_Base_SetConfig+0x114>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0xf8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0c      	ldr	r2, [pc, #48]	; (8005d48 <TIM_Base_SetConfig+0x124>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d103      	bne.n	8005d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	615a      	str	r2, [r3, #20]
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40010400 	.word	0x40010400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800
 8005d58:	40001800 	.word	0x40001800
 8005d5c:	40001c00 	.word	0x40001c00
 8005d60:	40002000 	.word	0x40002000

08005d64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2201      	movs	r2, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1a      	ldr	r2, [r3, #32]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	401a      	ands	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a1a      	ldr	r2, [r3, #32]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e06d      	b.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a30      	ldr	r2, [pc, #192]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d022      	beq.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3a:	d01d      	beq.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1d      	ldr	r2, [pc, #116]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d018      	beq.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1a      	ldr	r2, [pc, #104]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00e      	beq.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d009      	beq.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d004      	beq.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d10c      	bne.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40010400 	.word	0x40010400
 8005eb8:	40000400 	.word	0x40000400
 8005ebc:	40000800 	.word	0x40000800
 8005ec0:	40000c00 	.word	0x40000c00
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40001800 	.word	0x40001800

08005ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e040      	b.n	8005f9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fc fca0 	bl	8002870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2224      	movs	r2, #36	; 0x24
 8005f34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fc18 	bl	800677c <UART_SetConfig>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e022      	b.n	8005f9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fe70 	bl	8006c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fef7 	bl	8006d88 <UART_CheckIdleState>
 8005f9a:	4603      	mov	r3, r0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	f040 8081 	bne.w	80060c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_UART_Transmit+0x26>
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e079      	b.n	80060c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_UART_Transmit+0x38>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e072      	b.n	80060c2 <HAL_UART_Transmit+0x11e>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2221      	movs	r2, #33	; 0x21
 8005ff0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff2:	f7fc fd97 	bl	8002b24 <HAL_GetTick>
 8005ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006010:	d108      	bne.n	8006024 <HAL_UART_Transmit+0x80>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e003      	b.n	800602c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006034:	e02c      	b.n	8006090 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 feea 	bl	8006e1a <UART_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e038      	b.n	80060c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10b      	bne.n	800606e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	3302      	adds	r3, #2
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e007      	b.n	800607e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	781a      	ldrb	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3301      	adds	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1cc      	bne.n	8006036 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	2140      	movs	r1, #64	; 0x40
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 feb7 	bl	8006e1a <UART_WaitOnFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e005      	b.n	80060c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e000      	b.n	80060c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
  }
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b08a      	sub	sp, #40	; 0x28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d13d      	bne.n	800615c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UART_Receive_IT+0x22>
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e036      	b.n	800615e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Receive_IT+0x34>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e02f      	b.n	800615e <HAL_UART_Receive_IT+0x94>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d018      	beq.n	800614c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	613b      	str	r3, [r7, #16]
   return(result);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	623b      	str	r3, [r7, #32]
 800613a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	61bb      	str	r3, [r7, #24]
   return(result);
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e6      	bne.n	800611a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	461a      	mov	r2, r3
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 ff26 	bl	8006fa4 <UART_Start_Receive_IT>
 8006158:	4603      	mov	r3, r0
 800615a:	e000      	b.n	800615e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3728      	adds	r7, #40	; 0x28
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b0ba      	sub	sp, #232	; 0xe8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800618e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006192:	f640 030f 	movw	r3, #2063	; 0x80f
 8006196:	4013      	ands	r3, r2
 8006198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800619c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d115      	bne.n	80061d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80061a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00f      	beq.n	80061d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 82a4 	beq.w	800670e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
      }
      return;
 80061ce:	e29e      	b.n	800670e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8117 	beq.w	8006408 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061ea:	4b85      	ldr	r3, [pc, #532]	; (8006400 <HAL_UART_IRQHandler+0x298>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 810a 	beq.w	8006408 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d011      	beq.n	8006224 <HAL_UART_IRQHandler+0xbc>
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2201      	movs	r2, #1
 8006212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800621a:	f043 0201 	orr.w	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d011      	beq.n	8006254 <HAL_UART_IRQHandler+0xec>
 8006230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2202      	movs	r2, #2
 8006242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624a:	f043 0204 	orr.w	r2, r3, #4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d011      	beq.n	8006284 <HAL_UART_IRQHandler+0x11c>
 8006260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2204      	movs	r2, #4
 8006272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800627a:	f043 0202 	orr.w	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d017      	beq.n	80062c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800629c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2208      	movs	r2, #8
 80062ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b6:	f043 0208 	orr.w	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d012      	beq.n	80062f2 <HAL_UART_IRQHandler+0x18a>
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00c      	beq.n	80062f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 820a 	beq.w	8006712 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800630a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800632c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	d005      	beq.n	800634a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800633e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006342:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006346:	2b00      	cmp	r3, #0
 8006348:	d04f      	beq.n	80063ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fef4 	bl	8007138 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d141      	bne.n	80063e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3308      	adds	r3, #8
 8006386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800638a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800638e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1d9      	bne.n	800635e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <HAL_UART_IRQHandler+0x29c>)
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fd fbcf 	bl	8003b62 <HAL_DMA_Abort_IT>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d017      	beq.n	80063fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	e00f      	b.n	80063fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f9ae 	bl	800673c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	e00b      	b.n	80063fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f9aa 	bl	800673c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	e007      	b.n	80063fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9a6 	bl	800673c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063f8:	e18b      	b.n	8006712 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fa:	bf00      	nop
    return;
 80063fc:	e189      	b.n	8006712 <HAL_UART_IRQHandler+0x5aa>
 80063fe:	bf00      	nop
 8006400:	04000120 	.word	0x04000120
 8006404:	080071ff 	.word	0x080071ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640c:	2b01      	cmp	r3, #1
 800640e:	f040 8144 	bne.w	800669a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 813d 	beq.w	800669a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8136 	beq.w	800669a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2210      	movs	r2, #16
 8006434:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	f040 80b2 	bne.w	80065aa <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006452:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 815d 	beq.w	8006716 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006466:	429a      	cmp	r2, r3
 8006468:	f080 8155 	bcs.w	8006716 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006480:	f000 8085 	beq.w	800658e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800649c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1da      	bne.n	8006484 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e1      	bne.n	80064ce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800651a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800651c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800652e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800653c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e3      	bne.n	800650a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800655c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655e:	f023 0310 	bic.w	r3, r3, #16
 8006562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006570:	65bb      	str	r3, [r7, #88]	; 0x58
 8006572:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800657e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e4      	bne.n	800654e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	4618      	mov	r0, r3
 800658a:	f7fd fa7a 	bl	8003a82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800659a:	b29b      	uxth	r3, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	b29b      	uxth	r3, r3
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8d4 	bl	8006750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065a8:	e0b5      	b.n	8006716 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80a7 	beq.w	800671a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80065cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80a2 	beq.w	800671a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065f8:	647b      	str	r3, [r7, #68]	; 0x44
 80065fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e4      	bne.n	80065d6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	623b      	str	r3, [r7, #32]
   return(result);
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006630:	633a      	str	r2, [r7, #48]	; 0x30
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e3      	bne.n	800660c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	60fb      	str	r3, [r7, #12]
   return(result);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0310 	bic.w	r3, r3, #16
 800666a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	69b9      	ldr	r1, [r7, #24]
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	617b      	str	r3, [r7, #20]
   return(result);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e4      	bne.n	8006656 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800668c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f85c 	bl	8006750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006698:	e03f      	b.n	800671a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00e      	beq.n	80066c4 <HAL_UART_IRQHandler+0x55c>
 80066a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f853 	bl	8006768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066c2:	e02d      	b.n	8006720 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01c      	beq.n	800671e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
    }
    return;
 80066ec:	e017      	b.n	800671e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d012      	beq.n	8006720 <HAL_UART_IRQHandler+0x5b8>
 80066fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fd8f 	bl	800722a <UART_EndTransmit_IT>
    return;
 800670c:	e008      	b.n	8006720 <HAL_UART_IRQHandler+0x5b8>
      return;
 800670e:	bf00      	nop
 8006710:	e006      	b.n	8006720 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006712:	bf00      	nop
 8006714:	e004      	b.n	8006720 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006716:	bf00      	nop
 8006718:	e002      	b.n	8006720 <HAL_UART_IRQHandler+0x5b8>
      return;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <HAL_UART_IRQHandler+0x5b8>
    return;
 800671e:	bf00      	nop
  }

}
 8006720:	37e8      	adds	r7, #232	; 0xe8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop

08006728 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4ba6      	ldr	r3, [pc, #664]	; (8006a40 <UART_SetConfig+0x2c4>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a94      	ldr	r2, [pc, #592]	; (8006a44 <UART_SetConfig+0x2c8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d120      	bne.n	800683a <UART_SetConfig+0xbe>
 80067f8:	4b93      	ldr	r3, [pc, #588]	; (8006a48 <UART_SetConfig+0x2cc>)
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	2b03      	cmp	r3, #3
 8006804:	d816      	bhi.n	8006834 <UART_SetConfig+0xb8>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x90>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	0800681d 	.word	0x0800681d
 8006810:	08006829 	.word	0x08006829
 8006814:	08006823 	.word	0x08006823
 8006818:	0800682f 	.word	0x0800682f
 800681c:	2301      	movs	r3, #1
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e150      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006822:	2302      	movs	r3, #2
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e14d      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006828:	2304      	movs	r3, #4
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e14a      	b.n	8006ac4 <UART_SetConfig+0x348>
 800682e:	2308      	movs	r3, #8
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e147      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006834:	2310      	movs	r3, #16
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e144      	b.n	8006ac4 <UART_SetConfig+0x348>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a83      	ldr	r2, [pc, #524]	; (8006a4c <UART_SetConfig+0x2d0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d132      	bne.n	80068aa <UART_SetConfig+0x12e>
 8006844:	4b80      	ldr	r3, [pc, #512]	; (8006a48 <UART_SetConfig+0x2cc>)
 8006846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684a:	f003 030c 	and.w	r3, r3, #12
 800684e:	2b0c      	cmp	r3, #12
 8006850:	d828      	bhi.n	80068a4 <UART_SetConfig+0x128>
 8006852:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0xdc>)
 8006854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006858:	0800688d 	.word	0x0800688d
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068a5 	.word	0x080068a5
 8006864:	080068a5 	.word	0x080068a5
 8006868:	08006899 	.word	0x08006899
 800686c:	080068a5 	.word	0x080068a5
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080068a5 	.word	0x080068a5
 8006878:	08006893 	.word	0x08006893
 800687c:	080068a5 	.word	0x080068a5
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068a5 	.word	0x080068a5
 8006888:	0800689f 	.word	0x0800689f
 800688c:	2300      	movs	r3, #0
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e118      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006892:	2302      	movs	r3, #2
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e115      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006898:	2304      	movs	r3, #4
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e112      	b.n	8006ac4 <UART_SetConfig+0x348>
 800689e:	2308      	movs	r3, #8
 80068a0:	77fb      	strb	r3, [r7, #31]
 80068a2:	e10f      	b.n	8006ac4 <UART_SetConfig+0x348>
 80068a4:	2310      	movs	r3, #16
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e10c      	b.n	8006ac4 <UART_SetConfig+0x348>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a68      	ldr	r2, [pc, #416]	; (8006a50 <UART_SetConfig+0x2d4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d120      	bne.n	80068f6 <UART_SetConfig+0x17a>
 80068b4:	4b64      	ldr	r3, [pc, #400]	; (8006a48 <UART_SetConfig+0x2cc>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068be:	2b30      	cmp	r3, #48	; 0x30
 80068c0:	d013      	beq.n	80068ea <UART_SetConfig+0x16e>
 80068c2:	2b30      	cmp	r3, #48	; 0x30
 80068c4:	d814      	bhi.n	80068f0 <UART_SetConfig+0x174>
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d009      	beq.n	80068de <UART_SetConfig+0x162>
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d810      	bhi.n	80068f0 <UART_SetConfig+0x174>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <UART_SetConfig+0x15c>
 80068d2:	2b10      	cmp	r3, #16
 80068d4:	d006      	beq.n	80068e4 <UART_SetConfig+0x168>
 80068d6:	e00b      	b.n	80068f0 <UART_SetConfig+0x174>
 80068d8:	2300      	movs	r3, #0
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e0f2      	b.n	8006ac4 <UART_SetConfig+0x348>
 80068de:	2302      	movs	r3, #2
 80068e0:	77fb      	strb	r3, [r7, #31]
 80068e2:	e0ef      	b.n	8006ac4 <UART_SetConfig+0x348>
 80068e4:	2304      	movs	r3, #4
 80068e6:	77fb      	strb	r3, [r7, #31]
 80068e8:	e0ec      	b.n	8006ac4 <UART_SetConfig+0x348>
 80068ea:	2308      	movs	r3, #8
 80068ec:	77fb      	strb	r3, [r7, #31]
 80068ee:	e0e9      	b.n	8006ac4 <UART_SetConfig+0x348>
 80068f0:	2310      	movs	r3, #16
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e0e6      	b.n	8006ac4 <UART_SetConfig+0x348>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a56      	ldr	r2, [pc, #344]	; (8006a54 <UART_SetConfig+0x2d8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d120      	bne.n	8006942 <UART_SetConfig+0x1c6>
 8006900:	4b51      	ldr	r3, [pc, #324]	; (8006a48 <UART_SetConfig+0x2cc>)
 8006902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800690a:	2bc0      	cmp	r3, #192	; 0xc0
 800690c:	d013      	beq.n	8006936 <UART_SetConfig+0x1ba>
 800690e:	2bc0      	cmp	r3, #192	; 0xc0
 8006910:	d814      	bhi.n	800693c <UART_SetConfig+0x1c0>
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d009      	beq.n	800692a <UART_SetConfig+0x1ae>
 8006916:	2b80      	cmp	r3, #128	; 0x80
 8006918:	d810      	bhi.n	800693c <UART_SetConfig+0x1c0>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <UART_SetConfig+0x1a8>
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d006      	beq.n	8006930 <UART_SetConfig+0x1b4>
 8006922:	e00b      	b.n	800693c <UART_SetConfig+0x1c0>
 8006924:	2300      	movs	r3, #0
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e0cc      	b.n	8006ac4 <UART_SetConfig+0x348>
 800692a:	2302      	movs	r3, #2
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e0c9      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006930:	2304      	movs	r3, #4
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e0c6      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006936:	2308      	movs	r3, #8
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e0c3      	b.n	8006ac4 <UART_SetConfig+0x348>
 800693c:	2310      	movs	r3, #16
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e0c0      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a44      	ldr	r2, [pc, #272]	; (8006a58 <UART_SetConfig+0x2dc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d125      	bne.n	8006998 <UART_SetConfig+0x21c>
 800694c:	4b3e      	ldr	r3, [pc, #248]	; (8006a48 <UART_SetConfig+0x2cc>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800695a:	d017      	beq.n	800698c <UART_SetConfig+0x210>
 800695c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006960:	d817      	bhi.n	8006992 <UART_SetConfig+0x216>
 8006962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006966:	d00b      	beq.n	8006980 <UART_SetConfig+0x204>
 8006968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696c:	d811      	bhi.n	8006992 <UART_SetConfig+0x216>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <UART_SetConfig+0x1fe>
 8006972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006976:	d006      	beq.n	8006986 <UART_SetConfig+0x20a>
 8006978:	e00b      	b.n	8006992 <UART_SetConfig+0x216>
 800697a:	2300      	movs	r3, #0
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e0a1      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006980:	2302      	movs	r3, #2
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e09e      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006986:	2304      	movs	r3, #4
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e09b      	b.n	8006ac4 <UART_SetConfig+0x348>
 800698c:	2308      	movs	r3, #8
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e098      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006992:	2310      	movs	r3, #16
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e095      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a2f      	ldr	r2, [pc, #188]	; (8006a5c <UART_SetConfig+0x2e0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d125      	bne.n	80069ee <UART_SetConfig+0x272>
 80069a2:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <UART_SetConfig+0x2cc>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069b0:	d017      	beq.n	80069e2 <UART_SetConfig+0x266>
 80069b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069b6:	d817      	bhi.n	80069e8 <UART_SetConfig+0x26c>
 80069b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069bc:	d00b      	beq.n	80069d6 <UART_SetConfig+0x25a>
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d811      	bhi.n	80069e8 <UART_SetConfig+0x26c>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <UART_SetConfig+0x254>
 80069c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069cc:	d006      	beq.n	80069dc <UART_SetConfig+0x260>
 80069ce:	e00b      	b.n	80069e8 <UART_SetConfig+0x26c>
 80069d0:	2301      	movs	r3, #1
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e076      	b.n	8006ac4 <UART_SetConfig+0x348>
 80069d6:	2302      	movs	r3, #2
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e073      	b.n	8006ac4 <UART_SetConfig+0x348>
 80069dc:	2304      	movs	r3, #4
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e070      	b.n	8006ac4 <UART_SetConfig+0x348>
 80069e2:	2308      	movs	r3, #8
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e06d      	b.n	8006ac4 <UART_SetConfig+0x348>
 80069e8:	2310      	movs	r3, #16
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e06a      	b.n	8006ac4 <UART_SetConfig+0x348>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <UART_SetConfig+0x2e4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d138      	bne.n	8006a6a <UART_SetConfig+0x2ee>
 80069f8:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <UART_SetConfig+0x2cc>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a06:	d017      	beq.n	8006a38 <UART_SetConfig+0x2bc>
 8006a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a0c:	d82a      	bhi.n	8006a64 <UART_SetConfig+0x2e8>
 8006a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a12:	d00b      	beq.n	8006a2c <UART_SetConfig+0x2b0>
 8006a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a18:	d824      	bhi.n	8006a64 <UART_SetConfig+0x2e8>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <UART_SetConfig+0x2aa>
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a22:	d006      	beq.n	8006a32 <UART_SetConfig+0x2b6>
 8006a24:	e01e      	b.n	8006a64 <UART_SetConfig+0x2e8>
 8006a26:	2300      	movs	r3, #0
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e04b      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e048      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006a32:	2304      	movs	r3, #4
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e045      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e042      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006a3e:	bf00      	nop
 8006a40:	efff69f3 	.word	0xefff69f3
 8006a44:	40011000 	.word	0x40011000
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40004400 	.word	0x40004400
 8006a50:	40004800 	.word	0x40004800
 8006a54:	40004c00 	.word	0x40004c00
 8006a58:	40005000 	.word	0x40005000
 8006a5c:	40011400 	.word	0x40011400
 8006a60:	40007800 	.word	0x40007800
 8006a64:	2310      	movs	r3, #16
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e02c      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a72      	ldr	r2, [pc, #456]	; (8006c38 <UART_SetConfig+0x4bc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d125      	bne.n	8006ac0 <UART_SetConfig+0x344>
 8006a74:	4b71      	ldr	r3, [pc, #452]	; (8006c3c <UART_SetConfig+0x4c0>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a82:	d017      	beq.n	8006ab4 <UART_SetConfig+0x338>
 8006a84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a88:	d817      	bhi.n	8006aba <UART_SetConfig+0x33e>
 8006a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a8e:	d00b      	beq.n	8006aa8 <UART_SetConfig+0x32c>
 8006a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a94:	d811      	bhi.n	8006aba <UART_SetConfig+0x33e>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <UART_SetConfig+0x326>
 8006a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a9e:	d006      	beq.n	8006aae <UART_SetConfig+0x332>
 8006aa0:	e00b      	b.n	8006aba <UART_SetConfig+0x33e>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e00d      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e00a      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e007      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e004      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006aba:	2310      	movs	r3, #16
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e001      	b.n	8006ac4 <UART_SetConfig+0x348>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006acc:	d15b      	bne.n	8006b86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ace:	7ffb      	ldrb	r3, [r7, #31]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d828      	bhi.n	8006b26 <UART_SetConfig+0x3aa>
 8006ad4:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <UART_SetConfig+0x360>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	08006b27 	.word	0x08006b27
 8006aec:	08006b17 	.word	0x08006b17
 8006af0:	08006b27 	.word	0x08006b27
 8006af4:	08006b27 	.word	0x08006b27
 8006af8:	08006b27 	.word	0x08006b27
 8006afc:	08006b1f 	.word	0x08006b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b00:	f7fe f89e 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 8006b04:	61b8      	str	r0, [r7, #24]
        break;
 8006b06:	e013      	b.n	8006b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b08:	f7fe f8ae 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 8006b0c:	61b8      	str	r0, [r7, #24]
        break;
 8006b0e:	e00f      	b.n	8006b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b10:	4b4b      	ldr	r3, [pc, #300]	; (8006c40 <UART_SetConfig+0x4c4>)
 8006b12:	61bb      	str	r3, [r7, #24]
        break;
 8006b14:	e00c      	b.n	8006b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b16:	f7fd ff81 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 8006b1a:	61b8      	str	r0, [r7, #24]
        break;
 8006b1c:	e008      	b.n	8006b30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b22:	61bb      	str	r3, [r7, #24]
        break;
 8006b24:	e004      	b.n	8006b30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d074      	beq.n	8006c20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	005a      	lsls	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	441a      	add	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d916      	bls.n	8006b80 <UART_SetConfig+0x404>
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d212      	bcs.n	8006b80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f023 030f 	bic.w	r3, r3, #15
 8006b62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	89fb      	ldrh	r3, [r7, #14]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	89fa      	ldrh	r2, [r7, #14]
 8006b7c:	60da      	str	r2, [r3, #12]
 8006b7e:	e04f      	b.n	8006c20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	77bb      	strb	r3, [r7, #30]
 8006b84:	e04c      	b.n	8006c20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b86:	7ffb      	ldrb	r3, [r7, #31]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d828      	bhi.n	8006bde <UART_SetConfig+0x462>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x418>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bc1 	.word	0x08006bc1
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	08006bdf 	.word	0x08006bdf
 8006ba4:	08006bcf 	.word	0x08006bcf
 8006ba8:	08006bdf 	.word	0x08006bdf
 8006bac:	08006bdf 	.word	0x08006bdf
 8006bb0:	08006bdf 	.word	0x08006bdf
 8006bb4:	08006bd7 	.word	0x08006bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb8:	f7fe f842 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 8006bbc:	61b8      	str	r0, [r7, #24]
        break;
 8006bbe:	e013      	b.n	8006be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7fe f852 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 8006bc4:	61b8      	str	r0, [r7, #24]
        break;
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc8:	4b1d      	ldr	r3, [pc, #116]	; (8006c40 <UART_SetConfig+0x4c4>)
 8006bca:	61bb      	str	r3, [r7, #24]
        break;
 8006bcc:	e00c      	b.n	8006be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bce:	f7fd ff25 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 8006bd2:	61b8      	str	r0, [r7, #24]
        break;
 8006bd4:	e008      	b.n	8006be8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bda:	61bb      	str	r3, [r7, #24]
        break;
 8006bdc:	e004      	b.n	8006be8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	77bb      	strb	r3, [r7, #30]
        break;
 8006be6:	bf00      	nop
    }

    if (pclk != 0U)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d018      	beq.n	8006c20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	085a      	lsrs	r2, r3, #1
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	441a      	add	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b0f      	cmp	r3, #15
 8006c06:	d909      	bls.n	8006c1c <UART_SetConfig+0x4a0>
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0e:	d205      	bcs.n	8006c1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	60da      	str	r2, [r3, #12]
 8006c1a:	e001      	b.n	8006c20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40007c00 	.word	0x40007c00
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	00f42400 	.word	0x00f42400

08006c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d42:	d10a      	bne.n	8006d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d98:	f7fb fec4 	bl	8002b24 <HAL_GetTick>
 8006d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d10e      	bne.n	8006dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f82d 	bl	8006e1a <UART_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e023      	b.n	8006e12 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d10e      	bne.n	8006df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f817 	bl	8006e1a <UART_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e00d      	b.n	8006e12 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b09c      	sub	sp, #112	; 0x70
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	4613      	mov	r3, r2
 8006e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e2a:	e0a5      	b.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	f000 80a1 	beq.w	8006f78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e36:	f7fb fe75 	bl	8002b24 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d13e      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e60:	667b      	str	r3, [r7, #100]	; 0x64
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e6      	bne.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	f023 0301 	bic.w	r3, r3, #1
 8006e94:	663b      	str	r3, [r7, #96]	; 0x60
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ea0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e5      	bne.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e067      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d04f      	beq.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee6:	d147      	bne.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
 8006f12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e6      	bne.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	613b      	str	r3, [r7, #16]
   return(result);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f44:	623a      	str	r2, [r7, #32]
 8006f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	69f9      	ldr	r1, [r7, #28]
 8006f4a:	6a3a      	ldr	r2, [r7, #32]
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e010      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4013      	ands	r3, r2
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	bf0c      	ite	eq
 8006f88:	2301      	moveq	r3, #1
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	f43f af4a 	beq.w	8006e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3770      	adds	r7, #112	; 0x70
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b097      	sub	sp, #92	; 0x5c
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	88fa      	ldrh	r2, [r7, #6]
 8006fbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd6:	d10e      	bne.n	8006ff6 <UART_Start_Receive_IT+0x52>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <UART_Start_Receive_IT+0x48>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fea:	e02d      	b.n	8007048 <UART_Start_Receive_IT+0xa4>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	22ff      	movs	r2, #255	; 0xff
 8006ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ff4:	e028      	b.n	8007048 <UART_Start_Receive_IT+0xa4>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <UART_Start_Receive_IT+0x76>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <UART_Start_Receive_IT+0x6c>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	22ff      	movs	r2, #255	; 0xff
 800700a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800700e:	e01b      	b.n	8007048 <UART_Start_Receive_IT+0xa4>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	227f      	movs	r2, #127	; 0x7f
 8007014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007018:	e016      	b.n	8007048 <UART_Start_Receive_IT+0xa4>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007022:	d10d      	bne.n	8007040 <UART_Start_Receive_IT+0x9c>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <UART_Start_Receive_IT+0x92>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	227f      	movs	r2, #127	; 0x7f
 8007030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007034:	e008      	b.n	8007048 <UART_Start_Receive_IT+0xa4>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	223f      	movs	r2, #63	; 0x3f
 800703a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800703e:	e003      	b.n	8007048 <UART_Start_Receive_IT+0xa4>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2222      	movs	r2, #34	; 0x22
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	657b      	str	r3, [r7, #84]	; 0x54
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007076:	64ba      	str	r2, [r7, #72]	; 0x48
 8007078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800707c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007092:	d107      	bne.n	80070a4 <UART_Start_Receive_IT+0x100>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a24      	ldr	r2, [pc, #144]	; (8007130 <UART_Start_Receive_IT+0x18c>)
 80070a0:	665a      	str	r2, [r3, #100]	; 0x64
 80070a2:	e002      	b.n	80070aa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4a23      	ldr	r2, [pc, #140]	; (8007134 <UART_Start_Receive_IT+0x190>)
 80070a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d019      	beq.n	80070ee <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
 80070da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e6      	bne.n	80070ba <UART_Start_Receive_IT+0x116>
 80070ec:	e018      	b.n	8007120 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	613b      	str	r3, [r7, #16]
   return(result);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f043 0320 	orr.w	r3, r3, #32
 8007102:	653b      	str	r3, [r7, #80]	; 0x50
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	623b      	str	r3, [r7, #32]
 800710e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	61bb      	str	r3, [r7, #24]
   return(result);
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e6      	bne.n	80070ee <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	375c      	adds	r7, #92	; 0x5c
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	080073db 	.word	0x080073db
 8007134:	0800727f 	.word	0x0800727f

08007138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b095      	sub	sp, #84	; 0x54
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007154:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715e:	643b      	str	r3, [r7, #64]	; 0x40
 8007160:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e6      	bne.n	8007140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	61fb      	str	r3, [r7, #28]
   return(result);
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	f023 0301 	bic.w	r3, r3, #1
 8007188:	64bb      	str	r3, [r7, #72]	; 0x48
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e5      	bne.n	8007172 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d118      	bne.n	80071e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	647b      	str	r3, [r7, #68]	; 0x44
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6979      	ldr	r1, [r7, #20]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	613b      	str	r3, [r7, #16]
   return(result);
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e6      	bne.n	80071ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071f2:	bf00      	nop
 80071f4:	3754      	adds	r7, #84	; 0x54
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fa8d 	bl	800673c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b088      	sub	sp, #32
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6979      	ldr	r1, [r7, #20]
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	613b      	str	r3, [r7, #16]
   return(result);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e6      	bne.n	8007232 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff fa59 	bl	8006728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007276:	bf00      	nop
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b096      	sub	sp, #88	; 0x58
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800728c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007294:	2b22      	cmp	r3, #34	; 0x22
 8007296:	f040 8094 	bne.w	80073c2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80072a8:	b2d9      	uxtb	r1, r3
 80072aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b4:	400a      	ands	r2, r1
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d177      	bne.n	80073d2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072f6:	653b      	str	r3, [r7, #80]	; 0x50
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007300:	647b      	str	r3, [r7, #68]	; 0x44
 8007302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	623b      	str	r3, [r7, #32]
   return(result);
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	f023 0301 	bic.w	r3, r3, #1
 800732a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007334:	633a      	str	r2, [r7, #48]	; 0x30
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800733a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e5      	bne.n	8007314 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007358:	2b01      	cmp	r3, #1
 800735a:	d12e      	bne.n	80073ba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 0310 	bic.w	r3, r3, #16
 8007376:	64bb      	str	r3, [r7, #72]	; 0x48
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	69b9      	ldr	r1, [r7, #24]
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	617b      	str	r3, [r7, #20]
   return(result);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e6      	bne.n	8007362 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d103      	bne.n	80073aa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2210      	movs	r2, #16
 80073a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff f9cc 	bl	8006750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073b8:	e00b      	b.n	80073d2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fa fc6a 	bl	8001c94 <HAL_UART_RxCpltCallback>
}
 80073c0:	e007      	b.n	80073d2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0208 	orr.w	r2, r2, #8
 80073d0:	619a      	str	r2, [r3, #24]
}
 80073d2:	bf00      	nop
 80073d4:	3758      	adds	r7, #88	; 0x58
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b096      	sub	sp, #88	; 0x58
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f0:	2b22      	cmp	r3, #34	; 0x22
 80073f2:	f040 8094 	bne.w	800751e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007404:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007406:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800740a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800740e:	4013      	ands	r3, r2
 8007410:	b29a      	uxth	r2, r3
 8007412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007414:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	1c9a      	adds	r2, r3, #2
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d177      	bne.n	800752e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745c:	643b      	str	r3, [r7, #64]	; 0x40
 800745e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e6      	bne.n	800743e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	64bb      	str	r3, [r7, #72]	; 0x48
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3308      	adds	r3, #8
 800748e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e5      	bne.n	8007470 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2220      	movs	r2, #32
 80074a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d12e      	bne.n	8007516 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f023 0310 	bic.w	r3, r3, #16
 80074d2:	647b      	str	r3, [r7, #68]	; 0x44
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	6979      	ldr	r1, [r7, #20]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e6      	bne.n	80074be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d103      	bne.n	8007506 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2210      	movs	r2, #16
 8007504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff f91e 	bl	8006750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007514:	e00b      	b.n	800752e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fa fbbc 	bl	8001c94 <HAL_UART_RxCpltCallback>
}
 800751c:	e007      	b.n	800752e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0208 	orr.w	r2, r2, #8
 800752c:	619a      	str	r2, [r3, #24]
}
 800752e:	bf00      	nop
 8007530:	3758      	adds	r7, #88	; 0x58
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007538:	b084      	sub	sp, #16
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	f107 001c 	add.w	r0, r7, #28
 8007546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b01      	cmp	r3, #1
 800754e:	d120      	bne.n	8007592 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	4b20      	ldr	r3, [pc, #128]	; (80075e4 <USB_CoreInit+0xac>)
 8007562:	4013      	ands	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007576:	2b01      	cmp	r3, #1
 8007578:	d105      	bne.n	8007586 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa92 	bl	8007ab0 <USB_CoreReset>
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]
 8007590:	e010      	b.n	80075b4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa86 	bl	8007ab0 <USB_CoreReset>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d10b      	bne.n	80075d2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f043 0206 	orr.w	r2, r3, #6
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f043 0220 	orr.w	r2, r3, #32
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075de:	b004      	add	sp, #16
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	ffbdffbf 	.word	0xffbdffbf

080075e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f023 0201 	bic.w	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d115      	bne.n	8007658 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007638:	2001      	movs	r0, #1
 800763a:	f7fb fa7f 	bl	8002b3c <HAL_Delay>
      ms++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fa25 	bl	8007a94 <USB_GetMode>
 800764a:	4603      	mov	r3, r0
 800764c:	2b01      	cmp	r3, #1
 800764e:	d01e      	beq.n	800768e <USB_SetCurrentMode+0x84>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b31      	cmp	r3, #49	; 0x31
 8007654:	d9f0      	bls.n	8007638 <USB_SetCurrentMode+0x2e>
 8007656:	e01a      	b.n	800768e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d115      	bne.n	800768a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800766a:	2001      	movs	r0, #1
 800766c:	f7fb fa66 	bl	8002b3c <HAL_Delay>
      ms++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa0c 	bl	8007a94 <USB_GetMode>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <USB_SetCurrentMode+0x84>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b31      	cmp	r3, #49	; 0x31
 8007686:	d9f0      	bls.n	800766a <USB_SetCurrentMode+0x60>
 8007688:	e001      	b.n	800768e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e005      	b.n	800769a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b32      	cmp	r3, #50	; 0x32
 8007692:	d101      	bne.n	8007698 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076a4:	b084      	sub	sp, #16
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b086      	sub	sp, #24
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076be:	2300      	movs	r3, #0
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e009      	b.n	80076d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3340      	adds	r3, #64	; 0x40
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3301      	adds	r3, #1
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b0e      	cmp	r3, #14
 80076dc:	d9f2      	bls.n	80076c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d11c      	bne.n	800771e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f2:	f043 0302 	orr.w	r3, r3, #2
 80076f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e005      	b.n	800772a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007730:	461a      	mov	r2, r3
 8007732:	2300      	movs	r3, #0
 8007734:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773c:	4619      	mov	r1, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007744:	461a      	mov	r2, r3
 8007746:	680b      	ldr	r3, [r1, #0]
 8007748:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	2b01      	cmp	r3, #1
 800774e:	d10c      	bne.n	800776a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007756:	2100      	movs	r1, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f961 	bl	8007a20 <USB_SetDevSpeed>
 800775e:	e008      	b.n	8007772 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007760:	2101      	movs	r1, #1
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f95c 	bl	8007a20 <USB_SetDevSpeed>
 8007768:	e003      	b.n	8007772 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800776a:	2103      	movs	r1, #3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f957 	bl	8007a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007772:	2110      	movs	r1, #16
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8f3 	bl	8007960 <USB_FlushTxFifo>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f91d 	bl	80079c4 <USB_FlushRxFifo>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	461a      	mov	r2, r3
 800779c:	2300      	movs	r3, #0
 800779e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	461a      	mov	r2, r3
 80077a8:	2300      	movs	r3, #0
 80077aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b2:	461a      	mov	r2, r3
 80077b4:	2300      	movs	r3, #0
 80077b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077b8:	2300      	movs	r3, #0
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	e043      	b.n	8007846 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d4:	d118      	bne.n	8007808 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	461a      	mov	r2, r3
 80077ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	e013      	b.n	800781a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fe:	461a      	mov	r2, r3
 8007800:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	e008      	b.n	800781a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	461a      	mov	r2, r3
 8007816:	2300      	movs	r3, #0
 8007818:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007826:	461a      	mov	r2, r3
 8007828:	2300      	movs	r3, #0
 800782a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	461a      	mov	r2, r3
 800783a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800783e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3301      	adds	r3, #1
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d3b7      	bcc.n	80077be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800784e:	2300      	movs	r3, #0
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	e043      	b.n	80078dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786a:	d118      	bne.n	800789e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	461a      	mov	r2, r3
 8007880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e013      	b.n	80078b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	461a      	mov	r2, r3
 8007896:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	e008      	b.n	80078b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078aa:	461a      	mov	r2, r3
 80078ac:	2300      	movs	r3, #0
 80078ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078bc:	461a      	mov	r2, r3
 80078be:	2300      	movs	r3, #0
 80078c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ce:	461a      	mov	r2, r3
 80078d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	3301      	adds	r3, #1
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d3b7      	bcc.n	8007854 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007904:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d105      	bne.n	8007918 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f043 0210 	orr.w	r2, r3, #16
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <USB_DevInit+0x2b4>)
 800791e:	4313      	orrs	r3, r2
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f043 0208 	orr.w	r2, r3, #8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d105      	bne.n	8007948 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699a      	ldr	r2, [r3, #24]
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <USB_DevInit+0x2b8>)
 8007942:	4313      	orrs	r3, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007954:	b004      	add	sp, #16
 8007956:	4770      	bx	lr
 8007958:	803c3800 	.word	0x803c3800
 800795c:	40000004 	.word	0x40000004

08007960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3301      	adds	r3, #1
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	4a12      	ldr	r2, [pc, #72]	; (80079c0 <USB_FlushTxFifo+0x60>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e01a      	b.n	80079b4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	daf3      	bge.n	800796e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	019b      	lsls	r3, r3, #6
 800798e:	f043 0220 	orr.w	r2, r3, #32
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	4a08      	ldr	r2, [pc, #32]	; (80079c0 <USB_FlushTxFifo+0x60>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d901      	bls.n	80079a6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e006      	b.n	80079b4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d0f1      	beq.n	8007996 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	00030d40 	.word	0x00030d40

080079c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <USB_FlushRxFifo+0x58>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d901      	bls.n	80079e0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e017      	b.n	8007a10 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	daf3      	bge.n	80079d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2210      	movs	r2, #16
 80079f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <USB_FlushRxFifo+0x58>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d901      	bls.n	8007a02 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e006      	b.n	8007a10 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0310 	and.w	r3, r3, #16
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d0f1      	beq.n	80079f2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	00030d40 	.word	0x00030d40

08007a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a40:	4313      	orrs	r3, r2
 8007a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a6c:	f023 0303 	bic.w	r3, r3, #3
 8007a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a80:	f043 0302 	orr.w	r3, r3, #2
 8007a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <USB_CoreReset+0x60>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d901      	bls.n	8007acc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e01a      	b.n	8007b02 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	daf3      	bge.n	8007abc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	f043 0201 	orr.w	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <USB_CoreReset+0x60>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d901      	bls.n	8007af4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e006      	b.n	8007b02 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d0f1      	beq.n	8007ae4 <USB_CoreReset+0x34>

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	00030d40 	.word	0x00030d40

08007b14 <atoi>:
 8007b14:	220a      	movs	r2, #10
 8007b16:	2100      	movs	r1, #0
 8007b18:	f000 bd2a 	b.w	8008570 <strtol>

08007b1c <__errno>:
 8007b1c:	4b01      	ldr	r3, [pc, #4]	; (8007b24 <__errno+0x8>)
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000028 	.word	0x20000028

08007b28 <__libc_init_array>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	4d0d      	ldr	r5, [pc, #52]	; (8007b60 <__libc_init_array+0x38>)
 8007b2c:	4c0d      	ldr	r4, [pc, #52]	; (8007b64 <__libc_init_array+0x3c>)
 8007b2e:	1b64      	subs	r4, r4, r5
 8007b30:	10a4      	asrs	r4, r4, #2
 8007b32:	2600      	movs	r6, #0
 8007b34:	42a6      	cmp	r6, r4
 8007b36:	d109      	bne.n	8007b4c <__libc_init_array+0x24>
 8007b38:	4d0b      	ldr	r5, [pc, #44]	; (8007b68 <__libc_init_array+0x40>)
 8007b3a:	4c0c      	ldr	r4, [pc, #48]	; (8007b6c <__libc_init_array+0x44>)
 8007b3c:	f002 fefc 	bl	800a938 <_init>
 8007b40:	1b64      	subs	r4, r4, r5
 8007b42:	10a4      	asrs	r4, r4, #2
 8007b44:	2600      	movs	r6, #0
 8007b46:	42a6      	cmp	r6, r4
 8007b48:	d105      	bne.n	8007b56 <__libc_init_array+0x2e>
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b50:	4798      	blx	r3
 8007b52:	3601      	adds	r6, #1
 8007b54:	e7ee      	b.n	8007b34 <__libc_init_array+0xc>
 8007b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5a:	4798      	blx	r3
 8007b5c:	3601      	adds	r6, #1
 8007b5e:	e7f2      	b.n	8007b46 <__libc_init_array+0x1e>
 8007b60:	0800add4 	.word	0x0800add4
 8007b64:	0800add4 	.word	0x0800add4
 8007b68:	0800add4 	.word	0x0800add4
 8007b6c:	0800add8 	.word	0x0800add8

08007b70 <memset>:
 8007b70:	4402      	add	r2, r0
 8007b72:	4603      	mov	r3, r0
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d100      	bne.n	8007b7a <memset+0xa>
 8007b78:	4770      	bx	lr
 8007b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7e:	e7f9      	b.n	8007b74 <memset+0x4>

08007b80 <__cvt>:
 8007b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b82:	ed2d 8b02 	vpush	{d8}
 8007b86:	eeb0 8b40 	vmov.f64	d8, d0
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	4617      	mov	r7, r2
 8007b8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007b90:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b92:	ee18 2a90 	vmov	r2, s17
 8007b96:	f025 0520 	bic.w	r5, r5, #32
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	bfb6      	itet	lt
 8007b9e:	222d      	movlt	r2, #45	; 0x2d
 8007ba0:	2200      	movge	r2, #0
 8007ba2:	eeb1 8b40 	vneglt.f64	d8, d0
 8007ba6:	2d46      	cmp	r5, #70	; 0x46
 8007ba8:	460c      	mov	r4, r1
 8007baa:	701a      	strb	r2, [r3, #0]
 8007bac:	d004      	beq.n	8007bb8 <__cvt+0x38>
 8007bae:	2d45      	cmp	r5, #69	; 0x45
 8007bb0:	d100      	bne.n	8007bb4 <__cvt+0x34>
 8007bb2:	3401      	adds	r4, #1
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	e000      	b.n	8007bba <__cvt+0x3a>
 8007bb8:	2103      	movs	r1, #3
 8007bba:	ab03      	add	r3, sp, #12
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	ab02      	add	r3, sp, #8
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	4633      	mov	r3, r6
 8007bc6:	eeb0 0b48 	vmov.f64	d0, d8
 8007bca:	f000 fd69 	bl	80086a0 <_dtoa_r>
 8007bce:	2d47      	cmp	r5, #71	; 0x47
 8007bd0:	d101      	bne.n	8007bd6 <__cvt+0x56>
 8007bd2:	07fb      	lsls	r3, r7, #31
 8007bd4:	d51a      	bpl.n	8007c0c <__cvt+0x8c>
 8007bd6:	2d46      	cmp	r5, #70	; 0x46
 8007bd8:	eb00 0204 	add.w	r2, r0, r4
 8007bdc:	d10c      	bne.n	8007bf8 <__cvt+0x78>
 8007bde:	7803      	ldrb	r3, [r0, #0]
 8007be0:	2b30      	cmp	r3, #48	; 0x30
 8007be2:	d107      	bne.n	8007bf4 <__cvt+0x74>
 8007be4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bec:	bf1c      	itt	ne
 8007bee:	f1c4 0401 	rsbne	r4, r4, #1
 8007bf2:	6034      	strne	r4, [r6, #0]
 8007bf4:	6833      	ldr	r3, [r6, #0]
 8007bf6:	441a      	add	r2, r3
 8007bf8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c00:	bf08      	it	eq
 8007c02:	9203      	streq	r2, [sp, #12]
 8007c04:	2130      	movs	r1, #48	; 0x30
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d307      	bcc.n	8007c1c <__cvt+0x9c>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c10:	1a1b      	subs	r3, r3, r0
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	b005      	add	sp, #20
 8007c16:	ecbd 8b02 	vpop	{d8}
 8007c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c1c:	1c5c      	adds	r4, r3, #1
 8007c1e:	9403      	str	r4, [sp, #12]
 8007c20:	7019      	strb	r1, [r3, #0]
 8007c22:	e7f0      	b.n	8007c06 <__cvt+0x86>

08007c24 <__exponent>:
 8007c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c26:	4603      	mov	r3, r0
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	bfb8      	it	lt
 8007c2c:	4249      	neglt	r1, r1
 8007c2e:	f803 2b02 	strb.w	r2, [r3], #2
 8007c32:	bfb4      	ite	lt
 8007c34:	222d      	movlt	r2, #45	; 0x2d
 8007c36:	222b      	movge	r2, #43	; 0x2b
 8007c38:	2909      	cmp	r1, #9
 8007c3a:	7042      	strb	r2, [r0, #1]
 8007c3c:	dd2a      	ble.n	8007c94 <__exponent+0x70>
 8007c3e:	f10d 0407 	add.w	r4, sp, #7
 8007c42:	46a4      	mov	ip, r4
 8007c44:	270a      	movs	r7, #10
 8007c46:	46a6      	mov	lr, r4
 8007c48:	460a      	mov	r2, r1
 8007c4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c4e:	fb07 1516 	mls	r5, r7, r6, r1
 8007c52:	3530      	adds	r5, #48	; 0x30
 8007c54:	2a63      	cmp	r2, #99	; 0x63
 8007c56:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c5e:	4631      	mov	r1, r6
 8007c60:	dcf1      	bgt.n	8007c46 <__exponent+0x22>
 8007c62:	3130      	adds	r1, #48	; 0x30
 8007c64:	f1ae 0502 	sub.w	r5, lr, #2
 8007c68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c6c:	1c44      	adds	r4, r0, #1
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4561      	cmp	r1, ip
 8007c72:	d30a      	bcc.n	8007c8a <__exponent+0x66>
 8007c74:	f10d 0209 	add.w	r2, sp, #9
 8007c78:	eba2 020e 	sub.w	r2, r2, lr
 8007c7c:	4565      	cmp	r5, ip
 8007c7e:	bf88      	it	hi
 8007c80:	2200      	movhi	r2, #0
 8007c82:	4413      	add	r3, r2
 8007c84:	1a18      	subs	r0, r3, r0
 8007c86:	b003      	add	sp, #12
 8007c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c92:	e7ed      	b.n	8007c70 <__exponent+0x4c>
 8007c94:	2330      	movs	r3, #48	; 0x30
 8007c96:	3130      	adds	r1, #48	; 0x30
 8007c98:	7083      	strb	r3, [r0, #2]
 8007c9a:	70c1      	strb	r1, [r0, #3]
 8007c9c:	1d03      	adds	r3, r0, #4
 8007c9e:	e7f1      	b.n	8007c84 <__exponent+0x60>

08007ca0 <_printf_float>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	b08b      	sub	sp, #44	; 0x2c
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007cac:	4616      	mov	r6, r2
 8007cae:	461f      	mov	r7, r3
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	f001 fa63 	bl	800917c <_localeconv_r>
 8007cb6:	f8d0 b000 	ldr.w	fp, [r0]
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f7f8 fac0 	bl	8000240 <strlen>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9308      	str	r3, [sp, #32]
 8007cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007ccc:	6822      	ldr	r2, [r4, #0]
 8007cce:	3307      	adds	r3, #7
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	f103 0108 	add.w	r1, r3, #8
 8007cd8:	f8c8 1000 	str.w	r1, [r8]
 8007cdc:	4682      	mov	sl, r0
 8007cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ce2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007ce6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007f48 <_printf_float+0x2a8>
 8007cea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007cee:	eeb0 6bc0 	vabs.f64	d6, d0
 8007cf2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfa:	dd24      	ble.n	8007d46 <_printf_float+0xa6>
 8007cfc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d04:	d502      	bpl.n	8007d0c <_printf_float+0x6c>
 8007d06:	232d      	movs	r3, #45	; 0x2d
 8007d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d0c:	4b90      	ldr	r3, [pc, #576]	; (8007f50 <_printf_float+0x2b0>)
 8007d0e:	4891      	ldr	r0, [pc, #580]	; (8007f54 <_printf_float+0x2b4>)
 8007d10:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007d14:	bf94      	ite	ls
 8007d16:	4698      	movls	r8, r3
 8007d18:	4680      	movhi	r8, r0
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	f022 0204 	bic.w	r2, r2, #4
 8007d22:	2300      	movs	r3, #0
 8007d24:	6022      	str	r2, [r4, #0]
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	9700      	str	r7, [sp, #0]
 8007d2a:	4633      	mov	r3, r6
 8007d2c:	aa09      	add	r2, sp, #36	; 0x24
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f9d3 	bl	80080dc <_printf_common>
 8007d36:	3001      	adds	r0, #1
 8007d38:	f040 808a 	bne.w	8007e50 <_printf_float+0x1b0>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	b00b      	add	sp, #44	; 0x2c
 8007d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d46:	eeb4 0b40 	vcmp.f64	d0, d0
 8007d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4e:	d709      	bvc.n	8007d64 <_printf_float+0xc4>
 8007d50:	ee10 3a90 	vmov	r3, s1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bfbc      	itt	lt
 8007d58:	232d      	movlt	r3, #45	; 0x2d
 8007d5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d5e:	487e      	ldr	r0, [pc, #504]	; (8007f58 <_printf_float+0x2b8>)
 8007d60:	4b7e      	ldr	r3, [pc, #504]	; (8007f5c <_printf_float+0x2bc>)
 8007d62:	e7d5      	b.n	8007d10 <_printf_float+0x70>
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007d6a:	9104      	str	r1, [sp, #16]
 8007d6c:	1c59      	adds	r1, r3, #1
 8007d6e:	d13c      	bne.n	8007dea <_printf_float+0x14a>
 8007d70:	2306      	movs	r3, #6
 8007d72:	6063      	str	r3, [r4, #4]
 8007d74:	2300      	movs	r3, #0
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	ab08      	add	r3, sp, #32
 8007d7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d82:	ab07      	add	r3, sp, #28
 8007d84:	6861      	ldr	r1, [r4, #4]
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	6022      	str	r2, [r4, #0]
 8007d8a:	f10d 031b 	add.w	r3, sp, #27
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f7ff fef6 	bl	8007b80 <__cvt>
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	9907      	ldr	r1, [sp, #28]
 8007d98:	2b47      	cmp	r3, #71	; 0x47
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	d108      	bne.n	8007db0 <_printf_float+0x110>
 8007d9e:	1cc8      	adds	r0, r1, #3
 8007da0:	db02      	blt.n	8007da8 <_printf_float+0x108>
 8007da2:	6863      	ldr	r3, [r4, #4]
 8007da4:	4299      	cmp	r1, r3
 8007da6:	dd41      	ble.n	8007e2c <_printf_float+0x18c>
 8007da8:	f1a9 0902 	sub.w	r9, r9, #2
 8007dac:	fa5f f989 	uxtb.w	r9, r9
 8007db0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007db4:	d820      	bhi.n	8007df8 <_printf_float+0x158>
 8007db6:	3901      	subs	r1, #1
 8007db8:	464a      	mov	r2, r9
 8007dba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dbe:	9107      	str	r1, [sp, #28]
 8007dc0:	f7ff ff30 	bl	8007c24 <__exponent>
 8007dc4:	9a08      	ldr	r2, [sp, #32]
 8007dc6:	9004      	str	r0, [sp, #16]
 8007dc8:	1813      	adds	r3, r2, r0
 8007dca:	2a01      	cmp	r2, #1
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	dc02      	bgt.n	8007dd6 <_printf_float+0x136>
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	07d2      	lsls	r2, r2, #31
 8007dd4:	d501      	bpl.n	8007dda <_printf_float+0x13a>
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	6123      	str	r3, [r4, #16]
 8007dda:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0a2      	beq.n	8007d28 <_printf_float+0x88>
 8007de2:	232d      	movs	r3, #45	; 0x2d
 8007de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de8:	e79e      	b.n	8007d28 <_printf_float+0x88>
 8007dea:	9904      	ldr	r1, [sp, #16]
 8007dec:	2947      	cmp	r1, #71	; 0x47
 8007dee:	d1c1      	bne.n	8007d74 <_printf_float+0xd4>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1bf      	bne.n	8007d74 <_printf_float+0xd4>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7bc      	b.n	8007d72 <_printf_float+0xd2>
 8007df8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007dfc:	d118      	bne.n	8007e30 <_printf_float+0x190>
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	6863      	ldr	r3, [r4, #4]
 8007e02:	dd0b      	ble.n	8007e1c <_printf_float+0x17c>
 8007e04:	6121      	str	r1, [r4, #16]
 8007e06:	b913      	cbnz	r3, 8007e0e <_printf_float+0x16e>
 8007e08:	6822      	ldr	r2, [r4, #0]
 8007e0a:	07d0      	lsls	r0, r2, #31
 8007e0c:	d502      	bpl.n	8007e14 <_printf_float+0x174>
 8007e0e:	3301      	adds	r3, #1
 8007e10:	440b      	add	r3, r1
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	2300      	movs	r3, #0
 8007e16:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	e7de      	b.n	8007dda <_printf_float+0x13a>
 8007e1c:	b913      	cbnz	r3, 8007e24 <_printf_float+0x184>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	07d2      	lsls	r2, r2, #31
 8007e22:	d501      	bpl.n	8007e28 <_printf_float+0x188>
 8007e24:	3302      	adds	r3, #2
 8007e26:	e7f4      	b.n	8007e12 <_printf_float+0x172>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e7f2      	b.n	8007e12 <_printf_float+0x172>
 8007e2c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007e30:	9b08      	ldr	r3, [sp, #32]
 8007e32:	4299      	cmp	r1, r3
 8007e34:	db05      	blt.n	8007e42 <_printf_float+0x1a2>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6121      	str	r1, [r4, #16]
 8007e3a:	07d8      	lsls	r0, r3, #31
 8007e3c:	d5ea      	bpl.n	8007e14 <_printf_float+0x174>
 8007e3e:	1c4b      	adds	r3, r1, #1
 8007e40:	e7e7      	b.n	8007e12 <_printf_float+0x172>
 8007e42:	2900      	cmp	r1, #0
 8007e44:	bfd4      	ite	le
 8007e46:	f1c1 0202 	rsble	r2, r1, #2
 8007e4a:	2201      	movgt	r2, #1
 8007e4c:	4413      	add	r3, r2
 8007e4e:	e7e0      	b.n	8007e12 <_printf_float+0x172>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	055a      	lsls	r2, r3, #21
 8007e54:	d407      	bmi.n	8007e66 <_printf_float+0x1c6>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	4642      	mov	r2, r8
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	d12a      	bne.n	8007eba <_printf_float+0x21a>
 8007e64:	e76a      	b.n	8007d3c <_printf_float+0x9c>
 8007e66:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e6a:	f240 80e2 	bls.w	8008032 <_printf_float+0x392>
 8007e6e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007e72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7a:	d133      	bne.n	8007ee4 <_printf_float+0x244>
 8007e7c:	4a38      	ldr	r2, [pc, #224]	; (8007f60 <_printf_float+0x2c0>)
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4631      	mov	r1, r6
 8007e82:	4628      	mov	r0, r5
 8007e84:	47b8      	blx	r7
 8007e86:	3001      	adds	r0, #1
 8007e88:	f43f af58 	beq.w	8007d3c <_printf_float+0x9c>
 8007e8c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	db02      	blt.n	8007e9a <_printf_float+0x1fa>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	07d8      	lsls	r0, r3, #31
 8007e98:	d50f      	bpl.n	8007eba <_printf_float+0x21a>
 8007e9a:	4653      	mov	r3, sl
 8007e9c:	465a      	mov	r2, fp
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f43f af49 	beq.w	8007d3c <_printf_float+0x9c>
 8007eaa:	f04f 0800 	mov.w	r8, #0
 8007eae:	f104 091a 	add.w	r9, r4, #26
 8007eb2:	9b08      	ldr	r3, [sp, #32]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	4543      	cmp	r3, r8
 8007eb8:	dc09      	bgt.n	8007ece <_printf_float+0x22e>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	079b      	lsls	r3, r3, #30
 8007ebe:	f100 8108 	bmi.w	80080d2 <_printf_float+0x432>
 8007ec2:	68e0      	ldr	r0, [r4, #12]
 8007ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec6:	4298      	cmp	r0, r3
 8007ec8:	bfb8      	it	lt
 8007eca:	4618      	movlt	r0, r3
 8007ecc:	e738      	b.n	8007d40 <_printf_float+0xa0>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	464a      	mov	r2, r9
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b8      	blx	r7
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f43f af2f 	beq.w	8007d3c <_printf_float+0x9c>
 8007ede:	f108 0801 	add.w	r8, r8, #1
 8007ee2:	e7e6      	b.n	8007eb2 <_printf_float+0x212>
 8007ee4:	9b07      	ldr	r3, [sp, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dc3c      	bgt.n	8007f64 <_printf_float+0x2c4>
 8007eea:	4a1d      	ldr	r2, [pc, #116]	; (8007f60 <_printf_float+0x2c0>)
 8007eec:	2301      	movs	r3, #1
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f43f af21 	beq.w	8007d3c <_printf_float+0x9c>
 8007efa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d102      	bne.n	8007f08 <_printf_float+0x268>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	07d9      	lsls	r1, r3, #31
 8007f06:	d5d8      	bpl.n	8007eba <_printf_float+0x21a>
 8007f08:	4653      	mov	r3, sl
 8007f0a:	465a      	mov	r2, fp
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	4628      	mov	r0, r5
 8007f10:	47b8      	blx	r7
 8007f12:	3001      	adds	r0, #1
 8007f14:	f43f af12 	beq.w	8007d3c <_printf_float+0x9c>
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	f104 0a1a 	add.w	sl, r4, #26
 8007f20:	9b07      	ldr	r3, [sp, #28]
 8007f22:	425b      	negs	r3, r3
 8007f24:	454b      	cmp	r3, r9
 8007f26:	dc01      	bgt.n	8007f2c <_printf_float+0x28c>
 8007f28:	9b08      	ldr	r3, [sp, #32]
 8007f2a:	e795      	b.n	8007e58 <_printf_float+0x1b8>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4652      	mov	r2, sl
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f af00 	beq.w	8007d3c <_printf_float+0x9c>
 8007f3c:	f109 0901 	add.w	r9, r9, #1
 8007f40:	e7ee      	b.n	8007f20 <_printf_float+0x280>
 8007f42:	bf00      	nop
 8007f44:	f3af 8000 	nop.w
 8007f48:	ffffffff 	.word	0xffffffff
 8007f4c:	7fefffff 	.word	0x7fefffff
 8007f50:	0800a9f0 	.word	0x0800a9f0
 8007f54:	0800a9f4 	.word	0x0800a9f4
 8007f58:	0800a9fc 	.word	0x0800a9fc
 8007f5c:	0800a9f8 	.word	0x0800a9f8
 8007f60:	0800aa00 	.word	0x0800aa00
 8007f64:	9a08      	ldr	r2, [sp, #32]
 8007f66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	bfa8      	it	ge
 8007f6c:	461a      	movge	r2, r3
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	4691      	mov	r9, r2
 8007f72:	dc38      	bgt.n	8007fe6 <_printf_float+0x346>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f7c:	f104 021a 	add.w	r2, r4, #26
 8007f80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f82:	9905      	ldr	r1, [sp, #20]
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	eba3 0309 	sub.w	r3, r3, r9
 8007f8a:	428b      	cmp	r3, r1
 8007f8c:	dc33      	bgt.n	8007ff6 <_printf_float+0x356>
 8007f8e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	db3c      	blt.n	8008010 <_printf_float+0x370>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	07da      	lsls	r2, r3, #31
 8007f9a:	d439      	bmi.n	8008010 <_printf_float+0x370>
 8007f9c:	9b08      	ldr	r3, [sp, #32]
 8007f9e:	9a04      	ldr	r2, [sp, #16]
 8007fa0:	9907      	ldr	r1, [sp, #28]
 8007fa2:	1a9a      	subs	r2, r3, r2
 8007fa4:	eba3 0901 	sub.w	r9, r3, r1
 8007fa8:	4591      	cmp	r9, r2
 8007faa:	bfa8      	it	ge
 8007fac:	4691      	movge	r9, r2
 8007fae:	f1b9 0f00 	cmp.w	r9, #0
 8007fb2:	dc35      	bgt.n	8008020 <_printf_float+0x380>
 8007fb4:	f04f 0800 	mov.w	r8, #0
 8007fb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fbc:	f104 0a1a 	add.w	sl, r4, #26
 8007fc0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	eba3 0309 	sub.w	r3, r3, r9
 8007fca:	4543      	cmp	r3, r8
 8007fcc:	f77f af75 	ble.w	8007eba <_printf_float+0x21a>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4652      	mov	r2, sl
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f aeae 	beq.w	8007d3c <_printf_float+0x9c>
 8007fe0:	f108 0801 	add.w	r8, r8, #1
 8007fe4:	e7ec      	b.n	8007fc0 <_printf_float+0x320>
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4642      	mov	r2, r8
 8007fec:	4628      	mov	r0, r5
 8007fee:	47b8      	blx	r7
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d1bf      	bne.n	8007f74 <_printf_float+0x2d4>
 8007ff4:	e6a2      	b.n	8007d3c <_printf_float+0x9c>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	9204      	str	r2, [sp, #16]
 8007ffe:	47b8      	blx	r7
 8008000:	3001      	adds	r0, #1
 8008002:	f43f ae9b 	beq.w	8007d3c <_printf_float+0x9c>
 8008006:	9b05      	ldr	r3, [sp, #20]
 8008008:	9a04      	ldr	r2, [sp, #16]
 800800a:	3301      	adds	r3, #1
 800800c:	9305      	str	r3, [sp, #20]
 800800e:	e7b7      	b.n	8007f80 <_printf_float+0x2e0>
 8008010:	4653      	mov	r3, sl
 8008012:	465a      	mov	r2, fp
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	d1be      	bne.n	8007f9c <_printf_float+0x2fc>
 800801e:	e68d      	b.n	8007d3c <_printf_float+0x9c>
 8008020:	9a04      	ldr	r2, [sp, #16]
 8008022:	464b      	mov	r3, r9
 8008024:	4442      	add	r2, r8
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	d1c1      	bne.n	8007fb4 <_printf_float+0x314>
 8008030:	e684      	b.n	8007d3c <_printf_float+0x9c>
 8008032:	9a08      	ldr	r2, [sp, #32]
 8008034:	2a01      	cmp	r2, #1
 8008036:	dc01      	bgt.n	800803c <_printf_float+0x39c>
 8008038:	07db      	lsls	r3, r3, #31
 800803a:	d537      	bpl.n	80080ac <_printf_float+0x40c>
 800803c:	2301      	movs	r3, #1
 800803e:	4642      	mov	r2, r8
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f ae78 	beq.w	8007d3c <_printf_float+0x9c>
 800804c:	4653      	mov	r3, sl
 800804e:	465a      	mov	r2, fp
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f ae70 	beq.w	8007d3c <_printf_float+0x9c>
 800805c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008060:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008068:	d01b      	beq.n	80080a2 <_printf_float+0x402>
 800806a:	9b08      	ldr	r3, [sp, #32]
 800806c:	f108 0201 	add.w	r2, r8, #1
 8008070:	3b01      	subs	r3, #1
 8008072:	4631      	mov	r1, r6
 8008074:	4628      	mov	r0, r5
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	d10e      	bne.n	800809a <_printf_float+0x3fa>
 800807c:	e65e      	b.n	8007d3c <_printf_float+0x9c>
 800807e:	2301      	movs	r3, #1
 8008080:	464a      	mov	r2, r9
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	f43f ae57 	beq.w	8007d3c <_printf_float+0x9c>
 800808e:	f108 0801 	add.w	r8, r8, #1
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	3b01      	subs	r3, #1
 8008096:	4543      	cmp	r3, r8
 8008098:	dcf1      	bgt.n	800807e <_printf_float+0x3de>
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080a0:	e6db      	b.n	8007e5a <_printf_float+0x1ba>
 80080a2:	f04f 0800 	mov.w	r8, #0
 80080a6:	f104 091a 	add.w	r9, r4, #26
 80080aa:	e7f2      	b.n	8008092 <_printf_float+0x3f2>
 80080ac:	2301      	movs	r3, #1
 80080ae:	4642      	mov	r2, r8
 80080b0:	e7df      	b.n	8008072 <_printf_float+0x3d2>
 80080b2:	2301      	movs	r3, #1
 80080b4:	464a      	mov	r2, r9
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	f43f ae3d 	beq.w	8007d3c <_printf_float+0x9c>
 80080c2:	f108 0801 	add.w	r8, r8, #1
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ca:	1a5b      	subs	r3, r3, r1
 80080cc:	4543      	cmp	r3, r8
 80080ce:	dcf0      	bgt.n	80080b2 <_printf_float+0x412>
 80080d0:	e6f7      	b.n	8007ec2 <_printf_float+0x222>
 80080d2:	f04f 0800 	mov.w	r8, #0
 80080d6:	f104 0919 	add.w	r9, r4, #25
 80080da:	e7f4      	b.n	80080c6 <_printf_float+0x426>

080080dc <_printf_common>:
 80080dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	4616      	mov	r6, r2
 80080e2:	4699      	mov	r9, r3
 80080e4:	688a      	ldr	r2, [r1, #8]
 80080e6:	690b      	ldr	r3, [r1, #16]
 80080e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080ec:	4293      	cmp	r3, r2
 80080ee:	bfb8      	it	lt
 80080f0:	4613      	movlt	r3, r2
 80080f2:	6033      	str	r3, [r6, #0]
 80080f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080f8:	4607      	mov	r7, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	b10a      	cbz	r2, 8008102 <_printf_common+0x26>
 80080fe:	3301      	adds	r3, #1
 8008100:	6033      	str	r3, [r6, #0]
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	0699      	lsls	r1, r3, #26
 8008106:	bf42      	ittt	mi
 8008108:	6833      	ldrmi	r3, [r6, #0]
 800810a:	3302      	addmi	r3, #2
 800810c:	6033      	strmi	r3, [r6, #0]
 800810e:	6825      	ldr	r5, [r4, #0]
 8008110:	f015 0506 	ands.w	r5, r5, #6
 8008114:	d106      	bne.n	8008124 <_printf_common+0x48>
 8008116:	f104 0a19 	add.w	sl, r4, #25
 800811a:	68e3      	ldr	r3, [r4, #12]
 800811c:	6832      	ldr	r2, [r6, #0]
 800811e:	1a9b      	subs	r3, r3, r2
 8008120:	42ab      	cmp	r3, r5
 8008122:	dc26      	bgt.n	8008172 <_printf_common+0x96>
 8008124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008128:	1e13      	subs	r3, r2, #0
 800812a:	6822      	ldr	r2, [r4, #0]
 800812c:	bf18      	it	ne
 800812e:	2301      	movne	r3, #1
 8008130:	0692      	lsls	r2, r2, #26
 8008132:	d42b      	bmi.n	800818c <_printf_common+0xb0>
 8008134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008138:	4649      	mov	r1, r9
 800813a:	4638      	mov	r0, r7
 800813c:	47c0      	blx	r8
 800813e:	3001      	adds	r0, #1
 8008140:	d01e      	beq.n	8008180 <_printf_common+0xa4>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	68e5      	ldr	r5, [r4, #12]
 8008146:	6832      	ldr	r2, [r6, #0]
 8008148:	f003 0306 	and.w	r3, r3, #6
 800814c:	2b04      	cmp	r3, #4
 800814e:	bf08      	it	eq
 8008150:	1aad      	subeq	r5, r5, r2
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	6922      	ldr	r2, [r4, #16]
 8008156:	bf0c      	ite	eq
 8008158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800815c:	2500      	movne	r5, #0
 800815e:	4293      	cmp	r3, r2
 8008160:	bfc4      	itt	gt
 8008162:	1a9b      	subgt	r3, r3, r2
 8008164:	18ed      	addgt	r5, r5, r3
 8008166:	2600      	movs	r6, #0
 8008168:	341a      	adds	r4, #26
 800816a:	42b5      	cmp	r5, r6
 800816c:	d11a      	bne.n	80081a4 <_printf_common+0xc8>
 800816e:	2000      	movs	r0, #0
 8008170:	e008      	b.n	8008184 <_printf_common+0xa8>
 8008172:	2301      	movs	r3, #1
 8008174:	4652      	mov	r2, sl
 8008176:	4649      	mov	r1, r9
 8008178:	4638      	mov	r0, r7
 800817a:	47c0      	blx	r8
 800817c:	3001      	adds	r0, #1
 800817e:	d103      	bne.n	8008188 <_printf_common+0xac>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008188:	3501      	adds	r5, #1
 800818a:	e7c6      	b.n	800811a <_printf_common+0x3e>
 800818c:	18e1      	adds	r1, r4, r3
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	2030      	movs	r0, #48	; 0x30
 8008192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008196:	4422      	add	r2, r4
 8008198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800819c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a0:	3302      	adds	r3, #2
 80081a2:	e7c7      	b.n	8008134 <_printf_common+0x58>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4622      	mov	r2, r4
 80081a8:	4649      	mov	r1, r9
 80081aa:	4638      	mov	r0, r7
 80081ac:	47c0      	blx	r8
 80081ae:	3001      	adds	r0, #1
 80081b0:	d0e6      	beq.n	8008180 <_printf_common+0xa4>
 80081b2:	3601      	adds	r6, #1
 80081b4:	e7d9      	b.n	800816a <_printf_common+0x8e>
	...

080081b8 <_printf_i>:
 80081b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081bc:	7e0f      	ldrb	r7, [r1, #24]
 80081be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081c0:	2f78      	cmp	r7, #120	; 0x78
 80081c2:	4691      	mov	r9, r2
 80081c4:	4680      	mov	r8, r0
 80081c6:	460c      	mov	r4, r1
 80081c8:	469a      	mov	sl, r3
 80081ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081ce:	d807      	bhi.n	80081e0 <_printf_i+0x28>
 80081d0:	2f62      	cmp	r7, #98	; 0x62
 80081d2:	d80a      	bhi.n	80081ea <_printf_i+0x32>
 80081d4:	2f00      	cmp	r7, #0
 80081d6:	f000 80d8 	beq.w	800838a <_printf_i+0x1d2>
 80081da:	2f58      	cmp	r7, #88	; 0x58
 80081dc:	f000 80a3 	beq.w	8008326 <_printf_i+0x16e>
 80081e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081e8:	e03a      	b.n	8008260 <_printf_i+0xa8>
 80081ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081ee:	2b15      	cmp	r3, #21
 80081f0:	d8f6      	bhi.n	80081e0 <_printf_i+0x28>
 80081f2:	a101      	add	r1, pc, #4	; (adr r1, 80081f8 <_printf_i+0x40>)
 80081f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081f8:	08008251 	.word	0x08008251
 80081fc:	08008265 	.word	0x08008265
 8008200:	080081e1 	.word	0x080081e1
 8008204:	080081e1 	.word	0x080081e1
 8008208:	080081e1 	.word	0x080081e1
 800820c:	080081e1 	.word	0x080081e1
 8008210:	08008265 	.word	0x08008265
 8008214:	080081e1 	.word	0x080081e1
 8008218:	080081e1 	.word	0x080081e1
 800821c:	080081e1 	.word	0x080081e1
 8008220:	080081e1 	.word	0x080081e1
 8008224:	08008371 	.word	0x08008371
 8008228:	08008295 	.word	0x08008295
 800822c:	08008353 	.word	0x08008353
 8008230:	080081e1 	.word	0x080081e1
 8008234:	080081e1 	.word	0x080081e1
 8008238:	08008393 	.word	0x08008393
 800823c:	080081e1 	.word	0x080081e1
 8008240:	08008295 	.word	0x08008295
 8008244:	080081e1 	.word	0x080081e1
 8008248:	080081e1 	.word	0x080081e1
 800824c:	0800835b 	.word	0x0800835b
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	1d1a      	adds	r2, r3, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	602a      	str	r2, [r5, #0]
 8008258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800825c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008260:	2301      	movs	r3, #1
 8008262:	e0a3      	b.n	80083ac <_printf_i+0x1f4>
 8008264:	6820      	ldr	r0, [r4, #0]
 8008266:	6829      	ldr	r1, [r5, #0]
 8008268:	0606      	lsls	r6, r0, #24
 800826a:	f101 0304 	add.w	r3, r1, #4
 800826e:	d50a      	bpl.n	8008286 <_printf_i+0xce>
 8008270:	680e      	ldr	r6, [r1, #0]
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	2e00      	cmp	r6, #0
 8008276:	da03      	bge.n	8008280 <_printf_i+0xc8>
 8008278:	232d      	movs	r3, #45	; 0x2d
 800827a:	4276      	negs	r6, r6
 800827c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008280:	485e      	ldr	r0, [pc, #376]	; (80083fc <_printf_i+0x244>)
 8008282:	230a      	movs	r3, #10
 8008284:	e019      	b.n	80082ba <_printf_i+0x102>
 8008286:	680e      	ldr	r6, [r1, #0]
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800828e:	bf18      	it	ne
 8008290:	b236      	sxthne	r6, r6
 8008292:	e7ef      	b.n	8008274 <_printf_i+0xbc>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	6820      	ldr	r0, [r4, #0]
 8008298:	1d19      	adds	r1, r3, #4
 800829a:	6029      	str	r1, [r5, #0]
 800829c:	0601      	lsls	r1, r0, #24
 800829e:	d501      	bpl.n	80082a4 <_printf_i+0xec>
 80082a0:	681e      	ldr	r6, [r3, #0]
 80082a2:	e002      	b.n	80082aa <_printf_i+0xf2>
 80082a4:	0646      	lsls	r6, r0, #25
 80082a6:	d5fb      	bpl.n	80082a0 <_printf_i+0xe8>
 80082a8:	881e      	ldrh	r6, [r3, #0]
 80082aa:	4854      	ldr	r0, [pc, #336]	; (80083fc <_printf_i+0x244>)
 80082ac:	2f6f      	cmp	r7, #111	; 0x6f
 80082ae:	bf0c      	ite	eq
 80082b0:	2308      	moveq	r3, #8
 80082b2:	230a      	movne	r3, #10
 80082b4:	2100      	movs	r1, #0
 80082b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ba:	6865      	ldr	r5, [r4, #4]
 80082bc:	60a5      	str	r5, [r4, #8]
 80082be:	2d00      	cmp	r5, #0
 80082c0:	bfa2      	ittt	ge
 80082c2:	6821      	ldrge	r1, [r4, #0]
 80082c4:	f021 0104 	bicge.w	r1, r1, #4
 80082c8:	6021      	strge	r1, [r4, #0]
 80082ca:	b90e      	cbnz	r6, 80082d0 <_printf_i+0x118>
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	d04d      	beq.n	800836c <_printf_i+0x1b4>
 80082d0:	4615      	mov	r5, r2
 80082d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80082d6:	fb03 6711 	mls	r7, r3, r1, r6
 80082da:	5dc7      	ldrb	r7, [r0, r7]
 80082dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082e0:	4637      	mov	r7, r6
 80082e2:	42bb      	cmp	r3, r7
 80082e4:	460e      	mov	r6, r1
 80082e6:	d9f4      	bls.n	80082d2 <_printf_i+0x11a>
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d10b      	bne.n	8008304 <_printf_i+0x14c>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	07de      	lsls	r6, r3, #31
 80082f0:	d508      	bpl.n	8008304 <_printf_i+0x14c>
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	6861      	ldr	r1, [r4, #4]
 80082f6:	4299      	cmp	r1, r3
 80082f8:	bfde      	ittt	le
 80082fa:	2330      	movle	r3, #48	; 0x30
 80082fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008304:	1b52      	subs	r2, r2, r5
 8008306:	6122      	str	r2, [r4, #16]
 8008308:	f8cd a000 	str.w	sl, [sp]
 800830c:	464b      	mov	r3, r9
 800830e:	aa03      	add	r2, sp, #12
 8008310:	4621      	mov	r1, r4
 8008312:	4640      	mov	r0, r8
 8008314:	f7ff fee2 	bl	80080dc <_printf_common>
 8008318:	3001      	adds	r0, #1
 800831a:	d14c      	bne.n	80083b6 <_printf_i+0x1fe>
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	b004      	add	sp, #16
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	4835      	ldr	r0, [pc, #212]	; (80083fc <_printf_i+0x244>)
 8008328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800832c:	6829      	ldr	r1, [r5, #0]
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	f851 6b04 	ldr.w	r6, [r1], #4
 8008334:	6029      	str	r1, [r5, #0]
 8008336:	061d      	lsls	r5, r3, #24
 8008338:	d514      	bpl.n	8008364 <_printf_i+0x1ac>
 800833a:	07df      	lsls	r7, r3, #31
 800833c:	bf44      	itt	mi
 800833e:	f043 0320 	orrmi.w	r3, r3, #32
 8008342:	6023      	strmi	r3, [r4, #0]
 8008344:	b91e      	cbnz	r6, 800834e <_printf_i+0x196>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	f023 0320 	bic.w	r3, r3, #32
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	2310      	movs	r3, #16
 8008350:	e7b0      	b.n	80082b4 <_printf_i+0xfc>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	f043 0320 	orr.w	r3, r3, #32
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	2378      	movs	r3, #120	; 0x78
 800835c:	4828      	ldr	r0, [pc, #160]	; (8008400 <_printf_i+0x248>)
 800835e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008362:	e7e3      	b.n	800832c <_printf_i+0x174>
 8008364:	0659      	lsls	r1, r3, #25
 8008366:	bf48      	it	mi
 8008368:	b2b6      	uxthmi	r6, r6
 800836a:	e7e6      	b.n	800833a <_printf_i+0x182>
 800836c:	4615      	mov	r5, r2
 800836e:	e7bb      	b.n	80082e8 <_printf_i+0x130>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	6826      	ldr	r6, [r4, #0]
 8008374:	6961      	ldr	r1, [r4, #20]
 8008376:	1d18      	adds	r0, r3, #4
 8008378:	6028      	str	r0, [r5, #0]
 800837a:	0635      	lsls	r5, r6, #24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	d501      	bpl.n	8008384 <_printf_i+0x1cc>
 8008380:	6019      	str	r1, [r3, #0]
 8008382:	e002      	b.n	800838a <_printf_i+0x1d2>
 8008384:	0670      	lsls	r0, r6, #25
 8008386:	d5fb      	bpl.n	8008380 <_printf_i+0x1c8>
 8008388:	8019      	strh	r1, [r3, #0]
 800838a:	2300      	movs	r3, #0
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	4615      	mov	r5, r2
 8008390:	e7ba      	b.n	8008308 <_printf_i+0x150>
 8008392:	682b      	ldr	r3, [r5, #0]
 8008394:	1d1a      	adds	r2, r3, #4
 8008396:	602a      	str	r2, [r5, #0]
 8008398:	681d      	ldr	r5, [r3, #0]
 800839a:	6862      	ldr	r2, [r4, #4]
 800839c:	2100      	movs	r1, #0
 800839e:	4628      	mov	r0, r5
 80083a0:	f7f7 ff56 	bl	8000250 <memchr>
 80083a4:	b108      	cbz	r0, 80083aa <_printf_i+0x1f2>
 80083a6:	1b40      	subs	r0, r0, r5
 80083a8:	6060      	str	r0, [r4, #4]
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	2300      	movs	r3, #0
 80083b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b4:	e7a8      	b.n	8008308 <_printf_i+0x150>
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	462a      	mov	r2, r5
 80083ba:	4649      	mov	r1, r9
 80083bc:	4640      	mov	r0, r8
 80083be:	47d0      	blx	sl
 80083c0:	3001      	adds	r0, #1
 80083c2:	d0ab      	beq.n	800831c <_printf_i+0x164>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	079b      	lsls	r3, r3, #30
 80083c8:	d413      	bmi.n	80083f2 <_printf_i+0x23a>
 80083ca:	68e0      	ldr	r0, [r4, #12]
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	4298      	cmp	r0, r3
 80083d0:	bfb8      	it	lt
 80083d2:	4618      	movlt	r0, r3
 80083d4:	e7a4      	b.n	8008320 <_printf_i+0x168>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4632      	mov	r2, r6
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	47d0      	blx	sl
 80083e0:	3001      	adds	r0, #1
 80083e2:	d09b      	beq.n	800831c <_printf_i+0x164>
 80083e4:	3501      	adds	r5, #1
 80083e6:	68e3      	ldr	r3, [r4, #12]
 80083e8:	9903      	ldr	r1, [sp, #12]
 80083ea:	1a5b      	subs	r3, r3, r1
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	dcf2      	bgt.n	80083d6 <_printf_i+0x21e>
 80083f0:	e7eb      	b.n	80083ca <_printf_i+0x212>
 80083f2:	2500      	movs	r5, #0
 80083f4:	f104 0619 	add.w	r6, r4, #25
 80083f8:	e7f5      	b.n	80083e6 <_printf_i+0x22e>
 80083fa:	bf00      	nop
 80083fc:	0800aa02 	.word	0x0800aa02
 8008400:	0800aa13 	.word	0x0800aa13

08008404 <siprintf>:
 8008404:	b40e      	push	{r1, r2, r3}
 8008406:	b500      	push	{lr}
 8008408:	b09c      	sub	sp, #112	; 0x70
 800840a:	ab1d      	add	r3, sp, #116	; 0x74
 800840c:	9002      	str	r0, [sp, #8]
 800840e:	9006      	str	r0, [sp, #24]
 8008410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008414:	4809      	ldr	r0, [pc, #36]	; (800843c <siprintf+0x38>)
 8008416:	9107      	str	r1, [sp, #28]
 8008418:	9104      	str	r1, [sp, #16]
 800841a:	4909      	ldr	r1, [pc, #36]	; (8008440 <siprintf+0x3c>)
 800841c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008420:	9105      	str	r1, [sp, #20]
 8008422:	6800      	ldr	r0, [r0, #0]
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	a902      	add	r1, sp, #8
 8008428:	f001 fb98 	bl	8009b5c <_svfiprintf_r>
 800842c:	9b02      	ldr	r3, [sp, #8]
 800842e:	2200      	movs	r2, #0
 8008430:	701a      	strb	r2, [r3, #0]
 8008432:	b01c      	add	sp, #112	; 0x70
 8008434:	f85d eb04 	ldr.w	lr, [sp], #4
 8008438:	b003      	add	sp, #12
 800843a:	4770      	bx	lr
 800843c:	20000028 	.word	0x20000028
 8008440:	ffff0208 	.word	0xffff0208

08008444 <strncmp>:
 8008444:	b510      	push	{r4, lr}
 8008446:	b17a      	cbz	r2, 8008468 <strncmp+0x24>
 8008448:	4603      	mov	r3, r0
 800844a:	3901      	subs	r1, #1
 800844c:	1884      	adds	r4, r0, r2
 800844e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008452:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008456:	4290      	cmp	r0, r2
 8008458:	d101      	bne.n	800845e <strncmp+0x1a>
 800845a:	42a3      	cmp	r3, r4
 800845c:	d101      	bne.n	8008462 <strncmp+0x1e>
 800845e:	1a80      	subs	r0, r0, r2
 8008460:	bd10      	pop	{r4, pc}
 8008462:	2800      	cmp	r0, #0
 8008464:	d1f3      	bne.n	800844e <strncmp+0xa>
 8008466:	e7fa      	b.n	800845e <strncmp+0x1a>
 8008468:	4610      	mov	r0, r2
 800846a:	e7f9      	b.n	8008460 <strncmp+0x1c>

0800846c <_strtol_l.constprop.0>:
 800846c:	2b01      	cmp	r3, #1
 800846e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008472:	d001      	beq.n	8008478 <_strtol_l.constprop.0+0xc>
 8008474:	2b24      	cmp	r3, #36	; 0x24
 8008476:	d906      	bls.n	8008486 <_strtol_l.constprop.0+0x1a>
 8008478:	f7ff fb50 	bl	8007b1c <__errno>
 800847c:	2316      	movs	r3, #22
 800847e:	6003      	str	r3, [r0, #0]
 8008480:	2000      	movs	r0, #0
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800856c <_strtol_l.constprop.0+0x100>
 800848a:	460d      	mov	r5, r1
 800848c:	462e      	mov	r6, r5
 800848e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008492:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008496:	f017 0708 	ands.w	r7, r7, #8
 800849a:	d1f7      	bne.n	800848c <_strtol_l.constprop.0+0x20>
 800849c:	2c2d      	cmp	r4, #45	; 0x2d
 800849e:	d132      	bne.n	8008506 <_strtol_l.constprop.0+0x9a>
 80084a0:	782c      	ldrb	r4, [r5, #0]
 80084a2:	2701      	movs	r7, #1
 80084a4:	1cb5      	adds	r5, r6, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d05b      	beq.n	8008562 <_strtol_l.constprop.0+0xf6>
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d109      	bne.n	80084c2 <_strtol_l.constprop.0+0x56>
 80084ae:	2c30      	cmp	r4, #48	; 0x30
 80084b0:	d107      	bne.n	80084c2 <_strtol_l.constprop.0+0x56>
 80084b2:	782c      	ldrb	r4, [r5, #0]
 80084b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084b8:	2c58      	cmp	r4, #88	; 0x58
 80084ba:	d14d      	bne.n	8008558 <_strtol_l.constprop.0+0xec>
 80084bc:	786c      	ldrb	r4, [r5, #1]
 80084be:	2310      	movs	r3, #16
 80084c0:	3502      	adds	r5, #2
 80084c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80084c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ca:	f04f 0c00 	mov.w	ip, #0
 80084ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80084d2:	4666      	mov	r6, ip
 80084d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80084d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80084dc:	f1be 0f09 	cmp.w	lr, #9
 80084e0:	d816      	bhi.n	8008510 <_strtol_l.constprop.0+0xa4>
 80084e2:	4674      	mov	r4, lr
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	dd24      	ble.n	8008532 <_strtol_l.constprop.0+0xc6>
 80084e8:	f1bc 0f00 	cmp.w	ip, #0
 80084ec:	db1e      	blt.n	800852c <_strtol_l.constprop.0+0xc0>
 80084ee:	45b1      	cmp	r9, r6
 80084f0:	d31c      	bcc.n	800852c <_strtol_l.constprop.0+0xc0>
 80084f2:	d101      	bne.n	80084f8 <_strtol_l.constprop.0+0x8c>
 80084f4:	45a2      	cmp	sl, r4
 80084f6:	db19      	blt.n	800852c <_strtol_l.constprop.0+0xc0>
 80084f8:	fb06 4603 	mla	r6, r6, r3, r4
 80084fc:	f04f 0c01 	mov.w	ip, #1
 8008500:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008504:	e7e8      	b.n	80084d8 <_strtol_l.constprop.0+0x6c>
 8008506:	2c2b      	cmp	r4, #43	; 0x2b
 8008508:	bf04      	itt	eq
 800850a:	782c      	ldrbeq	r4, [r5, #0]
 800850c:	1cb5      	addeq	r5, r6, #2
 800850e:	e7ca      	b.n	80084a6 <_strtol_l.constprop.0+0x3a>
 8008510:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008514:	f1be 0f19 	cmp.w	lr, #25
 8008518:	d801      	bhi.n	800851e <_strtol_l.constprop.0+0xb2>
 800851a:	3c37      	subs	r4, #55	; 0x37
 800851c:	e7e2      	b.n	80084e4 <_strtol_l.constprop.0+0x78>
 800851e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008522:	f1be 0f19 	cmp.w	lr, #25
 8008526:	d804      	bhi.n	8008532 <_strtol_l.constprop.0+0xc6>
 8008528:	3c57      	subs	r4, #87	; 0x57
 800852a:	e7db      	b.n	80084e4 <_strtol_l.constprop.0+0x78>
 800852c:	f04f 3cff 	mov.w	ip, #4294967295
 8008530:	e7e6      	b.n	8008500 <_strtol_l.constprop.0+0x94>
 8008532:	f1bc 0f00 	cmp.w	ip, #0
 8008536:	da05      	bge.n	8008544 <_strtol_l.constprop.0+0xd8>
 8008538:	2322      	movs	r3, #34	; 0x22
 800853a:	6003      	str	r3, [r0, #0]
 800853c:	4646      	mov	r6, r8
 800853e:	b942      	cbnz	r2, 8008552 <_strtol_l.constprop.0+0xe6>
 8008540:	4630      	mov	r0, r6
 8008542:	e79e      	b.n	8008482 <_strtol_l.constprop.0+0x16>
 8008544:	b107      	cbz	r7, 8008548 <_strtol_l.constprop.0+0xdc>
 8008546:	4276      	negs	r6, r6
 8008548:	2a00      	cmp	r2, #0
 800854a:	d0f9      	beq.n	8008540 <_strtol_l.constprop.0+0xd4>
 800854c:	f1bc 0f00 	cmp.w	ip, #0
 8008550:	d000      	beq.n	8008554 <_strtol_l.constprop.0+0xe8>
 8008552:	1e69      	subs	r1, r5, #1
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	e7f3      	b.n	8008540 <_strtol_l.constprop.0+0xd4>
 8008558:	2430      	movs	r4, #48	; 0x30
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1b1      	bne.n	80084c2 <_strtol_l.constprop.0+0x56>
 800855e:	2308      	movs	r3, #8
 8008560:	e7af      	b.n	80084c2 <_strtol_l.constprop.0+0x56>
 8008562:	2c30      	cmp	r4, #48	; 0x30
 8008564:	d0a5      	beq.n	80084b2 <_strtol_l.constprop.0+0x46>
 8008566:	230a      	movs	r3, #10
 8008568:	e7ab      	b.n	80084c2 <_strtol_l.constprop.0+0x56>
 800856a:	bf00      	nop
 800856c:	0800aa25 	.word	0x0800aa25

08008570 <strtol>:
 8008570:	4613      	mov	r3, r2
 8008572:	460a      	mov	r2, r1
 8008574:	4601      	mov	r1, r0
 8008576:	4802      	ldr	r0, [pc, #8]	; (8008580 <strtol+0x10>)
 8008578:	6800      	ldr	r0, [r0, #0]
 800857a:	f7ff bf77 	b.w	800846c <_strtol_l.constprop.0>
 800857e:	bf00      	nop
 8008580:	20000028 	.word	0x20000028

08008584 <quorem>:
 8008584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	6903      	ldr	r3, [r0, #16]
 800858a:	690c      	ldr	r4, [r1, #16]
 800858c:	42a3      	cmp	r3, r4
 800858e:	4607      	mov	r7, r0
 8008590:	f2c0 8081 	blt.w	8008696 <quorem+0x112>
 8008594:	3c01      	subs	r4, #1
 8008596:	f101 0814 	add.w	r8, r1, #20
 800859a:	f100 0514 	add.w	r5, r0, #20
 800859e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085ac:	3301      	adds	r3, #1
 80085ae:	429a      	cmp	r2, r3
 80085b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80085b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80085bc:	d331      	bcc.n	8008622 <quorem+0x9e>
 80085be:	f04f 0e00 	mov.w	lr, #0
 80085c2:	4640      	mov	r0, r8
 80085c4:	46ac      	mov	ip, r5
 80085c6:	46f2      	mov	sl, lr
 80085c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80085cc:	b293      	uxth	r3, r2
 80085ce:	fb06 e303 	mla	r3, r6, r3, lr
 80085d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	ebaa 0303 	sub.w	r3, sl, r3
 80085dc:	f8dc a000 	ldr.w	sl, [ip]
 80085e0:	0c12      	lsrs	r2, r2, #16
 80085e2:	fa13 f38a 	uxtah	r3, r3, sl
 80085e6:	fb06 e202 	mla	r2, r6, r2, lr
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	9b00      	ldr	r3, [sp, #0]
 80085ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085f2:	b292      	uxth	r2, r2
 80085f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008600:	4581      	cmp	r9, r0
 8008602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008606:	f84c 3b04 	str.w	r3, [ip], #4
 800860a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800860e:	d2db      	bcs.n	80085c8 <quorem+0x44>
 8008610:	f855 300b 	ldr.w	r3, [r5, fp]
 8008614:	b92b      	cbnz	r3, 8008622 <quorem+0x9e>
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	3b04      	subs	r3, #4
 800861a:	429d      	cmp	r5, r3
 800861c:	461a      	mov	r2, r3
 800861e:	d32e      	bcc.n	800867e <quorem+0xfa>
 8008620:	613c      	str	r4, [r7, #16]
 8008622:	4638      	mov	r0, r7
 8008624:	f001 f846 	bl	80096b4 <__mcmp>
 8008628:	2800      	cmp	r0, #0
 800862a:	db24      	blt.n	8008676 <quorem+0xf2>
 800862c:	3601      	adds	r6, #1
 800862e:	4628      	mov	r0, r5
 8008630:	f04f 0c00 	mov.w	ip, #0
 8008634:	f858 2b04 	ldr.w	r2, [r8], #4
 8008638:	f8d0 e000 	ldr.w	lr, [r0]
 800863c:	b293      	uxth	r3, r2
 800863e:	ebac 0303 	sub.w	r3, ip, r3
 8008642:	0c12      	lsrs	r2, r2, #16
 8008644:	fa13 f38e 	uxtah	r3, r3, lr
 8008648:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800864c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008650:	b29b      	uxth	r3, r3
 8008652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008656:	45c1      	cmp	r9, r8
 8008658:	f840 3b04 	str.w	r3, [r0], #4
 800865c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008660:	d2e8      	bcs.n	8008634 <quorem+0xb0>
 8008662:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800866a:	b922      	cbnz	r2, 8008676 <quorem+0xf2>
 800866c:	3b04      	subs	r3, #4
 800866e:	429d      	cmp	r5, r3
 8008670:	461a      	mov	r2, r3
 8008672:	d30a      	bcc.n	800868a <quorem+0x106>
 8008674:	613c      	str	r4, [r7, #16]
 8008676:	4630      	mov	r0, r6
 8008678:	b003      	add	sp, #12
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	6812      	ldr	r2, [r2, #0]
 8008680:	3b04      	subs	r3, #4
 8008682:	2a00      	cmp	r2, #0
 8008684:	d1cc      	bne.n	8008620 <quorem+0x9c>
 8008686:	3c01      	subs	r4, #1
 8008688:	e7c7      	b.n	800861a <quorem+0x96>
 800868a:	6812      	ldr	r2, [r2, #0]
 800868c:	3b04      	subs	r3, #4
 800868e:	2a00      	cmp	r2, #0
 8008690:	d1f0      	bne.n	8008674 <quorem+0xf0>
 8008692:	3c01      	subs	r4, #1
 8008694:	e7eb      	b.n	800866e <quorem+0xea>
 8008696:	2000      	movs	r0, #0
 8008698:	e7ee      	b.n	8008678 <quorem+0xf4>
 800869a:	0000      	movs	r0, r0
 800869c:	0000      	movs	r0, r0
	...

080086a0 <_dtoa_r>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	ed2d 8b02 	vpush	{d8}
 80086a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086aa:	b091      	sub	sp, #68	; 0x44
 80086ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086b0:	ec59 8b10 	vmov	r8, r9, d0
 80086b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80086b6:	9106      	str	r1, [sp, #24]
 80086b8:	4606      	mov	r6, r0
 80086ba:	9208      	str	r2, [sp, #32]
 80086bc:	930c      	str	r3, [sp, #48]	; 0x30
 80086be:	b975      	cbnz	r5, 80086de <_dtoa_r+0x3e>
 80086c0:	2010      	movs	r0, #16
 80086c2:	f000 fd5f 	bl	8009184 <malloc>
 80086c6:	4602      	mov	r2, r0
 80086c8:	6270      	str	r0, [r6, #36]	; 0x24
 80086ca:	b920      	cbnz	r0, 80086d6 <_dtoa_r+0x36>
 80086cc:	4baa      	ldr	r3, [pc, #680]	; (8008978 <_dtoa_r+0x2d8>)
 80086ce:	21ea      	movs	r1, #234	; 0xea
 80086d0:	48aa      	ldr	r0, [pc, #680]	; (800897c <_dtoa_r+0x2dc>)
 80086d2:	f001 fb53 	bl	8009d7c <__assert_func>
 80086d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086da:	6005      	str	r5, [r0, #0]
 80086dc:	60c5      	str	r5, [r0, #12]
 80086de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086e0:	6819      	ldr	r1, [r3, #0]
 80086e2:	b151      	cbz	r1, 80086fa <_dtoa_r+0x5a>
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	604a      	str	r2, [r1, #4]
 80086e8:	2301      	movs	r3, #1
 80086ea:	4093      	lsls	r3, r2
 80086ec:	608b      	str	r3, [r1, #8]
 80086ee:	4630      	mov	r0, r6
 80086f0:	f000 fd9e 	bl	8009230 <_Bfree>
 80086f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	f1b9 0300 	subs.w	r3, r9, #0
 80086fe:	bfbb      	ittet	lt
 8008700:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008704:	9303      	strlt	r3, [sp, #12]
 8008706:	2300      	movge	r3, #0
 8008708:	2201      	movlt	r2, #1
 800870a:	bfac      	ite	ge
 800870c:	6023      	strge	r3, [r4, #0]
 800870e:	6022      	strlt	r2, [r4, #0]
 8008710:	4b9b      	ldr	r3, [pc, #620]	; (8008980 <_dtoa_r+0x2e0>)
 8008712:	9c03      	ldr	r4, [sp, #12]
 8008714:	43a3      	bics	r3, r4
 8008716:	d11c      	bne.n	8008752 <_dtoa_r+0xb2>
 8008718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800871a:	f242 730f 	movw	r3, #9999	; 0x270f
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008724:	ea53 0308 	orrs.w	r3, r3, r8
 8008728:	f000 84fd 	beq.w	8009126 <_dtoa_r+0xa86>
 800872c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800872e:	b963      	cbnz	r3, 800874a <_dtoa_r+0xaa>
 8008730:	4b94      	ldr	r3, [pc, #592]	; (8008984 <_dtoa_r+0x2e4>)
 8008732:	e01f      	b.n	8008774 <_dtoa_r+0xd4>
 8008734:	4b94      	ldr	r3, [pc, #592]	; (8008988 <_dtoa_r+0x2e8>)
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	3308      	adds	r3, #8
 800873a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	9801      	ldr	r0, [sp, #4]
 8008740:	b011      	add	sp, #68	; 0x44
 8008742:	ecbd 8b02 	vpop	{d8}
 8008746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874a:	4b8e      	ldr	r3, [pc, #568]	; (8008984 <_dtoa_r+0x2e4>)
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	3303      	adds	r3, #3
 8008750:	e7f3      	b.n	800873a <_dtoa_r+0x9a>
 8008752:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008756:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800875a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875e:	d10b      	bne.n	8008778 <_dtoa_r+0xd8>
 8008760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008762:	2301      	movs	r3, #1
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 84d9 	beq.w	8009120 <_dtoa_r+0xa80>
 800876e:	4887      	ldr	r0, [pc, #540]	; (800898c <_dtoa_r+0x2ec>)
 8008770:	6018      	str	r0, [r3, #0]
 8008772:	1e43      	subs	r3, r0, #1
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	e7e2      	b.n	800873e <_dtoa_r+0x9e>
 8008778:	a90f      	add	r1, sp, #60	; 0x3c
 800877a:	aa0e      	add	r2, sp, #56	; 0x38
 800877c:	4630      	mov	r0, r6
 800877e:	eeb0 0b48 	vmov.f64	d0, d8
 8008782:	f001 f83d 	bl	8009800 <__d2b>
 8008786:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800878a:	4605      	mov	r5, r0
 800878c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800878e:	2900      	cmp	r1, #0
 8008790:	d046      	beq.n	8008820 <_dtoa_r+0x180>
 8008792:	ee18 4a90 	vmov	r4, s17
 8008796:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800879a:	ec53 2b18 	vmov	r2, r3, d8
 800879e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80087a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80087a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80087aa:	2400      	movs	r4, #0
 80087ac:	ec43 2b16 	vmov	d6, r2, r3
 80087b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80087b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008960 <_dtoa_r+0x2c0>
 80087b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087bc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008968 <_dtoa_r+0x2c8>
 80087c0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80087c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008970 <_dtoa_r+0x2d0>
 80087c8:	ee07 1a90 	vmov	s15, r1
 80087cc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80087d0:	eeb0 7b46 	vmov.f64	d7, d6
 80087d4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80087d8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80087dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80087e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e4:	ee16 ba90 	vmov	fp, s13
 80087e8:	940a      	str	r4, [sp, #40]	; 0x28
 80087ea:	d508      	bpl.n	80087fe <_dtoa_r+0x15e>
 80087ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80087f0:	eeb4 6b47 	vcmp.f64	d6, d7
 80087f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f8:	bf18      	it	ne
 80087fa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80087fe:	f1bb 0f16 	cmp.w	fp, #22
 8008802:	d82f      	bhi.n	8008864 <_dtoa_r+0x1c4>
 8008804:	4b62      	ldr	r3, [pc, #392]	; (8008990 <_dtoa_r+0x2f0>)
 8008806:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800880a:	ed93 7b00 	vldr	d7, [r3]
 800880e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008816:	d501      	bpl.n	800881c <_dtoa_r+0x17c>
 8008818:	f10b 3bff 	add.w	fp, fp, #4294967295
 800881c:	2300      	movs	r3, #0
 800881e:	e022      	b.n	8008866 <_dtoa_r+0x1c6>
 8008820:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008822:	4401      	add	r1, r0
 8008824:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008828:	2b20      	cmp	r3, #32
 800882a:	bfc1      	itttt	gt
 800882c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008830:	fa04 f303 	lslgt.w	r3, r4, r3
 8008834:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008838:	fa28 f804 	lsrgt.w	r8, r8, r4
 800883c:	bfd6      	itet	le
 800883e:	f1c3 0320 	rsble	r3, r3, #32
 8008842:	ea43 0808 	orrgt.w	r8, r3, r8
 8008846:	fa08 f803 	lslle.w	r8, r8, r3
 800884a:	ee07 8a90 	vmov	s15, r8
 800884e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008852:	3901      	subs	r1, #1
 8008854:	ee17 4a90 	vmov	r4, s15
 8008858:	ec53 2b17 	vmov	r2, r3, d7
 800885c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008860:	2401      	movs	r4, #1
 8008862:	e7a3      	b.n	80087ac <_dtoa_r+0x10c>
 8008864:	2301      	movs	r3, #1
 8008866:	930b      	str	r3, [sp, #44]	; 0x2c
 8008868:	1a43      	subs	r3, r0, r1
 800886a:	1e5a      	subs	r2, r3, #1
 800886c:	bf45      	ittet	mi
 800886e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008872:	9304      	strmi	r3, [sp, #16]
 8008874:	2300      	movpl	r3, #0
 8008876:	2300      	movmi	r3, #0
 8008878:	9205      	str	r2, [sp, #20]
 800887a:	bf54      	ite	pl
 800887c:	9304      	strpl	r3, [sp, #16]
 800887e:	9305      	strmi	r3, [sp, #20]
 8008880:	f1bb 0f00 	cmp.w	fp, #0
 8008884:	db18      	blt.n	80088b8 <_dtoa_r+0x218>
 8008886:	9b05      	ldr	r3, [sp, #20]
 8008888:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800888c:	445b      	add	r3, fp
 800888e:	9305      	str	r3, [sp, #20]
 8008890:	2300      	movs	r3, #0
 8008892:	9a06      	ldr	r2, [sp, #24]
 8008894:	2a09      	cmp	r2, #9
 8008896:	d849      	bhi.n	800892c <_dtoa_r+0x28c>
 8008898:	2a05      	cmp	r2, #5
 800889a:	bfc4      	itt	gt
 800889c:	3a04      	subgt	r2, #4
 800889e:	9206      	strgt	r2, [sp, #24]
 80088a0:	9a06      	ldr	r2, [sp, #24]
 80088a2:	f1a2 0202 	sub.w	r2, r2, #2
 80088a6:	bfcc      	ite	gt
 80088a8:	2400      	movgt	r4, #0
 80088aa:	2401      	movle	r4, #1
 80088ac:	2a03      	cmp	r2, #3
 80088ae:	d848      	bhi.n	8008942 <_dtoa_r+0x2a2>
 80088b0:	e8df f002 	tbb	[pc, r2]
 80088b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80088b8:	9b04      	ldr	r3, [sp, #16]
 80088ba:	2200      	movs	r2, #0
 80088bc:	eba3 030b 	sub.w	r3, r3, fp
 80088c0:	9304      	str	r3, [sp, #16]
 80088c2:	9209      	str	r2, [sp, #36]	; 0x24
 80088c4:	f1cb 0300 	rsb	r3, fp, #0
 80088c8:	e7e3      	b.n	8008892 <_dtoa_r+0x1f2>
 80088ca:	2200      	movs	r2, #0
 80088cc:	9207      	str	r2, [sp, #28]
 80088ce:	9a08      	ldr	r2, [sp, #32]
 80088d0:	2a00      	cmp	r2, #0
 80088d2:	dc39      	bgt.n	8008948 <_dtoa_r+0x2a8>
 80088d4:	f04f 0a01 	mov.w	sl, #1
 80088d8:	46d1      	mov	r9, sl
 80088da:	4652      	mov	r2, sl
 80088dc:	f8cd a020 	str.w	sl, [sp, #32]
 80088e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80088e2:	2100      	movs	r1, #0
 80088e4:	6079      	str	r1, [r7, #4]
 80088e6:	2004      	movs	r0, #4
 80088e8:	f100 0c14 	add.w	ip, r0, #20
 80088ec:	4594      	cmp	ip, r2
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	d92f      	bls.n	8008952 <_dtoa_r+0x2b2>
 80088f2:	4630      	mov	r0, r6
 80088f4:	930d      	str	r3, [sp, #52]	; 0x34
 80088f6:	f000 fc5b 	bl	80091b0 <_Balloc>
 80088fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088fc:	9001      	str	r0, [sp, #4]
 80088fe:	4602      	mov	r2, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d149      	bne.n	8008998 <_dtoa_r+0x2f8>
 8008904:	4b23      	ldr	r3, [pc, #140]	; (8008994 <_dtoa_r+0x2f4>)
 8008906:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800890a:	e6e1      	b.n	80086d0 <_dtoa_r+0x30>
 800890c:	2201      	movs	r2, #1
 800890e:	e7dd      	b.n	80088cc <_dtoa_r+0x22c>
 8008910:	2200      	movs	r2, #0
 8008912:	9207      	str	r2, [sp, #28]
 8008914:	9a08      	ldr	r2, [sp, #32]
 8008916:	eb0b 0a02 	add.w	sl, fp, r2
 800891a:	f10a 0901 	add.w	r9, sl, #1
 800891e:	464a      	mov	r2, r9
 8008920:	2a01      	cmp	r2, #1
 8008922:	bfb8      	it	lt
 8008924:	2201      	movlt	r2, #1
 8008926:	e7db      	b.n	80088e0 <_dtoa_r+0x240>
 8008928:	2201      	movs	r2, #1
 800892a:	e7f2      	b.n	8008912 <_dtoa_r+0x272>
 800892c:	2401      	movs	r4, #1
 800892e:	2200      	movs	r2, #0
 8008930:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008934:	f04f 3aff 	mov.w	sl, #4294967295
 8008938:	2100      	movs	r1, #0
 800893a:	46d1      	mov	r9, sl
 800893c:	2212      	movs	r2, #18
 800893e:	9108      	str	r1, [sp, #32]
 8008940:	e7ce      	b.n	80088e0 <_dtoa_r+0x240>
 8008942:	2201      	movs	r2, #1
 8008944:	9207      	str	r2, [sp, #28]
 8008946:	e7f5      	b.n	8008934 <_dtoa_r+0x294>
 8008948:	f8dd a020 	ldr.w	sl, [sp, #32]
 800894c:	46d1      	mov	r9, sl
 800894e:	4652      	mov	r2, sl
 8008950:	e7c6      	b.n	80088e0 <_dtoa_r+0x240>
 8008952:	3101      	adds	r1, #1
 8008954:	6079      	str	r1, [r7, #4]
 8008956:	0040      	lsls	r0, r0, #1
 8008958:	e7c6      	b.n	80088e8 <_dtoa_r+0x248>
 800895a:	bf00      	nop
 800895c:	f3af 8000 	nop.w
 8008960:	636f4361 	.word	0x636f4361
 8008964:	3fd287a7 	.word	0x3fd287a7
 8008968:	8b60c8b3 	.word	0x8b60c8b3
 800896c:	3fc68a28 	.word	0x3fc68a28
 8008970:	509f79fb 	.word	0x509f79fb
 8008974:	3fd34413 	.word	0x3fd34413
 8008978:	0800ab32 	.word	0x0800ab32
 800897c:	0800ab49 	.word	0x0800ab49
 8008980:	7ff00000 	.word	0x7ff00000
 8008984:	0800ab2e 	.word	0x0800ab2e
 8008988:	0800ab25 	.word	0x0800ab25
 800898c:	0800aa01 	.word	0x0800aa01
 8008990:	0800ac40 	.word	0x0800ac40
 8008994:	0800aba4 	.word	0x0800aba4
 8008998:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800899a:	9901      	ldr	r1, [sp, #4]
 800899c:	6011      	str	r1, [r2, #0]
 800899e:	f1b9 0f0e 	cmp.w	r9, #14
 80089a2:	d86c      	bhi.n	8008a7e <_dtoa_r+0x3de>
 80089a4:	2c00      	cmp	r4, #0
 80089a6:	d06a      	beq.n	8008a7e <_dtoa_r+0x3de>
 80089a8:	f1bb 0f00 	cmp.w	fp, #0
 80089ac:	f340 80a0 	ble.w	8008af0 <_dtoa_r+0x450>
 80089b0:	49c1      	ldr	r1, [pc, #772]	; (8008cb8 <_dtoa_r+0x618>)
 80089b2:	f00b 020f 	and.w	r2, fp, #15
 80089b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80089ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80089be:	ed92 7b00 	vldr	d7, [r2]
 80089c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80089c6:	f000 8087 	beq.w	8008ad8 <_dtoa_r+0x438>
 80089ca:	4abc      	ldr	r2, [pc, #752]	; (8008cbc <_dtoa_r+0x61c>)
 80089cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80089d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80089d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80089d8:	f001 010f 	and.w	r1, r1, #15
 80089dc:	2203      	movs	r2, #3
 80089de:	48b7      	ldr	r0, [pc, #732]	; (8008cbc <_dtoa_r+0x61c>)
 80089e0:	2900      	cmp	r1, #0
 80089e2:	d17b      	bne.n	8008adc <_dtoa_r+0x43c>
 80089e4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80089e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80089ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80089f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089f2:	2900      	cmp	r1, #0
 80089f4:	f000 80a2 	beq.w	8008b3c <_dtoa_r+0x49c>
 80089f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80089fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a08:	f140 8098 	bpl.w	8008b3c <_dtoa_r+0x49c>
 8008a0c:	f1b9 0f00 	cmp.w	r9, #0
 8008a10:	f000 8094 	beq.w	8008b3c <_dtoa_r+0x49c>
 8008a14:	f1ba 0f00 	cmp.w	sl, #0
 8008a18:	dd2f      	ble.n	8008a7a <_dtoa_r+0x3da>
 8008a1a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a22:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a26:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	4650      	mov	r0, sl
 8008a2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a32:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008a36:	ee07 2a90 	vmov	s15, r2
 8008a3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a3e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008a42:	ee15 4a90 	vmov	r4, s11
 8008a46:	ec52 1b15 	vmov	r1, r2, d5
 8008a4a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d177      	bne.n	8008b42 <_dtoa_r+0x4a2>
 8008a52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008a5a:	ec42 1b17 	vmov	d7, r1, r2
 8008a5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a66:	f300 8263 	bgt.w	8008f30 <_dtoa_r+0x890>
 8008a6a:	eeb1 7b47 	vneg.f64	d7, d7
 8008a6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a76:	f100 8258 	bmi.w	8008f2a <_dtoa_r+0x88a>
 8008a7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	f2c0 811d 	blt.w	8008cc0 <_dtoa_r+0x620>
 8008a86:	f1bb 0f0e 	cmp.w	fp, #14
 8008a8a:	f300 8119 	bgt.w	8008cc0 <_dtoa_r+0x620>
 8008a8e:	4b8a      	ldr	r3, [pc, #552]	; (8008cb8 <_dtoa_r+0x618>)
 8008a90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a94:	ed93 6b00 	vldr	d6, [r3]
 8008a98:	9b08      	ldr	r3, [sp, #32]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f280 80b7 	bge.w	8008c0e <_dtoa_r+0x56e>
 8008aa0:	f1b9 0f00 	cmp.w	r9, #0
 8008aa4:	f300 80b3 	bgt.w	8008c0e <_dtoa_r+0x56e>
 8008aa8:	f040 823f 	bne.w	8008f2a <_dtoa_r+0x88a>
 8008aac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008ab0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008ab4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ab8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac0:	464c      	mov	r4, r9
 8008ac2:	464f      	mov	r7, r9
 8008ac4:	f280 8215 	bge.w	8008ef2 <_dtoa_r+0x852>
 8008ac8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008acc:	2331      	movs	r3, #49	; 0x31
 8008ace:	f808 3b01 	strb.w	r3, [r8], #1
 8008ad2:	f10b 0b01 	add.w	fp, fp, #1
 8008ad6:	e211      	b.n	8008efc <_dtoa_r+0x85c>
 8008ad8:	2202      	movs	r2, #2
 8008ada:	e780      	b.n	80089de <_dtoa_r+0x33e>
 8008adc:	07cc      	lsls	r4, r1, #31
 8008ade:	d504      	bpl.n	8008aea <_dtoa_r+0x44a>
 8008ae0:	ed90 6b00 	vldr	d6, [r0]
 8008ae4:	3201      	adds	r2, #1
 8008ae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008aea:	1049      	asrs	r1, r1, #1
 8008aec:	3008      	adds	r0, #8
 8008aee:	e777      	b.n	80089e0 <_dtoa_r+0x340>
 8008af0:	d022      	beq.n	8008b38 <_dtoa_r+0x498>
 8008af2:	f1cb 0100 	rsb	r1, fp, #0
 8008af6:	4a70      	ldr	r2, [pc, #448]	; (8008cb8 <_dtoa_r+0x618>)
 8008af8:	f001 000f 	and.w	r0, r1, #15
 8008afc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b00:	ed92 7b00 	vldr	d7, [r2]
 8008b04:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008b08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b0c:	486b      	ldr	r0, [pc, #428]	; (8008cbc <_dtoa_r+0x61c>)
 8008b0e:	1109      	asrs	r1, r1, #4
 8008b10:	2400      	movs	r4, #0
 8008b12:	2202      	movs	r2, #2
 8008b14:	b929      	cbnz	r1, 8008b22 <_dtoa_r+0x482>
 8008b16:	2c00      	cmp	r4, #0
 8008b18:	f43f af6a 	beq.w	80089f0 <_dtoa_r+0x350>
 8008b1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b20:	e766      	b.n	80089f0 <_dtoa_r+0x350>
 8008b22:	07cf      	lsls	r7, r1, #31
 8008b24:	d505      	bpl.n	8008b32 <_dtoa_r+0x492>
 8008b26:	ed90 6b00 	vldr	d6, [r0]
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	2401      	movs	r4, #1
 8008b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b32:	1049      	asrs	r1, r1, #1
 8008b34:	3008      	adds	r0, #8
 8008b36:	e7ed      	b.n	8008b14 <_dtoa_r+0x474>
 8008b38:	2202      	movs	r2, #2
 8008b3a:	e759      	b.n	80089f0 <_dtoa_r+0x350>
 8008b3c:	465f      	mov	r7, fp
 8008b3e:	4648      	mov	r0, r9
 8008b40:	e775      	b.n	8008a2e <_dtoa_r+0x38e>
 8008b42:	ec42 1b17 	vmov	d7, r1, r2
 8008b46:	4a5c      	ldr	r2, [pc, #368]	; (8008cb8 <_dtoa_r+0x618>)
 8008b48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b4c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008b50:	9a01      	ldr	r2, [sp, #4]
 8008b52:	1814      	adds	r4, r2, r0
 8008b54:	9a07      	ldr	r2, [sp, #28]
 8008b56:	b352      	cbz	r2, 8008bae <_dtoa_r+0x50e>
 8008b58:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008b5c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008b60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b64:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008b68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008b6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008b70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008b74:	ee14 2a90 	vmov	r2, s9
 8008b78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008b7c:	3230      	adds	r2, #48	; 0x30
 8008b7e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008b82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b8a:	f808 2b01 	strb.w	r2, [r8], #1
 8008b8e:	d439      	bmi.n	8008c04 <_dtoa_r+0x564>
 8008b90:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008b94:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9c:	d472      	bmi.n	8008c84 <_dtoa_r+0x5e4>
 8008b9e:	45a0      	cmp	r8, r4
 8008ba0:	f43f af6b 	beq.w	8008a7a <_dtoa_r+0x3da>
 8008ba4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008ba8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008bac:	e7e0      	b.n	8008b70 <_dtoa_r+0x4d0>
 8008bae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008bb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008bbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008bc0:	ee14 2a90 	vmov	r2, s9
 8008bc4:	3230      	adds	r2, #48	; 0x30
 8008bc6:	f808 2b01 	strb.w	r2, [r8], #1
 8008bca:	45a0      	cmp	r8, r4
 8008bcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008bd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008bd4:	d118      	bne.n	8008c08 <_dtoa_r+0x568>
 8008bd6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008bda:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008bde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be6:	dc4d      	bgt.n	8008c84 <_dtoa_r+0x5e4>
 8008be8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008bec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf4:	f57f af41 	bpl.w	8008a7a <_dtoa_r+0x3da>
 8008bf8:	4688      	mov	r8, r1
 8008bfa:	3901      	subs	r1, #1
 8008bfc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008c00:	2b30      	cmp	r3, #48	; 0x30
 8008c02:	d0f9      	beq.n	8008bf8 <_dtoa_r+0x558>
 8008c04:	46bb      	mov	fp, r7
 8008c06:	e02a      	b.n	8008c5e <_dtoa_r+0x5be>
 8008c08:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008c0c:	e7d6      	b.n	8008bbc <_dtoa_r+0x51c>
 8008c0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c12:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008c16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008c1e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008c22:	ee15 3a10 	vmov	r3, s10
 8008c26:	3330      	adds	r3, #48	; 0x30
 8008c28:	f808 3b01 	strb.w	r3, [r8], #1
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	eba8 0303 	sub.w	r3, r8, r3
 8008c32:	4599      	cmp	r9, r3
 8008c34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008c38:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008c3c:	d133      	bne.n	8008ca6 <_dtoa_r+0x606>
 8008c3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008c42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c4a:	dc1a      	bgt.n	8008c82 <_dtoa_r+0x5e2>
 8008c4c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c54:	d103      	bne.n	8008c5e <_dtoa_r+0x5be>
 8008c56:	ee15 3a10 	vmov	r3, s10
 8008c5a:	07d9      	lsls	r1, r3, #31
 8008c5c:	d411      	bmi.n	8008c82 <_dtoa_r+0x5e2>
 8008c5e:	4629      	mov	r1, r5
 8008c60:	4630      	mov	r0, r6
 8008c62:	f000 fae5 	bl	8009230 <_Bfree>
 8008c66:	2300      	movs	r3, #0
 8008c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c6a:	f888 3000 	strb.w	r3, [r8]
 8008c6e:	f10b 0301 	add.w	r3, fp, #1
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f43f ad61 	beq.w	800873e <_dtoa_r+0x9e>
 8008c7c:	f8c3 8000 	str.w	r8, [r3]
 8008c80:	e55d      	b.n	800873e <_dtoa_r+0x9e>
 8008c82:	465f      	mov	r7, fp
 8008c84:	4643      	mov	r3, r8
 8008c86:	4698      	mov	r8, r3
 8008c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8c:	2a39      	cmp	r2, #57	; 0x39
 8008c8e:	d106      	bne.n	8008c9e <_dtoa_r+0x5fe>
 8008c90:	9a01      	ldr	r2, [sp, #4]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d1f7      	bne.n	8008c86 <_dtoa_r+0x5e6>
 8008c96:	9901      	ldr	r1, [sp, #4]
 8008c98:	2230      	movs	r2, #48	; 0x30
 8008c9a:	3701      	adds	r7, #1
 8008c9c:	700a      	strb	r2, [r1, #0]
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	3201      	adds	r2, #1
 8008ca2:	701a      	strb	r2, [r3, #0]
 8008ca4:	e7ae      	b.n	8008c04 <_dtoa_r+0x564>
 8008ca6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008caa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb2:	d1b2      	bne.n	8008c1a <_dtoa_r+0x57a>
 8008cb4:	e7d3      	b.n	8008c5e <_dtoa_r+0x5be>
 8008cb6:	bf00      	nop
 8008cb8:	0800ac40 	.word	0x0800ac40
 8008cbc:	0800ac18 	.word	0x0800ac18
 8008cc0:	9907      	ldr	r1, [sp, #28]
 8008cc2:	2900      	cmp	r1, #0
 8008cc4:	f000 80d0 	beq.w	8008e68 <_dtoa_r+0x7c8>
 8008cc8:	9906      	ldr	r1, [sp, #24]
 8008cca:	2901      	cmp	r1, #1
 8008ccc:	f300 80b4 	bgt.w	8008e38 <_dtoa_r+0x798>
 8008cd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cd2:	2900      	cmp	r1, #0
 8008cd4:	f000 80ac 	beq.w	8008e30 <_dtoa_r+0x790>
 8008cd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008cdc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ce0:	461c      	mov	r4, r3
 8008ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	9b05      	ldr	r3, [sp, #20]
 8008cec:	2101      	movs	r1, #1
 8008cee:	4413      	add	r3, r2
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	9305      	str	r3, [sp, #20]
 8008cf4:	f000 fb54 	bl	80093a0 <__i2b>
 8008cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	f1b8 0f00 	cmp.w	r8, #0
 8008d00:	dd0d      	ble.n	8008d1e <_dtoa_r+0x67e>
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	dd0a      	ble.n	8008d1e <_dtoa_r+0x67e>
 8008d08:	4542      	cmp	r2, r8
 8008d0a:	9904      	ldr	r1, [sp, #16]
 8008d0c:	bfa8      	it	ge
 8008d0e:	4642      	movge	r2, r8
 8008d10:	1a89      	subs	r1, r1, r2
 8008d12:	9104      	str	r1, [sp, #16]
 8008d14:	9905      	ldr	r1, [sp, #20]
 8008d16:	eba8 0802 	sub.w	r8, r8, r2
 8008d1a:	1a8a      	subs	r2, r1, r2
 8008d1c:	9205      	str	r2, [sp, #20]
 8008d1e:	b303      	cbz	r3, 8008d62 <_dtoa_r+0x6c2>
 8008d20:	9a07      	ldr	r2, [sp, #28]
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	f000 80a5 	beq.w	8008e72 <_dtoa_r+0x7d2>
 8008d28:	2c00      	cmp	r4, #0
 8008d2a:	dd13      	ble.n	8008d54 <_dtoa_r+0x6b4>
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	4622      	mov	r2, r4
 8008d30:	4630      	mov	r0, r6
 8008d32:	930d      	str	r3, [sp, #52]	; 0x34
 8008d34:	f000 fbf4 	bl	8009520 <__pow5mult>
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f000 fb44 	bl	80093cc <__multiply>
 8008d44:	4629      	mov	r1, r5
 8008d46:	900a      	str	r0, [sp, #40]	; 0x28
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 fa71 	bl	8009230 <_Bfree>
 8008d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d52:	4615      	mov	r5, r2
 8008d54:	1b1a      	subs	r2, r3, r4
 8008d56:	d004      	beq.n	8008d62 <_dtoa_r+0x6c2>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f000 fbe0 	bl	8009520 <__pow5mult>
 8008d60:	4605      	mov	r5, r0
 8008d62:	2101      	movs	r1, #1
 8008d64:	4630      	mov	r0, r6
 8008d66:	f000 fb1b 	bl	80093a0 <__i2b>
 8008d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	f340 8081 	ble.w	8008e76 <_dtoa_r+0x7d6>
 8008d74:	461a      	mov	r2, r3
 8008d76:	4601      	mov	r1, r0
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f000 fbd1 	bl	8009520 <__pow5mult>
 8008d7e:	9b06      	ldr	r3, [sp, #24]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	4604      	mov	r4, r0
 8008d84:	dd7a      	ble.n	8008e7c <_dtoa_r+0x7dc>
 8008d86:	2300      	movs	r3, #0
 8008d88:	930a      	str	r3, [sp, #40]	; 0x28
 8008d8a:	6922      	ldr	r2, [r4, #16]
 8008d8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d90:	6910      	ldr	r0, [r2, #16]
 8008d92:	f000 fab5 	bl	8009300 <__hi0bits>
 8008d96:	f1c0 0020 	rsb	r0, r0, #32
 8008d9a:	9b05      	ldr	r3, [sp, #20]
 8008d9c:	4418      	add	r0, r3
 8008d9e:	f010 001f 	ands.w	r0, r0, #31
 8008da2:	f000 808c 	beq.w	8008ebe <_dtoa_r+0x81e>
 8008da6:	f1c0 0220 	rsb	r2, r0, #32
 8008daa:	2a04      	cmp	r2, #4
 8008dac:	f340 8085 	ble.w	8008eba <_dtoa_r+0x81a>
 8008db0:	f1c0 001c 	rsb	r0, r0, #28
 8008db4:	9b04      	ldr	r3, [sp, #16]
 8008db6:	4403      	add	r3, r0
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	9b05      	ldr	r3, [sp, #20]
 8008dbc:	4403      	add	r3, r0
 8008dbe:	4480      	add	r8, r0
 8008dc0:	9305      	str	r3, [sp, #20]
 8008dc2:	9b04      	ldr	r3, [sp, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dd05      	ble.n	8008dd4 <_dtoa_r+0x734>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 fc01 	bl	80095d4 <__lshift>
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	dd05      	ble.n	8008de6 <_dtoa_r+0x746>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4630      	mov	r0, r6
 8008de0:	f000 fbf8 	bl	80095d4 <__lshift>
 8008de4:	4604      	mov	r4, r0
 8008de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d06a      	beq.n	8008ec2 <_dtoa_r+0x822>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 fc60 	bl	80096b4 <__mcmp>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	da64      	bge.n	8008ec2 <_dtoa_r+0x822>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f000 fa38 	bl	8009274 <__multadd>
 8008e04:	9b07      	ldr	r3, [sp, #28]
 8008e06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8191 	beq.w	8009134 <_dtoa_r+0xa94>
 8008e12:	4639      	mov	r1, r7
 8008e14:	2300      	movs	r3, #0
 8008e16:	220a      	movs	r2, #10
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f000 fa2b 	bl	8009274 <__multadd>
 8008e1e:	f1ba 0f00 	cmp.w	sl, #0
 8008e22:	4607      	mov	r7, r0
 8008e24:	f300 808d 	bgt.w	8008f42 <_dtoa_r+0x8a2>
 8008e28:	9b06      	ldr	r3, [sp, #24]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	dc50      	bgt.n	8008ed0 <_dtoa_r+0x830>
 8008e2e:	e088      	b.n	8008f42 <_dtoa_r+0x8a2>
 8008e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e36:	e751      	b.n	8008cdc <_dtoa_r+0x63c>
 8008e38:	f109 34ff 	add.w	r4, r9, #4294967295
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	bfbf      	itttt	lt
 8008e40:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008e42:	1ae3      	sublt	r3, r4, r3
 8008e44:	18d2      	addlt	r2, r2, r3
 8008e46:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008e48:	bfb6      	itet	lt
 8008e4a:	4623      	movlt	r3, r4
 8008e4c:	1b1c      	subge	r4, r3, r4
 8008e4e:	2400      	movlt	r4, #0
 8008e50:	f1b9 0f00 	cmp.w	r9, #0
 8008e54:	bfb5      	itete	lt
 8008e56:	9a04      	ldrlt	r2, [sp, #16]
 8008e58:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008e5c:	eba2 0809 	sublt.w	r8, r2, r9
 8008e60:	464a      	movge	r2, r9
 8008e62:	bfb8      	it	lt
 8008e64:	2200      	movlt	r2, #0
 8008e66:	e73c      	b.n	8008ce2 <_dtoa_r+0x642>
 8008e68:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008e6c:	9f07      	ldr	r7, [sp, #28]
 8008e6e:	461c      	mov	r4, r3
 8008e70:	e744      	b.n	8008cfc <_dtoa_r+0x65c>
 8008e72:	461a      	mov	r2, r3
 8008e74:	e770      	b.n	8008d58 <_dtoa_r+0x6b8>
 8008e76:	9b06      	ldr	r3, [sp, #24]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	dc18      	bgt.n	8008eae <_dtoa_r+0x80e>
 8008e7c:	9b02      	ldr	r3, [sp, #8]
 8008e7e:	b9b3      	cbnz	r3, 8008eae <_dtoa_r+0x80e>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008e86:	b9a2      	cbnz	r2, 8008eb2 <_dtoa_r+0x812>
 8008e88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e8c:	0d12      	lsrs	r2, r2, #20
 8008e8e:	0512      	lsls	r2, r2, #20
 8008e90:	b18a      	cbz	r2, 8008eb6 <_dtoa_r+0x816>
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	3301      	adds	r3, #1
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	9b05      	ldr	r3, [sp, #20]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f47f af70 	bne.w	8008d8a <_dtoa_r+0x6ea>
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e775      	b.n	8008d9a <_dtoa_r+0x6fa>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e7f6      	b.n	8008ea0 <_dtoa_r+0x800>
 8008eb2:	9b02      	ldr	r3, [sp, #8]
 8008eb4:	e7f4      	b.n	8008ea0 <_dtoa_r+0x800>
 8008eb6:	920a      	str	r2, [sp, #40]	; 0x28
 8008eb8:	e7f3      	b.n	8008ea2 <_dtoa_r+0x802>
 8008eba:	d082      	beq.n	8008dc2 <_dtoa_r+0x722>
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	301c      	adds	r0, #28
 8008ec0:	e778      	b.n	8008db4 <_dtoa_r+0x714>
 8008ec2:	f1b9 0f00 	cmp.w	r9, #0
 8008ec6:	dc37      	bgt.n	8008f38 <_dtoa_r+0x898>
 8008ec8:	9b06      	ldr	r3, [sp, #24]
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	dd34      	ble.n	8008f38 <_dtoa_r+0x898>
 8008ece:	46ca      	mov	sl, r9
 8008ed0:	f1ba 0f00 	cmp.w	sl, #0
 8008ed4:	d10d      	bne.n	8008ef2 <_dtoa_r+0x852>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4653      	mov	r3, sl
 8008eda:	2205      	movs	r2, #5
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f9c9 	bl	8009274 <__multadd>
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 fbe4 	bl	80096b4 <__mcmp>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	f73f adeb 	bgt.w	8008ac8 <_dtoa_r+0x428>
 8008ef2:	9b08      	ldr	r3, [sp, #32]
 8008ef4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ef8:	ea6f 0b03 	mvn.w	fp, r3
 8008efc:	f04f 0900 	mov.w	r9, #0
 8008f00:	4621      	mov	r1, r4
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 f994 	bl	8009230 <_Bfree>
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	f43f aea8 	beq.w	8008c5e <_dtoa_r+0x5be>
 8008f0e:	f1b9 0f00 	cmp.w	r9, #0
 8008f12:	d005      	beq.n	8008f20 <_dtoa_r+0x880>
 8008f14:	45b9      	cmp	r9, r7
 8008f16:	d003      	beq.n	8008f20 <_dtoa_r+0x880>
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f000 f988 	bl	8009230 <_Bfree>
 8008f20:	4639      	mov	r1, r7
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f984 	bl	8009230 <_Bfree>
 8008f28:	e699      	b.n	8008c5e <_dtoa_r+0x5be>
 8008f2a:	2400      	movs	r4, #0
 8008f2c:	4627      	mov	r7, r4
 8008f2e:	e7e0      	b.n	8008ef2 <_dtoa_r+0x852>
 8008f30:	46bb      	mov	fp, r7
 8008f32:	4604      	mov	r4, r0
 8008f34:	4607      	mov	r7, r0
 8008f36:	e5c7      	b.n	8008ac8 <_dtoa_r+0x428>
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	46ca      	mov	sl, r9
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 8100 	beq.w	8009142 <_dtoa_r+0xaa2>
 8008f42:	f1b8 0f00 	cmp.w	r8, #0
 8008f46:	dd05      	ble.n	8008f54 <_dtoa_r+0x8b4>
 8008f48:	4639      	mov	r1, r7
 8008f4a:	4642      	mov	r2, r8
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 fb41 	bl	80095d4 <__lshift>
 8008f52:	4607      	mov	r7, r0
 8008f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d05d      	beq.n	8009016 <_dtoa_r+0x976>
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f000 f927 	bl	80091b0 <_Balloc>
 8008f62:	4680      	mov	r8, r0
 8008f64:	b928      	cbnz	r0, 8008f72 <_dtoa_r+0x8d2>
 8008f66:	4b82      	ldr	r3, [pc, #520]	; (8009170 <_dtoa_r+0xad0>)
 8008f68:	4602      	mov	r2, r0
 8008f6a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f6e:	f7ff bbaf 	b.w	80086d0 <_dtoa_r+0x30>
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	3202      	adds	r2, #2
 8008f76:	0092      	lsls	r2, r2, #2
 8008f78:	f107 010c 	add.w	r1, r7, #12
 8008f7c:	300c      	adds	r0, #12
 8008f7e:	f000 f909 	bl	8009194 <memcpy>
 8008f82:	2201      	movs	r2, #1
 8008f84:	4641      	mov	r1, r8
 8008f86:	4630      	mov	r0, r6
 8008f88:	f000 fb24 	bl	80095d4 <__lshift>
 8008f8c:	9b01      	ldr	r3, [sp, #4]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	9304      	str	r3, [sp, #16]
 8008f92:	9b01      	ldr	r3, [sp, #4]
 8008f94:	4453      	add	r3, sl
 8008f96:	9308      	str	r3, [sp, #32]
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	46b9      	mov	r9, r7
 8008fa0:	9307      	str	r3, [sp, #28]
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	4628      	mov	r0, r5
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	f7ff fae9 	bl	8008584 <quorem>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	3330      	adds	r3, #48	; 0x30
 8008fb6:	9005      	str	r0, [sp, #20]
 8008fb8:	4649      	mov	r1, r9
 8008fba:	4628      	mov	r0, r5
 8008fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008fbe:	f000 fb79 	bl	80096b4 <__mcmp>
 8008fc2:	463a      	mov	r2, r7
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 fb8f 	bl	80096ec <__mdiff>
 8008fce:	68c2      	ldr	r2, [r0, #12]
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	bb0a      	cbnz	r2, 800901a <_dtoa_r+0x97a>
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 fb6b 	bl	80096b4 <__mcmp>
 8008fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	4641      	mov	r1, r8
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008fea:	f000 f921 	bl	8009230 <_Bfree>
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ff2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ff6:	ea43 0102 	orr.w	r1, r3, r2
 8008ffa:	9b07      	ldr	r3, [sp, #28]
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	d10d      	bne.n	800901e <_dtoa_r+0x97e>
 8009002:	2b39      	cmp	r3, #57	; 0x39
 8009004:	d029      	beq.n	800905a <_dtoa_r+0x9ba>
 8009006:	f1ba 0f00 	cmp.w	sl, #0
 800900a:	dd01      	ble.n	8009010 <_dtoa_r+0x970>
 800900c:	9b05      	ldr	r3, [sp, #20]
 800900e:	3331      	adds	r3, #49	; 0x31
 8009010:	9a02      	ldr	r2, [sp, #8]
 8009012:	7013      	strb	r3, [r2, #0]
 8009014:	e774      	b.n	8008f00 <_dtoa_r+0x860>
 8009016:	4638      	mov	r0, r7
 8009018:	e7b8      	b.n	8008f8c <_dtoa_r+0x8ec>
 800901a:	2201      	movs	r2, #1
 800901c:	e7e1      	b.n	8008fe2 <_dtoa_r+0x942>
 800901e:	f1ba 0f00 	cmp.w	sl, #0
 8009022:	db06      	blt.n	8009032 <_dtoa_r+0x992>
 8009024:	9906      	ldr	r1, [sp, #24]
 8009026:	ea41 0a0a 	orr.w	sl, r1, sl
 800902a:	9907      	ldr	r1, [sp, #28]
 800902c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009030:	d120      	bne.n	8009074 <_dtoa_r+0x9d4>
 8009032:	2a00      	cmp	r2, #0
 8009034:	ddec      	ble.n	8009010 <_dtoa_r+0x970>
 8009036:	4629      	mov	r1, r5
 8009038:	2201      	movs	r2, #1
 800903a:	4630      	mov	r0, r6
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	f000 fac9 	bl	80095d4 <__lshift>
 8009042:	4621      	mov	r1, r4
 8009044:	4605      	mov	r5, r0
 8009046:	f000 fb35 	bl	80096b4 <__mcmp>
 800904a:	2800      	cmp	r0, #0
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	dc02      	bgt.n	8009056 <_dtoa_r+0x9b6>
 8009050:	d1de      	bne.n	8009010 <_dtoa_r+0x970>
 8009052:	07da      	lsls	r2, r3, #31
 8009054:	d5dc      	bpl.n	8009010 <_dtoa_r+0x970>
 8009056:	2b39      	cmp	r3, #57	; 0x39
 8009058:	d1d8      	bne.n	800900c <_dtoa_r+0x96c>
 800905a:	9a02      	ldr	r2, [sp, #8]
 800905c:	2339      	movs	r3, #57	; 0x39
 800905e:	7013      	strb	r3, [r2, #0]
 8009060:	4643      	mov	r3, r8
 8009062:	4698      	mov	r8, r3
 8009064:	3b01      	subs	r3, #1
 8009066:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800906a:	2a39      	cmp	r2, #57	; 0x39
 800906c:	d051      	beq.n	8009112 <_dtoa_r+0xa72>
 800906e:	3201      	adds	r2, #1
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	e745      	b.n	8008f00 <_dtoa_r+0x860>
 8009074:	2a00      	cmp	r2, #0
 8009076:	dd03      	ble.n	8009080 <_dtoa_r+0x9e0>
 8009078:	2b39      	cmp	r3, #57	; 0x39
 800907a:	d0ee      	beq.n	800905a <_dtoa_r+0x9ba>
 800907c:	3301      	adds	r3, #1
 800907e:	e7c7      	b.n	8009010 <_dtoa_r+0x970>
 8009080:	9a04      	ldr	r2, [sp, #16]
 8009082:	9908      	ldr	r1, [sp, #32]
 8009084:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009088:	428a      	cmp	r2, r1
 800908a:	d02b      	beq.n	80090e4 <_dtoa_r+0xa44>
 800908c:	4629      	mov	r1, r5
 800908e:	2300      	movs	r3, #0
 8009090:	220a      	movs	r2, #10
 8009092:	4630      	mov	r0, r6
 8009094:	f000 f8ee 	bl	8009274 <__multadd>
 8009098:	45b9      	cmp	r9, r7
 800909a:	4605      	mov	r5, r0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	f04f 020a 	mov.w	r2, #10
 80090a4:	4649      	mov	r1, r9
 80090a6:	4630      	mov	r0, r6
 80090a8:	d107      	bne.n	80090ba <_dtoa_r+0xa1a>
 80090aa:	f000 f8e3 	bl	8009274 <__multadd>
 80090ae:	4681      	mov	r9, r0
 80090b0:	4607      	mov	r7, r0
 80090b2:	9b04      	ldr	r3, [sp, #16]
 80090b4:	3301      	adds	r3, #1
 80090b6:	9304      	str	r3, [sp, #16]
 80090b8:	e774      	b.n	8008fa4 <_dtoa_r+0x904>
 80090ba:	f000 f8db 	bl	8009274 <__multadd>
 80090be:	4639      	mov	r1, r7
 80090c0:	4681      	mov	r9, r0
 80090c2:	2300      	movs	r3, #0
 80090c4:	220a      	movs	r2, #10
 80090c6:	4630      	mov	r0, r6
 80090c8:	f000 f8d4 	bl	8009274 <__multadd>
 80090cc:	4607      	mov	r7, r0
 80090ce:	e7f0      	b.n	80090b2 <_dtoa_r+0xa12>
 80090d0:	f1ba 0f00 	cmp.w	sl, #0
 80090d4:	9a01      	ldr	r2, [sp, #4]
 80090d6:	bfcc      	ite	gt
 80090d8:	46d0      	movgt	r8, sl
 80090da:	f04f 0801 	movle.w	r8, #1
 80090de:	4490      	add	r8, r2
 80090e0:	f04f 0900 	mov.w	r9, #0
 80090e4:	4629      	mov	r1, r5
 80090e6:	2201      	movs	r2, #1
 80090e8:	4630      	mov	r0, r6
 80090ea:	9302      	str	r3, [sp, #8]
 80090ec:	f000 fa72 	bl	80095d4 <__lshift>
 80090f0:	4621      	mov	r1, r4
 80090f2:	4605      	mov	r5, r0
 80090f4:	f000 fade 	bl	80096b4 <__mcmp>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	dcb1      	bgt.n	8009060 <_dtoa_r+0x9c0>
 80090fc:	d102      	bne.n	8009104 <_dtoa_r+0xa64>
 80090fe:	9b02      	ldr	r3, [sp, #8]
 8009100:	07db      	lsls	r3, r3, #31
 8009102:	d4ad      	bmi.n	8009060 <_dtoa_r+0x9c0>
 8009104:	4643      	mov	r3, r8
 8009106:	4698      	mov	r8, r3
 8009108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800910c:	2a30      	cmp	r2, #48	; 0x30
 800910e:	d0fa      	beq.n	8009106 <_dtoa_r+0xa66>
 8009110:	e6f6      	b.n	8008f00 <_dtoa_r+0x860>
 8009112:	9a01      	ldr	r2, [sp, #4]
 8009114:	429a      	cmp	r2, r3
 8009116:	d1a4      	bne.n	8009062 <_dtoa_r+0x9c2>
 8009118:	f10b 0b01 	add.w	fp, fp, #1
 800911c:	2331      	movs	r3, #49	; 0x31
 800911e:	e778      	b.n	8009012 <_dtoa_r+0x972>
 8009120:	4b14      	ldr	r3, [pc, #80]	; (8009174 <_dtoa_r+0xad4>)
 8009122:	f7ff bb27 	b.w	8008774 <_dtoa_r+0xd4>
 8009126:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009128:	2b00      	cmp	r3, #0
 800912a:	f47f ab03 	bne.w	8008734 <_dtoa_r+0x94>
 800912e:	4b12      	ldr	r3, [pc, #72]	; (8009178 <_dtoa_r+0xad8>)
 8009130:	f7ff bb20 	b.w	8008774 <_dtoa_r+0xd4>
 8009134:	f1ba 0f00 	cmp.w	sl, #0
 8009138:	dc03      	bgt.n	8009142 <_dtoa_r+0xaa2>
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	2b02      	cmp	r3, #2
 800913e:	f73f aec7 	bgt.w	8008ed0 <_dtoa_r+0x830>
 8009142:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009146:	4621      	mov	r1, r4
 8009148:	4628      	mov	r0, r5
 800914a:	f7ff fa1b 	bl	8008584 <quorem>
 800914e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009152:	f808 3b01 	strb.w	r3, [r8], #1
 8009156:	9a01      	ldr	r2, [sp, #4]
 8009158:	eba8 0202 	sub.w	r2, r8, r2
 800915c:	4592      	cmp	sl, r2
 800915e:	ddb7      	ble.n	80090d0 <_dtoa_r+0xa30>
 8009160:	4629      	mov	r1, r5
 8009162:	2300      	movs	r3, #0
 8009164:	220a      	movs	r2, #10
 8009166:	4630      	mov	r0, r6
 8009168:	f000 f884 	bl	8009274 <__multadd>
 800916c:	4605      	mov	r5, r0
 800916e:	e7ea      	b.n	8009146 <_dtoa_r+0xaa6>
 8009170:	0800aba4 	.word	0x0800aba4
 8009174:	0800aa00 	.word	0x0800aa00
 8009178:	0800ab25 	.word	0x0800ab25

0800917c <_localeconv_r>:
 800917c:	4800      	ldr	r0, [pc, #0]	; (8009180 <_localeconv_r+0x4>)
 800917e:	4770      	bx	lr
 8009180:	2000017c 	.word	0x2000017c

08009184 <malloc>:
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <malloc+0xc>)
 8009186:	4601      	mov	r1, r0
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f000 bc17 	b.w	80099bc <_malloc_r>
 800918e:	bf00      	nop
 8009190:	20000028 	.word	0x20000028

08009194 <memcpy>:
 8009194:	440a      	add	r2, r1
 8009196:	4291      	cmp	r1, r2
 8009198:	f100 33ff 	add.w	r3, r0, #4294967295
 800919c:	d100      	bne.n	80091a0 <memcpy+0xc>
 800919e:	4770      	bx	lr
 80091a0:	b510      	push	{r4, lr}
 80091a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091aa:	4291      	cmp	r1, r2
 80091ac:	d1f9      	bne.n	80091a2 <memcpy+0xe>
 80091ae:	bd10      	pop	{r4, pc}

080091b0 <_Balloc>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091b4:	4604      	mov	r4, r0
 80091b6:	460d      	mov	r5, r1
 80091b8:	b976      	cbnz	r6, 80091d8 <_Balloc+0x28>
 80091ba:	2010      	movs	r0, #16
 80091bc:	f7ff ffe2 	bl	8009184 <malloc>
 80091c0:	4602      	mov	r2, r0
 80091c2:	6260      	str	r0, [r4, #36]	; 0x24
 80091c4:	b920      	cbnz	r0, 80091d0 <_Balloc+0x20>
 80091c6:	4b18      	ldr	r3, [pc, #96]	; (8009228 <_Balloc+0x78>)
 80091c8:	4818      	ldr	r0, [pc, #96]	; (800922c <_Balloc+0x7c>)
 80091ca:	2166      	movs	r1, #102	; 0x66
 80091cc:	f000 fdd6 	bl	8009d7c <__assert_func>
 80091d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091d4:	6006      	str	r6, [r0, #0]
 80091d6:	60c6      	str	r6, [r0, #12]
 80091d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091da:	68f3      	ldr	r3, [r6, #12]
 80091dc:	b183      	cbz	r3, 8009200 <_Balloc+0x50>
 80091de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091e6:	b9b8      	cbnz	r0, 8009218 <_Balloc+0x68>
 80091e8:	2101      	movs	r1, #1
 80091ea:	fa01 f605 	lsl.w	r6, r1, r5
 80091ee:	1d72      	adds	r2, r6, #5
 80091f0:	0092      	lsls	r2, r2, #2
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 fb60 	bl	80098b8 <_calloc_r>
 80091f8:	b160      	cbz	r0, 8009214 <_Balloc+0x64>
 80091fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091fe:	e00e      	b.n	800921e <_Balloc+0x6e>
 8009200:	2221      	movs	r2, #33	; 0x21
 8009202:	2104      	movs	r1, #4
 8009204:	4620      	mov	r0, r4
 8009206:	f000 fb57 	bl	80098b8 <_calloc_r>
 800920a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800920c:	60f0      	str	r0, [r6, #12]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e4      	bne.n	80091de <_Balloc+0x2e>
 8009214:	2000      	movs	r0, #0
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	6802      	ldr	r2, [r0, #0]
 800921a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800921e:	2300      	movs	r3, #0
 8009220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009224:	e7f7      	b.n	8009216 <_Balloc+0x66>
 8009226:	bf00      	nop
 8009228:	0800ab32 	.word	0x0800ab32
 800922c:	0800abb5 	.word	0x0800abb5

08009230 <_Bfree>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009234:	4605      	mov	r5, r0
 8009236:	460c      	mov	r4, r1
 8009238:	b976      	cbnz	r6, 8009258 <_Bfree+0x28>
 800923a:	2010      	movs	r0, #16
 800923c:	f7ff ffa2 	bl	8009184 <malloc>
 8009240:	4602      	mov	r2, r0
 8009242:	6268      	str	r0, [r5, #36]	; 0x24
 8009244:	b920      	cbnz	r0, 8009250 <_Bfree+0x20>
 8009246:	4b09      	ldr	r3, [pc, #36]	; (800926c <_Bfree+0x3c>)
 8009248:	4809      	ldr	r0, [pc, #36]	; (8009270 <_Bfree+0x40>)
 800924a:	218a      	movs	r1, #138	; 0x8a
 800924c:	f000 fd96 	bl	8009d7c <__assert_func>
 8009250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009254:	6006      	str	r6, [r0, #0]
 8009256:	60c6      	str	r6, [r0, #12]
 8009258:	b13c      	cbz	r4, 800926a <_Bfree+0x3a>
 800925a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800925c:	6862      	ldr	r2, [r4, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009264:	6021      	str	r1, [r4, #0]
 8009266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	0800ab32 	.word	0x0800ab32
 8009270:	0800abb5 	.word	0x0800abb5

08009274 <__multadd>:
 8009274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009278:	690d      	ldr	r5, [r1, #16]
 800927a:	4607      	mov	r7, r0
 800927c:	460c      	mov	r4, r1
 800927e:	461e      	mov	r6, r3
 8009280:	f101 0c14 	add.w	ip, r1, #20
 8009284:	2000      	movs	r0, #0
 8009286:	f8dc 3000 	ldr.w	r3, [ip]
 800928a:	b299      	uxth	r1, r3
 800928c:	fb02 6101 	mla	r1, r2, r1, r6
 8009290:	0c1e      	lsrs	r6, r3, #16
 8009292:	0c0b      	lsrs	r3, r1, #16
 8009294:	fb02 3306 	mla	r3, r2, r6, r3
 8009298:	b289      	uxth	r1, r1
 800929a:	3001      	adds	r0, #1
 800929c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092a0:	4285      	cmp	r5, r0
 80092a2:	f84c 1b04 	str.w	r1, [ip], #4
 80092a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092aa:	dcec      	bgt.n	8009286 <__multadd+0x12>
 80092ac:	b30e      	cbz	r6, 80092f2 <__multadd+0x7e>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	42ab      	cmp	r3, r5
 80092b2:	dc19      	bgt.n	80092e8 <__multadd+0x74>
 80092b4:	6861      	ldr	r1, [r4, #4]
 80092b6:	4638      	mov	r0, r7
 80092b8:	3101      	adds	r1, #1
 80092ba:	f7ff ff79 	bl	80091b0 <_Balloc>
 80092be:	4680      	mov	r8, r0
 80092c0:	b928      	cbnz	r0, 80092ce <__multadd+0x5a>
 80092c2:	4602      	mov	r2, r0
 80092c4:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <__multadd+0x84>)
 80092c6:	480d      	ldr	r0, [pc, #52]	; (80092fc <__multadd+0x88>)
 80092c8:	21b5      	movs	r1, #181	; 0xb5
 80092ca:	f000 fd57 	bl	8009d7c <__assert_func>
 80092ce:	6922      	ldr	r2, [r4, #16]
 80092d0:	3202      	adds	r2, #2
 80092d2:	f104 010c 	add.w	r1, r4, #12
 80092d6:	0092      	lsls	r2, r2, #2
 80092d8:	300c      	adds	r0, #12
 80092da:	f7ff ff5b 	bl	8009194 <memcpy>
 80092de:	4621      	mov	r1, r4
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff ffa5 	bl	8009230 <_Bfree>
 80092e6:	4644      	mov	r4, r8
 80092e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092ec:	3501      	adds	r5, #1
 80092ee:	615e      	str	r6, [r3, #20]
 80092f0:	6125      	str	r5, [r4, #16]
 80092f2:	4620      	mov	r0, r4
 80092f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f8:	0800aba4 	.word	0x0800aba4
 80092fc:	0800abb5 	.word	0x0800abb5

08009300 <__hi0bits>:
 8009300:	0c03      	lsrs	r3, r0, #16
 8009302:	041b      	lsls	r3, r3, #16
 8009304:	b9d3      	cbnz	r3, 800933c <__hi0bits+0x3c>
 8009306:	0400      	lsls	r0, r0, #16
 8009308:	2310      	movs	r3, #16
 800930a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800930e:	bf04      	itt	eq
 8009310:	0200      	lsleq	r0, r0, #8
 8009312:	3308      	addeq	r3, #8
 8009314:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009318:	bf04      	itt	eq
 800931a:	0100      	lsleq	r0, r0, #4
 800931c:	3304      	addeq	r3, #4
 800931e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009322:	bf04      	itt	eq
 8009324:	0080      	lsleq	r0, r0, #2
 8009326:	3302      	addeq	r3, #2
 8009328:	2800      	cmp	r0, #0
 800932a:	db05      	blt.n	8009338 <__hi0bits+0x38>
 800932c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009330:	f103 0301 	add.w	r3, r3, #1
 8009334:	bf08      	it	eq
 8009336:	2320      	moveq	r3, #32
 8009338:	4618      	mov	r0, r3
 800933a:	4770      	bx	lr
 800933c:	2300      	movs	r3, #0
 800933e:	e7e4      	b.n	800930a <__hi0bits+0xa>

08009340 <__lo0bits>:
 8009340:	6803      	ldr	r3, [r0, #0]
 8009342:	f013 0207 	ands.w	r2, r3, #7
 8009346:	4601      	mov	r1, r0
 8009348:	d00b      	beq.n	8009362 <__lo0bits+0x22>
 800934a:	07da      	lsls	r2, r3, #31
 800934c:	d423      	bmi.n	8009396 <__lo0bits+0x56>
 800934e:	0798      	lsls	r0, r3, #30
 8009350:	bf49      	itett	mi
 8009352:	085b      	lsrmi	r3, r3, #1
 8009354:	089b      	lsrpl	r3, r3, #2
 8009356:	2001      	movmi	r0, #1
 8009358:	600b      	strmi	r3, [r1, #0]
 800935a:	bf5c      	itt	pl
 800935c:	600b      	strpl	r3, [r1, #0]
 800935e:	2002      	movpl	r0, #2
 8009360:	4770      	bx	lr
 8009362:	b298      	uxth	r0, r3
 8009364:	b9a8      	cbnz	r0, 8009392 <__lo0bits+0x52>
 8009366:	0c1b      	lsrs	r3, r3, #16
 8009368:	2010      	movs	r0, #16
 800936a:	b2da      	uxtb	r2, r3
 800936c:	b90a      	cbnz	r2, 8009372 <__lo0bits+0x32>
 800936e:	3008      	adds	r0, #8
 8009370:	0a1b      	lsrs	r3, r3, #8
 8009372:	071a      	lsls	r2, r3, #28
 8009374:	bf04      	itt	eq
 8009376:	091b      	lsreq	r3, r3, #4
 8009378:	3004      	addeq	r0, #4
 800937a:	079a      	lsls	r2, r3, #30
 800937c:	bf04      	itt	eq
 800937e:	089b      	lsreq	r3, r3, #2
 8009380:	3002      	addeq	r0, #2
 8009382:	07da      	lsls	r2, r3, #31
 8009384:	d403      	bmi.n	800938e <__lo0bits+0x4e>
 8009386:	085b      	lsrs	r3, r3, #1
 8009388:	f100 0001 	add.w	r0, r0, #1
 800938c:	d005      	beq.n	800939a <__lo0bits+0x5a>
 800938e:	600b      	str	r3, [r1, #0]
 8009390:	4770      	bx	lr
 8009392:	4610      	mov	r0, r2
 8009394:	e7e9      	b.n	800936a <__lo0bits+0x2a>
 8009396:	2000      	movs	r0, #0
 8009398:	4770      	bx	lr
 800939a:	2020      	movs	r0, #32
 800939c:	4770      	bx	lr
	...

080093a0 <__i2b>:
 80093a0:	b510      	push	{r4, lr}
 80093a2:	460c      	mov	r4, r1
 80093a4:	2101      	movs	r1, #1
 80093a6:	f7ff ff03 	bl	80091b0 <_Balloc>
 80093aa:	4602      	mov	r2, r0
 80093ac:	b928      	cbnz	r0, 80093ba <__i2b+0x1a>
 80093ae:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <__i2b+0x24>)
 80093b0:	4805      	ldr	r0, [pc, #20]	; (80093c8 <__i2b+0x28>)
 80093b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093b6:	f000 fce1 	bl	8009d7c <__assert_func>
 80093ba:	2301      	movs	r3, #1
 80093bc:	6144      	str	r4, [r0, #20]
 80093be:	6103      	str	r3, [r0, #16]
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	bf00      	nop
 80093c4:	0800aba4 	.word	0x0800aba4
 80093c8:	0800abb5 	.word	0x0800abb5

080093cc <__multiply>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	4691      	mov	r9, r2
 80093d2:	690a      	ldr	r2, [r1, #16]
 80093d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093d8:	429a      	cmp	r2, r3
 80093da:	bfb8      	it	lt
 80093dc:	460b      	movlt	r3, r1
 80093de:	460c      	mov	r4, r1
 80093e0:	bfbc      	itt	lt
 80093e2:	464c      	movlt	r4, r9
 80093e4:	4699      	movlt	r9, r3
 80093e6:	6927      	ldr	r7, [r4, #16]
 80093e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093ec:	68a3      	ldr	r3, [r4, #8]
 80093ee:	6861      	ldr	r1, [r4, #4]
 80093f0:	eb07 060a 	add.w	r6, r7, sl
 80093f4:	42b3      	cmp	r3, r6
 80093f6:	b085      	sub	sp, #20
 80093f8:	bfb8      	it	lt
 80093fa:	3101      	addlt	r1, #1
 80093fc:	f7ff fed8 	bl	80091b0 <_Balloc>
 8009400:	b930      	cbnz	r0, 8009410 <__multiply+0x44>
 8009402:	4602      	mov	r2, r0
 8009404:	4b44      	ldr	r3, [pc, #272]	; (8009518 <__multiply+0x14c>)
 8009406:	4845      	ldr	r0, [pc, #276]	; (800951c <__multiply+0x150>)
 8009408:	f240 115d 	movw	r1, #349	; 0x15d
 800940c:	f000 fcb6 	bl	8009d7c <__assert_func>
 8009410:	f100 0514 	add.w	r5, r0, #20
 8009414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009418:	462b      	mov	r3, r5
 800941a:	2200      	movs	r2, #0
 800941c:	4543      	cmp	r3, r8
 800941e:	d321      	bcc.n	8009464 <__multiply+0x98>
 8009420:	f104 0314 	add.w	r3, r4, #20
 8009424:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009428:	f109 0314 	add.w	r3, r9, #20
 800942c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009430:	9202      	str	r2, [sp, #8]
 8009432:	1b3a      	subs	r2, r7, r4
 8009434:	3a15      	subs	r2, #21
 8009436:	f022 0203 	bic.w	r2, r2, #3
 800943a:	3204      	adds	r2, #4
 800943c:	f104 0115 	add.w	r1, r4, #21
 8009440:	428f      	cmp	r7, r1
 8009442:	bf38      	it	cc
 8009444:	2204      	movcc	r2, #4
 8009446:	9201      	str	r2, [sp, #4]
 8009448:	9a02      	ldr	r2, [sp, #8]
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	429a      	cmp	r2, r3
 800944e:	d80c      	bhi.n	800946a <__multiply+0x9e>
 8009450:	2e00      	cmp	r6, #0
 8009452:	dd03      	ble.n	800945c <__multiply+0x90>
 8009454:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009458:	2b00      	cmp	r3, #0
 800945a:	d05a      	beq.n	8009512 <__multiply+0x146>
 800945c:	6106      	str	r6, [r0, #16]
 800945e:	b005      	add	sp, #20
 8009460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009464:	f843 2b04 	str.w	r2, [r3], #4
 8009468:	e7d8      	b.n	800941c <__multiply+0x50>
 800946a:	f8b3 a000 	ldrh.w	sl, [r3]
 800946e:	f1ba 0f00 	cmp.w	sl, #0
 8009472:	d024      	beq.n	80094be <__multiply+0xf2>
 8009474:	f104 0e14 	add.w	lr, r4, #20
 8009478:	46a9      	mov	r9, r5
 800947a:	f04f 0c00 	mov.w	ip, #0
 800947e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009482:	f8d9 1000 	ldr.w	r1, [r9]
 8009486:	fa1f fb82 	uxth.w	fp, r2
 800948a:	b289      	uxth	r1, r1
 800948c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009490:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009494:	f8d9 2000 	ldr.w	r2, [r9]
 8009498:	4461      	add	r1, ip
 800949a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800949e:	fb0a c20b 	mla	r2, sl, fp, ip
 80094a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094a6:	b289      	uxth	r1, r1
 80094a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094ac:	4577      	cmp	r7, lr
 80094ae:	f849 1b04 	str.w	r1, [r9], #4
 80094b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094b6:	d8e2      	bhi.n	800947e <__multiply+0xb2>
 80094b8:	9a01      	ldr	r2, [sp, #4]
 80094ba:	f845 c002 	str.w	ip, [r5, r2]
 80094be:	9a03      	ldr	r2, [sp, #12]
 80094c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094c4:	3304      	adds	r3, #4
 80094c6:	f1b9 0f00 	cmp.w	r9, #0
 80094ca:	d020      	beq.n	800950e <__multiply+0x142>
 80094cc:	6829      	ldr	r1, [r5, #0]
 80094ce:	f104 0c14 	add.w	ip, r4, #20
 80094d2:	46ae      	mov	lr, r5
 80094d4:	f04f 0a00 	mov.w	sl, #0
 80094d8:	f8bc b000 	ldrh.w	fp, [ip]
 80094dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80094e0:	fb09 220b 	mla	r2, r9, fp, r2
 80094e4:	4492      	add	sl, r2
 80094e6:	b289      	uxth	r1, r1
 80094e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80094ec:	f84e 1b04 	str.w	r1, [lr], #4
 80094f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80094f4:	f8be 1000 	ldrh.w	r1, [lr]
 80094f8:	0c12      	lsrs	r2, r2, #16
 80094fa:	fb09 1102 	mla	r1, r9, r2, r1
 80094fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009502:	4567      	cmp	r7, ip
 8009504:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009508:	d8e6      	bhi.n	80094d8 <__multiply+0x10c>
 800950a:	9a01      	ldr	r2, [sp, #4]
 800950c:	50a9      	str	r1, [r5, r2]
 800950e:	3504      	adds	r5, #4
 8009510:	e79a      	b.n	8009448 <__multiply+0x7c>
 8009512:	3e01      	subs	r6, #1
 8009514:	e79c      	b.n	8009450 <__multiply+0x84>
 8009516:	bf00      	nop
 8009518:	0800aba4 	.word	0x0800aba4
 800951c:	0800abb5 	.word	0x0800abb5

08009520 <__pow5mult>:
 8009520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009524:	4615      	mov	r5, r2
 8009526:	f012 0203 	ands.w	r2, r2, #3
 800952a:	4606      	mov	r6, r0
 800952c:	460f      	mov	r7, r1
 800952e:	d007      	beq.n	8009540 <__pow5mult+0x20>
 8009530:	4c25      	ldr	r4, [pc, #148]	; (80095c8 <__pow5mult+0xa8>)
 8009532:	3a01      	subs	r2, #1
 8009534:	2300      	movs	r3, #0
 8009536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800953a:	f7ff fe9b 	bl	8009274 <__multadd>
 800953e:	4607      	mov	r7, r0
 8009540:	10ad      	asrs	r5, r5, #2
 8009542:	d03d      	beq.n	80095c0 <__pow5mult+0xa0>
 8009544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009546:	b97c      	cbnz	r4, 8009568 <__pow5mult+0x48>
 8009548:	2010      	movs	r0, #16
 800954a:	f7ff fe1b 	bl	8009184 <malloc>
 800954e:	4602      	mov	r2, r0
 8009550:	6270      	str	r0, [r6, #36]	; 0x24
 8009552:	b928      	cbnz	r0, 8009560 <__pow5mult+0x40>
 8009554:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <__pow5mult+0xac>)
 8009556:	481e      	ldr	r0, [pc, #120]	; (80095d0 <__pow5mult+0xb0>)
 8009558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800955c:	f000 fc0e 	bl	8009d7c <__assert_func>
 8009560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009564:	6004      	str	r4, [r0, #0]
 8009566:	60c4      	str	r4, [r0, #12]
 8009568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800956c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009570:	b94c      	cbnz	r4, 8009586 <__pow5mult+0x66>
 8009572:	f240 2171 	movw	r1, #625	; 0x271
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff ff12 	bl	80093a0 <__i2b>
 800957c:	2300      	movs	r3, #0
 800957e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009582:	4604      	mov	r4, r0
 8009584:	6003      	str	r3, [r0, #0]
 8009586:	f04f 0900 	mov.w	r9, #0
 800958a:	07eb      	lsls	r3, r5, #31
 800958c:	d50a      	bpl.n	80095a4 <__pow5mult+0x84>
 800958e:	4639      	mov	r1, r7
 8009590:	4622      	mov	r2, r4
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff ff1a 	bl	80093cc <__multiply>
 8009598:	4639      	mov	r1, r7
 800959a:	4680      	mov	r8, r0
 800959c:	4630      	mov	r0, r6
 800959e:	f7ff fe47 	bl	8009230 <_Bfree>
 80095a2:	4647      	mov	r7, r8
 80095a4:	106d      	asrs	r5, r5, #1
 80095a6:	d00b      	beq.n	80095c0 <__pow5mult+0xa0>
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	b938      	cbnz	r0, 80095bc <__pow5mult+0x9c>
 80095ac:	4622      	mov	r2, r4
 80095ae:	4621      	mov	r1, r4
 80095b0:	4630      	mov	r0, r6
 80095b2:	f7ff ff0b 	bl	80093cc <__multiply>
 80095b6:	6020      	str	r0, [r4, #0]
 80095b8:	f8c0 9000 	str.w	r9, [r0]
 80095bc:	4604      	mov	r4, r0
 80095be:	e7e4      	b.n	800958a <__pow5mult+0x6a>
 80095c0:	4638      	mov	r0, r7
 80095c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c6:	bf00      	nop
 80095c8:	0800ad08 	.word	0x0800ad08
 80095cc:	0800ab32 	.word	0x0800ab32
 80095d0:	0800abb5 	.word	0x0800abb5

080095d4 <__lshift>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	460c      	mov	r4, r1
 80095da:	6849      	ldr	r1, [r1, #4]
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	4607      	mov	r7, r0
 80095e6:	4691      	mov	r9, r2
 80095e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095ec:	f108 0601 	add.w	r6, r8, #1
 80095f0:	42b3      	cmp	r3, r6
 80095f2:	db0b      	blt.n	800960c <__lshift+0x38>
 80095f4:	4638      	mov	r0, r7
 80095f6:	f7ff fddb 	bl	80091b0 <_Balloc>
 80095fa:	4605      	mov	r5, r0
 80095fc:	b948      	cbnz	r0, 8009612 <__lshift+0x3e>
 80095fe:	4602      	mov	r2, r0
 8009600:	4b2a      	ldr	r3, [pc, #168]	; (80096ac <__lshift+0xd8>)
 8009602:	482b      	ldr	r0, [pc, #172]	; (80096b0 <__lshift+0xdc>)
 8009604:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009608:	f000 fbb8 	bl	8009d7c <__assert_func>
 800960c:	3101      	adds	r1, #1
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	e7ee      	b.n	80095f0 <__lshift+0x1c>
 8009612:	2300      	movs	r3, #0
 8009614:	f100 0114 	add.w	r1, r0, #20
 8009618:	f100 0210 	add.w	r2, r0, #16
 800961c:	4618      	mov	r0, r3
 800961e:	4553      	cmp	r3, sl
 8009620:	db37      	blt.n	8009692 <__lshift+0xbe>
 8009622:	6920      	ldr	r0, [r4, #16]
 8009624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009628:	f104 0314 	add.w	r3, r4, #20
 800962c:	f019 091f 	ands.w	r9, r9, #31
 8009630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009634:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009638:	d02f      	beq.n	800969a <__lshift+0xc6>
 800963a:	f1c9 0e20 	rsb	lr, r9, #32
 800963e:	468a      	mov	sl, r1
 8009640:	f04f 0c00 	mov.w	ip, #0
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	fa02 f209 	lsl.w	r2, r2, r9
 800964a:	ea42 020c 	orr.w	r2, r2, ip
 800964e:	f84a 2b04 	str.w	r2, [sl], #4
 8009652:	f853 2b04 	ldr.w	r2, [r3], #4
 8009656:	4298      	cmp	r0, r3
 8009658:	fa22 fc0e 	lsr.w	ip, r2, lr
 800965c:	d8f2      	bhi.n	8009644 <__lshift+0x70>
 800965e:	1b03      	subs	r3, r0, r4
 8009660:	3b15      	subs	r3, #21
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	3304      	adds	r3, #4
 8009668:	f104 0215 	add.w	r2, r4, #21
 800966c:	4290      	cmp	r0, r2
 800966e:	bf38      	it	cc
 8009670:	2304      	movcc	r3, #4
 8009672:	f841 c003 	str.w	ip, [r1, r3]
 8009676:	f1bc 0f00 	cmp.w	ip, #0
 800967a:	d001      	beq.n	8009680 <__lshift+0xac>
 800967c:	f108 0602 	add.w	r6, r8, #2
 8009680:	3e01      	subs	r6, #1
 8009682:	4638      	mov	r0, r7
 8009684:	612e      	str	r6, [r5, #16]
 8009686:	4621      	mov	r1, r4
 8009688:	f7ff fdd2 	bl	8009230 <_Bfree>
 800968c:	4628      	mov	r0, r5
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	f842 0f04 	str.w	r0, [r2, #4]!
 8009696:	3301      	adds	r3, #1
 8009698:	e7c1      	b.n	800961e <__lshift+0x4a>
 800969a:	3904      	subs	r1, #4
 800969c:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096a4:	4298      	cmp	r0, r3
 80096a6:	d8f9      	bhi.n	800969c <__lshift+0xc8>
 80096a8:	e7ea      	b.n	8009680 <__lshift+0xac>
 80096aa:	bf00      	nop
 80096ac:	0800aba4 	.word	0x0800aba4
 80096b0:	0800abb5 	.word	0x0800abb5

080096b4 <__mcmp>:
 80096b4:	b530      	push	{r4, r5, lr}
 80096b6:	6902      	ldr	r2, [r0, #16]
 80096b8:	690c      	ldr	r4, [r1, #16]
 80096ba:	1b12      	subs	r2, r2, r4
 80096bc:	d10e      	bne.n	80096dc <__mcmp+0x28>
 80096be:	f100 0314 	add.w	r3, r0, #20
 80096c2:	3114      	adds	r1, #20
 80096c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096d4:	42a5      	cmp	r5, r4
 80096d6:	d003      	beq.n	80096e0 <__mcmp+0x2c>
 80096d8:	d305      	bcc.n	80096e6 <__mcmp+0x32>
 80096da:	2201      	movs	r2, #1
 80096dc:	4610      	mov	r0, r2
 80096de:	bd30      	pop	{r4, r5, pc}
 80096e0:	4283      	cmp	r3, r0
 80096e2:	d3f3      	bcc.n	80096cc <__mcmp+0x18>
 80096e4:	e7fa      	b.n	80096dc <__mcmp+0x28>
 80096e6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ea:	e7f7      	b.n	80096dc <__mcmp+0x28>

080096ec <__mdiff>:
 80096ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	4606      	mov	r6, r0
 80096f4:	4611      	mov	r1, r2
 80096f6:	4620      	mov	r0, r4
 80096f8:	4690      	mov	r8, r2
 80096fa:	f7ff ffdb 	bl	80096b4 <__mcmp>
 80096fe:	1e05      	subs	r5, r0, #0
 8009700:	d110      	bne.n	8009724 <__mdiff+0x38>
 8009702:	4629      	mov	r1, r5
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff fd53 	bl	80091b0 <_Balloc>
 800970a:	b930      	cbnz	r0, 800971a <__mdiff+0x2e>
 800970c:	4b3a      	ldr	r3, [pc, #232]	; (80097f8 <__mdiff+0x10c>)
 800970e:	4602      	mov	r2, r0
 8009710:	f240 2132 	movw	r1, #562	; 0x232
 8009714:	4839      	ldr	r0, [pc, #228]	; (80097fc <__mdiff+0x110>)
 8009716:	f000 fb31 	bl	8009d7c <__assert_func>
 800971a:	2301      	movs	r3, #1
 800971c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009724:	bfa4      	itt	ge
 8009726:	4643      	movge	r3, r8
 8009728:	46a0      	movge	r8, r4
 800972a:	4630      	mov	r0, r6
 800972c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009730:	bfa6      	itte	ge
 8009732:	461c      	movge	r4, r3
 8009734:	2500      	movge	r5, #0
 8009736:	2501      	movlt	r5, #1
 8009738:	f7ff fd3a 	bl	80091b0 <_Balloc>
 800973c:	b920      	cbnz	r0, 8009748 <__mdiff+0x5c>
 800973e:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <__mdiff+0x10c>)
 8009740:	4602      	mov	r2, r0
 8009742:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009746:	e7e5      	b.n	8009714 <__mdiff+0x28>
 8009748:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800974c:	6926      	ldr	r6, [r4, #16]
 800974e:	60c5      	str	r5, [r0, #12]
 8009750:	f104 0914 	add.w	r9, r4, #20
 8009754:	f108 0514 	add.w	r5, r8, #20
 8009758:	f100 0e14 	add.w	lr, r0, #20
 800975c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009760:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009764:	f108 0210 	add.w	r2, r8, #16
 8009768:	46f2      	mov	sl, lr
 800976a:	2100      	movs	r1, #0
 800976c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009770:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009774:	fa1f f883 	uxth.w	r8, r3
 8009778:	fa11 f18b 	uxtah	r1, r1, fp
 800977c:	0c1b      	lsrs	r3, r3, #16
 800977e:	eba1 0808 	sub.w	r8, r1, r8
 8009782:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009786:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800978a:	fa1f f888 	uxth.w	r8, r8
 800978e:	1419      	asrs	r1, r3, #16
 8009790:	454e      	cmp	r6, r9
 8009792:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009796:	f84a 3b04 	str.w	r3, [sl], #4
 800979a:	d8e7      	bhi.n	800976c <__mdiff+0x80>
 800979c:	1b33      	subs	r3, r6, r4
 800979e:	3b15      	subs	r3, #21
 80097a0:	f023 0303 	bic.w	r3, r3, #3
 80097a4:	3304      	adds	r3, #4
 80097a6:	3415      	adds	r4, #21
 80097a8:	42a6      	cmp	r6, r4
 80097aa:	bf38      	it	cc
 80097ac:	2304      	movcc	r3, #4
 80097ae:	441d      	add	r5, r3
 80097b0:	4473      	add	r3, lr
 80097b2:	469e      	mov	lr, r3
 80097b4:	462e      	mov	r6, r5
 80097b6:	4566      	cmp	r6, ip
 80097b8:	d30e      	bcc.n	80097d8 <__mdiff+0xec>
 80097ba:	f10c 0203 	add.w	r2, ip, #3
 80097be:	1b52      	subs	r2, r2, r5
 80097c0:	f022 0203 	bic.w	r2, r2, #3
 80097c4:	3d03      	subs	r5, #3
 80097c6:	45ac      	cmp	ip, r5
 80097c8:	bf38      	it	cc
 80097ca:	2200      	movcc	r2, #0
 80097cc:	441a      	add	r2, r3
 80097ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097d2:	b17b      	cbz	r3, 80097f4 <__mdiff+0x108>
 80097d4:	6107      	str	r7, [r0, #16]
 80097d6:	e7a3      	b.n	8009720 <__mdiff+0x34>
 80097d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80097dc:	fa11 f288 	uxtah	r2, r1, r8
 80097e0:	1414      	asrs	r4, r2, #16
 80097e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80097e6:	b292      	uxth	r2, r2
 80097e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097ec:	f84e 2b04 	str.w	r2, [lr], #4
 80097f0:	1421      	asrs	r1, r4, #16
 80097f2:	e7e0      	b.n	80097b6 <__mdiff+0xca>
 80097f4:	3f01      	subs	r7, #1
 80097f6:	e7ea      	b.n	80097ce <__mdiff+0xe2>
 80097f8:	0800aba4 	.word	0x0800aba4
 80097fc:	0800abb5 	.word	0x0800abb5

08009800 <__d2b>:
 8009800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009804:	4689      	mov	r9, r1
 8009806:	2101      	movs	r1, #1
 8009808:	ec57 6b10 	vmov	r6, r7, d0
 800980c:	4690      	mov	r8, r2
 800980e:	f7ff fccf 	bl	80091b0 <_Balloc>
 8009812:	4604      	mov	r4, r0
 8009814:	b930      	cbnz	r0, 8009824 <__d2b+0x24>
 8009816:	4602      	mov	r2, r0
 8009818:	4b25      	ldr	r3, [pc, #148]	; (80098b0 <__d2b+0xb0>)
 800981a:	4826      	ldr	r0, [pc, #152]	; (80098b4 <__d2b+0xb4>)
 800981c:	f240 310a 	movw	r1, #778	; 0x30a
 8009820:	f000 faac 	bl	8009d7c <__assert_func>
 8009824:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009828:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800982c:	bb35      	cbnz	r5, 800987c <__d2b+0x7c>
 800982e:	2e00      	cmp	r6, #0
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	d028      	beq.n	8009886 <__d2b+0x86>
 8009834:	4668      	mov	r0, sp
 8009836:	9600      	str	r6, [sp, #0]
 8009838:	f7ff fd82 	bl	8009340 <__lo0bits>
 800983c:	9900      	ldr	r1, [sp, #0]
 800983e:	b300      	cbz	r0, 8009882 <__d2b+0x82>
 8009840:	9a01      	ldr	r2, [sp, #4]
 8009842:	f1c0 0320 	rsb	r3, r0, #32
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	430b      	orrs	r3, r1
 800984c:	40c2      	lsrs	r2, r0
 800984e:	6163      	str	r3, [r4, #20]
 8009850:	9201      	str	r2, [sp, #4]
 8009852:	9b01      	ldr	r3, [sp, #4]
 8009854:	61a3      	str	r3, [r4, #24]
 8009856:	2b00      	cmp	r3, #0
 8009858:	bf14      	ite	ne
 800985a:	2202      	movne	r2, #2
 800985c:	2201      	moveq	r2, #1
 800985e:	6122      	str	r2, [r4, #16]
 8009860:	b1d5      	cbz	r5, 8009898 <__d2b+0x98>
 8009862:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009866:	4405      	add	r5, r0
 8009868:	f8c9 5000 	str.w	r5, [r9]
 800986c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009870:	f8c8 0000 	str.w	r0, [r8]
 8009874:	4620      	mov	r0, r4
 8009876:	b003      	add	sp, #12
 8009878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800987c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009880:	e7d5      	b.n	800982e <__d2b+0x2e>
 8009882:	6161      	str	r1, [r4, #20]
 8009884:	e7e5      	b.n	8009852 <__d2b+0x52>
 8009886:	a801      	add	r0, sp, #4
 8009888:	f7ff fd5a 	bl	8009340 <__lo0bits>
 800988c:	9b01      	ldr	r3, [sp, #4]
 800988e:	6163      	str	r3, [r4, #20]
 8009890:	2201      	movs	r2, #1
 8009892:	6122      	str	r2, [r4, #16]
 8009894:	3020      	adds	r0, #32
 8009896:	e7e3      	b.n	8009860 <__d2b+0x60>
 8009898:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800989c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098a0:	f8c9 0000 	str.w	r0, [r9]
 80098a4:	6918      	ldr	r0, [r3, #16]
 80098a6:	f7ff fd2b 	bl	8009300 <__hi0bits>
 80098aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098ae:	e7df      	b.n	8009870 <__d2b+0x70>
 80098b0:	0800aba4 	.word	0x0800aba4
 80098b4:	0800abb5 	.word	0x0800abb5

080098b8 <_calloc_r>:
 80098b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098ba:	fba1 2402 	umull	r2, r4, r1, r2
 80098be:	b94c      	cbnz	r4, 80098d4 <_calloc_r+0x1c>
 80098c0:	4611      	mov	r1, r2
 80098c2:	9201      	str	r2, [sp, #4]
 80098c4:	f000 f87a 	bl	80099bc <_malloc_r>
 80098c8:	9a01      	ldr	r2, [sp, #4]
 80098ca:	4605      	mov	r5, r0
 80098cc:	b930      	cbnz	r0, 80098dc <_calloc_r+0x24>
 80098ce:	4628      	mov	r0, r5
 80098d0:	b003      	add	sp, #12
 80098d2:	bd30      	pop	{r4, r5, pc}
 80098d4:	220c      	movs	r2, #12
 80098d6:	6002      	str	r2, [r0, #0]
 80098d8:	2500      	movs	r5, #0
 80098da:	e7f8      	b.n	80098ce <_calloc_r+0x16>
 80098dc:	4621      	mov	r1, r4
 80098de:	f7fe f947 	bl	8007b70 <memset>
 80098e2:	e7f4      	b.n	80098ce <_calloc_r+0x16>

080098e4 <_free_r>:
 80098e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098e6:	2900      	cmp	r1, #0
 80098e8:	d044      	beq.n	8009974 <_free_r+0x90>
 80098ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ee:	9001      	str	r0, [sp, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f1a1 0404 	sub.w	r4, r1, #4
 80098f6:	bfb8      	it	lt
 80098f8:	18e4      	addlt	r4, r4, r3
 80098fa:	f000 fa9b 	bl	8009e34 <__malloc_lock>
 80098fe:	4a1e      	ldr	r2, [pc, #120]	; (8009978 <_free_r+0x94>)
 8009900:	9801      	ldr	r0, [sp, #4]
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	b933      	cbnz	r3, 8009914 <_free_r+0x30>
 8009906:	6063      	str	r3, [r4, #4]
 8009908:	6014      	str	r4, [r2, #0]
 800990a:	b003      	add	sp, #12
 800990c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009910:	f000 ba96 	b.w	8009e40 <__malloc_unlock>
 8009914:	42a3      	cmp	r3, r4
 8009916:	d908      	bls.n	800992a <_free_r+0x46>
 8009918:	6825      	ldr	r5, [r4, #0]
 800991a:	1961      	adds	r1, r4, r5
 800991c:	428b      	cmp	r3, r1
 800991e:	bf01      	itttt	eq
 8009920:	6819      	ldreq	r1, [r3, #0]
 8009922:	685b      	ldreq	r3, [r3, #4]
 8009924:	1949      	addeq	r1, r1, r5
 8009926:	6021      	streq	r1, [r4, #0]
 8009928:	e7ed      	b.n	8009906 <_free_r+0x22>
 800992a:	461a      	mov	r2, r3
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	b10b      	cbz	r3, 8009934 <_free_r+0x50>
 8009930:	42a3      	cmp	r3, r4
 8009932:	d9fa      	bls.n	800992a <_free_r+0x46>
 8009934:	6811      	ldr	r1, [r2, #0]
 8009936:	1855      	adds	r5, r2, r1
 8009938:	42a5      	cmp	r5, r4
 800993a:	d10b      	bne.n	8009954 <_free_r+0x70>
 800993c:	6824      	ldr	r4, [r4, #0]
 800993e:	4421      	add	r1, r4
 8009940:	1854      	adds	r4, r2, r1
 8009942:	42a3      	cmp	r3, r4
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	d1e0      	bne.n	800990a <_free_r+0x26>
 8009948:	681c      	ldr	r4, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	6053      	str	r3, [r2, #4]
 800994e:	4421      	add	r1, r4
 8009950:	6011      	str	r1, [r2, #0]
 8009952:	e7da      	b.n	800990a <_free_r+0x26>
 8009954:	d902      	bls.n	800995c <_free_r+0x78>
 8009956:	230c      	movs	r3, #12
 8009958:	6003      	str	r3, [r0, #0]
 800995a:	e7d6      	b.n	800990a <_free_r+0x26>
 800995c:	6825      	ldr	r5, [r4, #0]
 800995e:	1961      	adds	r1, r4, r5
 8009960:	428b      	cmp	r3, r1
 8009962:	bf04      	itt	eq
 8009964:	6819      	ldreq	r1, [r3, #0]
 8009966:	685b      	ldreq	r3, [r3, #4]
 8009968:	6063      	str	r3, [r4, #4]
 800996a:	bf04      	itt	eq
 800996c:	1949      	addeq	r1, r1, r5
 800996e:	6021      	streq	r1, [r4, #0]
 8009970:	6054      	str	r4, [r2, #4]
 8009972:	e7ca      	b.n	800990a <_free_r+0x26>
 8009974:	b003      	add	sp, #12
 8009976:	bd30      	pop	{r4, r5, pc}
 8009978:	2000092c 	.word	0x2000092c

0800997c <sbrk_aligned>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4e0e      	ldr	r6, [pc, #56]	; (80099b8 <sbrk_aligned+0x3c>)
 8009980:	460c      	mov	r4, r1
 8009982:	6831      	ldr	r1, [r6, #0]
 8009984:	4605      	mov	r5, r0
 8009986:	b911      	cbnz	r1, 800998e <sbrk_aligned+0x12>
 8009988:	f000 f9e8 	bl	8009d5c <_sbrk_r>
 800998c:	6030      	str	r0, [r6, #0]
 800998e:	4621      	mov	r1, r4
 8009990:	4628      	mov	r0, r5
 8009992:	f000 f9e3 	bl	8009d5c <_sbrk_r>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d00a      	beq.n	80099b0 <sbrk_aligned+0x34>
 800999a:	1cc4      	adds	r4, r0, #3
 800999c:	f024 0403 	bic.w	r4, r4, #3
 80099a0:	42a0      	cmp	r0, r4
 80099a2:	d007      	beq.n	80099b4 <sbrk_aligned+0x38>
 80099a4:	1a21      	subs	r1, r4, r0
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f9d8 	bl	8009d5c <_sbrk_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	d101      	bne.n	80099b4 <sbrk_aligned+0x38>
 80099b0:	f04f 34ff 	mov.w	r4, #4294967295
 80099b4:	4620      	mov	r0, r4
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	20000930 	.word	0x20000930

080099bc <_malloc_r>:
 80099bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c0:	1ccd      	adds	r5, r1, #3
 80099c2:	f025 0503 	bic.w	r5, r5, #3
 80099c6:	3508      	adds	r5, #8
 80099c8:	2d0c      	cmp	r5, #12
 80099ca:	bf38      	it	cc
 80099cc:	250c      	movcc	r5, #12
 80099ce:	2d00      	cmp	r5, #0
 80099d0:	4607      	mov	r7, r0
 80099d2:	db01      	blt.n	80099d8 <_malloc_r+0x1c>
 80099d4:	42a9      	cmp	r1, r5
 80099d6:	d905      	bls.n	80099e4 <_malloc_r+0x28>
 80099d8:	230c      	movs	r3, #12
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	2600      	movs	r6, #0
 80099de:	4630      	mov	r0, r6
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	4e2e      	ldr	r6, [pc, #184]	; (8009aa0 <_malloc_r+0xe4>)
 80099e6:	f000 fa25 	bl	8009e34 <__malloc_lock>
 80099ea:	6833      	ldr	r3, [r6, #0]
 80099ec:	461c      	mov	r4, r3
 80099ee:	bb34      	cbnz	r4, 8009a3e <_malloc_r+0x82>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4638      	mov	r0, r7
 80099f4:	f7ff ffc2 	bl	800997c <sbrk_aligned>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	4604      	mov	r4, r0
 80099fc:	d14d      	bne.n	8009a9a <_malloc_r+0xde>
 80099fe:	6834      	ldr	r4, [r6, #0]
 8009a00:	4626      	mov	r6, r4
 8009a02:	2e00      	cmp	r6, #0
 8009a04:	d140      	bne.n	8009a88 <_malloc_r+0xcc>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	eb04 0803 	add.w	r8, r4, r3
 8009a10:	f000 f9a4 	bl	8009d5c <_sbrk_r>
 8009a14:	4580      	cmp	r8, r0
 8009a16:	d13a      	bne.n	8009a8e <_malloc_r+0xd2>
 8009a18:	6821      	ldr	r1, [r4, #0]
 8009a1a:	3503      	adds	r5, #3
 8009a1c:	1a6d      	subs	r5, r5, r1
 8009a1e:	f025 0503 	bic.w	r5, r5, #3
 8009a22:	3508      	adds	r5, #8
 8009a24:	2d0c      	cmp	r5, #12
 8009a26:	bf38      	it	cc
 8009a28:	250c      	movcc	r5, #12
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7ff ffa5 	bl	800997c <sbrk_aligned>
 8009a32:	3001      	adds	r0, #1
 8009a34:	d02b      	beq.n	8009a8e <_malloc_r+0xd2>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	442b      	add	r3, r5
 8009a3a:	6023      	str	r3, [r4, #0]
 8009a3c:	e00e      	b.n	8009a5c <_malloc_r+0xa0>
 8009a3e:	6822      	ldr	r2, [r4, #0]
 8009a40:	1b52      	subs	r2, r2, r5
 8009a42:	d41e      	bmi.n	8009a82 <_malloc_r+0xc6>
 8009a44:	2a0b      	cmp	r2, #11
 8009a46:	d916      	bls.n	8009a76 <_malloc_r+0xba>
 8009a48:	1961      	adds	r1, r4, r5
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	6025      	str	r5, [r4, #0]
 8009a4e:	bf18      	it	ne
 8009a50:	6059      	strne	r1, [r3, #4]
 8009a52:	6863      	ldr	r3, [r4, #4]
 8009a54:	bf08      	it	eq
 8009a56:	6031      	streq	r1, [r6, #0]
 8009a58:	5162      	str	r2, [r4, r5]
 8009a5a:	604b      	str	r3, [r1, #4]
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f104 060b 	add.w	r6, r4, #11
 8009a62:	f000 f9ed 	bl	8009e40 <__malloc_unlock>
 8009a66:	f026 0607 	bic.w	r6, r6, #7
 8009a6a:	1d23      	adds	r3, r4, #4
 8009a6c:	1af2      	subs	r2, r6, r3
 8009a6e:	d0b6      	beq.n	80099de <_malloc_r+0x22>
 8009a70:	1b9b      	subs	r3, r3, r6
 8009a72:	50a3      	str	r3, [r4, r2]
 8009a74:	e7b3      	b.n	80099de <_malloc_r+0x22>
 8009a76:	6862      	ldr	r2, [r4, #4]
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	bf0c      	ite	eq
 8009a7c:	6032      	streq	r2, [r6, #0]
 8009a7e:	605a      	strne	r2, [r3, #4]
 8009a80:	e7ec      	b.n	8009a5c <_malloc_r+0xa0>
 8009a82:	4623      	mov	r3, r4
 8009a84:	6864      	ldr	r4, [r4, #4]
 8009a86:	e7b2      	b.n	80099ee <_malloc_r+0x32>
 8009a88:	4634      	mov	r4, r6
 8009a8a:	6876      	ldr	r6, [r6, #4]
 8009a8c:	e7b9      	b.n	8009a02 <_malloc_r+0x46>
 8009a8e:	230c      	movs	r3, #12
 8009a90:	603b      	str	r3, [r7, #0]
 8009a92:	4638      	mov	r0, r7
 8009a94:	f000 f9d4 	bl	8009e40 <__malloc_unlock>
 8009a98:	e7a1      	b.n	80099de <_malloc_r+0x22>
 8009a9a:	6025      	str	r5, [r4, #0]
 8009a9c:	e7de      	b.n	8009a5c <_malloc_r+0xa0>
 8009a9e:	bf00      	nop
 8009aa0:	2000092c 	.word	0x2000092c

08009aa4 <__ssputs_r>:
 8009aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa8:	688e      	ldr	r6, [r1, #8]
 8009aaa:	429e      	cmp	r6, r3
 8009aac:	4682      	mov	sl, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	4690      	mov	r8, r2
 8009ab2:	461f      	mov	r7, r3
 8009ab4:	d838      	bhi.n	8009b28 <__ssputs_r+0x84>
 8009ab6:	898a      	ldrh	r2, [r1, #12]
 8009ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009abc:	d032      	beq.n	8009b24 <__ssputs_r+0x80>
 8009abe:	6825      	ldr	r5, [r4, #0]
 8009ac0:	6909      	ldr	r1, [r1, #16]
 8009ac2:	eba5 0901 	sub.w	r9, r5, r1
 8009ac6:	6965      	ldr	r5, [r4, #20]
 8009ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	444b      	add	r3, r9
 8009ad4:	106d      	asrs	r5, r5, #1
 8009ad6:	429d      	cmp	r5, r3
 8009ad8:	bf38      	it	cc
 8009ada:	461d      	movcc	r5, r3
 8009adc:	0553      	lsls	r3, r2, #21
 8009ade:	d531      	bpl.n	8009b44 <__ssputs_r+0xa0>
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7ff ff6b 	bl	80099bc <_malloc_r>
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	b950      	cbnz	r0, 8009b00 <__ssputs_r+0x5c>
 8009aea:	230c      	movs	r3, #12
 8009aec:	f8ca 3000 	str.w	r3, [sl]
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af6:	81a3      	strh	r3, [r4, #12]
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b00:	6921      	ldr	r1, [r4, #16]
 8009b02:	464a      	mov	r2, r9
 8009b04:	f7ff fb46 	bl	8009194 <memcpy>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	6126      	str	r6, [r4, #16]
 8009b16:	6165      	str	r5, [r4, #20]
 8009b18:	444e      	add	r6, r9
 8009b1a:	eba5 0509 	sub.w	r5, r5, r9
 8009b1e:	6026      	str	r6, [r4, #0]
 8009b20:	60a5      	str	r5, [r4, #8]
 8009b22:	463e      	mov	r6, r7
 8009b24:	42be      	cmp	r6, r7
 8009b26:	d900      	bls.n	8009b2a <__ssputs_r+0x86>
 8009b28:	463e      	mov	r6, r7
 8009b2a:	6820      	ldr	r0, [r4, #0]
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4641      	mov	r1, r8
 8009b30:	f000 f966 	bl	8009e00 <memmove>
 8009b34:	68a3      	ldr	r3, [r4, #8]
 8009b36:	1b9b      	subs	r3, r3, r6
 8009b38:	60a3      	str	r3, [r4, #8]
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	4433      	add	r3, r6
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	2000      	movs	r0, #0
 8009b42:	e7db      	b.n	8009afc <__ssputs_r+0x58>
 8009b44:	462a      	mov	r2, r5
 8009b46:	f000 f981 	bl	8009e4c <_realloc_r>
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d1e1      	bne.n	8009b14 <__ssputs_r+0x70>
 8009b50:	6921      	ldr	r1, [r4, #16]
 8009b52:	4650      	mov	r0, sl
 8009b54:	f7ff fec6 	bl	80098e4 <_free_r>
 8009b58:	e7c7      	b.n	8009aea <__ssputs_r+0x46>
	...

08009b5c <_svfiprintf_r>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	4698      	mov	r8, r3
 8009b62:	898b      	ldrh	r3, [r1, #12]
 8009b64:	061b      	lsls	r3, r3, #24
 8009b66:	b09d      	sub	sp, #116	; 0x74
 8009b68:	4607      	mov	r7, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	d50e      	bpl.n	8009b8e <_svfiprintf_r+0x32>
 8009b70:	690b      	ldr	r3, [r1, #16]
 8009b72:	b963      	cbnz	r3, 8009b8e <_svfiprintf_r+0x32>
 8009b74:	2140      	movs	r1, #64	; 0x40
 8009b76:	f7ff ff21 	bl	80099bc <_malloc_r>
 8009b7a:	6028      	str	r0, [r5, #0]
 8009b7c:	6128      	str	r0, [r5, #16]
 8009b7e:	b920      	cbnz	r0, 8009b8a <_svfiprintf_r+0x2e>
 8009b80:	230c      	movs	r3, #12
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	e0d1      	b.n	8009d2e <_svfiprintf_r+0x1d2>
 8009b8a:	2340      	movs	r3, #64	; 0x40
 8009b8c:	616b      	str	r3, [r5, #20]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9309      	str	r3, [sp, #36]	; 0x24
 8009b92:	2320      	movs	r3, #32
 8009b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b9c:	2330      	movs	r3, #48	; 0x30
 8009b9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d48 <_svfiprintf_r+0x1ec>
 8009ba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba6:	f04f 0901 	mov.w	r9, #1
 8009baa:	4623      	mov	r3, r4
 8009bac:	469a      	mov	sl, r3
 8009bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb2:	b10a      	cbz	r2, 8009bb8 <_svfiprintf_r+0x5c>
 8009bb4:	2a25      	cmp	r2, #37	; 0x25
 8009bb6:	d1f9      	bne.n	8009bac <_svfiprintf_r+0x50>
 8009bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8009bbc:	d00b      	beq.n	8009bd6 <_svfiprintf_r+0x7a>
 8009bbe:	465b      	mov	r3, fp
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	f7ff ff6d 	bl	8009aa4 <__ssputs_r>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	f000 80aa 	beq.w	8009d24 <_svfiprintf_r+0x1c8>
 8009bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd2:	445a      	add	r2, fp
 8009bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8009bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 80a2 	beq.w	8009d24 <_svfiprintf_r+0x1c8>
 8009be0:	2300      	movs	r3, #0
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bea:	f10a 0a01 	add.w	sl, sl, #1
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	9307      	str	r3, [sp, #28]
 8009bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8009bf8:	4654      	mov	r4, sl
 8009bfa:	2205      	movs	r2, #5
 8009bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c00:	4851      	ldr	r0, [pc, #324]	; (8009d48 <_svfiprintf_r+0x1ec>)
 8009c02:	f7f6 fb25 	bl	8000250 <memchr>
 8009c06:	9a04      	ldr	r2, [sp, #16]
 8009c08:	b9d8      	cbnz	r0, 8009c42 <_svfiprintf_r+0xe6>
 8009c0a:	06d0      	lsls	r0, r2, #27
 8009c0c:	bf44      	itt	mi
 8009c0e:	2320      	movmi	r3, #32
 8009c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c14:	0711      	lsls	r1, r2, #28
 8009c16:	bf44      	itt	mi
 8009c18:	232b      	movmi	r3, #43	; 0x2b
 8009c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c22:	2b2a      	cmp	r3, #42	; 0x2a
 8009c24:	d015      	beq.n	8009c52 <_svfiprintf_r+0xf6>
 8009c26:	9a07      	ldr	r2, [sp, #28]
 8009c28:	4654      	mov	r4, sl
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	f04f 0c0a 	mov.w	ip, #10
 8009c30:	4621      	mov	r1, r4
 8009c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c36:	3b30      	subs	r3, #48	; 0x30
 8009c38:	2b09      	cmp	r3, #9
 8009c3a:	d94e      	bls.n	8009cda <_svfiprintf_r+0x17e>
 8009c3c:	b1b0      	cbz	r0, 8009c6c <_svfiprintf_r+0x110>
 8009c3e:	9207      	str	r2, [sp, #28]
 8009c40:	e014      	b.n	8009c6c <_svfiprintf_r+0x110>
 8009c42:	eba0 0308 	sub.w	r3, r0, r8
 8009c46:	fa09 f303 	lsl.w	r3, r9, r3
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	46a2      	mov	sl, r4
 8009c50:	e7d2      	b.n	8009bf8 <_svfiprintf_r+0x9c>
 8009c52:	9b03      	ldr	r3, [sp, #12]
 8009c54:	1d19      	adds	r1, r3, #4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	9103      	str	r1, [sp, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bfbb      	ittet	lt
 8009c5e:	425b      	neglt	r3, r3
 8009c60:	f042 0202 	orrlt.w	r2, r2, #2
 8009c64:	9307      	strge	r3, [sp, #28]
 8009c66:	9307      	strlt	r3, [sp, #28]
 8009c68:	bfb8      	it	lt
 8009c6a:	9204      	strlt	r2, [sp, #16]
 8009c6c:	7823      	ldrb	r3, [r4, #0]
 8009c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c70:	d10c      	bne.n	8009c8c <_svfiprintf_r+0x130>
 8009c72:	7863      	ldrb	r3, [r4, #1]
 8009c74:	2b2a      	cmp	r3, #42	; 0x2a
 8009c76:	d135      	bne.n	8009ce4 <_svfiprintf_r+0x188>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	1d1a      	adds	r2, r3, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	9203      	str	r2, [sp, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	bfb8      	it	lt
 8009c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c88:	3402      	adds	r4, #2
 8009c8a:	9305      	str	r3, [sp, #20]
 8009c8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d58 <_svfiprintf_r+0x1fc>
 8009c90:	7821      	ldrb	r1, [r4, #0]
 8009c92:	2203      	movs	r2, #3
 8009c94:	4650      	mov	r0, sl
 8009c96:	f7f6 fadb 	bl	8000250 <memchr>
 8009c9a:	b140      	cbz	r0, 8009cae <_svfiprintf_r+0x152>
 8009c9c:	2340      	movs	r3, #64	; 0x40
 8009c9e:	eba0 000a 	sub.w	r0, r0, sl
 8009ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ca6:	9b04      	ldr	r3, [sp, #16]
 8009ca8:	4303      	orrs	r3, r0
 8009caa:	3401      	adds	r4, #1
 8009cac:	9304      	str	r3, [sp, #16]
 8009cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb2:	4826      	ldr	r0, [pc, #152]	; (8009d4c <_svfiprintf_r+0x1f0>)
 8009cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cb8:	2206      	movs	r2, #6
 8009cba:	f7f6 fac9 	bl	8000250 <memchr>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d038      	beq.n	8009d34 <_svfiprintf_r+0x1d8>
 8009cc2:	4b23      	ldr	r3, [pc, #140]	; (8009d50 <_svfiprintf_r+0x1f4>)
 8009cc4:	bb1b      	cbnz	r3, 8009d0e <_svfiprintf_r+0x1b2>
 8009cc6:	9b03      	ldr	r3, [sp, #12]
 8009cc8:	3307      	adds	r3, #7
 8009cca:	f023 0307 	bic.w	r3, r3, #7
 8009cce:	3308      	adds	r3, #8
 8009cd0:	9303      	str	r3, [sp, #12]
 8009cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd4:	4433      	add	r3, r6
 8009cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd8:	e767      	b.n	8009baa <_svfiprintf_r+0x4e>
 8009cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cde:	460c      	mov	r4, r1
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	e7a5      	b.n	8009c30 <_svfiprintf_r+0xd4>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	3401      	adds	r4, #1
 8009ce8:	9305      	str	r3, [sp, #20]
 8009cea:	4619      	mov	r1, r3
 8009cec:	f04f 0c0a 	mov.w	ip, #10
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf6:	3a30      	subs	r2, #48	; 0x30
 8009cf8:	2a09      	cmp	r2, #9
 8009cfa:	d903      	bls.n	8009d04 <_svfiprintf_r+0x1a8>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0c5      	beq.n	8009c8c <_svfiprintf_r+0x130>
 8009d00:	9105      	str	r1, [sp, #20]
 8009d02:	e7c3      	b.n	8009c8c <_svfiprintf_r+0x130>
 8009d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d08:	4604      	mov	r4, r0
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e7f0      	b.n	8009cf0 <_svfiprintf_r+0x194>
 8009d0e:	ab03      	add	r3, sp, #12
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	462a      	mov	r2, r5
 8009d14:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <_svfiprintf_r+0x1f8>)
 8009d16:	a904      	add	r1, sp, #16
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7fd ffc1 	bl	8007ca0 <_printf_float>
 8009d1e:	1c42      	adds	r2, r0, #1
 8009d20:	4606      	mov	r6, r0
 8009d22:	d1d6      	bne.n	8009cd2 <_svfiprintf_r+0x176>
 8009d24:	89ab      	ldrh	r3, [r5, #12]
 8009d26:	065b      	lsls	r3, r3, #25
 8009d28:	f53f af2c 	bmi.w	8009b84 <_svfiprintf_r+0x28>
 8009d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d2e:	b01d      	add	sp, #116	; 0x74
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d34:	ab03      	add	r3, sp, #12
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	462a      	mov	r2, r5
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <_svfiprintf_r+0x1f8>)
 8009d3c:	a904      	add	r1, sp, #16
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f7fe fa3a 	bl	80081b8 <_printf_i>
 8009d44:	e7eb      	b.n	8009d1e <_svfiprintf_r+0x1c2>
 8009d46:	bf00      	nop
 8009d48:	0800ad14 	.word	0x0800ad14
 8009d4c:	0800ad1e 	.word	0x0800ad1e
 8009d50:	08007ca1 	.word	0x08007ca1
 8009d54:	08009aa5 	.word	0x08009aa5
 8009d58:	0800ad1a 	.word	0x0800ad1a

08009d5c <_sbrk_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	; (8009d78 <_sbrk_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f8 fad8 	bl	800231c <_sbrk>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_sbrk_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_sbrk_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20000934 	.word	0x20000934

08009d7c <__assert_func>:
 8009d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d7e:	4614      	mov	r4, r2
 8009d80:	461a      	mov	r2, r3
 8009d82:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <__assert_func+0x2c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4605      	mov	r5, r0
 8009d88:	68d8      	ldr	r0, [r3, #12]
 8009d8a:	b14c      	cbz	r4, 8009da0 <__assert_func+0x24>
 8009d8c:	4b07      	ldr	r3, [pc, #28]	; (8009dac <__assert_func+0x30>)
 8009d8e:	9100      	str	r1, [sp, #0]
 8009d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d94:	4906      	ldr	r1, [pc, #24]	; (8009db0 <__assert_func+0x34>)
 8009d96:	462b      	mov	r3, r5
 8009d98:	f000 f80e 	bl	8009db8 <fiprintf>
 8009d9c:	f000 faac 	bl	800a2f8 <abort>
 8009da0:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <__assert_func+0x38>)
 8009da2:	461c      	mov	r4, r3
 8009da4:	e7f3      	b.n	8009d8e <__assert_func+0x12>
 8009da6:	bf00      	nop
 8009da8:	20000028 	.word	0x20000028
 8009dac:	0800ad25 	.word	0x0800ad25
 8009db0:	0800ad32 	.word	0x0800ad32
 8009db4:	0800ad60 	.word	0x0800ad60

08009db8 <fiprintf>:
 8009db8:	b40e      	push	{r1, r2, r3}
 8009dba:	b503      	push	{r0, r1, lr}
 8009dbc:	4601      	mov	r1, r0
 8009dbe:	ab03      	add	r3, sp, #12
 8009dc0:	4805      	ldr	r0, [pc, #20]	; (8009dd8 <fiprintf+0x20>)
 8009dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc6:	6800      	ldr	r0, [r0, #0]
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	f000 f897 	bl	8009efc <_vfiprintf_r>
 8009dce:	b002      	add	sp, #8
 8009dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd4:	b003      	add	sp, #12
 8009dd6:	4770      	bx	lr
 8009dd8:	20000028 	.word	0x20000028

08009ddc <__ascii_mbtowc>:
 8009ddc:	b082      	sub	sp, #8
 8009dde:	b901      	cbnz	r1, 8009de2 <__ascii_mbtowc+0x6>
 8009de0:	a901      	add	r1, sp, #4
 8009de2:	b142      	cbz	r2, 8009df6 <__ascii_mbtowc+0x1a>
 8009de4:	b14b      	cbz	r3, 8009dfa <__ascii_mbtowc+0x1e>
 8009de6:	7813      	ldrb	r3, [r2, #0]
 8009de8:	600b      	str	r3, [r1, #0]
 8009dea:	7812      	ldrb	r2, [r2, #0]
 8009dec:	1e10      	subs	r0, r2, #0
 8009dee:	bf18      	it	ne
 8009df0:	2001      	movne	r0, #1
 8009df2:	b002      	add	sp, #8
 8009df4:	4770      	bx	lr
 8009df6:	4610      	mov	r0, r2
 8009df8:	e7fb      	b.n	8009df2 <__ascii_mbtowc+0x16>
 8009dfa:	f06f 0001 	mvn.w	r0, #1
 8009dfe:	e7f8      	b.n	8009df2 <__ascii_mbtowc+0x16>

08009e00 <memmove>:
 8009e00:	4288      	cmp	r0, r1
 8009e02:	b510      	push	{r4, lr}
 8009e04:	eb01 0402 	add.w	r4, r1, r2
 8009e08:	d902      	bls.n	8009e10 <memmove+0x10>
 8009e0a:	4284      	cmp	r4, r0
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	d807      	bhi.n	8009e20 <memmove+0x20>
 8009e10:	1e43      	subs	r3, r0, #1
 8009e12:	42a1      	cmp	r1, r4
 8009e14:	d008      	beq.n	8009e28 <memmove+0x28>
 8009e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e1e:	e7f8      	b.n	8009e12 <memmove+0x12>
 8009e20:	4402      	add	r2, r0
 8009e22:	4601      	mov	r1, r0
 8009e24:	428a      	cmp	r2, r1
 8009e26:	d100      	bne.n	8009e2a <memmove+0x2a>
 8009e28:	bd10      	pop	{r4, pc}
 8009e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e32:	e7f7      	b.n	8009e24 <memmove+0x24>

08009e34 <__malloc_lock>:
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__malloc_lock+0x8>)
 8009e36:	f000 bc1f 	b.w	800a678 <__retarget_lock_acquire_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	20000938 	.word	0x20000938

08009e40 <__malloc_unlock>:
 8009e40:	4801      	ldr	r0, [pc, #4]	; (8009e48 <__malloc_unlock+0x8>)
 8009e42:	f000 bc1a 	b.w	800a67a <__retarget_lock_release_recursive>
 8009e46:	bf00      	nop
 8009e48:	20000938 	.word	0x20000938

08009e4c <_realloc_r>:
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	4680      	mov	r8, r0
 8009e52:	4614      	mov	r4, r2
 8009e54:	460e      	mov	r6, r1
 8009e56:	b921      	cbnz	r1, 8009e62 <_realloc_r+0x16>
 8009e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	f7ff bdad 	b.w	80099bc <_malloc_r>
 8009e62:	b92a      	cbnz	r2, 8009e70 <_realloc_r+0x24>
 8009e64:	f7ff fd3e 	bl	80098e4 <_free_r>
 8009e68:	4625      	mov	r5, r4
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e70:	f000 fc6a 	bl	800a748 <_malloc_usable_size_r>
 8009e74:	4284      	cmp	r4, r0
 8009e76:	4607      	mov	r7, r0
 8009e78:	d802      	bhi.n	8009e80 <_realloc_r+0x34>
 8009e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e7e:	d812      	bhi.n	8009ea6 <_realloc_r+0x5a>
 8009e80:	4621      	mov	r1, r4
 8009e82:	4640      	mov	r0, r8
 8009e84:	f7ff fd9a 	bl	80099bc <_malloc_r>
 8009e88:	4605      	mov	r5, r0
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d0ed      	beq.n	8009e6a <_realloc_r+0x1e>
 8009e8e:	42bc      	cmp	r4, r7
 8009e90:	4622      	mov	r2, r4
 8009e92:	4631      	mov	r1, r6
 8009e94:	bf28      	it	cs
 8009e96:	463a      	movcs	r2, r7
 8009e98:	f7ff f97c 	bl	8009194 <memcpy>
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f7ff fd20 	bl	80098e4 <_free_r>
 8009ea4:	e7e1      	b.n	8009e6a <_realloc_r+0x1e>
 8009ea6:	4635      	mov	r5, r6
 8009ea8:	e7df      	b.n	8009e6a <_realloc_r+0x1e>

08009eaa <__sfputc_r>:
 8009eaa:	6893      	ldr	r3, [r2, #8]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	b410      	push	{r4}
 8009eb2:	6093      	str	r3, [r2, #8]
 8009eb4:	da08      	bge.n	8009ec8 <__sfputc_r+0x1e>
 8009eb6:	6994      	ldr	r4, [r2, #24]
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	db01      	blt.n	8009ec0 <__sfputc_r+0x16>
 8009ebc:	290a      	cmp	r1, #10
 8009ebe:	d103      	bne.n	8009ec8 <__sfputc_r+0x1e>
 8009ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec4:	f000 b94a 	b.w	800a15c <__swbuf_r>
 8009ec8:	6813      	ldr	r3, [r2, #0]
 8009eca:	1c58      	adds	r0, r3, #1
 8009ecc:	6010      	str	r0, [r2, #0]
 8009ece:	7019      	strb	r1, [r3, #0]
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <__sfputs_r>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	4606      	mov	r6, r0
 8009edc:	460f      	mov	r7, r1
 8009ede:	4614      	mov	r4, r2
 8009ee0:	18d5      	adds	r5, r2, r3
 8009ee2:	42ac      	cmp	r4, r5
 8009ee4:	d101      	bne.n	8009eea <__sfputs_r+0x12>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	e007      	b.n	8009efa <__sfputs_r+0x22>
 8009eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eee:	463a      	mov	r2, r7
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7ff ffda 	bl	8009eaa <__sfputc_r>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d1f3      	bne.n	8009ee2 <__sfputs_r+0xa>
 8009efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009efc <_vfiprintf_r>:
 8009efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	460d      	mov	r5, r1
 8009f02:	b09d      	sub	sp, #116	; 0x74
 8009f04:	4614      	mov	r4, r2
 8009f06:	4698      	mov	r8, r3
 8009f08:	4606      	mov	r6, r0
 8009f0a:	b118      	cbz	r0, 8009f14 <_vfiprintf_r+0x18>
 8009f0c:	6983      	ldr	r3, [r0, #24]
 8009f0e:	b90b      	cbnz	r3, 8009f14 <_vfiprintf_r+0x18>
 8009f10:	f000 fb14 	bl	800a53c <__sinit>
 8009f14:	4b89      	ldr	r3, [pc, #548]	; (800a13c <_vfiprintf_r+0x240>)
 8009f16:	429d      	cmp	r5, r3
 8009f18:	d11b      	bne.n	8009f52 <_vfiprintf_r+0x56>
 8009f1a:	6875      	ldr	r5, [r6, #4]
 8009f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f1e:	07d9      	lsls	r1, r3, #31
 8009f20:	d405      	bmi.n	8009f2e <_vfiprintf_r+0x32>
 8009f22:	89ab      	ldrh	r3, [r5, #12]
 8009f24:	059a      	lsls	r2, r3, #22
 8009f26:	d402      	bmi.n	8009f2e <_vfiprintf_r+0x32>
 8009f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f2a:	f000 fba5 	bl	800a678 <__retarget_lock_acquire_recursive>
 8009f2e:	89ab      	ldrh	r3, [r5, #12]
 8009f30:	071b      	lsls	r3, r3, #28
 8009f32:	d501      	bpl.n	8009f38 <_vfiprintf_r+0x3c>
 8009f34:	692b      	ldr	r3, [r5, #16]
 8009f36:	b9eb      	cbnz	r3, 8009f74 <_vfiprintf_r+0x78>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f000 f96e 	bl	800a21c <__swsetup_r>
 8009f40:	b1c0      	cbz	r0, 8009f74 <_vfiprintf_r+0x78>
 8009f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f44:	07dc      	lsls	r4, r3, #31
 8009f46:	d50e      	bpl.n	8009f66 <_vfiprintf_r+0x6a>
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	b01d      	add	sp, #116	; 0x74
 8009f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f52:	4b7b      	ldr	r3, [pc, #492]	; (800a140 <_vfiprintf_r+0x244>)
 8009f54:	429d      	cmp	r5, r3
 8009f56:	d101      	bne.n	8009f5c <_vfiprintf_r+0x60>
 8009f58:	68b5      	ldr	r5, [r6, #8]
 8009f5a:	e7df      	b.n	8009f1c <_vfiprintf_r+0x20>
 8009f5c:	4b79      	ldr	r3, [pc, #484]	; (800a144 <_vfiprintf_r+0x248>)
 8009f5e:	429d      	cmp	r5, r3
 8009f60:	bf08      	it	eq
 8009f62:	68f5      	ldreq	r5, [r6, #12]
 8009f64:	e7da      	b.n	8009f1c <_vfiprintf_r+0x20>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	0598      	lsls	r0, r3, #22
 8009f6a:	d4ed      	bmi.n	8009f48 <_vfiprintf_r+0x4c>
 8009f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f6e:	f000 fb84 	bl	800a67a <__retarget_lock_release_recursive>
 8009f72:	e7e9      	b.n	8009f48 <_vfiprintf_r+0x4c>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9309      	str	r3, [sp, #36]	; 0x24
 8009f78:	2320      	movs	r3, #32
 8009f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f82:	2330      	movs	r3, #48	; 0x30
 8009f84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a148 <_vfiprintf_r+0x24c>
 8009f88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f8c:	f04f 0901 	mov.w	r9, #1
 8009f90:	4623      	mov	r3, r4
 8009f92:	469a      	mov	sl, r3
 8009f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f98:	b10a      	cbz	r2, 8009f9e <_vfiprintf_r+0xa2>
 8009f9a:	2a25      	cmp	r2, #37	; 0x25
 8009f9c:	d1f9      	bne.n	8009f92 <_vfiprintf_r+0x96>
 8009f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8009fa2:	d00b      	beq.n	8009fbc <_vfiprintf_r+0xc0>
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff94 	bl	8009ed8 <__sfputs_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	f000 80aa 	beq.w	800a10a <_vfiprintf_r+0x20e>
 8009fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fb8:	445a      	add	r2, fp
 8009fba:	9209      	str	r2, [sp, #36]	; 0x24
 8009fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 80a2 	beq.w	800a10a <_vfiprintf_r+0x20e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fd0:	f10a 0a01 	add.w	sl, sl, #1
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	9307      	str	r3, [sp, #28]
 8009fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8009fde:	4654      	mov	r4, sl
 8009fe0:	2205      	movs	r2, #5
 8009fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe6:	4858      	ldr	r0, [pc, #352]	; (800a148 <_vfiprintf_r+0x24c>)
 8009fe8:	f7f6 f932 	bl	8000250 <memchr>
 8009fec:	9a04      	ldr	r2, [sp, #16]
 8009fee:	b9d8      	cbnz	r0, 800a028 <_vfiprintf_r+0x12c>
 8009ff0:	06d1      	lsls	r1, r2, #27
 8009ff2:	bf44      	itt	mi
 8009ff4:	2320      	movmi	r3, #32
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ffa:	0713      	lsls	r3, r2, #28
 8009ffc:	bf44      	itt	mi
 8009ffe:	232b      	movmi	r3, #43	; 0x2b
 800a000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a004:	f89a 3000 	ldrb.w	r3, [sl]
 800a008:	2b2a      	cmp	r3, #42	; 0x2a
 800a00a:	d015      	beq.n	800a038 <_vfiprintf_r+0x13c>
 800a00c:	9a07      	ldr	r2, [sp, #28]
 800a00e:	4654      	mov	r4, sl
 800a010:	2000      	movs	r0, #0
 800a012:	f04f 0c0a 	mov.w	ip, #10
 800a016:	4621      	mov	r1, r4
 800a018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a01c:	3b30      	subs	r3, #48	; 0x30
 800a01e:	2b09      	cmp	r3, #9
 800a020:	d94e      	bls.n	800a0c0 <_vfiprintf_r+0x1c4>
 800a022:	b1b0      	cbz	r0, 800a052 <_vfiprintf_r+0x156>
 800a024:	9207      	str	r2, [sp, #28]
 800a026:	e014      	b.n	800a052 <_vfiprintf_r+0x156>
 800a028:	eba0 0308 	sub.w	r3, r0, r8
 800a02c:	fa09 f303 	lsl.w	r3, r9, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	46a2      	mov	sl, r4
 800a036:	e7d2      	b.n	8009fde <_vfiprintf_r+0xe2>
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	1d19      	adds	r1, r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	9103      	str	r1, [sp, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	bfbb      	ittet	lt
 800a044:	425b      	neglt	r3, r3
 800a046:	f042 0202 	orrlt.w	r2, r2, #2
 800a04a:	9307      	strge	r3, [sp, #28]
 800a04c:	9307      	strlt	r3, [sp, #28]
 800a04e:	bfb8      	it	lt
 800a050:	9204      	strlt	r2, [sp, #16]
 800a052:	7823      	ldrb	r3, [r4, #0]
 800a054:	2b2e      	cmp	r3, #46	; 0x2e
 800a056:	d10c      	bne.n	800a072 <_vfiprintf_r+0x176>
 800a058:	7863      	ldrb	r3, [r4, #1]
 800a05a:	2b2a      	cmp	r3, #42	; 0x2a
 800a05c:	d135      	bne.n	800a0ca <_vfiprintf_r+0x1ce>
 800a05e:	9b03      	ldr	r3, [sp, #12]
 800a060:	1d1a      	adds	r2, r3, #4
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	9203      	str	r2, [sp, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	bfb8      	it	lt
 800a06a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a06e:	3402      	adds	r4, #2
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a158 <_vfiprintf_r+0x25c>
 800a076:	7821      	ldrb	r1, [r4, #0]
 800a078:	2203      	movs	r2, #3
 800a07a:	4650      	mov	r0, sl
 800a07c:	f7f6 f8e8 	bl	8000250 <memchr>
 800a080:	b140      	cbz	r0, 800a094 <_vfiprintf_r+0x198>
 800a082:	2340      	movs	r3, #64	; 0x40
 800a084:	eba0 000a 	sub.w	r0, r0, sl
 800a088:	fa03 f000 	lsl.w	r0, r3, r0
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	4303      	orrs	r3, r0
 800a090:	3401      	adds	r4, #1
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a098:	482c      	ldr	r0, [pc, #176]	; (800a14c <_vfiprintf_r+0x250>)
 800a09a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a09e:	2206      	movs	r2, #6
 800a0a0:	f7f6 f8d6 	bl	8000250 <memchr>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d03f      	beq.n	800a128 <_vfiprintf_r+0x22c>
 800a0a8:	4b29      	ldr	r3, [pc, #164]	; (800a150 <_vfiprintf_r+0x254>)
 800a0aa:	bb1b      	cbnz	r3, 800a0f4 <_vfiprintf_r+0x1f8>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	3307      	adds	r3, #7
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	9303      	str	r3, [sp, #12]
 800a0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ba:	443b      	add	r3, r7
 800a0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0be:	e767      	b.n	8009f90 <_vfiprintf_r+0x94>
 800a0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	e7a5      	b.n	800a016 <_vfiprintf_r+0x11a>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	3401      	adds	r4, #1
 800a0ce:	9305      	str	r3, [sp, #20]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	f04f 0c0a 	mov.w	ip, #10
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0dc:	3a30      	subs	r2, #48	; 0x30
 800a0de:	2a09      	cmp	r2, #9
 800a0e0:	d903      	bls.n	800a0ea <_vfiprintf_r+0x1ee>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0c5      	beq.n	800a072 <_vfiprintf_r+0x176>
 800a0e6:	9105      	str	r1, [sp, #20]
 800a0e8:	e7c3      	b.n	800a072 <_vfiprintf_r+0x176>
 800a0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e7f0      	b.n	800a0d6 <_vfiprintf_r+0x1da>
 800a0f4:	ab03      	add	r3, sp, #12
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4b16      	ldr	r3, [pc, #88]	; (800a154 <_vfiprintf_r+0x258>)
 800a0fc:	a904      	add	r1, sp, #16
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7fd fdce 	bl	8007ca0 <_printf_float>
 800a104:	4607      	mov	r7, r0
 800a106:	1c78      	adds	r0, r7, #1
 800a108:	d1d6      	bne.n	800a0b8 <_vfiprintf_r+0x1bc>
 800a10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a10c:	07d9      	lsls	r1, r3, #31
 800a10e:	d405      	bmi.n	800a11c <_vfiprintf_r+0x220>
 800a110:	89ab      	ldrh	r3, [r5, #12]
 800a112:	059a      	lsls	r2, r3, #22
 800a114:	d402      	bmi.n	800a11c <_vfiprintf_r+0x220>
 800a116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a118:	f000 faaf 	bl	800a67a <__retarget_lock_release_recursive>
 800a11c:	89ab      	ldrh	r3, [r5, #12]
 800a11e:	065b      	lsls	r3, r3, #25
 800a120:	f53f af12 	bmi.w	8009f48 <_vfiprintf_r+0x4c>
 800a124:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a126:	e711      	b.n	8009f4c <_vfiprintf_r+0x50>
 800a128:	ab03      	add	r3, sp, #12
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	462a      	mov	r2, r5
 800a12e:	4b09      	ldr	r3, [pc, #36]	; (800a154 <_vfiprintf_r+0x258>)
 800a130:	a904      	add	r1, sp, #16
 800a132:	4630      	mov	r0, r6
 800a134:	f7fe f840 	bl	80081b8 <_printf_i>
 800a138:	e7e4      	b.n	800a104 <_vfiprintf_r+0x208>
 800a13a:	bf00      	nop
 800a13c:	0800ad8c 	.word	0x0800ad8c
 800a140:	0800adac 	.word	0x0800adac
 800a144:	0800ad6c 	.word	0x0800ad6c
 800a148:	0800ad14 	.word	0x0800ad14
 800a14c:	0800ad1e 	.word	0x0800ad1e
 800a150:	08007ca1 	.word	0x08007ca1
 800a154:	08009ed9 	.word	0x08009ed9
 800a158:	0800ad1a 	.word	0x0800ad1a

0800a15c <__swbuf_r>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	460e      	mov	r6, r1
 800a160:	4614      	mov	r4, r2
 800a162:	4605      	mov	r5, r0
 800a164:	b118      	cbz	r0, 800a16e <__swbuf_r+0x12>
 800a166:	6983      	ldr	r3, [r0, #24]
 800a168:	b90b      	cbnz	r3, 800a16e <__swbuf_r+0x12>
 800a16a:	f000 f9e7 	bl	800a53c <__sinit>
 800a16e:	4b21      	ldr	r3, [pc, #132]	; (800a1f4 <__swbuf_r+0x98>)
 800a170:	429c      	cmp	r4, r3
 800a172:	d12b      	bne.n	800a1cc <__swbuf_r+0x70>
 800a174:	686c      	ldr	r4, [r5, #4]
 800a176:	69a3      	ldr	r3, [r4, #24]
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	071a      	lsls	r2, r3, #28
 800a17e:	d52f      	bpl.n	800a1e0 <__swbuf_r+0x84>
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	b36b      	cbz	r3, 800a1e0 <__swbuf_r+0x84>
 800a184:	6923      	ldr	r3, [r4, #16]
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	1ac0      	subs	r0, r0, r3
 800a18a:	6963      	ldr	r3, [r4, #20]
 800a18c:	b2f6      	uxtb	r6, r6
 800a18e:	4283      	cmp	r3, r0
 800a190:	4637      	mov	r7, r6
 800a192:	dc04      	bgt.n	800a19e <__swbuf_r+0x42>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f93c 	bl	800a414 <_fflush_r>
 800a19c:	bb30      	cbnz	r0, 800a1ec <__swbuf_r+0x90>
 800a19e:	68a3      	ldr	r3, [r4, #8]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	60a3      	str	r3, [r4, #8]
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	6022      	str	r2, [r4, #0]
 800a1aa:	701e      	strb	r6, [r3, #0]
 800a1ac:	6963      	ldr	r3, [r4, #20]
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	d004      	beq.n	800a1be <__swbuf_r+0x62>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	07db      	lsls	r3, r3, #31
 800a1b8:	d506      	bpl.n	800a1c8 <__swbuf_r+0x6c>
 800a1ba:	2e0a      	cmp	r6, #10
 800a1bc:	d104      	bne.n	800a1c8 <__swbuf_r+0x6c>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	f000 f927 	bl	800a414 <_fflush_r>
 800a1c6:	b988      	cbnz	r0, 800a1ec <__swbuf_r+0x90>
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <__swbuf_r+0x9c>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <__swbuf_r+0x7a>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7cf      	b.n	800a176 <__swbuf_r+0x1a>
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <__swbuf_r+0xa0>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	bf08      	it	eq
 800a1dc:	68ec      	ldreq	r4, [r5, #12]
 800a1de:	e7ca      	b.n	800a176 <__swbuf_r+0x1a>
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	f000 f81a 	bl	800a21c <__swsetup_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d0cb      	beq.n	800a184 <__swbuf_r+0x28>
 800a1ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a1f0:	e7ea      	b.n	800a1c8 <__swbuf_r+0x6c>
 800a1f2:	bf00      	nop
 800a1f4:	0800ad8c 	.word	0x0800ad8c
 800a1f8:	0800adac 	.word	0x0800adac
 800a1fc:	0800ad6c 	.word	0x0800ad6c

0800a200 <__ascii_wctomb>:
 800a200:	b149      	cbz	r1, 800a216 <__ascii_wctomb+0x16>
 800a202:	2aff      	cmp	r2, #255	; 0xff
 800a204:	bf85      	ittet	hi
 800a206:	238a      	movhi	r3, #138	; 0x8a
 800a208:	6003      	strhi	r3, [r0, #0]
 800a20a:	700a      	strbls	r2, [r1, #0]
 800a20c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a210:	bf98      	it	ls
 800a212:	2001      	movls	r0, #1
 800a214:	4770      	bx	lr
 800a216:	4608      	mov	r0, r1
 800a218:	4770      	bx	lr
	...

0800a21c <__swsetup_r>:
 800a21c:	4b32      	ldr	r3, [pc, #200]	; (800a2e8 <__swsetup_r+0xcc>)
 800a21e:	b570      	push	{r4, r5, r6, lr}
 800a220:	681d      	ldr	r5, [r3, #0]
 800a222:	4606      	mov	r6, r0
 800a224:	460c      	mov	r4, r1
 800a226:	b125      	cbz	r5, 800a232 <__swsetup_r+0x16>
 800a228:	69ab      	ldr	r3, [r5, #24]
 800a22a:	b913      	cbnz	r3, 800a232 <__swsetup_r+0x16>
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 f985 	bl	800a53c <__sinit>
 800a232:	4b2e      	ldr	r3, [pc, #184]	; (800a2ec <__swsetup_r+0xd0>)
 800a234:	429c      	cmp	r4, r3
 800a236:	d10f      	bne.n	800a258 <__swsetup_r+0x3c>
 800a238:	686c      	ldr	r4, [r5, #4]
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a240:	0719      	lsls	r1, r3, #28
 800a242:	d42c      	bmi.n	800a29e <__swsetup_r+0x82>
 800a244:	06dd      	lsls	r5, r3, #27
 800a246:	d411      	bmi.n	800a26c <__swsetup_r+0x50>
 800a248:	2309      	movs	r3, #9
 800a24a:	6033      	str	r3, [r6, #0]
 800a24c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	f04f 30ff 	mov.w	r0, #4294967295
 800a256:	e03e      	b.n	800a2d6 <__swsetup_r+0xba>
 800a258:	4b25      	ldr	r3, [pc, #148]	; (800a2f0 <__swsetup_r+0xd4>)
 800a25a:	429c      	cmp	r4, r3
 800a25c:	d101      	bne.n	800a262 <__swsetup_r+0x46>
 800a25e:	68ac      	ldr	r4, [r5, #8]
 800a260:	e7eb      	b.n	800a23a <__swsetup_r+0x1e>
 800a262:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <__swsetup_r+0xd8>)
 800a264:	429c      	cmp	r4, r3
 800a266:	bf08      	it	eq
 800a268:	68ec      	ldreq	r4, [r5, #12]
 800a26a:	e7e6      	b.n	800a23a <__swsetup_r+0x1e>
 800a26c:	0758      	lsls	r0, r3, #29
 800a26e:	d512      	bpl.n	800a296 <__swsetup_r+0x7a>
 800a270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a272:	b141      	cbz	r1, 800a286 <__swsetup_r+0x6a>
 800a274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a278:	4299      	cmp	r1, r3
 800a27a:	d002      	beq.n	800a282 <__swsetup_r+0x66>
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff fb31 	bl	80098e4 <_free_r>
 800a282:	2300      	movs	r3, #0
 800a284:	6363      	str	r3, [r4, #52]	; 0x34
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a28c:	81a3      	strh	r3, [r4, #12]
 800a28e:	2300      	movs	r3, #0
 800a290:	6063      	str	r3, [r4, #4]
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f043 0308 	orr.w	r3, r3, #8
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	6923      	ldr	r3, [r4, #16]
 800a2a0:	b94b      	cbnz	r3, 800a2b6 <__swsetup_r+0x9a>
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ac:	d003      	beq.n	800a2b6 <__swsetup_r+0x9a>
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 fa09 	bl	800a6c8 <__smakebuf_r>
 800a2b6:	89a0      	ldrh	r0, [r4, #12]
 800a2b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2bc:	f010 0301 	ands.w	r3, r0, #1
 800a2c0:	d00a      	beq.n	800a2d8 <__swsetup_r+0xbc>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	6963      	ldr	r3, [r4, #20]
 800a2c8:	425b      	negs	r3, r3
 800a2ca:	61a3      	str	r3, [r4, #24]
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	b943      	cbnz	r3, 800a2e2 <__swsetup_r+0xc6>
 800a2d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2d4:	d1ba      	bne.n	800a24c <__swsetup_r+0x30>
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	0781      	lsls	r1, r0, #30
 800a2da:	bf58      	it	pl
 800a2dc:	6963      	ldrpl	r3, [r4, #20]
 800a2de:	60a3      	str	r3, [r4, #8]
 800a2e0:	e7f4      	b.n	800a2cc <__swsetup_r+0xb0>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	e7f7      	b.n	800a2d6 <__swsetup_r+0xba>
 800a2e6:	bf00      	nop
 800a2e8:	20000028 	.word	0x20000028
 800a2ec:	0800ad8c 	.word	0x0800ad8c
 800a2f0:	0800adac 	.word	0x0800adac
 800a2f4:	0800ad6c 	.word	0x0800ad6c

0800a2f8 <abort>:
 800a2f8:	b508      	push	{r3, lr}
 800a2fa:	2006      	movs	r0, #6
 800a2fc:	f000 fa54 	bl	800a7a8 <raise>
 800a300:	2001      	movs	r0, #1
 800a302:	f7f7 ff93 	bl	800222c <_exit>
	...

0800a308 <__sflush_r>:
 800a308:	898a      	ldrh	r2, [r1, #12]
 800a30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30e:	4605      	mov	r5, r0
 800a310:	0710      	lsls	r0, r2, #28
 800a312:	460c      	mov	r4, r1
 800a314:	d458      	bmi.n	800a3c8 <__sflush_r+0xc0>
 800a316:	684b      	ldr	r3, [r1, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dc05      	bgt.n	800a328 <__sflush_r+0x20>
 800a31c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dc02      	bgt.n	800a328 <__sflush_r+0x20>
 800a322:	2000      	movs	r0, #0
 800a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	d0f9      	beq.n	800a322 <__sflush_r+0x1a>
 800a32e:	2300      	movs	r3, #0
 800a330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a334:	682f      	ldr	r7, [r5, #0]
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	d032      	beq.n	800a3a0 <__sflush_r+0x98>
 800a33a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	075a      	lsls	r2, r3, #29
 800a340:	d505      	bpl.n	800a34e <__sflush_r+0x46>
 800a342:	6863      	ldr	r3, [r4, #4]
 800a344:	1ac0      	subs	r0, r0, r3
 800a346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a348:	b10b      	cbz	r3, 800a34e <__sflush_r+0x46>
 800a34a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a34c:	1ac0      	subs	r0, r0, r3
 800a34e:	2300      	movs	r3, #0
 800a350:	4602      	mov	r2, r0
 800a352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a354:	6a21      	ldr	r1, [r4, #32]
 800a356:	4628      	mov	r0, r5
 800a358:	47b0      	blx	r6
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	d106      	bne.n	800a36e <__sflush_r+0x66>
 800a360:	6829      	ldr	r1, [r5, #0]
 800a362:	291d      	cmp	r1, #29
 800a364:	d82c      	bhi.n	800a3c0 <__sflush_r+0xb8>
 800a366:	4a2a      	ldr	r2, [pc, #168]	; (800a410 <__sflush_r+0x108>)
 800a368:	40ca      	lsrs	r2, r1
 800a36a:	07d6      	lsls	r6, r2, #31
 800a36c:	d528      	bpl.n	800a3c0 <__sflush_r+0xb8>
 800a36e:	2200      	movs	r2, #0
 800a370:	6062      	str	r2, [r4, #4]
 800a372:	04d9      	lsls	r1, r3, #19
 800a374:	6922      	ldr	r2, [r4, #16]
 800a376:	6022      	str	r2, [r4, #0]
 800a378:	d504      	bpl.n	800a384 <__sflush_r+0x7c>
 800a37a:	1c42      	adds	r2, r0, #1
 800a37c:	d101      	bne.n	800a382 <__sflush_r+0x7a>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b903      	cbnz	r3, 800a384 <__sflush_r+0x7c>
 800a382:	6560      	str	r0, [r4, #84]	; 0x54
 800a384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a386:	602f      	str	r7, [r5, #0]
 800a388:	2900      	cmp	r1, #0
 800a38a:	d0ca      	beq.n	800a322 <__sflush_r+0x1a>
 800a38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a390:	4299      	cmp	r1, r3
 800a392:	d002      	beq.n	800a39a <__sflush_r+0x92>
 800a394:	4628      	mov	r0, r5
 800a396:	f7ff faa5 	bl	80098e4 <_free_r>
 800a39a:	2000      	movs	r0, #0
 800a39c:	6360      	str	r0, [r4, #52]	; 0x34
 800a39e:	e7c1      	b.n	800a324 <__sflush_r+0x1c>
 800a3a0:	6a21      	ldr	r1, [r4, #32]
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b0      	blx	r6
 800a3a8:	1c41      	adds	r1, r0, #1
 800a3aa:	d1c7      	bne.n	800a33c <__sflush_r+0x34>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0c4      	beq.n	800a33c <__sflush_r+0x34>
 800a3b2:	2b1d      	cmp	r3, #29
 800a3b4:	d001      	beq.n	800a3ba <__sflush_r+0xb2>
 800a3b6:	2b16      	cmp	r3, #22
 800a3b8:	d101      	bne.n	800a3be <__sflush_r+0xb6>
 800a3ba:	602f      	str	r7, [r5, #0]
 800a3bc:	e7b1      	b.n	800a322 <__sflush_r+0x1a>
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	e7ad      	b.n	800a324 <__sflush_r+0x1c>
 800a3c8:	690f      	ldr	r7, [r1, #16]
 800a3ca:	2f00      	cmp	r7, #0
 800a3cc:	d0a9      	beq.n	800a322 <__sflush_r+0x1a>
 800a3ce:	0793      	lsls	r3, r2, #30
 800a3d0:	680e      	ldr	r6, [r1, #0]
 800a3d2:	bf08      	it	eq
 800a3d4:	694b      	ldreq	r3, [r1, #20]
 800a3d6:	600f      	str	r7, [r1, #0]
 800a3d8:	bf18      	it	ne
 800a3da:	2300      	movne	r3, #0
 800a3dc:	eba6 0807 	sub.w	r8, r6, r7
 800a3e0:	608b      	str	r3, [r1, #8]
 800a3e2:	f1b8 0f00 	cmp.w	r8, #0
 800a3e6:	dd9c      	ble.n	800a322 <__sflush_r+0x1a>
 800a3e8:	6a21      	ldr	r1, [r4, #32]
 800a3ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3ec:	4643      	mov	r3, r8
 800a3ee:	463a      	mov	r2, r7
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b0      	blx	r6
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	dc06      	bgt.n	800a406 <__sflush_r+0xfe>
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	e78e      	b.n	800a324 <__sflush_r+0x1c>
 800a406:	4407      	add	r7, r0
 800a408:	eba8 0800 	sub.w	r8, r8, r0
 800a40c:	e7e9      	b.n	800a3e2 <__sflush_r+0xda>
 800a40e:	bf00      	nop
 800a410:	20400001 	.word	0x20400001

0800a414 <_fflush_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	690b      	ldr	r3, [r1, #16]
 800a418:	4605      	mov	r5, r0
 800a41a:	460c      	mov	r4, r1
 800a41c:	b913      	cbnz	r3, 800a424 <_fflush_r+0x10>
 800a41e:	2500      	movs	r5, #0
 800a420:	4628      	mov	r0, r5
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	b118      	cbz	r0, 800a42e <_fflush_r+0x1a>
 800a426:	6983      	ldr	r3, [r0, #24]
 800a428:	b90b      	cbnz	r3, 800a42e <_fflush_r+0x1a>
 800a42a:	f000 f887 	bl	800a53c <__sinit>
 800a42e:	4b14      	ldr	r3, [pc, #80]	; (800a480 <_fflush_r+0x6c>)
 800a430:	429c      	cmp	r4, r3
 800a432:	d11b      	bne.n	800a46c <_fflush_r+0x58>
 800a434:	686c      	ldr	r4, [r5, #4]
 800a436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0ef      	beq.n	800a41e <_fflush_r+0xa>
 800a43e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a440:	07d0      	lsls	r0, r2, #31
 800a442:	d404      	bmi.n	800a44e <_fflush_r+0x3a>
 800a444:	0599      	lsls	r1, r3, #22
 800a446:	d402      	bmi.n	800a44e <_fflush_r+0x3a>
 800a448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a44a:	f000 f915 	bl	800a678 <__retarget_lock_acquire_recursive>
 800a44e:	4628      	mov	r0, r5
 800a450:	4621      	mov	r1, r4
 800a452:	f7ff ff59 	bl	800a308 <__sflush_r>
 800a456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a458:	07da      	lsls	r2, r3, #31
 800a45a:	4605      	mov	r5, r0
 800a45c:	d4e0      	bmi.n	800a420 <_fflush_r+0xc>
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	059b      	lsls	r3, r3, #22
 800a462:	d4dd      	bmi.n	800a420 <_fflush_r+0xc>
 800a464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a466:	f000 f908 	bl	800a67a <__retarget_lock_release_recursive>
 800a46a:	e7d9      	b.n	800a420 <_fflush_r+0xc>
 800a46c:	4b05      	ldr	r3, [pc, #20]	; (800a484 <_fflush_r+0x70>)
 800a46e:	429c      	cmp	r4, r3
 800a470:	d101      	bne.n	800a476 <_fflush_r+0x62>
 800a472:	68ac      	ldr	r4, [r5, #8]
 800a474:	e7df      	b.n	800a436 <_fflush_r+0x22>
 800a476:	4b04      	ldr	r3, [pc, #16]	; (800a488 <_fflush_r+0x74>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	bf08      	it	eq
 800a47c:	68ec      	ldreq	r4, [r5, #12]
 800a47e:	e7da      	b.n	800a436 <_fflush_r+0x22>
 800a480:	0800ad8c 	.word	0x0800ad8c
 800a484:	0800adac 	.word	0x0800adac
 800a488:	0800ad6c 	.word	0x0800ad6c

0800a48c <std>:
 800a48c:	2300      	movs	r3, #0
 800a48e:	b510      	push	{r4, lr}
 800a490:	4604      	mov	r4, r0
 800a492:	e9c0 3300 	strd	r3, r3, [r0]
 800a496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a49a:	6083      	str	r3, [r0, #8]
 800a49c:	8181      	strh	r1, [r0, #12]
 800a49e:	6643      	str	r3, [r0, #100]	; 0x64
 800a4a0:	81c2      	strh	r2, [r0, #14]
 800a4a2:	6183      	str	r3, [r0, #24]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	2208      	movs	r2, #8
 800a4a8:	305c      	adds	r0, #92	; 0x5c
 800a4aa:	f7fd fb61 	bl	8007b70 <memset>
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <std+0x38>)
 800a4b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a4b2:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <std+0x3c>)
 800a4b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <std+0x40>)
 800a4b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ba:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <std+0x44>)
 800a4bc:	6224      	str	r4, [r4, #32]
 800a4be:	6323      	str	r3, [r4, #48]	; 0x30
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0800a7e1 	.word	0x0800a7e1
 800a4c8:	0800a803 	.word	0x0800a803
 800a4cc:	0800a83b 	.word	0x0800a83b
 800a4d0:	0800a85f 	.word	0x0800a85f

0800a4d4 <_cleanup_r>:
 800a4d4:	4901      	ldr	r1, [pc, #4]	; (800a4dc <_cleanup_r+0x8>)
 800a4d6:	f000 b8af 	b.w	800a638 <_fwalk_reent>
 800a4da:	bf00      	nop
 800a4dc:	0800a415 	.word	0x0800a415

0800a4e0 <__sfmoreglue>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	2268      	movs	r2, #104	; 0x68
 800a4e4:	1e4d      	subs	r5, r1, #1
 800a4e6:	4355      	muls	r5, r2
 800a4e8:	460e      	mov	r6, r1
 800a4ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4ee:	f7ff fa65 	bl	80099bc <_malloc_r>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	b140      	cbz	r0, 800a508 <__sfmoreglue+0x28>
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a4fc:	300c      	adds	r0, #12
 800a4fe:	60a0      	str	r0, [r4, #8]
 800a500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a504:	f7fd fb34 	bl	8007b70 <memset>
 800a508:	4620      	mov	r0, r4
 800a50a:	bd70      	pop	{r4, r5, r6, pc}

0800a50c <__sfp_lock_acquire>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sfp_lock_acquire+0x8>)
 800a50e:	f000 b8b3 	b.w	800a678 <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	20000939 	.word	0x20000939

0800a518 <__sfp_lock_release>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__sfp_lock_release+0x8>)
 800a51a:	f000 b8ae 	b.w	800a67a <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	20000939 	.word	0x20000939

0800a524 <__sinit_lock_acquire>:
 800a524:	4801      	ldr	r0, [pc, #4]	; (800a52c <__sinit_lock_acquire+0x8>)
 800a526:	f000 b8a7 	b.w	800a678 <__retarget_lock_acquire_recursive>
 800a52a:	bf00      	nop
 800a52c:	2000093a 	.word	0x2000093a

0800a530 <__sinit_lock_release>:
 800a530:	4801      	ldr	r0, [pc, #4]	; (800a538 <__sinit_lock_release+0x8>)
 800a532:	f000 b8a2 	b.w	800a67a <__retarget_lock_release_recursive>
 800a536:	bf00      	nop
 800a538:	2000093a 	.word	0x2000093a

0800a53c <__sinit>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	4604      	mov	r4, r0
 800a540:	f7ff fff0 	bl	800a524 <__sinit_lock_acquire>
 800a544:	69a3      	ldr	r3, [r4, #24]
 800a546:	b11b      	cbz	r3, 800a550 <__sinit+0x14>
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	f7ff bff0 	b.w	800a530 <__sinit_lock_release>
 800a550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a554:	6523      	str	r3, [r4, #80]	; 0x50
 800a556:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <__sinit+0x68>)
 800a558:	4a13      	ldr	r2, [pc, #76]	; (800a5a8 <__sinit+0x6c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a55e:	42a3      	cmp	r3, r4
 800a560:	bf04      	itt	eq
 800a562:	2301      	moveq	r3, #1
 800a564:	61a3      	streq	r3, [r4, #24]
 800a566:	4620      	mov	r0, r4
 800a568:	f000 f820 	bl	800a5ac <__sfp>
 800a56c:	6060      	str	r0, [r4, #4]
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 f81c 	bl	800a5ac <__sfp>
 800a574:	60a0      	str	r0, [r4, #8]
 800a576:	4620      	mov	r0, r4
 800a578:	f000 f818 	bl	800a5ac <__sfp>
 800a57c:	2200      	movs	r2, #0
 800a57e:	60e0      	str	r0, [r4, #12]
 800a580:	2104      	movs	r1, #4
 800a582:	6860      	ldr	r0, [r4, #4]
 800a584:	f7ff ff82 	bl	800a48c <std>
 800a588:	68a0      	ldr	r0, [r4, #8]
 800a58a:	2201      	movs	r2, #1
 800a58c:	2109      	movs	r1, #9
 800a58e:	f7ff ff7d 	bl	800a48c <std>
 800a592:	68e0      	ldr	r0, [r4, #12]
 800a594:	2202      	movs	r2, #2
 800a596:	2112      	movs	r1, #18
 800a598:	f7ff ff78 	bl	800a48c <std>
 800a59c:	2301      	movs	r3, #1
 800a59e:	61a3      	str	r3, [r4, #24]
 800a5a0:	e7d2      	b.n	800a548 <__sinit+0xc>
 800a5a2:	bf00      	nop
 800a5a4:	0800a9ec 	.word	0x0800a9ec
 800a5a8:	0800a4d5 	.word	0x0800a4d5

0800a5ac <__sfp>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	f7ff ffac 	bl	800a50c <__sfp_lock_acquire>
 800a5b4:	4b1e      	ldr	r3, [pc, #120]	; (800a630 <__sfp+0x84>)
 800a5b6:	681e      	ldr	r6, [r3, #0]
 800a5b8:	69b3      	ldr	r3, [r6, #24]
 800a5ba:	b913      	cbnz	r3, 800a5c2 <__sfp+0x16>
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff ffbd 	bl	800a53c <__sinit>
 800a5c2:	3648      	adds	r6, #72	; 0x48
 800a5c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	d503      	bpl.n	800a5d4 <__sfp+0x28>
 800a5cc:	6833      	ldr	r3, [r6, #0]
 800a5ce:	b30b      	cbz	r3, 800a614 <__sfp+0x68>
 800a5d0:	6836      	ldr	r6, [r6, #0]
 800a5d2:	e7f7      	b.n	800a5c4 <__sfp+0x18>
 800a5d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5d8:	b9d5      	cbnz	r5, 800a610 <__sfp+0x64>
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <__sfp+0x88>)
 800a5dc:	60e3      	str	r3, [r4, #12]
 800a5de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a5e4:	f000 f847 	bl	800a676 <__retarget_lock_init_recursive>
 800a5e8:	f7ff ff96 	bl	800a518 <__sfp_lock_release>
 800a5ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5f4:	6025      	str	r5, [r4, #0]
 800a5f6:	61a5      	str	r5, [r4, #24]
 800a5f8:	2208      	movs	r2, #8
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a600:	f7fd fab6 	bl	8007b70 <memset>
 800a604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a60c:	4620      	mov	r0, r4
 800a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a610:	3468      	adds	r4, #104	; 0x68
 800a612:	e7d9      	b.n	800a5c8 <__sfp+0x1c>
 800a614:	2104      	movs	r1, #4
 800a616:	4638      	mov	r0, r7
 800a618:	f7ff ff62 	bl	800a4e0 <__sfmoreglue>
 800a61c:	4604      	mov	r4, r0
 800a61e:	6030      	str	r0, [r6, #0]
 800a620:	2800      	cmp	r0, #0
 800a622:	d1d5      	bne.n	800a5d0 <__sfp+0x24>
 800a624:	f7ff ff78 	bl	800a518 <__sfp_lock_release>
 800a628:	230c      	movs	r3, #12
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	e7ee      	b.n	800a60c <__sfp+0x60>
 800a62e:	bf00      	nop
 800a630:	0800a9ec 	.word	0x0800a9ec
 800a634:	ffff0001 	.word	0xffff0001

0800a638 <_fwalk_reent>:
 800a638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4606      	mov	r6, r0
 800a63e:	4688      	mov	r8, r1
 800a640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a644:	2700      	movs	r7, #0
 800a646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a64a:	f1b9 0901 	subs.w	r9, r9, #1
 800a64e:	d505      	bpl.n	800a65c <_fwalk_reent+0x24>
 800a650:	6824      	ldr	r4, [r4, #0]
 800a652:	2c00      	cmp	r4, #0
 800a654:	d1f7      	bne.n	800a646 <_fwalk_reent+0xe>
 800a656:	4638      	mov	r0, r7
 800a658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65c:	89ab      	ldrh	r3, [r5, #12]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d907      	bls.n	800a672 <_fwalk_reent+0x3a>
 800a662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a666:	3301      	adds	r3, #1
 800a668:	d003      	beq.n	800a672 <_fwalk_reent+0x3a>
 800a66a:	4629      	mov	r1, r5
 800a66c:	4630      	mov	r0, r6
 800a66e:	47c0      	blx	r8
 800a670:	4307      	orrs	r7, r0
 800a672:	3568      	adds	r5, #104	; 0x68
 800a674:	e7e9      	b.n	800a64a <_fwalk_reent+0x12>

0800a676 <__retarget_lock_init_recursive>:
 800a676:	4770      	bx	lr

0800a678 <__retarget_lock_acquire_recursive>:
 800a678:	4770      	bx	lr

0800a67a <__retarget_lock_release_recursive>:
 800a67a:	4770      	bx	lr

0800a67c <__swhatbuf_r>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	460e      	mov	r6, r1
 800a680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a684:	2900      	cmp	r1, #0
 800a686:	b096      	sub	sp, #88	; 0x58
 800a688:	4614      	mov	r4, r2
 800a68a:	461d      	mov	r5, r3
 800a68c:	da08      	bge.n	800a6a0 <__swhatbuf_r+0x24>
 800a68e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	602a      	str	r2, [r5, #0]
 800a696:	061a      	lsls	r2, r3, #24
 800a698:	d410      	bmi.n	800a6bc <__swhatbuf_r+0x40>
 800a69a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a69e:	e00e      	b.n	800a6be <__swhatbuf_r+0x42>
 800a6a0:	466a      	mov	r2, sp
 800a6a2:	f000 f903 	bl	800a8ac <_fstat_r>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	dbf1      	blt.n	800a68e <__swhatbuf_r+0x12>
 800a6aa:	9a01      	ldr	r2, [sp, #4]
 800a6ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6b4:	425a      	negs	r2, r3
 800a6b6:	415a      	adcs	r2, r3
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	e7ee      	b.n	800a69a <__swhatbuf_r+0x1e>
 800a6bc:	2340      	movs	r3, #64	; 0x40
 800a6be:	2000      	movs	r0, #0
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	b016      	add	sp, #88	; 0x58
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6c8 <__smakebuf_r>:
 800a6c8:	898b      	ldrh	r3, [r1, #12]
 800a6ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6cc:	079d      	lsls	r5, r3, #30
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	d507      	bpl.n	800a6e4 <__smakebuf_r+0x1c>
 800a6d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	6123      	str	r3, [r4, #16]
 800a6dc:	2301      	movs	r3, #1
 800a6de:	6163      	str	r3, [r4, #20]
 800a6e0:	b002      	add	sp, #8
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	ab01      	add	r3, sp, #4
 800a6e6:	466a      	mov	r2, sp
 800a6e8:	f7ff ffc8 	bl	800a67c <__swhatbuf_r>
 800a6ec:	9900      	ldr	r1, [sp, #0]
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f7ff f963 	bl	80099bc <_malloc_r>
 800a6f6:	b948      	cbnz	r0, 800a70c <__smakebuf_r+0x44>
 800a6f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6fc:	059a      	lsls	r2, r3, #22
 800a6fe:	d4ef      	bmi.n	800a6e0 <__smakebuf_r+0x18>
 800a700:	f023 0303 	bic.w	r3, r3, #3
 800a704:	f043 0302 	orr.w	r3, r3, #2
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	e7e3      	b.n	800a6d4 <__smakebuf_r+0xc>
 800a70c:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <__smakebuf_r+0x7c>)
 800a70e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	6020      	str	r0, [r4, #0]
 800a714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	9b00      	ldr	r3, [sp, #0]
 800a71c:	6163      	str	r3, [r4, #20]
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	6120      	str	r0, [r4, #16]
 800a722:	b15b      	cbz	r3, 800a73c <__smakebuf_r+0x74>
 800a724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a728:	4630      	mov	r0, r6
 800a72a:	f000 f8d1 	bl	800a8d0 <_isatty_r>
 800a72e:	b128      	cbz	r0, 800a73c <__smakebuf_r+0x74>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	f023 0303 	bic.w	r3, r3, #3
 800a736:	f043 0301 	orr.w	r3, r3, #1
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	89a0      	ldrh	r0, [r4, #12]
 800a73e:	4305      	orrs	r5, r0
 800a740:	81a5      	strh	r5, [r4, #12]
 800a742:	e7cd      	b.n	800a6e0 <__smakebuf_r+0x18>
 800a744:	0800a4d5 	.word	0x0800a4d5

0800a748 <_malloc_usable_size_r>:
 800a748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a74c:	1f18      	subs	r0, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	bfbc      	itt	lt
 800a752:	580b      	ldrlt	r3, [r1, r0]
 800a754:	18c0      	addlt	r0, r0, r3
 800a756:	4770      	bx	lr

0800a758 <_raise_r>:
 800a758:	291f      	cmp	r1, #31
 800a75a:	b538      	push	{r3, r4, r5, lr}
 800a75c:	4604      	mov	r4, r0
 800a75e:	460d      	mov	r5, r1
 800a760:	d904      	bls.n	800a76c <_raise_r+0x14>
 800a762:	2316      	movs	r3, #22
 800a764:	6003      	str	r3, [r0, #0]
 800a766:	f04f 30ff 	mov.w	r0, #4294967295
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a76e:	b112      	cbz	r2, 800a776 <_raise_r+0x1e>
 800a770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a774:	b94b      	cbnz	r3, 800a78a <_raise_r+0x32>
 800a776:	4620      	mov	r0, r4
 800a778:	f000 f830 	bl	800a7dc <_getpid_r>
 800a77c:	462a      	mov	r2, r5
 800a77e:	4601      	mov	r1, r0
 800a780:	4620      	mov	r0, r4
 800a782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a786:	f000 b817 	b.w	800a7b8 <_kill_r>
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d00a      	beq.n	800a7a4 <_raise_r+0x4c>
 800a78e:	1c59      	adds	r1, r3, #1
 800a790:	d103      	bne.n	800a79a <_raise_r+0x42>
 800a792:	2316      	movs	r3, #22
 800a794:	6003      	str	r3, [r0, #0]
 800a796:	2001      	movs	r0, #1
 800a798:	e7e7      	b.n	800a76a <_raise_r+0x12>
 800a79a:	2400      	movs	r4, #0
 800a79c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	4798      	blx	r3
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	e7e0      	b.n	800a76a <_raise_r+0x12>

0800a7a8 <raise>:
 800a7a8:	4b02      	ldr	r3, [pc, #8]	; (800a7b4 <raise+0xc>)
 800a7aa:	4601      	mov	r1, r0
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	f7ff bfd3 	b.w	800a758 <_raise_r>
 800a7b2:	bf00      	nop
 800a7b4:	20000028 	.word	0x20000028

0800a7b8 <_kill_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	; (800a7d8 <_kill_r+0x20>)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	f7f7 fd21 	bl	800220c <_kill>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	d102      	bne.n	800a7d4 <_kill_r+0x1c>
 800a7ce:	682b      	ldr	r3, [r5, #0]
 800a7d0:	b103      	cbz	r3, 800a7d4 <_kill_r+0x1c>
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	bd38      	pop	{r3, r4, r5, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000934 	.word	0x20000934

0800a7dc <_getpid_r>:
 800a7dc:	f7f7 bd0e 	b.w	80021fc <_getpid>

0800a7e0 <__sread>:
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e8:	f000 f894 	bl	800a914 <_read_r>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	bfab      	itete	ge
 800a7f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a7f4:	181b      	addge	r3, r3, r0
 800a7f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7fa:	bfac      	ite	ge
 800a7fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7fe:	81a3      	strhlt	r3, [r4, #12]
 800a800:	bd10      	pop	{r4, pc}

0800a802 <__swrite>:
 800a802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a806:	461f      	mov	r7, r3
 800a808:	898b      	ldrh	r3, [r1, #12]
 800a80a:	05db      	lsls	r3, r3, #23
 800a80c:	4605      	mov	r5, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	4616      	mov	r6, r2
 800a812:	d505      	bpl.n	800a820 <__swrite+0x1e>
 800a814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a818:	2302      	movs	r3, #2
 800a81a:	2200      	movs	r2, #0
 800a81c:	f000 f868 	bl	800a8f0 <_lseek_r>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	4632      	mov	r2, r6
 800a82e:	463b      	mov	r3, r7
 800a830:	4628      	mov	r0, r5
 800a832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a836:	f000 b817 	b.w	800a868 <_write_r>

0800a83a <__sseek>:
 800a83a:	b510      	push	{r4, lr}
 800a83c:	460c      	mov	r4, r1
 800a83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a842:	f000 f855 	bl	800a8f0 <_lseek_r>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	bf15      	itete	ne
 800a84c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a84e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a856:	81a3      	strheq	r3, [r4, #12]
 800a858:	bf18      	it	ne
 800a85a:	81a3      	strhne	r3, [r4, #12]
 800a85c:	bd10      	pop	{r4, pc}

0800a85e <__sclose>:
 800a85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a862:	f000 b813 	b.w	800a88c <_close_r>
	...

0800a868 <_write_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d07      	ldr	r5, [pc, #28]	; (800a888 <_write_r+0x20>)
 800a86c:	4604      	mov	r4, r0
 800a86e:	4608      	mov	r0, r1
 800a870:	4611      	mov	r1, r2
 800a872:	2200      	movs	r2, #0
 800a874:	602a      	str	r2, [r5, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	f7f7 fcff 	bl	800227a <_write>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d102      	bne.n	800a886 <_write_r+0x1e>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	b103      	cbz	r3, 800a886 <_write_r+0x1e>
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	20000934 	.word	0x20000934

0800a88c <_close_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4d06      	ldr	r5, [pc, #24]	; (800a8a8 <_close_r+0x1c>)
 800a890:	2300      	movs	r3, #0
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	602b      	str	r3, [r5, #0]
 800a898:	f7f7 fd0b 	bl	80022b2 <_close>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_close_r+0x1a>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_close_r+0x1a>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	20000934 	.word	0x20000934

0800a8ac <_fstat_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4d07      	ldr	r5, [pc, #28]	; (800a8cc <_fstat_r+0x20>)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	f7f7 fd06 	bl	80022ca <_fstat>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d102      	bne.n	800a8c8 <_fstat_r+0x1c>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	b103      	cbz	r3, 800a8c8 <_fstat_r+0x1c>
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000934 	.word	0x20000934

0800a8d0 <_isatty_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d06      	ldr	r5, [pc, #24]	; (800a8ec <_isatty_r+0x1c>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7f7 fd05 	bl	80022ea <_isatty>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_isatty_r+0x1a>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_isatty_r+0x1a>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	20000934 	.word	0x20000934

0800a8f0 <_lseek_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	; (800a910 <_lseek_r+0x20>)
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	4608      	mov	r0, r1
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7f7 fcfe 	bl	8002300 <_lseek>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_lseek_r+0x1e>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_lseek_r+0x1e>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20000934 	.word	0x20000934

0800a914 <_read_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d07      	ldr	r5, [pc, #28]	; (800a934 <_read_r+0x20>)
 800a918:	4604      	mov	r4, r0
 800a91a:	4608      	mov	r0, r1
 800a91c:	4611      	mov	r1, r2
 800a91e:	2200      	movs	r2, #0
 800a920:	602a      	str	r2, [r5, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	f7f7 fc8c 	bl	8002240 <_read>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_read_r+0x1e>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_read_r+0x1e>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20000934 	.word	0x20000934

0800a938 <_init>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	bf00      	nop
 800a93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93e:	bc08      	pop	{r3}
 800a940:	469e      	mov	lr, r3
 800a942:	4770      	bx	lr

0800a944 <_fini>:
 800a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a946:	bf00      	nop
 800a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94a:	bc08      	pop	{r3}
 800a94c:	469e      	mov	lr, r3
 800a94e:	4770      	bx	lr
