
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000014  0800695c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800695c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f3f  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327b  00000000  00000000  00039f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cba  00000000  00000000  0003f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018562  00000000  00000000  00069402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100cf3  00000000  00000000  00081964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00182657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ec  00000000  00000000  001826ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	08006898 	.word	0x08006898

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	08006898 	.word	0x08006898

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_CAN1_Init+0x68>)
 8000536:	4a19      	ldr	r2, [pc, #100]	; (800059c <MX_CAN1_Init+0x6c>)
 8000538:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_CAN1_Init+0x68>)
 800053c:	2210      	movs	r2, #16
 800053e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_CAN1_Init+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_CAN1_Init+0x68>)
 8000548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800054c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_CAN1_Init+0x68>)
 8000550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000554:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_CAN1_Init+0x68>)
 8000558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800055c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_CAN1_Init+0x68>)
 8000560:	2200      	movs	r2, #0
 8000562:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_CAN1_Init+0x68>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_CAN1_Init+0x68>)
 800057e:	2200      	movs	r2, #0
 8000580:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_CAN1_Init+0x68>)
 8000584:	f001 f9b8 	bl	80018f8 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f000 fe47 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000038 	.word	0x20000038
 800059c:	40006400 	.word	0x40006400

080005a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_CAN_MspInit+0x8c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d12f      	bne.n	8000622 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	2303      	movs	r3, #3
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000602:	2309      	movs	r3, #9
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_CAN_MspInit+0x94>)
 800060e:	f002 f985 	bl	800291c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2014      	movs	r0, #20
 8000618:	f002 f8b7 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061c:	2014      	movs	r0, #20
 800061e:	f002 f8d0 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40006400 	.word	0x40006400
 8000630:	40023800 	.word	0x40023800
 8000634:	40020c00 	.word	0x40020c00

08000638 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a6b      	ldr	r2, [pc, #428]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b69      	ldr	r3, [pc, #420]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a65      	ldr	r2, [pc, #404]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a5f      	ldr	r2, [pc, #380]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x1c8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x1c8>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a53      	ldr	r2, [pc, #332]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e4:	4847      	ldr	r0, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1cc>)
 80006e6:	f002 fac5 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4846      	ldr	r0, [pc, #280]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80006f0:	f002 fac0 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d4>)
 800070c:	f002 f906 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000710:	2332      	movs	r3, #50	; 0x32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <MX_GPIO_Init+0x1d4>)
 800072c:	f002 f8f6 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000730:	2386      	movs	r3, #134	; 0x86
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4831      	ldr	r0, [pc, #196]	; (8000810 <MX_GPIO_Init+0x1d8>)
 800074c:	f002 f8e6 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000750:	f244 0381 	movw	r3, #16513	; 0x4081
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800076a:	f002 f8d7 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	481e      	ldr	r0, [pc, #120]	; (8000804 <MX_GPIO_Init+0x1cc>)
 800078c:	f002 f8c6 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007a8:	f002 f8b8 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007c0:	f002 f8ac 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_GPIO_Init+0x1d0>)
 80007e2:	f002 f89b 	bl	800291c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f001 ffcd 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f0:	2028      	movs	r0, #40	; 0x28
 80007f2:	f001 ffe6 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000

08000814 <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <fnLEDsErrorState+0x28>)
 800081e:	f002 fa29 	bl	8002c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <fnLEDsErrorState+0x28>)
 8000828:	f002 fa24 	bl	8002c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000832:	4802      	ldr	r0, [pc, #8]	; (800083c <fnLEDsErrorState+0x28>)
 8000834:	f002 fa1e 	bl	8002c74 <HAL_GPIO_WritePin>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020400 	.word	0x40020400

08000840 <fnInit>:


//INIT FUNCTION
void fnInit(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000844:	4bc6      	ldr	r3, [pc, #792]	; (8000b60 <fnInit+0x320>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b50      	cmp	r3, #80	; 0x50
 800084a:	f200 82d0 	bhi.w	8000dee <fnInit+0x5ae>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <fnInit+0x14>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000999 	.word	0x08000999
 8000858:	08000def 	.word	0x08000def
 800085c:	08000def 	.word	0x08000def
 8000860:	08000def 	.word	0x08000def
 8000864:	08000def 	.word	0x08000def
 8000868:	080009e1 	.word	0x080009e1
 800086c:	08000def 	.word	0x08000def
 8000870:	08000def 	.word	0x08000def
 8000874:	08000def 	.word	0x08000def
 8000878:	08000def 	.word	0x08000def
 800087c:	08000a29 	.word	0x08000a29
 8000880:	08000def 	.word	0x08000def
 8000884:	08000def 	.word	0x08000def
 8000888:	08000def 	.word	0x08000def
 800088c:	08000def 	.word	0x08000def
 8000890:	08000def 	.word	0x08000def
 8000894:	08000def 	.word	0x08000def
 8000898:	08000def 	.word	0x08000def
 800089c:	08000def 	.word	0x08000def
 80008a0:	08000def 	.word	0x08000def
 80008a4:	08000a97 	.word	0x08000a97
 80008a8:	08000def 	.word	0x08000def
 80008ac:	08000def 	.word	0x08000def
 80008b0:	08000def 	.word	0x08000def
 80008b4:	08000def 	.word	0x08000def
 80008b8:	08000b05 	.word	0x08000b05
 80008bc:	08000def 	.word	0x08000def
 80008c0:	08000def 	.word	0x08000def
 80008c4:	08000def 	.word	0x08000def
 80008c8:	08000def 	.word	0x08000def
 80008cc:	08000b9d 	.word	0x08000b9d
 80008d0:	08000def 	.word	0x08000def
 80008d4:	08000def 	.word	0x08000def
 80008d8:	08000def 	.word	0x08000def
 80008dc:	08000def 	.word	0x08000def
 80008e0:	08000def 	.word	0x08000def
 80008e4:	08000def 	.word	0x08000def
 80008e8:	08000def 	.word	0x08000def
 80008ec:	08000def 	.word	0x08000def
 80008f0:	08000def 	.word	0x08000def
 80008f4:	08000c0b 	.word	0x08000c0b
 80008f8:	08000def 	.word	0x08000def
 80008fc:	08000def 	.word	0x08000def
 8000900:	08000def 	.word	0x08000def
 8000904:	08000def 	.word	0x08000def
 8000908:	08000def 	.word	0x08000def
 800090c:	08000def 	.word	0x08000def
 8000910:	08000def 	.word	0x08000def
 8000914:	08000def 	.word	0x08000def
 8000918:	08000def 	.word	0x08000def
 800091c:	08000c79 	.word	0x08000c79
 8000920:	08000def 	.word	0x08000def
 8000924:	08000def 	.word	0x08000def
 8000928:	08000def 	.word	0x08000def
 800092c:	08000def 	.word	0x08000def
 8000930:	08000def 	.word	0x08000def
 8000934:	08000def 	.word	0x08000def
 8000938:	08000def 	.word	0x08000def
 800093c:	08000def 	.word	0x08000def
 8000940:	08000def 	.word	0x08000def
 8000944:	08000ce7 	.word	0x08000ce7
 8000948:	08000def 	.word	0x08000def
 800094c:	08000def 	.word	0x08000def
 8000950:	08000def 	.word	0x08000def
 8000954:	08000def 	.word	0x08000def
 8000958:	08000def 	.word	0x08000def
 800095c:	08000def 	.word	0x08000def
 8000960:	08000def 	.word	0x08000def
 8000964:	08000def 	.word	0x08000def
 8000968:	08000def 	.word	0x08000def
 800096c:	08000d55 	.word	0x08000d55
 8000970:	08000def 	.word	0x08000def
 8000974:	08000def 	.word	0x08000def
 8000978:	08000def 	.word	0x08000def
 800097c:	08000def 	.word	0x08000def
 8000980:	08000def 	.word	0x08000def
 8000984:	08000def 	.word	0x08000def
 8000988:	08000def 	.word	0x08000def
 800098c:	08000def 	.word	0x08000def
 8000990:	08000def 	.word	0x08000def
 8000994:	08000dc3 	.word	0x08000dc3

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000998:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <fnInit+0x324>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 800099e:	4b71      	ldr	r3, [pc, #452]	; (8000b64 <fnInit+0x324>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 80009a4:	4b70      	ldr	r3, [pc, #448]	; (8000b68 <fnInit+0x328>)
 80009a6:	2282      	movs	r2, #130	; 0x82
 80009a8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009aa:	4b6f      	ldr	r3, [pc, #444]	; (8000b68 <fnInit+0x328>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009b0:	4b6e      	ldr	r3, [pc, #440]	; (8000b6c <fnInit+0x32c>)
 80009b2:	4a6d      	ldr	r2, [pc, #436]	; (8000b68 <fnInit+0x328>)
 80009b4:	496b      	ldr	r1, [pc, #428]	; (8000b64 <fnInit+0x324>)
 80009b6:	486e      	ldr	r0, [pc, #440]	; (8000b70 <fnInit+0x330>)
 80009b8:	f001 f9ca 	bl	8001d50 <HAL_CAN_AddTxMessage>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <fnInit+0x18c>
			fnLEDsErrorState();
 80009c2:	f7ff ff27 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 80009c6:	f000 fc2b 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 80009ca:	e210      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 5;
 80009cc:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <fnInit+0x320>)
 80009ce:	2205      	movs	r2, #5
 80009d0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	2204      	movs	r2, #4
 80009d6:	4967      	ldr	r1, [pc, #412]	; (8000b74 <fnInit+0x334>)
 80009d8:	4867      	ldr	r0, [pc, #412]	; (8000b78 <fnInit+0x338>)
 80009da:	f004 f969 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 80009de:	e206      	b.n	8000dee <fnInit+0x5ae>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 80009e0:	4b60      	ldr	r3, [pc, #384]	; (8000b64 <fnInit+0x324>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <fnInit+0x324>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 80009ec:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <fnInit+0x328>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 80009f2:	4b5d      	ldr	r3, [pc, #372]	; (8000b68 <fnInit+0x328>)
 80009f4:	220a      	movs	r2, #10
 80009f6:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80009f8:	4b5c      	ldr	r3, [pc, #368]	; (8000b6c <fnInit+0x32c>)
 80009fa:	4a5b      	ldr	r2, [pc, #364]	; (8000b68 <fnInit+0x328>)
 80009fc:	4959      	ldr	r1, [pc, #356]	; (8000b64 <fnInit+0x324>)
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <fnInit+0x330>)
 8000a00:	f001 f9a6 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <fnInit+0x1d4>
			fnLEDsErrorState();
 8000a0a:	f7ff ff03 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000a0e:	f000 fc07 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000a12:	e1ec      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 10;
 8000a14:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <fnInit+0x320>)
 8000a16:	220a      	movs	r2, #10
 8000a18:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4957      	ldr	r1, [pc, #348]	; (8000b7c <fnInit+0x33c>)
 8000a20:	4855      	ldr	r0, [pc, #340]	; (8000b78 <fnInit+0x338>)
 8000a22:	f004 f945 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000a26:	e1e2      	b.n	8000dee <fnInit+0x5ae>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000a28:	4b4e      	ldr	r3, [pc, #312]	; (8000b64 <fnInit+0x324>)
 8000a2a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a2e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a30:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <fnInit+0x324>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000a36:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <fnInit+0x328>)
 8000a38:	2222      	movs	r2, #34	; 0x22
 8000a3a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <fnInit+0x328>)
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000a42:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <fnInit+0x328>)
 8000a44:	2260      	movs	r2, #96	; 0x60
 8000a46:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <fnInit+0x328>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000a4e:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <fnInit+0x328>)
 8000a50:	2206      	movs	r2, #6
 8000a52:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <fnInit+0x328>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <fnInit+0x328>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <fnInit+0x328>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <fnInit+0x32c>)
 8000a68:	4a3f      	ldr	r2, [pc, #252]	; (8000b68 <fnInit+0x328>)
 8000a6a:	493e      	ldr	r1, [pc, #248]	; (8000b64 <fnInit+0x324>)
 8000a6c:	4840      	ldr	r0, [pc, #256]	; (8000b70 <fnInit+0x330>)
 8000a6e:	f001 f96f 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <fnInit+0x242>
			fnLEDsErrorState();
 8000a78:	f7ff fecc 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000a7c:	f000 fbd0 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000a80:	e1b5      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 20;
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <fnInit+0x320>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	493c      	ldr	r1, [pc, #240]	; (8000b80 <fnInit+0x340>)
 8000a8e:	483a      	ldr	r0, [pc, #232]	; (8000b78 <fnInit+0x338>)
 8000a90:	f004 f90e 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000a94:	e1ab      	b.n	8000dee <fnInit+0x5ae>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <fnInit+0x324>)
 8000a98:	f240 620a 	movw	r2, #1546	; 0x60a
 8000a9c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <fnInit+0x324>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <fnInit+0x328>)
 8000aa6:	2222      	movs	r2, #34	; 0x22
 8000aa8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <fnInit+0x328>)
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <fnInit+0x328>)
 8000ab2:	2260      	movs	r2, #96	; 0x60
 8000ab4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <fnInit+0x328>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <fnInit+0x328>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <fnInit+0x328>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <fnInit+0x328>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <fnInit+0x328>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <fnInit+0x32c>)
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <fnInit+0x328>)
 8000ad8:	4922      	ldr	r1, [pc, #136]	; (8000b64 <fnInit+0x324>)
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <fnInit+0x330>)
 8000adc:	f001 f938 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d004      	beq.n	8000af0 <fnInit+0x2b0>
			fnLEDsErrorState();
 8000ae6:	f7ff fe95 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000aea:	f000 fb99 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000aee:	e17e      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 25;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <fnInit+0x320>)
 8000af2:	2219      	movs	r2, #25
 8000af4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2204      	movs	r2, #4
 8000afa:	4922      	ldr	r1, [pc, #136]	; (8000b84 <fnInit+0x344>)
 8000afc:	481e      	ldr	r0, [pc, #120]	; (8000b78 <fnInit+0x338>)
 8000afe:	f004 f8d7 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000b02:	e174      	b.n	8000dee <fnInit+0x5ae>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <fnInit+0x324>)
 8000b06:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b0a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <fnInit+0x324>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <fnInit+0x328>)
 8000b14:	2222      	movs	r2, #34	; 0x22
 8000b16:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <fnInit+0x328>)
 8000b1a:	2240      	movs	r2, #64	; 0x40
 8000b1c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <fnInit+0x328>)
 8000b20:	2260      	movs	r2, #96	; 0x60
 8000b22:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <fnInit+0x328>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <fnInit+0x328>)
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <fnInit+0x328>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <fnInit+0x328>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <fnInit+0x328>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <fnInit+0x32c>)
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <fnInit+0x328>)
 8000b46:	4907      	ldr	r1, [pc, #28]	; (8000b64 <fnInit+0x324>)
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <fnInit+0x330>)
 8000b4a:	f001 f901 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d019      	beq.n	8000b88 <fnInit+0x348>
			fnLEDsErrorState();
 8000b54:	f7ff fe5e 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000b58:	f000 fb62 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000b5c:	e147      	b.n	8000dee <fnInit+0x5ae>
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	200000a0 	.word	0x200000a0
 8000b68:	20000060 	.word	0x20000060
 8000b6c:	20000068 	.word	0x20000068
 8000b70:	20000038 	.word	0x20000038
 8000b74:	080068b0 	.word	0x080068b0
 8000b78:	2000016c 	.word	0x2000016c
 8000b7c:	080068b8 	.word	0x080068b8
 8000b80:	080068c0 	.word	0x080068c0
 8000b84:	080068c8 	.word	0x080068c8
			iMachineStatus = 30;
 8000b88:	4b9a      	ldr	r3, [pc, #616]	; (8000df4 <fnInit+0x5b4>)
 8000b8a:	221e      	movs	r2, #30
 8000b8c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	2204      	movs	r2, #4
 8000b92:	4999      	ldr	r1, [pc, #612]	; (8000df8 <fnInit+0x5b8>)
 8000b94:	4899      	ldr	r0, [pc, #612]	; (8000dfc <fnInit+0x5bc>)
 8000b96:	f004 f88b 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000b9a:	e128      	b.n	8000dee <fnInit+0x5ae>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000b9c:	4b98      	ldr	r3, [pc, #608]	; (8000e00 <fnInit+0x5c0>)
 8000b9e:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ba2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ba4:	4b96      	ldr	r3, [pc, #600]	; (8000e00 <fnInit+0x5c0>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000baa:	4b96      	ldr	r3, [pc, #600]	; (8000e04 <fnInit+0x5c4>)
 8000bac:	2222      	movs	r2, #34	; 0x22
 8000bae:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000bb0:	4b94      	ldr	r3, [pc, #592]	; (8000e04 <fnInit+0x5c4>)
 8000bb2:	2260      	movs	r2, #96	; 0x60
 8000bb4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bb6:	4b93      	ldr	r3, [pc, #588]	; (8000e04 <fnInit+0x5c4>)
 8000bb8:	2260      	movs	r2, #96	; 0x60
 8000bba:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bbc:	4b91      	ldr	r3, [pc, #580]	; (8000e04 <fnInit+0x5c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000bc2:	4b90      	ldr	r3, [pc, #576]	; (8000e04 <fnInit+0x5c4>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000bc8:	4b8e      	ldr	r3, [pc, #568]	; (8000e04 <fnInit+0x5c4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bce:	4b8d      	ldr	r3, [pc, #564]	; (8000e04 <fnInit+0x5c4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000bd4:	4b8b      	ldr	r3, [pc, #556]	; (8000e04 <fnInit+0x5c4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000bda:	4b8b      	ldr	r3, [pc, #556]	; (8000e08 <fnInit+0x5c8>)
 8000bdc:	4a89      	ldr	r2, [pc, #548]	; (8000e04 <fnInit+0x5c4>)
 8000bde:	4988      	ldr	r1, [pc, #544]	; (8000e00 <fnInit+0x5c0>)
 8000be0:	488a      	ldr	r0, [pc, #552]	; (8000e0c <fnInit+0x5cc>)
 8000be2:	f001 f8b5 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <fnInit+0x3b6>
			fnLEDsErrorState();
 8000bec:	f7ff fe12 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000bf0:	f000 fb16 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000bf4:	e0fb      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 40;
 8000bf6:	4b7f      	ldr	r3, [pc, #508]	; (8000df4 <fnInit+0x5b4>)
 8000bf8:	2228      	movs	r2, #40	; 0x28
 8000bfa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4983      	ldr	r1, [pc, #524]	; (8000e10 <fnInit+0x5d0>)
 8000c02:	487e      	ldr	r0, [pc, #504]	; (8000dfc <fnInit+0x5bc>)
 8000c04:	f004 f854 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000c08:	e0f1      	b.n	8000dee <fnInit+0x5ae>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000c0a:	4b7d      	ldr	r3, [pc, #500]	; (8000e00 <fnInit+0x5c0>)
 8000c0c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c10:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <fnInit+0x5c0>)
 8000c14:	2208      	movs	r2, #8
 8000c16:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000c18:	4b7a      	ldr	r3, [pc, #488]	; (8000e04 <fnInit+0x5c4>)
 8000c1a:	2222      	movs	r2, #34	; 0x22
 8000c1c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000c1e:	4b79      	ldr	r3, [pc, #484]	; (8000e04 <fnInit+0x5c4>)
 8000c20:	227a      	movs	r2, #122	; 0x7a
 8000c22:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c24:	4b77      	ldr	r3, [pc, #476]	; (8000e04 <fnInit+0x5c4>)
 8000c26:	2260      	movs	r2, #96	; 0x60
 8000c28:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c2a:	4b76      	ldr	r3, [pc, #472]	; (8000e04 <fnInit+0x5c4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000c30:	4b74      	ldr	r3, [pc, #464]	; (8000e04 <fnInit+0x5c4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c36:	4b73      	ldr	r3, [pc, #460]	; (8000e04 <fnInit+0x5c4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c3c:	4b71      	ldr	r3, [pc, #452]	; (8000e04 <fnInit+0x5c4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c42:	4b70      	ldr	r3, [pc, #448]	; (8000e04 <fnInit+0x5c4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c48:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <fnInit+0x5c8>)
 8000c4a:	4a6e      	ldr	r2, [pc, #440]	; (8000e04 <fnInit+0x5c4>)
 8000c4c:	496c      	ldr	r1, [pc, #432]	; (8000e00 <fnInit+0x5c0>)
 8000c4e:	486f      	ldr	r0, [pc, #444]	; (8000e0c <fnInit+0x5cc>)
 8000c50:	f001 f87e 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <fnInit+0x424>
			fnLEDsErrorState();
 8000c5a:	f7ff fddb 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000c5e:	f000 fadf 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000c62:	e0c4      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 50;
 8000c64:	4b63      	ldr	r3, [pc, #396]	; (8000df4 <fnInit+0x5b4>)
 8000c66:	2232      	movs	r2, #50	; 0x32
 8000c68:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	4969      	ldr	r1, [pc, #420]	; (8000e14 <fnInit+0x5d4>)
 8000c70:	4862      	ldr	r0, [pc, #392]	; (8000dfc <fnInit+0x5bc>)
 8000c72:	f004 f81d 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000c76:	e0ba      	b.n	8000dee <fnInit+0x5ae>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000c78:	4b61      	ldr	r3, [pc, #388]	; (8000e00 <fnInit+0x5c0>)
 8000c7a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c7e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c80:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <fnInit+0x5c0>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c86:	4b5f      	ldr	r3, [pc, #380]	; (8000e04 <fnInit+0x5c4>)
 8000c88:	2222      	movs	r2, #34	; 0x22
 8000c8a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000c8c:	4b5d      	ldr	r3, [pc, #372]	; (8000e04 <fnInit+0x5c4>)
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c92:	4b5c      	ldr	r3, [pc, #368]	; (8000e04 <fnInit+0x5c4>)
 8000c94:	2260      	movs	r2, #96	; 0x60
 8000c96:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c98:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <fnInit+0x5c4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000c9e:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <fnInit+0x5c4>)
 8000ca0:	221f      	movs	r2, #31
 8000ca2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ca4:	4b57      	ldr	r3, [pc, #348]	; (8000e04 <fnInit+0x5c4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <fnInit+0x5c4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cb0:	4b54      	ldr	r3, [pc, #336]	; (8000e04 <fnInit+0x5c4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000cb6:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <fnInit+0x5c8>)
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <fnInit+0x5c4>)
 8000cba:	4951      	ldr	r1, [pc, #324]	; (8000e00 <fnInit+0x5c0>)
 8000cbc:	4853      	ldr	r0, [pc, #332]	; (8000e0c <fnInit+0x5cc>)
 8000cbe:	f001 f847 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <fnInit+0x492>
			fnLEDsErrorState();
 8000cc8:	f7ff fda4 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000ccc:	f000 faa8 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000cd0:	e08d      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 60;
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <fnInit+0x5b4>)
 8000cd4:	223c      	movs	r2, #60	; 0x3c
 8000cd6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	2204      	movs	r2, #4
 8000cdc:	494e      	ldr	r1, [pc, #312]	; (8000e18 <fnInit+0x5d8>)
 8000cde:	4847      	ldr	r0, [pc, #284]	; (8000dfc <fnInit+0x5bc>)
 8000ce0:	f003 ffe6 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000ce4:	e083      	b.n	8000dee <fnInit+0x5ae>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <fnInit+0x5c0>)
 8000ce8:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cec:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <fnInit+0x5c0>)
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <fnInit+0x5c4>)
 8000cf6:	2222      	movs	r2, #34	; 0x22
 8000cf8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000cfa:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <fnInit+0x5c4>)
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d00:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <fnInit+0x5c4>)
 8000d02:	2260      	movs	r2, #96	; 0x60
 8000d04:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d06:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <fnInit+0x5c4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <fnInit+0x5c4>)
 8000d0e:	220f      	movs	r2, #15
 8000d10:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <fnInit+0x5c4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <fnInit+0x5c4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <fnInit+0x5c4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <fnInit+0x5c8>)
 8000d26:	4a37      	ldr	r2, [pc, #220]	; (8000e04 <fnInit+0x5c4>)
 8000d28:	4935      	ldr	r1, [pc, #212]	; (8000e00 <fnInit+0x5c0>)
 8000d2a:	4838      	ldr	r0, [pc, #224]	; (8000e0c <fnInit+0x5cc>)
 8000d2c:	f001 f810 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <fnInit+0x500>
			fnLEDsErrorState();
 8000d36:	f7ff fd6d 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000d3a:	f000 fa71 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000d3e:	e056      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 70;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <fnInit+0x5b4>)
 8000d42:	2246      	movs	r2, #70	; 0x46
 8000d44:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000d46:	2364      	movs	r3, #100	; 0x64
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4934      	ldr	r1, [pc, #208]	; (8000e1c <fnInit+0x5dc>)
 8000d4c:	482b      	ldr	r0, [pc, #172]	; (8000dfc <fnInit+0x5bc>)
 8000d4e:	f003 ffaf 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000d52:	e04c      	b.n	8000dee <fnInit+0x5ae>

	case 70://SEND STATUS CHECK
		TxHeader.StdId = 0x60A;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <fnInit+0x5c0>)
 8000d56:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d5a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <fnInit+0x5c0>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <fnInit+0x5c4>)
 8000d64:	2240      	movs	r2, #64	; 0x40
 8000d66:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <fnInit+0x5c4>)
 8000d6a:	2241      	movs	r2, #65	; 0x41
 8000d6c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <fnInit+0x5c4>)
 8000d70:	2260      	movs	r2, #96	; 0x60
 8000d72:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <fnInit+0x5c4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <fnInit+0x5c4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <fnInit+0x5c4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <fnInit+0x5c4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <fnInit+0x5c4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <fnInit+0x5c8>)
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <fnInit+0x5c4>)
 8000d96:	491a      	ldr	r1, [pc, #104]	; (8000e00 <fnInit+0x5c0>)
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <fnInit+0x5cc>)
 8000d9a:	f000 ffd9 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <fnInit+0x56e>
			fnLEDsErrorState();
 8000da4:	f7ff fd36 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000da8:	f000 fa3a 	bl	8001220 <Error_Handler>
		}
		else{
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000dac:	e01f      	b.n	8000dee <fnInit+0x5ae>
			iMachineStatus = 80;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <fnInit+0x5b4>)
 8000db0:	2250      	movs	r2, #80	; 0x50
 8000db2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	2204      	movs	r2, #4
 8000db8:	4919      	ldr	r1, [pc, #100]	; (8000e20 <fnInit+0x5e0>)
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <fnInit+0x5bc>)
 8000dbc:	f003 ff78 	bl	8004cb0 <HAL_UART_Transmit>
		break;
 8000dc0:	e015      	b.n	8000dee <fnInit+0x5ae>

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <fnInit+0x5e4>)
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	2b27      	cmp	r3, #39	; 0x27
 8000dc8:	d10c      	bne.n	8000de4 <fnInit+0x5a4>
			iMachineStatus = 1;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <fnInit+0x5b4>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <fnInit+0x5e8>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C080", 4, 100);
 8000dd6:	2364      	movs	r3, #100	; 0x64
 8000dd8:	2204      	movs	r2, #4
 8000dda:	4914      	ldr	r1, [pc, #80]	; (8000e2c <fnInit+0x5ec>)
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <fnInit+0x5bc>)
 8000dde:	f003 ff67 	bl	8004cb0 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000de2:	e003      	b.n	8000dec <fnInit+0x5ac>
			fnLEDsErrorState();
 8000de4:	f7ff fd16 	bl	8000814 <fnLEDsErrorState>
			Error_Handler();
 8000de8:	f000 fa1a 	bl	8001220 <Error_Handler>
		break;
 8000dec:	bf00      	nop
	}
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000
 8000df8:	080068d0 	.word	0x080068d0
 8000dfc:	2000016c 	.word	0x2000016c
 8000e00:	200000a0 	.word	0x200000a0
 8000e04:	20000060 	.word	0x20000060
 8000e08:	20000068 	.word	0x20000068
 8000e0c:	20000038 	.word	0x20000038
 8000e10:	080068d8 	.word	0x080068d8
 8000e14:	080068e0 	.word	0x080068e0
 8000e18:	080068e8 	.word	0x080068e8
 8000e1c:	080068f0 	.word	0x080068f0
 8000e20:	080068f8 	.word	0x080068f8
 8000e24:	2000006c 	.word	0x2000006c
 8000e28:	20000001 	.word	0x20000001
 8000e2c:	08006900 	.word	0x08006900

08000e30 <fnCounts2Angle>:

//COUNTS TO ANGLE FUNCTION
float fnCounts2Angle(iCounts)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	return iCounts*fDegPerCount;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <fnCounts2Angle+0x2c>)
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d112      	bne.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (iHomingStatus != 1) {
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d006      	beq.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 8000e7a:	f7ff fce1 	bl	8000840 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e82:	f001 ff10 	bl	8002ca6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}

}
 8000e86:	e007      	b.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x38>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e8e:	f001 fef1 	bl	8002c74 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim6);
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e94:	f003 fa8a 	bl	80043ac <HAL_TIM_Base_Stop_IT>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40001000 	.word	0x40001000
 8000ea4:	20000001 	.word	0x20000001
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	20000120 	.word	0x20000120

08000eb0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10f      	bne.n	8000ee2 <HAL_TIM_IC_CaptureCallback+0x32>
			iEncCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000ecc:	701a      	strb	r2, [r3, #0]
			fEncAngle = fnCounts2Angle(iEncCount);
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ffac 	bl	8000e30 <fnCounts2Angle>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000ede:	edc3 7a00 	vstr	s15, [r3]
		}
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40000400 	.word	0x40000400
 8000ef0:	200000d4 	.word	0x200000d4
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	20000034 	.word	0x20000034

08000efc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0c:	d129      	bne.n	8000f62 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x70>)
 8000f10:	f240 620a 	movw	r2, #1546	; 0x60a
 8000f14:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x70>)
 8000f18:	2208      	movs	r2, #8
 8000f1a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f1e:	2240      	movs	r2, #64	; 0x40
 8000f20:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f24:	2241      	movs	r2, #65	; 0x41
 8000f26:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f2a:	2260      	movs	r2, #96	; 0x60
 8000f2c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x70>)
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f54:	f000 fefc 	bl	8001d50 <HAL_CAN_AddTxMessage>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8000f5e:	f000 f95f 	bl	8001220 <Error_Handler>
		}
	}
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000a0 	.word	0x200000a0
 8000f70:	20000060 	.word	0x20000060
 8000f74:	20000068 	.word	0x20000068
 8000f78:	20000038 	.word	0x20000038

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f000 fc30 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f860 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f7ff fb56 	bl	8000638 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f8c:	f000 fafa 	bl	8001584 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f90:	f000 fb74 	bl	800167c <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000f94:	f7ff facc 	bl	8000530 <MX_CAN1_Init>
  MX_TIM6_Init();
 8000f98:	f000 fa2c 	bl	80013f4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000f9c:	f000 f9d6 	bl	800134c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4923      	ldr	r1, [pc, #140]	; (8001030 <main+0xb4>)
 8000fa4:	4823      	ldr	r0, [pc, #140]	; (8001034 <main+0xb8>)
 8000fa6:	f003 ff16 	bl	8004dd6 <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <main+0xbc>)
 8000fac:	f000 fe8c 	bl	8001cc8 <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <main+0xc0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <main+0xc0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <main+0xc0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <main+0xc0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <main+0xc0>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <main+0xc0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <main+0xc4>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <main+0xc4>)
 8000fdc:	2212      	movs	r2, #18
 8000fde:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <main+0xc4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <main+0xc4>)
 8000fe8:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000fec:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <main+0xc4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <main+0xc4>)
 8000ff6:	f24b 1240 	movw	r2, #45376	; 0xb140
 8000ffa:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <main+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <main+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <main+0xc4>)
 800100a:	2201      	movs	r2, #1
 800100c:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <main+0xc4>)
 8001010:	2214      	movs	r2, #20
 8001012:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001014:	490a      	ldr	r1, [pc, #40]	; (8001040 <main+0xc4>)
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <main+0xbc>)
 8001018:	f000 fd6a 	bl	8001af0 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800101c:	2102      	movs	r1, #2
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <main+0xbc>)
 8001020:	f001 f883 	bl	800212a <HAL_CAN_ActivateNotification>

	// ENCODER TIMER START
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001024:	213c      	movs	r1, #60	; 0x3c
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <main+0xc8>)
 8001028:	f003 fa96 	bl	8004558 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800102c:	e7fe      	b.n	800102c <main+0xb0>
 800102e:	bf00      	nop
 8001030:	20000074 	.word	0x20000074
 8001034:	2000016c 	.word	0x2000016c
 8001038:	20000038 	.word	0x20000038
 800103c:	200000a0 	.word	0x200000a0
 8001040:	20000078 	.word	0x20000078
 8001044:	200000d4 	.word	0x200000d4

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0b8      	sub	sp, #224	; 0xe0
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001052:	2234      	movs	r2, #52	; 0x34
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f005 fc04 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2290      	movs	r2, #144	; 0x90
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f005 fbf5 	bl	8006864 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800107a:	f001 ff8f 	bl	8002f9c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <SystemClock_Config+0x128>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a3b      	ldr	r2, [pc, #236]	; (8001170 <SystemClock_Config+0x128>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b39      	ldr	r3, [pc, #228]	; (8001170 <SystemClock_Config+0x128>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001096:	4b37      	ldr	r3, [pc, #220]	; (8001174 <SystemClock_Config+0x12c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800109e:	4a35      	ldr	r2, [pc, #212]	; (8001174 <SystemClock_Config+0x12c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <SystemClock_Config+0x12c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010d4:	2360      	movs	r3, #96	; 0x60
 80010d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 ffb3 	bl	800305c <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010fc:	f000 f890 	bl	8001220 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001100:	f001 ff5c 	bl	8002fbc <HAL_PWREx_EnableOverDrive>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800110a:	f000 f889 	bl	8001220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800112e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001132:	2103      	movs	r1, #3
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fa3f 	bl	80035b8 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001140:	f000 f86e 	bl	8001220 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <SystemClock_Config+0x130>)
 8001146:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fc30 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001162:	f000 f85d 	bl	8001220 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	37e0      	adds	r7, #224	; 0xe0
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000
 8001178:	00200100 	.word	0x00200100

0800117c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_UART_RxCpltCallback+0x54>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d111      	bne.n	80011b2 <HAL_UART_RxCpltCallback+0x36>

		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 800118e:	2204      	movs	r2, #4
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <HAL_UART_RxCpltCallback+0x58>)
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <HAL_UART_RxCpltCallback+0x5c>)
 8001194:	f005 fb6e 	bl	8006874 <strncmp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_UART_RxCpltCallback+0x42>
			iMachineStatus = 0;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_UART_RxCpltCallback+0x60>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_UART_RxCpltCallback+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <HAL_UART_RxCpltCallback+0x68>)
 80011ac:	f003 f886 	bl	80042bc <HAL_TIM_Base_Start_IT>
 80011b0:	e005      	b.n	80011be <HAL_UART_RxCpltCallback+0x42>
		}
	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	220c      	movs	r2, #12
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <HAL_UART_RxCpltCallback+0x6c>)
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_UART_RxCpltCallback+0x70>)
 80011ba:	f003 fd79 	bl	8004cb0 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 80011be:	2204      	movs	r2, #4
 80011c0:	4905      	ldr	r1, [pc, #20]	; (80011d8 <HAL_UART_RxCpltCallback+0x5c>)
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <HAL_UART_RxCpltCallback+0x70>)
 80011c4:	f003 fe07 	bl	8004dd6 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40004800 	.word	0x40004800
 80011d4:	08006908 	.word	0x08006908
 80011d8:	20000074 	.word	0x20000074
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000001 	.word	0x20000001
 80011e4:	20000120 	.word	0x20000120
 80011e8:	08006910 	.word	0x08006910
 80011ec:	2000016c 	.word	0x2000016c

080011f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80011fc:	2100      	movs	r1, #0
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fe81 	bl	8001f06 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001208:	f001 fd4d 	bl	8002ca6 <HAL_GPIO_TogglePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000006c 	.word	0x2000006c
 8001218:	200000b8 	.word	0x200000b8
 800121c:	40020400 	.word	0x40020400

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_MspInit+0x44>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_MspInit+0x44>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_MspInit+0x44>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_MspInit+0x44>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_MspInit+0x44>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_MspInit+0x44>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <NMI_Handler+0x4>

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <MemManage_Handler+0x4>

08001286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <UsageFault_Handler+0x4>

08001292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 fad6 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <CAN1_RX0_IRQHandler+0x10>)
 80012ce:	f000 ff52 	bl	8002176 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000038 	.word	0x20000038

080012dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM3_IRQHandler+0x10>)
 80012e2:	f003 f9e7 	bl	80046b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000d4 	.word	0x200000d4

080012f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <USART3_IRQHandler+0x10>)
 80012f6:	f003 fdbd 	bl	8004e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000016c 	.word	0x2000016c

08001304 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001308:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800130c:	f001 fce6 	bl	8002cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM6_DAC_IRQHandler+0x10>)
 800131a:	f003 f9cb 	bl	80046b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000120 	.word	0x20000120

08001328 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <SystemInit+0x20>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <SystemInit+0x20>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fa82 	bl	8006864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	463b      	mov	r3, r7
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_TIM3_Init+0xa0>)
 800136c:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <MX_TIM3_Init+0xa4>)
 800136e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM3_Init+0xa0>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_TIM3_Init+0xa0>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_TIM3_Init+0xa0>)
 800137e:	2227      	movs	r2, #39	; 0x27
 8001380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM3_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_TIM3_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800138e:	2301      	movs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM3_Init+0xa0>)
 80013ba:	f003 f827 	bl	800440c <HAL_TIM_Encoder_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f7ff ff2c 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM3_Init+0xa0>)
 80013d6:	f003 fb71 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013e0:	f7ff ff1e 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000d4 	.word	0x200000d4
 80013f0:	40000400 	.word	0x40000400

080013f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_TIM6_Init+0x68>)
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <MX_TIM6_Init+0x6c>)
 8001408:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_TIM6_Init+0x68>)
 800140c:	f242 527f 	movw	r2, #9599	; 0x257f
 8001410:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_TIM6_Init+0x68>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_TIM6_Init+0x68>)
 800141a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800141e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_TIM6_Init+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001426:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_TIM6_Init+0x68>)
 8001428:	f002 fef0 	bl	800420c <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001432:	f7ff fef5 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM6_Init+0x68>)
 8001444:	f003 fb3a 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800144e:	f7ff fee7 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000120 	.word	0x20000120
 8001460:	40001000 	.word	0x40001000

08001464 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d14b      	bne.n	800151e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a28      	ldr	r2, [pc, #160]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_TIM_Encoder_MspInit+0xc8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ce:	2340      	movs	r3, #64	; 0x40
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014de:	2302      	movs	r3, #2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ea:	f001 fa17 	bl	800291c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014fe:	2302      	movs	r3, #2
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <HAL_TIM_Encoder_MspInit+0xd0>)
 800150a:	f001 fa07 	bl	800291c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	201d      	movs	r0, #29
 8001514:	f001 f939 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001518:	201d      	movs	r0, #29
 800151a:	f001 f952 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40000400 	.word	0x40000400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020800 	.word	0x40020800

08001538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_TIM_Base_MspInit+0x44>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d113      	bne.n	8001572 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2036      	movs	r0, #54	; 0x36
 8001568:	f001 f90f 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	; 0x36
 800156e:	f001 f928 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40001000 	.word	0x40001000
 8001580:	40023800 	.word	0x40023800

08001584 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_USART3_UART_Init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <MX_USART3_UART_Init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_USART3_UART_Init+0x58>)
 8001590:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART3_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_USART3_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART3_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART3_UART_Init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART3_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART3_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART3_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART3_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART3_UART_Init+0x58>)
 80015c8:	f003 fb24 	bl	8004c14 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015d2:	f7ff fe25 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000016c 	.word	0x2000016c
 80015e0:	40004800 	.word	0x40004800

080015e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_UART_MspInit+0x8c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d130      	bne.n	8001668 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_UART_MspInit+0x90>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_UART_MspInit+0x90>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_UART_MspInit+0x90>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_UART_MspInit+0x90>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_UART_MspInit+0x90>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_UART_MspInit+0x90>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001648:	2307      	movs	r3, #7
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_UART_MspInit+0x94>)
 8001654:	f001 f962 	bl	800291c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2027      	movs	r0, #39	; 0x27
 800165e:	f001 f894 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001662:	2027      	movs	r0, #39	; 0x27
 8001664:	f001 f8ad 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40004800 	.word	0x40004800
 8001674:	40023800 	.word	0x40023800
 8001678:	40020c00 	.word	0x40020c00

0800167c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001686:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	2206      	movs	r2, #6
 800168c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001690:	2202      	movs	r2, #2
 8001692:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169c:	2202      	movs	r2, #2
 800169e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c0:	f001 fb24 	bl	8002d0c <HAL_PCD_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016ca:	f7ff fda9 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001f0 	.word	0x200001f0

080016d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f8:	d141      	bne.n	800177e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a22      	ldr	r2, [pc, #136]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001712:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001724:	230a      	movs	r3, #10
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4817      	ldr	r0, [pc, #92]	; (800178c <HAL_PCD_MspInit+0xb4>)
 8001730:	f001 f8f4 	bl	800291c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4810      	ldr	r0, [pc, #64]	; (800178c <HAL_PCD_MspInit+0xb4>)
 800174a:	f001 f8e7 	bl	800291c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6353      	str	r3, [r2, #52]	; 0x34
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ba:	f7ff fdb5 	bl	8001328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f005 f82d 	bl	800681c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff fbdb 	bl	8000f7c <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80017d4:	08006948 	.word	0x08006948
  ldr r2, =_sbss
 80017d8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80017dc:	200005f8 	.word	0x200005f8

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x28>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 ffbd 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fd14 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 ffd5 	bl	80027de <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 ff9d 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000008 	.word	0x20000008
 8001868:	20000010 	.word	0x20000010
 800186c:	2000000c 	.word	0x2000000c

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000010 	.word	0x20000010
 8001894:	200005f4 	.word	0x200005f4

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200005f4 	.word	0x200005f4

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000010 	.word	0x20000010

080018f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0ed      	b.n	8001ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7fe fe42 	bl	80005a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800192c:	f7ff ffb4 	bl	8001898 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001932:	e012      	b.n	800195a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001934:	f7ff ffb0 	bl	8001898 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b0a      	cmp	r3, #10
 8001940:	d90b      	bls.n	800195a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2205      	movs	r2, #5
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0c5      	b.n	8001ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0e5      	beq.n	8001934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0202 	bic.w	r2, r2, #2
 8001976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001978:	f7ff ff8e 	bl	8001898 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197e:	e012      	b.n	80019a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001980:	f7ff ff8a 	bl	8001898 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b0a      	cmp	r3, #10
 800198c:	d90b      	bls.n	80019a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2205      	movs	r2, #5
 800199e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e09f      	b.n	8001ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e5      	bne.n	8001980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7e1b      	ldrb	r3, [r3, #24]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d108      	bne.n	80019ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e007      	b.n	80019de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7e5b      	ldrb	r3, [r3, #25]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d108      	bne.n	80019f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e007      	b.n	8001a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e9b      	ldrb	r3, [r3, #26]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0220 	orr.w	r2, r2, #32
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e007      	b.n	8001a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0220 	bic.w	r2, r2, #32
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7edb      	ldrb	r3, [r3, #27]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0210 	bic.w	r2, r2, #16
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e007      	b.n	8001a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0210 	orr.w	r2, r2, #16
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7f1b      	ldrb	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d108      	bne.n	8001a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0208 	orr.w	r2, r2, #8
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e007      	b.n	8001a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0208 	bic.w	r2, r2, #8
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7f5b      	ldrb	r3, [r3, #29]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d108      	bne.n	8001aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0204 	orr.w	r2, r2, #4
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e007      	b.n	8001ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0204 	bic.w	r2, r2, #4
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	ea42 0103 	orr.w	r1, r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b08:	7cfb      	ldrb	r3, [r7, #19]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d003      	beq.n	8001b16 <HAL_CAN_ConfigFilter+0x26>
 8001b0e:	7cfb      	ldrb	r3, [r7, #19]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 80c7 	bne.w	8001ca4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a69      	ldr	r2, [pc, #420]	; (8001cc0 <HAL_CAN_ConfigFilter+0x1d0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d001      	beq.n	8001b24 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001b22:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	4a63      	ldr	r2, [pc, #396]	; (8001cc4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b42:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	2201      	movs	r2, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d123      	bne.n	8001bd2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	401a      	ands	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3248      	adds	r2, #72	; 0x48
 8001bb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc8:	6979      	ldr	r1, [r7, #20]
 8001bca:	3348      	adds	r3, #72	; 0x48
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d122      	bne.n	8001c20 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3248      	adds	r2, #72	; 0x48
 8001c00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c16:	6979      	ldr	r1, [r7, #20]
 8001c18:	3348      	adds	r3, #72	; 0x48
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c66:	e007      	b.n	8001c78 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c96:	f023 0201 	bic.w	r2, r3, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e006      	b.n	8001cb2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40003400 	.word	0x40003400
 8001cc4:	40006400 	.word	0x40006400

08001cc8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d12e      	bne.n	8001d3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fdd0 	bl	8001898 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cfa:	e012      	b.n	8001d22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cfc:	f7ff fdcc 	bl	8001898 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b0a      	cmp	r3, #10
 8001d08:	d90b      	bls.n	8001d22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2205      	movs	r2, #5
 8001d1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e012      	b.n	8001d48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e5      	bne.n	8001cfc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e006      	b.n	8001d48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
  }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d003      	beq.n	8001d7c <HAL_CAN_AddTxMessage+0x2c>
 8001d74:	7ffb      	ldrb	r3, [r7, #31]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	f040 80b8 	bne.w	8001eec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80a0 	beq.w	8001edc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	0e1b      	lsrs	r3, r3, #24
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d907      	bls.n	8001dbc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e09e      	b.n	8001efa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3318      	adds	r3, #24
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	440b      	add	r3, r1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dfe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3318      	adds	r3, #24
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3318      	adds	r3, #24
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	440b      	add	r3, r1
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	7d1b      	ldrb	r3, [r3, #20]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d111      	bne.n	8001e4a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3318      	adds	r3, #24
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	440b      	add	r3, r1
 8001e46:	3304      	adds	r3, #4
 8001e48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3307      	adds	r3, #7
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3306      	adds	r3, #6
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3305      	adds	r3, #5
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	4313      	orrs	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	3204      	adds	r2, #4
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	6811      	ldr	r1, [r2, #0]
 8001e72:	ea43 0200 	orr.w	r2, r3, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3303      	adds	r3, #3
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	061a      	lsls	r2, r3, #24
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3301      	adds	r3, #1
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	6811      	ldr	r1, [r2, #0]
 8001ea8:	ea43 0200 	orr.w	r2, r3, r0
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001eb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3318      	adds	r3, #24
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3318      	adds	r3, #24
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e00e      	b.n	8001efa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e006      	b.n	8001efa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
  }
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f06:	b480      	push	{r7}
 8001f08:	b087      	sub	sp, #28
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d003      	beq.n	8001f2a <HAL_CAN_GetRxMessage+0x24>
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	f040 80f3 	bne.w	8002110 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10e      	bne.n	8001f4e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0e7      	b.n	800211e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d8      	b.n	800211e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	331b      	adds	r3, #27
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0204 	and.w	r2, r3, #4
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	331b      	adds	r3, #27
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0d5b      	lsrs	r3, r3, #21
 8001f9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	331b      	adds	r3, #27
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	08db      	lsrs	r3, r3, #3
 8001fb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	331b      	adds	r3, #27
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4413      	add	r3, r2
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0202 	and.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	331b      	adds	r3, #27
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	331b      	adds	r3, #27
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	331b      	adds	r3, #27
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0a1a      	lsrs	r2, r3, #8
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0c1a      	lsrs	r2, r3, #16
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3302      	adds	r3, #2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e1a      	lsrs	r2, r3, #24
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	3303      	adds	r3, #3
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4413      	add	r3, r2
 8002088:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	3304      	adds	r3, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	4413      	add	r3, r2
 80020a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0a1a      	lsrs	r2, r3, #8
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3305      	adds	r3, #5
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0c1a      	lsrs	r2, r3, #16
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3306      	adds	r3, #6
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0e1a      	lsrs	r2, r3, #24
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	3307      	adds	r3, #7
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0220 	orr.w	r2, r2, #32
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	e007      	b.n	800210c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e006      	b.n	800211e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d002      	beq.n	8002148 <HAL_CAN_ActivateNotification+0x1e>
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d109      	bne.n	800215c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e006      	b.n	800216a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b08a      	sub	sp, #40	; 0x28
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d07c      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d023      	beq.n	800220e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f983 	bl	80024e4 <HAL_CAN_TxMailbox0CompleteCallback>
 80021de:	e016      	b.n	800220e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e00c      	b.n	800220e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e002      	b.n	800220e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f989 	bl	8002520 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d024      	beq.n	8002262 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002220:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f963 	bl	80024f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002232:	e016      	b.n	8002262 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e00c      	b.n	8002262 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	e002      	b.n	8002262 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f969 	bl	8002534 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d024      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002274:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f943 	bl	800250c <HAL_CAN_TxMailbox2CompleteCallback>
 8002286:	e016      	b.n	80022b6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e00c      	b.n	80022b6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e002      	b.n	80022b6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f949 	bl	8002548 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00c      	beq.n	80022da <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f930 	bl	800255c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe ff6b 	bl	80011f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002334:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2210      	movs	r2, #16
 800233c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2208      	movs	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f912 	bl	8002584 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f8f9 	bl	8002570 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2210      	movs	r2, #16
 8002398:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8fc 	bl	8002598 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2208      	movs	r2, #8
 80023ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8f5 	bl	80025ac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d07b      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d072      	beq.n	80024bc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03e      	beq.n	80024bc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002444:	2b60      	cmp	r3, #96	; 0x60
 8002446:	d02b      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x32a>
 8002448:	2b60      	cmp	r3, #96	; 0x60
 800244a:	d82e      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 800244c:	2b50      	cmp	r3, #80	; 0x50
 800244e:	d022      	beq.n	8002496 <HAL_CAN_IRQHandler+0x320>
 8002450:	2b50      	cmp	r3, #80	; 0x50
 8002452:	d82a      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d019      	beq.n	800248c <HAL_CAN_IRQHandler+0x316>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d826      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 800245c:	2b30      	cmp	r3, #48	; 0x30
 800245e:	d010      	beq.n	8002482 <HAL_CAN_IRQHandler+0x30c>
 8002460:	2b30      	cmp	r3, #48	; 0x30
 8002462:	d822      	bhi.n	80024aa <HAL_CAN_IRQHandler+0x334>
 8002464:	2b10      	cmp	r3, #16
 8002466:	d002      	beq.n	800246e <HAL_CAN_IRQHandler+0x2f8>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d005      	beq.n	8002478 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800246c:	e01d      	b.n	80024aa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f043 0308 	orr.w	r3, r3, #8
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002476:	e019      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002480:	e014      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800248a:	e00f      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002494:	e00a      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800249e:	e005      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a8:	e000      	b.n	80024ac <HAL_CAN_IRQHandler+0x336>
            break;
 80024aa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2204      	movs	r2, #4
 80024c2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f872 	bl	80025c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <__NVIC_SetPriorityGrouping+0x40>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <__NVIC_SetPriorityGrouping+0x40>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00
 8002618:	05fa0000 	.word	0x05fa0000

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	4313      	orrs	r3, r2
         );
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff8e 	bl	8002674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff29 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff3e 	bl	800261c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff8e 	bl	80026c8 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5d 	bl	8002674 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff31 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff f848 	bl	8001898 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d008      	beq.n	8002828 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e052      	b.n	80028ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0216 	bic.w	r2, r2, #22
 8002836:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002846:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <HAL_DMA_Abort+0x62>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0208 	bic.w	r2, r2, #8
 8002866:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002878:	e013      	b.n	80028a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287a:	f7ff f80d 	bl	8001898 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b05      	cmp	r3, #5
 8002886:	d90c      	bls.n	80028a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e015      	b.n	80028ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e4      	bne.n	800287a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	223f      	movs	r2, #63	; 0x3f
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d004      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e00c      	b.n	800290e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2205      	movs	r2, #5
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e175      	b.n	8002c28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	f040 8164 	bne.w	8002c22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d005      	beq.n	8002972 <HAL_GPIO_Init+0x56>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d130      	bne.n	80029d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0201 	and.w	r2, r3, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d017      	beq.n	8002a10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d123      	bne.n	8002a64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80be 	beq.w	8002c22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_GPIO_Init+0x324>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <HAL_GPIO_Init+0x324>)
 8002aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <HAL_GPIO_Init+0x324>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002abe:	4a61      	ldr	r2, [pc, #388]	; (8002c44 <HAL_GPIO_Init+0x328>)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_GPIO_Init+0x32c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d037      	beq.n	8002b5a <HAL_GPIO_Init+0x23e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a57      	ldr	r2, [pc, #348]	; (8002c4c <HAL_GPIO_Init+0x330>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d031      	beq.n	8002b56 <HAL_GPIO_Init+0x23a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a56      	ldr	r2, [pc, #344]	; (8002c50 <HAL_GPIO_Init+0x334>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02b      	beq.n	8002b52 <HAL_GPIO_Init+0x236>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a55      	ldr	r2, [pc, #340]	; (8002c54 <HAL_GPIO_Init+0x338>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d025      	beq.n	8002b4e <HAL_GPIO_Init+0x232>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a54      	ldr	r2, [pc, #336]	; (8002c58 <HAL_GPIO_Init+0x33c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01f      	beq.n	8002b4a <HAL_GPIO_Init+0x22e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a53      	ldr	r2, [pc, #332]	; (8002c5c <HAL_GPIO_Init+0x340>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_GPIO_Init+0x22a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_GPIO_Init+0x344>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x226>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_GPIO_Init+0x348>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x222>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_GPIO_Init+0x34c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x21e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_GPIO_Init+0x350>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x21a>
 8002b32:	2309      	movs	r3, #9
 8002b34:	e012      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b36:	230a      	movs	r3, #10
 8002b38:	e010      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	e00e      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b3e:	2307      	movs	r3, #7
 8002b40:	e00c      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b42:	2306      	movs	r3, #6
 8002b44:	e00a      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b46:	2305      	movs	r3, #5
 8002b48:	e008      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x240>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	f002 0203 	and.w	r2, r2, #3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4093      	lsls	r3, r2
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b6c:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_GPIO_Init+0x328>)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9e:	4a34      	ldr	r2, [pc, #208]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc8:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_GPIO_Init+0x354>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3301      	adds	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	f67f ae86 	bls.w	800293c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40013800 	.word	0x40013800
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40020400 	.word	0x40020400
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020c00 	.word	0x40020c00
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40021400 	.word	0x40021400
 8002c60:	40021800 	.word	0x40021800
 8002c64:	40021c00 	.word	0x40021c00
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40022400 	.word	0x40022400
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	041a      	lsls	r2, r3, #16
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f8fe 	bl	8000efc <HAL_GPIO_EXTI_Callback>
  }
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40013c00 	.word	0x40013c00

08002d0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0e:	b08f      	sub	sp, #60	; 0x3c
 8002d10:	af0a      	add	r7, sp, #40	; 0x28
 8002d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e116      	b.n	8002f4c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d106      	bne.n	8002d3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7fe fccd 	bl	80016d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2203      	movs	r2, #3
 8002d42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fac7 	bl	80062f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	687e      	ldr	r6, [r7, #4]
 8002d6a:	466d      	mov	r5, sp
 8002d6c:	f106 0410 	add.w	r4, r6, #16
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d80:	1d33      	adds	r3, r6, #4
 8002d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	f003 fa5b 	bl	8006240 <USB_CoreInit>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d7      	b.n	8002f4c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fab5 	bl	8006312 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e04a      	b.n	8002e44 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	333d      	adds	r3, #61	; 0x3d
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	333c      	adds	r3, #60	; 0x3c
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3342      	adds	r3, #66	; 0x42
 8002dea:	4602      	mov	r2, r0
 8002dec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	333f      	adds	r3, #63	; 0x3f
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3344      	adds	r3, #68	; 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3348      	adds	r3, #72	; 0x48
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e2a:	7bfa      	ldrb	r2, [r7, #15]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3350      	adds	r3, #80	; 0x50
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3301      	adds	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3af      	bcc.n	8002dae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	e044      	b.n	8002ede <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	3301      	adds	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3b5      	bcc.n	8002e54 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	687e      	ldr	r6, [r7, #4]
 8002ef0:	466d      	mov	r5, sp
 8002ef2:	f106 0410 	add.w	r4, r6, #16
 8002ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f06:	1d33      	adds	r3, r6, #4
 8002f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0a:	6838      	ldr	r0, [r7, #0]
 8002f0c:	f003 fa4e 	bl	80063ac <USB_DevInit>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e014      	b.n	8002f4c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f80a 	bl	8002f54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fc08 	bl	800675a <USB_DevDisconnect>

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	10000003 	.word	0x10000003

08002f9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40007000 	.word	0x40007000

08002fbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a22      	ldr	r2, [pc, #136]	; (8003054 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fea:	f7fe fc55 	bl	8001898 <HAL_GetTick>
 8002fee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ff0:	e009      	b.n	8003006 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ff2:	f7fe fc51 	bl	8001898 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003000:	d901      	bls.n	8003006 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e022      	b.n	800304c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003012:	d1ee      	bne.n	8002ff2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003014:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 800301a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003020:	f7fe fc3a 	bl	8001898 <HAL_GetTick>
 8003024:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003026:	e009      	b.n	800303c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003028:	f7fe fc36 	bl	8001898 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003036:	d901      	bls.n	800303c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e007      	b.n	800304c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003048:	d1ee      	bne.n	8003028 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000

0800305c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e29b      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8087 	beq.w	800318e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003080:	4b96      	ldr	r3, [pc, #600]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b04      	cmp	r3, #4
 800308a:	d00c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308c:	4b93      	ldr	r3, [pc, #588]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d112      	bne.n	80030be <HAL_RCC_OscConfig+0x62>
 8003098:	4b90      	ldr	r3, [pc, #576]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a4:	d10b      	bne.n	80030be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a6:	4b8d      	ldr	r3, [pc, #564]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d06c      	beq.n	800318c <HAL_RCC_OscConfig+0x130>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d168      	bne.n	800318c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e275      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x7a>
 80030c8:	4b84      	ldr	r3, [pc, #528]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a83      	ldr	r2, [pc, #524]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80030ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e02e      	b.n	8003134 <HAL_RCC_OscConfig+0xd8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x9c>
 80030de:	4b7f      	ldr	r3, [pc, #508]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7e      	ldr	r2, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80030e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b7c      	ldr	r3, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a7b      	ldr	r2, [pc, #492]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80030f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e01d      	b.n	8003134 <HAL_RCC_OscConfig+0xd8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0xc0>
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b73      	ldr	r3, [pc, #460]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a72      	ldr	r2, [pc, #456]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xd8>
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6e      	ldr	r2, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b6c      	ldr	r3, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6b      	ldr	r2, [pc, #428]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fbac 	bl	8001898 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fba8 	bl	8001898 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e229      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b61      	ldr	r3, [pc, #388]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xe8>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fb98 	bl	8001898 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fb94 	bl	8001898 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e215      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	4b57      	ldr	r3, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x110>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d069      	beq.n	800326e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800319a:	4b50      	ldr	r3, [pc, #320]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x190>
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1e9      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	493d      	ldr	r1, [pc, #244]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e040      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d023      	beq.n	800323c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fb4a 	bl	8001898 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe fb46 	bl	8001898 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1c7      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4929      	ldr	r1, [pc, #164]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
 800323a:	e018      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a26      	ldr	r2, [pc, #152]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe fb26 	bl	8001898 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe fb22 	bl	8001898 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1a3      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d038      	beq.n	80032ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003286:	4a15      	ldr	r2, [pc, #84]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe fb03 	bl	8001898 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe faff 	bl	8001898 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e180      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x23a>
 80032b4:	e01a      	b.n	80032ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	4a08      	ldr	r2, [pc, #32]	; (80032dc <HAL_RCC_OscConfig+0x280>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe fae9 	bl	8001898 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe fae5 	bl	8001898 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d903      	bls.n	80032e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e166      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
 80032dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b92      	ldr	r3, [pc, #584]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a4 	beq.w	8003442 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b8c      	ldr	r3, [pc, #560]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b89      	ldr	r3, [pc, #548]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a88      	ldr	r2, [pc, #544]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b86      	ldr	r3, [pc, #536]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	4b83      	ldr	r3, [pc, #524]	; (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d118      	bne.n	8003360 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800332e:	4b80      	ldr	r3, [pc, #512]	; (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7f      	ldr	r2, [pc, #508]	; (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7fe faad 	bl	8001898 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fe faa9 	bl	8001898 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b64      	cmp	r3, #100	; 0x64
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e12a      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003354:	4b76      	ldr	r3, [pc, #472]	; (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x31a>
 8003368:	4b70      	ldr	r3, [pc, #448]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a6f      	ldr	r2, [pc, #444]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
 8003374:	e02d      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x33c>
 800337e:	4b6b      	ldr	r3, [pc, #428]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a6a      	ldr	r2, [pc, #424]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	4b68      	ldr	r3, [pc, #416]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a67      	ldr	r2, [pc, #412]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	e01c      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x35e>
 80033a0:	4b62      	ldr	r3, [pc, #392]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a61      	ldr	r2, [pc, #388]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	4b5f      	ldr	r3, [pc, #380]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a5e      	ldr	r2, [pc, #376]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	e00b      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
 80033ba:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a5b      	ldr	r2, [pc, #364]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a58      	ldr	r2, [pc, #352]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d015      	beq.n	8003406 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fe fa5d 	bl	8001898 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fe fa59 	bl	8001898 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0d8      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	4b4c      	ldr	r3, [pc, #304]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ee      	beq.n	80033e2 <HAL_RCC_OscConfig+0x386>
 8003404:	e014      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe fa47 	bl	8001898 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fa43 	bl	8001898 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0c2      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a3c      	ldr	r2, [pc, #240]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80ae 	beq.w	80035a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d06d      	beq.n	8003534 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d14b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fa14 	bl	8001898 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fa10 	bl	8001898 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e091      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	071b      	lsls	r3, r3, #28
 80034be:	491b      	ldr	r1, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe f9e2 	bl	8001898 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe f9de 	bl	8001898 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e05f      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x47c>
 80034f6:	e057      	b.n	80035a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0b      	ldr	r2, [pc, #44]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe f9c8 	bl	8001898 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fe f9c4 	bl	8001898 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e045      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x4b0>
 800352a:	e03d      	b.n	80035a8 <HAL_RCC_OscConfig+0x54c>
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003534:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <HAL_RCC_OscConfig+0x558>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d030      	beq.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d129      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d122      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800356a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800356c:	4293      	cmp	r3, r2
 800356e:	d119      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d10f      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800

080035b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0d0      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d910      	bls.n	8003600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b67      	ldr	r3, [pc, #412]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 020f 	bic.w	r2, r3, #15
 80035e6:	4965      	ldr	r1, [pc, #404]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b63      	ldr	r3, [pc, #396]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b8      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003618:	4b59      	ldr	r3, [pc, #356]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a58      	ldr	r2, [pc, #352]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800361e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003630:	4b53      	ldr	r3, [pc, #332]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a52      	ldr	r2, [pc, #328]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800363a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b50      	ldr	r3, [pc, #320]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	494d      	ldr	r1, [pc, #308]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d040      	beq.n	80036dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b47      	ldr	r3, [pc, #284]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d115      	bne.n	800369a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	4b41      	ldr	r3, [pc, #260]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e073      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368a:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06b      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4936      	ldr	r1, [pc, #216]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ac:	f7fe f8f4 	bl	8001898 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7fe f8f0 	bl	8001898 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e053      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b2d      	ldr	r3, [pc, #180]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d210      	bcs.n	800370c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 020f 	bic.w	r2, r3, #15
 80036f2:	4922      	ldr	r1, [pc, #136]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e032      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4916      	ldr	r1, [pc, #88]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	490e      	ldr	r1, [pc, #56]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800374a:	f000 f821 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	490a      	ldr	r1, [pc, #40]	; (8003784 <HAL_RCC_ClockConfig+0x1cc>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	4a09      	ldr	r2, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1d0>)
 8003764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_RCC_ClockConfig+0x1d4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe f850 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00
 8003780:	40023800 	.word	0x40023800
 8003784:	08006920 	.word	0x08006920
 8003788:	20000008 	.word	0x20000008
 800378c:	2000000c 	.word	0x2000000c

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a8:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d00d      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x40>
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	f200 80bd 	bhi.w	8003934 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x34>
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x3a>
 80037c2:	e0b7      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037c6:	60bb      	str	r3, [r7, #8]
      break;
 80037c8:	e0b7      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ca:	4b61      	ldr	r3, [pc, #388]	; (8003950 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037cc:	60bb      	str	r3, [r7, #8]
      break;
 80037ce:	e0b4      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d0:	4b5d      	ldr	r3, [pc, #372]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037da:	4b5b      	ldr	r3, [pc, #364]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d04d      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b58      	ldr	r3, [pc, #352]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	461a      	mov	r2, r3
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	ea02 0800 	and.w	r8, r2, r0
 80037fe:	ea03 0901 	and.w	r9, r3, r1
 8003802:	4640      	mov	r0, r8
 8003804:	4649      	mov	r1, r9
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	014b      	lsls	r3, r1, #5
 8003810:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003814:	0142      	lsls	r2, r0, #5
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	ebb0 0008 	subs.w	r0, r0, r8
 800381e:	eb61 0109 	sbc.w	r1, r1, r9
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	018b      	lsls	r3, r1, #6
 800382c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003830:	0182      	lsls	r2, r0, #6
 8003832:	1a12      	subs	r2, r2, r0
 8003834:	eb63 0301 	sbc.w	r3, r3, r1
 8003838:	f04f 0000 	mov.w	r0, #0
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	00d9      	lsls	r1, r3, #3
 8003842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003846:	00d0      	lsls	r0, r2, #3
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	eb12 0208 	adds.w	r2, r2, r8
 8003850:	eb43 0309 	adc.w	r3, r3, r9
 8003854:	f04f 0000 	mov.w	r0, #0
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	0259      	lsls	r1, r3, #9
 800385e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003862:	0250      	lsls	r0, r2, #9
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	461a      	mov	r2, r3
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f7fc fce0 	bl	8000238 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e04a      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	099b      	lsrs	r3, r3, #6
 8003888:	461a      	mov	r2, r3
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003892:	f04f 0100 	mov.w	r1, #0
 8003896:	ea02 0400 	and.w	r4, r2, r0
 800389a:	ea03 0501 	and.w	r5, r3, r1
 800389e:	4620      	mov	r0, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	014b      	lsls	r3, r1, #5
 80038ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038b0:	0142      	lsls	r2, r0, #5
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	1b00      	subs	r0, r0, r4
 80038b8:	eb61 0105 	sbc.w	r1, r1, r5
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	018b      	lsls	r3, r1, #6
 80038c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038ca:	0182      	lsls	r2, r0, #6
 80038cc:	1a12      	subs	r2, r2, r0
 80038ce:	eb63 0301 	sbc.w	r3, r3, r1
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	00d9      	lsls	r1, r3, #3
 80038dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e0:	00d0      	lsls	r0, r2, #3
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	1912      	adds	r2, r2, r4
 80038e8:	eb45 0303 	adc.w	r3, r5, r3
 80038ec:	f04f 0000 	mov.w	r0, #0
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	0299      	lsls	r1, r3, #10
 80038f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038fa:	0290      	lsls	r0, r2, #10
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	461a      	mov	r2, r3
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	f7fc fc94 	bl	8000238 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	3301      	adds	r3, #1
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	60bb      	str	r3, [r7, #8]
      break;
 8003932:	e002      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003936:	60bb      	str	r3, [r7, #8]
      break;
 8003938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393a:	68bb      	ldr	r3, [r7, #8]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	00f42400 	.word	0x00f42400
 8003950:	007a1200 	.word	0x007a1200

08003954 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_RCC_GetHCLKFreq+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000008 	.word	0x20000008

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003970:	f7ff fff0 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0a9b      	lsrs	r3, r3, #10
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4903      	ldr	r1, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	08006930 	.word	0x08006930

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003998:	f7ff ffdc 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0b5b      	lsrs	r3, r3, #13
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08006930 	.word	0x08006930

080039bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d012      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039e4:	4b69      	ldr	r3, [pc, #420]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039ee:	6093      	str	r3, [r2, #8]
 80039f0:	4b66      	ldr	r3, [pc, #408]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	4964      	ldr	r1, [pc, #400]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a16:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	4959      	ldr	r1, [pc, #356]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a34:	d101      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a52:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	494a      	ldr	r1, [pc, #296]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 808b 	beq.w	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8003aac:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ab8:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fd fee8 	bl	8001898 <HAL_GetTick>
 8003ac8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003acc:	f7fd fee4 	bl	8001898 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e38f      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ade:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aea:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d035      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d02e      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d114      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd feac 	bl	8001898 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fd fea8 	bl	8001898 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e351      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ee      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b72:	d111      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b82:	400b      	ands	r3, r1
 8003b84:	4901      	ldr	r1, [pc, #4]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000
 8003b94:	0ffffcff 	.word	0x0ffffcff
 8003b98:	4bb3      	ldr	r3, [pc, #716]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4ab2      	ldr	r2, [pc, #712]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ba2:	6093      	str	r3, [r2, #8]
 8003ba4:	4bb0      	ldr	r3, [pc, #704]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	49ad      	ldr	r1, [pc, #692]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d010      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bc2:	4ba9      	ldr	r3, [pc, #676]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc8:	4aa7      	ldr	r2, [pc, #668]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bd2:	4ba5      	ldr	r3, [pc, #660]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	49a2      	ldr	r1, [pc, #648]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf0:	4b9d      	ldr	r3, [pc, #628]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfe:	499a      	ldr	r1, [pc, #616]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c12:	4b95      	ldr	r3, [pc, #596]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c20:	4991      	ldr	r1, [pc, #580]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c34:	4b8c      	ldr	r3, [pc, #560]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c42:	4989      	ldr	r1, [pc, #548]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c56:	4b84      	ldr	r3, [pc, #528]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4980      	ldr	r1, [pc, #512]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c78:	4b7b      	ldr	r3, [pc, #492]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f023 0203 	bic.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	4978      	ldr	r1, [pc, #480]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c9a:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f023 020c 	bic.w	r2, r3, #12
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca8:	496f      	ldr	r1, [pc, #444]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	4967      	ldr	r1, [pc, #412]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cde:	4b62      	ldr	r3, [pc, #392]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	495e      	ldr	r1, [pc, #376]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	4956      	ldr	r1, [pc, #344]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d22:	4b51      	ldr	r3, [pc, #324]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d44:	4b48      	ldr	r3, [pc, #288]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d52:	4945      	ldr	r1, [pc, #276]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d66:	4b40      	ldr	r3, [pc, #256]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d74:	493c      	ldr	r1, [pc, #240]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d88:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d96:	4934      	ldr	r1, [pc, #208]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d011      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003daa:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db8:	492b      	ldr	r1, [pc, #172]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df8:	491b      	ldr	r1, [pc, #108]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e0c:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1c:	4912      	ldr	r1, [pc, #72]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00b      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	4909      	ldr	r1, [pc, #36]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	e002      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	4986      	ldr	r1, [pc, #536]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e80:	4b81      	ldr	r3, [pc, #516]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e90:	497d      	ldr	r1, [pc, #500]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d006      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80d6 	beq.w	8004058 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003eac:	4b76      	ldr	r3, [pc, #472]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a75      	ldr	r2, [pc, #468]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fd fcee 	bl	8001898 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ec0:	f7fd fcea 	bl	8001898 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e195      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ed2:	4b6d      	ldr	r3, [pc, #436]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d021      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11d      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ef2:	4b65      	ldr	r3, [pc, #404]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f00:	4b61      	ldr	r3, [pc, #388]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f06:	0e1b      	lsrs	r3, r3, #24
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	019a      	lsls	r2, r3, #6
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	071b      	lsls	r3, r3, #28
 8003f26:	4958      	ldr	r1, [pc, #352]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02e      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f58:	d129      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f5a:	4b4b      	ldr	r3, [pc, #300]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f68:	4b47      	ldr	r3, [pc, #284]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6e:	0f1b      	lsrs	r3, r3, #28
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	019a      	lsls	r2, r3, #6
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	071b      	lsls	r3, r3, #28
 8003f8e:	493e      	ldr	r1, [pc, #248]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f96:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9c:	f023 021f 	bic.w	r2, r3, #31
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	4938      	ldr	r1, [pc, #224]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fba:	4b33      	ldr	r3, [pc, #204]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc0:	0e1b      	lsrs	r3, r3, #24
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fce:	0f1b      	lsrs	r3, r3, #28
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	019a      	lsls	r2, r3, #6
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	071b      	lsls	r3, r3, #28
 8003fee:	4926      	ldr	r1, [pc, #152]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d011      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	019a      	lsls	r2, r3, #6
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	071b      	lsls	r3, r3, #28
 800401e:	491a      	ldr	r1, [pc, #104]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a17      	ldr	r2, [pc, #92]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004032:	f7fd fc31 	bl	8001898 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800403a:	f7fd fc2d 	bl	8001898 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b64      	cmp	r3, #100	; 0x64
 8004046:	d901      	bls.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0d8      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b01      	cmp	r3, #1
 800405c:	f040 80ce 	bne.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd fc14 	bl	8001898 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004072:	e00b      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004074:	f7fd fc10 	bl	8001898 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d904      	bls.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0bb      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800408c:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004098:	d0ec      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d02e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d12a      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040c2:	4b51      	ldr	r3, [pc, #324]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040d0:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	0f1b      	lsrs	r3, r3, #28
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	019a      	lsls	r2, r3, #6
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	061b      	lsls	r3, r3, #24
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	071b      	lsls	r3, r3, #28
 80040f6:	4944      	ldr	r1, [pc, #272]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040fe:	4b42      	ldr	r3, [pc, #264]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004104:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	493d      	ldr	r1, [pc, #244]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d022      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800412c:	d11d      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	0e1b      	lsrs	r3, r3, #24
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	0f1b      	lsrs	r3, r3, #28
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	019a      	lsls	r2, r3, #6
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	431a      	orrs	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	071b      	lsls	r3, r3, #28
 8004162:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d028      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004176:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	0e1b      	lsrs	r3, r3, #24
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004184:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	019a      	lsls	r2, r3, #6
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	071b      	lsls	r3, r3, #28
 80041aa:	4917      	ldr	r1, [pc, #92]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	4911      	ldr	r1, [pc, #68]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0e      	ldr	r2, [pc, #56]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fd fb60 	bl	8001898 <HAL_GetTick>
 80041d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041dc:	f7fd fb5c 	bl	8001898 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e007      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fa:	d1ef      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800

0800420c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e049      	b.n	80042b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd f980 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f000 fb70 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e054      	b.n	800437e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a26      	ldr	r2, [pc, #152]	; (800438c <HAL_TIM_Base_Start_IT+0xd0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d022      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x80>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d01d      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x80>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a22      	ldr	r2, [pc, #136]	; (8004390 <HAL_TIM_Base_Start_IT+0xd4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d018      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x80>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a21      	ldr	r2, [pc, #132]	; (8004394 <HAL_TIM_Base_Start_IT+0xd8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x80>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <HAL_TIM_Base_Start_IT+0xdc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x80>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <HAL_TIM_Base_Start_IT+0xe0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x80>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x80>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d115      	bne.n	8004368 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_TIM_Base_Start_IT+0xec>)
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b06      	cmp	r3, #6
 800434c:	d015      	beq.n	800437a <HAL_TIM_Base_Start_IT+0xbe>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d011      	beq.n	800437a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	e008      	b.n	800437a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e000      	b.n	800437c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40001800 	.word	0x40001800
 80043a8:	00010007 	.word	0x00010007

080043ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10f      	bne.n	80043f4 <HAL_TIM_Base_Stop_IT+0x48>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	f240 4344 	movw	r3, #1092	; 0x444
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_Base_Stop_IT+0x48>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e08f      	b.n	8004540 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fd f815 	bl	8001464 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6899      	ldr	r1, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b3e      	ldr	r3, [pc, #248]	; (8004548 <HAL_TIM_Encoder_Init+0x13c>)
 800444e:	400b      	ands	r3, r1
 8004450:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f000 fa67 	bl	8004930 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <HAL_TIM_Encoder_Init+0x140>)
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	4313      	orrs	r3, r2
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4b2b      	ldr	r3, [pc, #172]	; (8004550 <HAL_TIM_Encoder_Init+0x144>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_TIM_Encoder_Init+0x148>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	4313      	orrs	r3, r2
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	011a      	lsls	r2, r3, #4
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	031b      	lsls	r3, r3, #12
 80044cc:	4313      	orrs	r3, r2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4313      	orrs	r3, r2
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	fffebff8 	.word	0xfffebff8
 800454c:	fffffcfc 	.word	0xfffffcfc
 8004550:	fffff3f3 	.word	0xfffff3f3
 8004554:	ffff0f0f 	.word	0xffff0f0f

08004558 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004568:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004570:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004578:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004580:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d110      	bne.n	80045aa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d102      	bne.n	8004594 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800458e:	7b7b      	ldrb	r3, [r7, #13]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e089      	b.n	80046ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a8:	e031      	b.n	800460e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d110      	bne.n	80045d2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045b6:	7b3b      	ldrb	r3, [r7, #12]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e075      	b.n	80046ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d0:	e01d      	b.n	800460e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d108      	bne.n	80045ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d8:	7bbb      	ldrb	r3, [r7, #14]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045de:	7b7b      	ldrb	r3, [r7, #13]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d102      	bne.n	80045ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045e4:	7b3b      	ldrb	r3, [r7, #12]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d001      	beq.n	80045ee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e05e      	b.n	80046ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d010      	beq.n	800463c <HAL_TIM_Encoder_Start_IT+0xe4>
 800461a:	e01f      	b.n	800465c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fa23 	bl	8004a70 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0202 	orr.w	r2, r2, #2
 8004638:	60da      	str	r2, [r3, #12]
      break;
 800463a:	e02e      	b.n	800469a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2201      	movs	r2, #1
 8004642:	2104      	movs	r1, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fa13 	bl	8004a70 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0204 	orr.w	r2, r2, #4
 8004658:	60da      	str	r2, [r3, #12]
      break;
 800465a:	e01e      	b.n	800469a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fa03 	bl	8004a70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	2104      	movs	r1, #4
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f9fc 	bl	8004a70 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0202 	orr.w	r2, r2, #2
 8004686:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0204 	orr.w	r2, r2, #4
 8004696:	60da      	str	r2, [r3, #12]
      break;
 8004698:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0202 	mvn.w	r2, #2
 80046e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fbda 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8f7 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8fe 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d122      	bne.n	8004764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d11b      	bne.n	8004764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0204 	mvn.w	r2, #4
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc fbb0 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8cd 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8d4 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b08      	cmp	r3, #8
 8004770:	d122      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b08      	cmp	r3, #8
 800477e:	d11b      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0208 	mvn.w	r2, #8
 8004788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2204      	movs	r2, #4
 800478e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc fb86 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 80047a4:	e005      	b.n	80047b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8a3 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f8aa 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d122      	bne.n	800480c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d11b      	bne.n	800480c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0210 	mvn.w	r2, #16
 80047dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2208      	movs	r2, #8
 80047e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fc fb5c 	bl	8000eb0 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f879 	bl	80048f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f880 	bl	8004906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d10e      	bne.n	8004838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d107      	bne.n	8004838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0201 	mvn.w	r2, #1
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fb14 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d10e      	bne.n	8004864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b80      	cmp	r3, #128	; 0x80
 8004852:	d107      	bne.n	8004864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9c4 	bl	8004bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d10e      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b80      	cmp	r3, #128	; 0x80
 8004880:	d107      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f9b7 	bl	8004c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f82e 	bl	800491a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d10e      	bne.n	80048ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0220 	mvn.w	r2, #32
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f977 	bl	8004bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3b      	ldr	r2, [pc, #236]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3a      	ldr	r2, [pc, #232]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d108      	bne.n	8004982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d027      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d023      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a28      	ldr	r2, [pc, #160]	; (8004a58 <TIM_Base_SetConfig+0x128>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <TIM_Base_SetConfig+0x12c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <TIM_Base_SetConfig+0x130>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <TIM_Base_SetConfig+0x134>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <TIM_Base_SetConfig+0x138>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <TIM_Base_SetConfig+0x13c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0xf8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40010400 	.word	0x40010400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	40001800 	.word	0x40001800
 8004a68:	40001c00 	.word	0x40001c00
 8004a6c:	40002000 	.word	0x40002000

08004a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2201      	movs	r2, #1
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	401a      	ands	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1a      	ldr	r2, [r3, #32]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e06d      	b.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d022      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d01d      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00e      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10c      	bne.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40001800 	.word	0x40001800

08004bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e040      	b.n	8004ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fcd4 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fc18 	bl	8005488 <UART_SetConfig>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e022      	b.n	8004ca8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fe6e 	bl	800594c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fef5 	bl	8005a90 <UART_CheckIdleState>
 8004ca6:	4603      	mov	r3, r0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	; 0x28
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	f040 8081 	bne.w	8004dcc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_UART_Transmit+0x26>
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e079      	b.n	8004dce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_UART_Transmit+0x38>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e072      	b.n	8004dce <HAL_UART_Transmit+0x11e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2221      	movs	r2, #33	; 0x21
 8004cfc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cfe:	f7fc fdcb 	bl	8001898 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1c:	d108      	bne.n	8004d30 <HAL_UART_Transmit+0x80>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e003      	b.n	8004d38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d40:	e02c      	b.n	8004d9c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2180      	movs	r1, #128	; 0x80
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fee8 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e038      	b.n	8004dce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3302      	adds	r3, #2
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e007      	b.n	8004d8a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1cc      	bne.n	8004d42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2140      	movs	r1, #64	; 0x40
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 feb5 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e005      	b.n	8004dce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e000      	b.n	8004dce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b08a      	sub	sp, #40	; 0x28
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	4613      	mov	r3, r2
 8004de2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d13d      	bne.n	8004e68 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_UART_Receive_IT+0x22>
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e036      	b.n	8004e6a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Receive_IT+0x34>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e02f      	b.n	8004e6a <HAL_UART_Receive_IT+0x94>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d018      	beq.n	8004e58 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	69f9      	ldr	r1, [r7, #28]
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e6      	bne.n	8004e26 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 ff24 	bl	8005cac <UART_Start_Receive_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	e000      	b.n	8004e6a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3728      	adds	r7, #40	; 0x28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b0ba      	sub	sp, #232	; 0xe8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d115      	bne.n	8004edc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00f      	beq.n	8004edc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 82a4 	beq.w	800541a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
      }
      return;
 8004eda:	e29e      	b.n	800541a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8117 	beq.w	8005114 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ef6:	4b85      	ldr	r3, [pc, #532]	; (800510c <HAL_UART_IRQHandler+0x298>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 810a 	beq.w	8005114 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d011      	beq.n	8004f30 <HAL_UART_IRQHandler+0xbc>
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d011      	beq.n	8004f60 <HAL_UART_IRQHandler+0xec>
 8004f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00b      	beq.n	8004f60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d011      	beq.n	8004f90 <HAL_UART_IRQHandler+0x11c>
 8004f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f86:	f043 0202 	orr.w	r2, r3, #2
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc2:	f043 0208 	orr.w	r2, r3, #8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d012      	beq.n	8004ffe <HAL_UART_IRQHandler+0x18a>
 8004fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00c      	beq.n	8004ffe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff4:	f043 0220 	orr.w	r2, r3, #32
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 820a 	beq.w	800541e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d005      	beq.n	8005056 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800504a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04f      	beq.n	80050f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fef2 	bl	8005e40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d141      	bne.n	80050ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005096:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800509a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1d9      	bne.n	800506a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d013      	beq.n	80050e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <HAL_UART_IRQHandler+0x29c>)
 80050c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fc03 	bl	80028d6 <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d017      	beq.n	8005106 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80050e0:	4610      	mov	r0, r2
 80050e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e00f      	b.n	8005106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f9ae 	bl	8005448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e00b      	b.n	8005106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9aa 	bl	8005448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e007      	b.n	8005106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f9a6 	bl	8005448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005104:	e18b      	b.n	800541e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005106:	bf00      	nop
    return;
 8005108:	e189      	b.n	800541e <HAL_UART_IRQHandler+0x5aa>
 800510a:	bf00      	nop
 800510c:	04000120 	.word	0x04000120
 8005110:	08005f07 	.word	0x08005f07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 8144 	bne.w	80053a6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800511e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 813d 	beq.w	80053a6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8136 	beq.w	80053a6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2210      	movs	r2, #16
 8005140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	f040 80b2 	bne.w	80052b6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800515e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 815d 	beq.w	8005422 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800516e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005172:	429a      	cmp	r2, r3
 8005174:	f080 8155 	bcs.w	8005422 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800517e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518c:	f000 8085 	beq.w	800529a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1da      	bne.n	8005190 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005202:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005206:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e1      	bne.n	80051da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800523a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800523c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005240:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e3      	bne.n	8005216 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526a:	f023 0310 	bic.w	r3, r3, #16
 800526e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800527c:	65bb      	str	r3, [r7, #88]	; 0x58
 800527e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e4      	bne.n	800525a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd faae 	bl	80027f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f8d4 	bl	800545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052b4:	e0b5      	b.n	8005422 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80a7 	beq.w	8005426 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80052d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a2 	beq.w	8005426 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
 8005306:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800530a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e4      	bne.n	80052e2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	623b      	str	r3, [r7, #32]
   return(result);
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800533c:	633a      	str	r2, [r7, #48]	; 0x30
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0310 	bic.w	r3, r3, #16
 8005376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	617b      	str	r3, [r7, #20]
   return(result);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e4      	bne.n	8005362 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f85c 	bl	800545c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053a4:	e03f      	b.n	8005426 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00e      	beq.n	80053d0 <HAL_UART_IRQHandler+0x55c>
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f853 	bl	8005474 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ce:	e02d      	b.n	800542c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
    }
    return;
 80053f8:	e017      	b.n	800542a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d012      	beq.n	800542c <HAL_UART_IRQHandler+0x5b8>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fd8d 	bl	8005f32 <UART_EndTransmit_IT>
    return;
 8005418:	e008      	b.n	800542c <HAL_UART_IRQHandler+0x5b8>
      return;
 800541a:	bf00      	nop
 800541c:	e006      	b.n	800542c <HAL_UART_IRQHandler+0x5b8>
    return;
 800541e:	bf00      	nop
 8005420:	e004      	b.n	800542c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005422:	bf00      	nop
 8005424:	e002      	b.n	800542c <HAL_UART_IRQHandler+0x5b8>
      return;
 8005426:	bf00      	nop
 8005428:	e000      	b.n	800542c <HAL_UART_IRQHandler+0x5b8>
    return;
 800542a:	bf00      	nop
  }

}
 800542c:	37e8      	adds	r7, #232	; 0xe8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop

08005434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4ba7      	ldr	r3, [pc, #668]	; (8005750 <UART_SetConfig+0x2c8>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a95      	ldr	r2, [pc, #596]	; (8005754 <UART_SetConfig+0x2cc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d120      	bne.n	8005546 <UART_SetConfig+0xbe>
 8005504:	4b94      	ldr	r3, [pc, #592]	; (8005758 <UART_SetConfig+0x2d0>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d816      	bhi.n	8005540 <UART_SetConfig+0xb8>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x90>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	08005529 	.word	0x08005529
 800551c:	08005535 	.word	0x08005535
 8005520:	0800552f 	.word	0x0800552f
 8005524:	0800553b 	.word	0x0800553b
 8005528:	2301      	movs	r3, #1
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	e14f      	b.n	80057ce <UART_SetConfig+0x346>
 800552e:	2302      	movs	r3, #2
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	e14c      	b.n	80057ce <UART_SetConfig+0x346>
 8005534:	2304      	movs	r3, #4
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e149      	b.n	80057ce <UART_SetConfig+0x346>
 800553a:	2308      	movs	r3, #8
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e146      	b.n	80057ce <UART_SetConfig+0x346>
 8005540:	2310      	movs	r3, #16
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e143      	b.n	80057ce <UART_SetConfig+0x346>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a84      	ldr	r2, [pc, #528]	; (800575c <UART_SetConfig+0x2d4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d132      	bne.n	80055b6 <UART_SetConfig+0x12e>
 8005550:	4b81      	ldr	r3, [pc, #516]	; (8005758 <UART_SetConfig+0x2d0>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b0c      	cmp	r3, #12
 800555c:	d828      	bhi.n	80055b0 <UART_SetConfig+0x128>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0xdc>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005599 	.word	0x08005599
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055b1 	.word	0x080055b1
 8005570:	080055b1 	.word	0x080055b1
 8005574:	080055a5 	.word	0x080055a5
 8005578:	080055b1 	.word	0x080055b1
 800557c:	080055b1 	.word	0x080055b1
 8005580:	080055b1 	.word	0x080055b1
 8005584:	0800559f 	.word	0x0800559f
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055b1 	.word	0x080055b1
 8005594:	080055ab 	.word	0x080055ab
 8005598:	2300      	movs	r3, #0
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e117      	b.n	80057ce <UART_SetConfig+0x346>
 800559e:	2302      	movs	r3, #2
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e114      	b.n	80057ce <UART_SetConfig+0x346>
 80055a4:	2304      	movs	r3, #4
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e111      	b.n	80057ce <UART_SetConfig+0x346>
 80055aa:	2308      	movs	r3, #8
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e10e      	b.n	80057ce <UART_SetConfig+0x346>
 80055b0:	2310      	movs	r3, #16
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e10b      	b.n	80057ce <UART_SetConfig+0x346>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a69      	ldr	r2, [pc, #420]	; (8005760 <UART_SetConfig+0x2d8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d120      	bne.n	8005602 <UART_SetConfig+0x17a>
 80055c0:	4b65      	ldr	r3, [pc, #404]	; (8005758 <UART_SetConfig+0x2d0>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055ca:	2b30      	cmp	r3, #48	; 0x30
 80055cc:	d013      	beq.n	80055f6 <UART_SetConfig+0x16e>
 80055ce:	2b30      	cmp	r3, #48	; 0x30
 80055d0:	d814      	bhi.n	80055fc <UART_SetConfig+0x174>
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d009      	beq.n	80055ea <UART_SetConfig+0x162>
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d810      	bhi.n	80055fc <UART_SetConfig+0x174>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <UART_SetConfig+0x15c>
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d006      	beq.n	80055f0 <UART_SetConfig+0x168>
 80055e2:	e00b      	b.n	80055fc <UART_SetConfig+0x174>
 80055e4:	2300      	movs	r3, #0
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e0f1      	b.n	80057ce <UART_SetConfig+0x346>
 80055ea:	2302      	movs	r3, #2
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e0ee      	b.n	80057ce <UART_SetConfig+0x346>
 80055f0:	2304      	movs	r3, #4
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e0eb      	b.n	80057ce <UART_SetConfig+0x346>
 80055f6:	2308      	movs	r3, #8
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e0e8      	b.n	80057ce <UART_SetConfig+0x346>
 80055fc:	2310      	movs	r3, #16
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e0e5      	b.n	80057ce <UART_SetConfig+0x346>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a57      	ldr	r2, [pc, #348]	; (8005764 <UART_SetConfig+0x2dc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d120      	bne.n	800564e <UART_SetConfig+0x1c6>
 800560c:	4b52      	ldr	r3, [pc, #328]	; (8005758 <UART_SetConfig+0x2d0>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005616:	2bc0      	cmp	r3, #192	; 0xc0
 8005618:	d013      	beq.n	8005642 <UART_SetConfig+0x1ba>
 800561a:	2bc0      	cmp	r3, #192	; 0xc0
 800561c:	d814      	bhi.n	8005648 <UART_SetConfig+0x1c0>
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d009      	beq.n	8005636 <UART_SetConfig+0x1ae>
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d810      	bhi.n	8005648 <UART_SetConfig+0x1c0>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <UART_SetConfig+0x1a8>
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d006      	beq.n	800563c <UART_SetConfig+0x1b4>
 800562e:	e00b      	b.n	8005648 <UART_SetConfig+0x1c0>
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
 8005634:	e0cb      	b.n	80057ce <UART_SetConfig+0x346>
 8005636:	2302      	movs	r3, #2
 8005638:	77fb      	strb	r3, [r7, #31]
 800563a:	e0c8      	b.n	80057ce <UART_SetConfig+0x346>
 800563c:	2304      	movs	r3, #4
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e0c5      	b.n	80057ce <UART_SetConfig+0x346>
 8005642:	2308      	movs	r3, #8
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e0c2      	b.n	80057ce <UART_SetConfig+0x346>
 8005648:	2310      	movs	r3, #16
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e0bf      	b.n	80057ce <UART_SetConfig+0x346>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a45      	ldr	r2, [pc, #276]	; (8005768 <UART_SetConfig+0x2e0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d125      	bne.n	80056a4 <UART_SetConfig+0x21c>
 8005658:	4b3f      	ldr	r3, [pc, #252]	; (8005758 <UART_SetConfig+0x2d0>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005666:	d017      	beq.n	8005698 <UART_SetConfig+0x210>
 8005668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800566c:	d817      	bhi.n	800569e <UART_SetConfig+0x216>
 800566e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005672:	d00b      	beq.n	800568c <UART_SetConfig+0x204>
 8005674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005678:	d811      	bhi.n	800569e <UART_SetConfig+0x216>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <UART_SetConfig+0x1fe>
 800567e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005682:	d006      	beq.n	8005692 <UART_SetConfig+0x20a>
 8005684:	e00b      	b.n	800569e <UART_SetConfig+0x216>
 8005686:	2300      	movs	r3, #0
 8005688:	77fb      	strb	r3, [r7, #31]
 800568a:	e0a0      	b.n	80057ce <UART_SetConfig+0x346>
 800568c:	2302      	movs	r3, #2
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e09d      	b.n	80057ce <UART_SetConfig+0x346>
 8005692:	2304      	movs	r3, #4
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e09a      	b.n	80057ce <UART_SetConfig+0x346>
 8005698:	2308      	movs	r3, #8
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e097      	b.n	80057ce <UART_SetConfig+0x346>
 800569e:	2310      	movs	r3, #16
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e094      	b.n	80057ce <UART_SetConfig+0x346>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a30      	ldr	r2, [pc, #192]	; (800576c <UART_SetConfig+0x2e4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d125      	bne.n	80056fa <UART_SetConfig+0x272>
 80056ae:	4b2a      	ldr	r3, [pc, #168]	; (8005758 <UART_SetConfig+0x2d0>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056bc:	d017      	beq.n	80056ee <UART_SetConfig+0x266>
 80056be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056c2:	d817      	bhi.n	80056f4 <UART_SetConfig+0x26c>
 80056c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c8:	d00b      	beq.n	80056e2 <UART_SetConfig+0x25a>
 80056ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ce:	d811      	bhi.n	80056f4 <UART_SetConfig+0x26c>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <UART_SetConfig+0x254>
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d8:	d006      	beq.n	80056e8 <UART_SetConfig+0x260>
 80056da:	e00b      	b.n	80056f4 <UART_SetConfig+0x26c>
 80056dc:	2301      	movs	r3, #1
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e075      	b.n	80057ce <UART_SetConfig+0x346>
 80056e2:	2302      	movs	r3, #2
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e072      	b.n	80057ce <UART_SetConfig+0x346>
 80056e8:	2304      	movs	r3, #4
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e06f      	b.n	80057ce <UART_SetConfig+0x346>
 80056ee:	2308      	movs	r3, #8
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e06c      	b.n	80057ce <UART_SetConfig+0x346>
 80056f4:	2310      	movs	r3, #16
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e069      	b.n	80057ce <UART_SetConfig+0x346>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <UART_SetConfig+0x2e8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d137      	bne.n	8005774 <UART_SetConfig+0x2ec>
 8005704:	4b14      	ldr	r3, [pc, #80]	; (8005758 <UART_SetConfig+0x2d0>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800570e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005712:	d017      	beq.n	8005744 <UART_SetConfig+0x2bc>
 8005714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005718:	d817      	bhi.n	800574a <UART_SetConfig+0x2c2>
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571e:	d00b      	beq.n	8005738 <UART_SetConfig+0x2b0>
 8005720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005724:	d811      	bhi.n	800574a <UART_SetConfig+0x2c2>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <UART_SetConfig+0x2aa>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	d006      	beq.n	800573e <UART_SetConfig+0x2b6>
 8005730:	e00b      	b.n	800574a <UART_SetConfig+0x2c2>
 8005732:	2300      	movs	r3, #0
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e04a      	b.n	80057ce <UART_SetConfig+0x346>
 8005738:	2302      	movs	r3, #2
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e047      	b.n	80057ce <UART_SetConfig+0x346>
 800573e:	2304      	movs	r3, #4
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e044      	b.n	80057ce <UART_SetConfig+0x346>
 8005744:	2308      	movs	r3, #8
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e041      	b.n	80057ce <UART_SetConfig+0x346>
 800574a:	2310      	movs	r3, #16
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e03e      	b.n	80057ce <UART_SetConfig+0x346>
 8005750:	efff69f3 	.word	0xefff69f3
 8005754:	40011000 	.word	0x40011000
 8005758:	40023800 	.word	0x40023800
 800575c:	40004400 	.word	0x40004400
 8005760:	40004800 	.word	0x40004800
 8005764:	40004c00 	.word	0x40004c00
 8005768:	40005000 	.word	0x40005000
 800576c:	40011400 	.word	0x40011400
 8005770:	40007800 	.word	0x40007800
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a71      	ldr	r2, [pc, #452]	; (8005940 <UART_SetConfig+0x4b8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d125      	bne.n	80057ca <UART_SetConfig+0x342>
 800577e:	4b71      	ldr	r3, [pc, #452]	; (8005944 <UART_SetConfig+0x4bc>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800578c:	d017      	beq.n	80057be <UART_SetConfig+0x336>
 800578e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005792:	d817      	bhi.n	80057c4 <UART_SetConfig+0x33c>
 8005794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005798:	d00b      	beq.n	80057b2 <UART_SetConfig+0x32a>
 800579a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579e:	d811      	bhi.n	80057c4 <UART_SetConfig+0x33c>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <UART_SetConfig+0x324>
 80057a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057a8:	d006      	beq.n	80057b8 <UART_SetConfig+0x330>
 80057aa:	e00b      	b.n	80057c4 <UART_SetConfig+0x33c>
 80057ac:	2300      	movs	r3, #0
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e00d      	b.n	80057ce <UART_SetConfig+0x346>
 80057b2:	2302      	movs	r3, #2
 80057b4:	77fb      	strb	r3, [r7, #31]
 80057b6:	e00a      	b.n	80057ce <UART_SetConfig+0x346>
 80057b8:	2304      	movs	r3, #4
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e007      	b.n	80057ce <UART_SetConfig+0x346>
 80057be:	2308      	movs	r3, #8
 80057c0:	77fb      	strb	r3, [r7, #31]
 80057c2:	e004      	b.n	80057ce <UART_SetConfig+0x346>
 80057c4:	2310      	movs	r3, #16
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e001      	b.n	80057ce <UART_SetConfig+0x346>
 80057ca:	2310      	movs	r3, #16
 80057cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d6:	d15a      	bne.n	800588e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80057d8:	7ffb      	ldrb	r3, [r7, #31]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d827      	bhi.n	800582e <UART_SetConfig+0x3a6>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0x35c>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	0800581f 	.word	0x0800581f
 80057f8:	0800582f 	.word	0x0800582f
 80057fc:	0800582f 	.word	0x0800582f
 8005800:	0800582f 	.word	0x0800582f
 8005804:	08005827 	.word	0x08005827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe f8b0 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 800580c:	61b8      	str	r0, [r7, #24]
        break;
 800580e:	e013      	b.n	8005838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005810:	f7fe f8c0 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8005814:	61b8      	str	r0, [r7, #24]
        break;
 8005816:	e00f      	b.n	8005838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005818:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <UART_SetConfig+0x4c0>)
 800581a:	61bb      	str	r3, [r7, #24]
        break;
 800581c:	e00c      	b.n	8005838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581e:	f7fd ffb7 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8005822:	61b8      	str	r0, [r7, #24]
        break;
 8005824:	e008      	b.n	8005838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582a:	61bb      	str	r3, [r7, #24]
        break;
 800582c:	e004      	b.n	8005838 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	77bb      	strb	r3, [r7, #30]
        break;
 8005836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d074      	beq.n	8005928 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	005a      	lsls	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	441a      	add	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d916      	bls.n	8005888 <UART_SetConfig+0x400>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005860:	d212      	bcs.n	8005888 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f023 030f 	bic.w	r3, r3, #15
 800586a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	b29b      	uxth	r3, r3
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	b29a      	uxth	r2, r3
 8005878:	89fb      	ldrh	r3, [r7, #14]
 800587a:	4313      	orrs	r3, r2
 800587c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	89fa      	ldrh	r2, [r7, #14]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	e04f      	b.n	8005928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77bb      	strb	r3, [r7, #30]
 800588c:	e04c      	b.n	8005928 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d828      	bhi.n	80058e6 <UART_SetConfig+0x45e>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <UART_SetConfig+0x414>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058e7 	.word	0x080058e7
 80058ac:	080058d7 	.word	0x080058d7
 80058b0:	080058e7 	.word	0x080058e7
 80058b4:	080058e7 	.word	0x080058e7
 80058b8:	080058e7 	.word	0x080058e7
 80058bc:	080058df 	.word	0x080058df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7fe f854 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 80058c4:	61b8      	str	r0, [r7, #24]
        break;
 80058c6:	e013      	b.n	80058f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c8:	f7fe f864 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 80058cc:	61b8      	str	r0, [r7, #24]
        break;
 80058ce:	e00f      	b.n	80058f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <UART_SetConfig+0x4c0>)
 80058d2:	61bb      	str	r3, [r7, #24]
        break;
 80058d4:	e00c      	b.n	80058f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d6:	f7fd ff5b 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 80058da:	61b8      	str	r0, [r7, #24]
        break;
 80058dc:	e008      	b.n	80058f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e2:	61bb      	str	r3, [r7, #24]
        break;
 80058e4:	e004      	b.n	80058f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	77bb      	strb	r3, [r7, #30]
        break;
 80058ee:	bf00      	nop
    }

    if (pclk != 0U)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	085a      	lsrs	r2, r3, #1
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	441a      	add	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b0f      	cmp	r3, #15
 800590e:	d909      	bls.n	8005924 <UART_SetConfig+0x49c>
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005916:	d205      	bcs.n	8005924 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	e001      	b.n	8005928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005934:	7fbb      	ldrb	r3, [r7, #30]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40007c00 	.word	0x40007c00
 8005944:	40023800 	.word	0x40023800
 8005948:	00f42400 	.word	0x00f42400

0800594c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01a      	beq.n	8005a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d10a      	bne.n	8005a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa0:	f7fb fefa 	bl	8001898 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d10e      	bne.n	8005ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f82d 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e023      	b.n	8005b1a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d10e      	bne.n	8005afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f817 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e00d      	b.n	8005b1a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b09c      	sub	sp, #112	; 0x70
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b32:	e0a5      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	f000 80a1 	beq.w	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fb feab 	bl	8001898 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d13e      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b68:	667b      	str	r3, [r7, #100]	; 0x64
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e067      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d04f      	beq.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bee:	d147      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e6      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c4c:	623a      	str	r2, [r7, #32]
 8005c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	6a3a      	ldr	r2, [r7, #32]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e010      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f43f af4a 	beq.w	8005b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3770      	adds	r7, #112	; 0x70
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b097      	sub	sp, #92	; 0x5c
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d10e      	bne.n	8005cfe <UART_Start_Receive_IT+0x52>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <UART_Start_Receive_IT+0x48>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cf2:	e02d      	b.n	8005d50 <UART_Start_Receive_IT+0xa4>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	22ff      	movs	r2, #255	; 0xff
 8005cf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cfc:	e028      	b.n	8005d50 <UART_Start_Receive_IT+0xa4>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10d      	bne.n	8005d22 <UART_Start_Receive_IT+0x76>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <UART_Start_Receive_IT+0x6c>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22ff      	movs	r2, #255	; 0xff
 8005d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d16:	e01b      	b.n	8005d50 <UART_Start_Receive_IT+0xa4>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	227f      	movs	r2, #127	; 0x7f
 8005d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d20:	e016      	b.n	8005d50 <UART_Start_Receive_IT+0xa4>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d2a:	d10d      	bne.n	8005d48 <UART_Start_Receive_IT+0x9c>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <UART_Start_Receive_IT+0x92>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	227f      	movs	r2, #127	; 0x7f
 8005d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d3c:	e008      	b.n	8005d50 <UART_Start_Receive_IT+0xa4>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	223f      	movs	r2, #63	; 0x3f
 8005d42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d46:	e003      	b.n	8005d50 <UART_Start_Receive_IT+0xa4>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2222      	movs	r2, #34	; 0x22
 8005d5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	657b      	str	r3, [r7, #84]	; 0x54
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e5      	bne.n	8005d5e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9a:	d107      	bne.n	8005dac <UART_Start_Receive_IT+0x100>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d103      	bne.n	8005dac <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <UART_Start_Receive_IT+0x18c>)
 8005da8:	665a      	str	r2, [r3, #100]	; 0x64
 8005daa:	e002      	b.n	8005db2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a23      	ldr	r2, [pc, #140]	; (8005e3c <UART_Start_Receive_IT+0x190>)
 8005db0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d019      	beq.n	8005df6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
 8005de2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e6      	bne.n	8005dc2 <UART_Start_Receive_IT+0x116>
 8005df4:	e018      	b.n	8005e28 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	613b      	str	r3, [r7, #16]
   return(result);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f043 0320 	orr.w	r3, r3, #32
 8005e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	375c      	adds	r7, #92	; 0x5c
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	080060e3 	.word	0x080060e3
 8005e3c:	08005f87 	.word	0x08005f87

08005e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b095      	sub	sp, #84	; 0x54
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e6      	bne.n	8005e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e5      	bne.n	8005e7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d118      	bne.n	8005ee8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f023 0310 	bic.w	r3, r3, #16
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6979      	ldr	r1, [r7, #20]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e6      	bne.n	8005eb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005efa:	bf00      	nop
 8005efc:	3754      	adds	r7, #84	; 0x54
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff fa8f 	bl	8005448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b088      	sub	sp, #32
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6979      	ldr	r1, [r7, #20]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	613b      	str	r3, [r7, #16]
   return(result);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e6      	bne.n	8005f3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff fa5b 	bl	8005434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f7e:	bf00      	nop
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b096      	sub	sp, #88	; 0x58
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f9c:	2b22      	cmp	r3, #34	; 0x22
 8005f9e:	f040 8094 	bne.w	80060ca <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005fb0:	b2d9      	uxtb	r1, r3
 8005fb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d177      	bne.n	80060da <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	647b      	str	r3, [r7, #68]	; 0x44
 800600a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800600e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	623b      	str	r3, [r7, #32]
   return(result);
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800603c:	633a      	str	r2, [r7, #48]	; 0x30
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006060:	2b01      	cmp	r3, #1
 8006062:	d12e      	bne.n	80060c2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	60fb      	str	r3, [r7, #12]
   return(result);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0310 	bic.w	r3, r3, #16
 800607e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	69b9      	ldr	r1, [r7, #24]
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	617b      	str	r3, [r7, #20]
   return(result);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b10      	cmp	r3, #16
 80060a8:	d103      	bne.n	80060b2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2210      	movs	r2, #16
 80060b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff f9ce 	bl	800545c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060c0:	e00b      	b.n	80060da <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb f85a 	bl	800117c <HAL_UART_RxCpltCallback>
}
 80060c8:	e007      	b.n	80060da <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	619a      	str	r2, [r3, #24]
}
 80060da:	bf00      	nop
 80060dc:	3758      	adds	r7, #88	; 0x58
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b096      	sub	sp, #88	; 0x58
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f8:	2b22      	cmp	r3, #34	; 0x22
 80060fa:	f040 8094 	bne.w	8006226 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800610e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006112:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006116:	4013      	ands	r3, r2
 8006118:	b29a      	uxth	r2, r3
 800611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d177      	bne.n	8006236 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
 8006166:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800616a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e6      	bne.n	8006146 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3308      	adds	r3, #8
 800617e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	61fb      	str	r3, [r7, #28]
   return(result);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3308      	adds	r3, #8
 8006196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800619e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e5      	bne.n	8006178 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d12e      	bne.n	800621e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	647b      	str	r3, [r7, #68]	; 0x44
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	613b      	str	r3, [r7, #16]
   return(result);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e6      	bne.n	80061c6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b10      	cmp	r3, #16
 8006204:	d103      	bne.n	800620e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2210      	movs	r2, #16
 800620c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff f920 	bl	800545c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800621c:	e00b      	b.n	8006236 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fa ffac 	bl	800117c <HAL_UART_RxCpltCallback>
}
 8006224:	e007      	b.n	8006236 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0208 	orr.w	r2, r2, #8
 8006234:	619a      	str	r2, [r3, #24]
}
 8006236:	bf00      	nop
 8006238:	3758      	adds	r7, #88	; 0x58
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006240:	b084      	sub	sp, #16
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	f107 001c 	add.w	r0, r7, #28
 800624e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	d120      	bne.n	800629a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	4b20      	ldr	r3, [pc, #128]	; (80062ec <USB_CoreInit+0xac>)
 800626a:	4013      	ands	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800627c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa92 	bl	80067b8 <USB_CoreReset>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]
 8006298:	e010      	b.n	80062bc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa86 	bl	80067b8 <USB_CoreReset>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10b      	bne.n	80062da <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f043 0206 	orr.w	r2, r3, #6
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e6:	b004      	add	sp, #16
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	ffbdffbf 	.word	0xffbdffbf

080062f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 0201 	bic.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d115      	bne.n	8006360 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006340:	2001      	movs	r0, #1
 8006342:	f7fb fab5 	bl	80018b0 <HAL_Delay>
      ms++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa25 	bl	800679c <USB_GetMode>
 8006352:	4603      	mov	r3, r0
 8006354:	2b01      	cmp	r3, #1
 8006356:	d01e      	beq.n	8006396 <USB_SetCurrentMode+0x84>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b31      	cmp	r3, #49	; 0x31
 800635c:	d9f0      	bls.n	8006340 <USB_SetCurrentMode+0x2e>
 800635e:	e01a      	b.n	8006396 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d115      	bne.n	8006392 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006372:	2001      	movs	r0, #1
 8006374:	f7fb fa9c 	bl	80018b0 <HAL_Delay>
      ms++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa0c 	bl	800679c <USB_GetMode>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <USB_SetCurrentMode+0x84>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b31      	cmp	r3, #49	; 0x31
 800638e:	d9f0      	bls.n	8006372 <USB_SetCurrentMode+0x60>
 8006390:	e001      	b.n	8006396 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e005      	b.n	80063a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b32      	cmp	r3, #50	; 0x32
 800639a:	d101      	bne.n	80063a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063ac:	b084      	sub	sp, #16
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e009      	b.n	80063e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	3340      	adds	r3, #64	; 0x40
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3301      	adds	r3, #1
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b0e      	cmp	r3, #14
 80063e4:	d9f2      	bls.n	80063cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11c      	bne.n	8006426 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fa:	f043 0302 	orr.w	r3, r3, #2
 80063fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e005      	b.n	8006432 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006438:	461a      	mov	r2, r3
 800643a:	2300      	movs	r3, #0
 800643c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	4619      	mov	r1, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644c:	461a      	mov	r2, r3
 800644e:	680b      	ldr	r3, [r1, #0]
 8006450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	2b01      	cmp	r3, #1
 8006456:	d10c      	bne.n	8006472 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800645e:	2100      	movs	r1, #0
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f961 	bl	8006728 <USB_SetDevSpeed>
 8006466:	e008      	b.n	800647a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006468:	2101      	movs	r1, #1
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f95c 	bl	8006728 <USB_SetDevSpeed>
 8006470:	e003      	b.n	800647a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006472:	2103      	movs	r1, #3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f957 	bl	8006728 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800647a:	2110      	movs	r1, #16
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f8f3 	bl	8006668 <USB_FlushTxFifo>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f91d 	bl	80066cc <USB_FlushRxFifo>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	461a      	mov	r2, r3
 80064a4:	2300      	movs	r3, #0
 80064a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	461a      	mov	r2, r3
 80064bc:	2300      	movs	r3, #0
 80064be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	e043      	b.n	800654e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064dc:	d118      	bne.n	8006510 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	461a      	mov	r2, r3
 80064f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e013      	b.n	8006522 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006506:	461a      	mov	r2, r3
 8006508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e008      	b.n	8006522 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	461a      	mov	r2, r3
 800651e:	2300      	movs	r3, #0
 8006520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652e:	461a      	mov	r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	461a      	mov	r2, r3
 8006542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3301      	adds	r3, #1
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d3b7      	bcc.n	80064c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e043      	b.n	80065e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006572:	d118      	bne.n	80065a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	461a      	mov	r2, r3
 8006588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	e013      	b.n	80065b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	461a      	mov	r2, r3
 800659e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	e008      	b.n	80065b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	2300      	movs	r3, #0
 80065b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	461a      	mov	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	461a      	mov	r2, r3
 80065d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	3301      	adds	r3, #1
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d3b7      	bcc.n	800655c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800660c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f043 0210 	orr.w	r2, r3, #16
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699a      	ldr	r2, [r3, #24]
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <USB_DevInit+0x2b4>)
 8006626:	4313      	orrs	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f043 0208 	orr.w	r2, r3, #8
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d105      	bne.n	8006650 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	4b06      	ldr	r3, [pc, #24]	; (8006664 <USB_DevInit+0x2b8>)
 800664a:	4313      	orrs	r3, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800665c:	b004      	add	sp, #16
 800665e:	4770      	bx	lr
 8006660:	803c3800 	.word	0x803c3800
 8006664:	40000004 	.word	0x40000004

08006668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <USB_FlushTxFifo+0x60>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e01a      	b.n	80066bc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	daf3      	bge.n	8006676 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	019b      	lsls	r3, r3, #6
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	4a08      	ldr	r2, [pc, #32]	; (80066c8 <USB_FlushTxFifo+0x60>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e006      	b.n	80066bc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d0f1      	beq.n	800669e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	00030d40 	.word	0x00030d40

080066cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	4a11      	ldr	r2, [pc, #68]	; (8006724 <USB_FlushRxFifo+0x58>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e017      	b.n	8006718 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	daf3      	bge.n	80066d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2210      	movs	r2, #16
 80066f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	4a08      	ldr	r2, [pc, #32]	; (8006724 <USB_FlushRxFifo+0x58>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d901      	bls.n	800670a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e006      	b.n	8006718 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d0f1      	beq.n	80066fa <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	00030d40 	.word	0x00030d40

08006728 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	f003 0301 	and.w	r3, r3, #1
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	4a13      	ldr	r2, [pc, #76]	; (8006818 <USB_CoreReset+0x60>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d901      	bls.n	80067d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e01a      	b.n	800680a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	daf3      	bge.n	80067c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f043 0201 	orr.w	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <USB_CoreReset+0x60>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e006      	b.n	800680a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d0f1      	beq.n	80067ec <USB_CoreReset+0x34>

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	00030d40 	.word	0x00030d40

0800681c <__libc_init_array>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4d0d      	ldr	r5, [pc, #52]	; (8006854 <__libc_init_array+0x38>)
 8006820:	4c0d      	ldr	r4, [pc, #52]	; (8006858 <__libc_init_array+0x3c>)
 8006822:	1b64      	subs	r4, r4, r5
 8006824:	10a4      	asrs	r4, r4, #2
 8006826:	2600      	movs	r6, #0
 8006828:	42a6      	cmp	r6, r4
 800682a:	d109      	bne.n	8006840 <__libc_init_array+0x24>
 800682c:	4d0b      	ldr	r5, [pc, #44]	; (800685c <__libc_init_array+0x40>)
 800682e:	4c0c      	ldr	r4, [pc, #48]	; (8006860 <__libc_init_array+0x44>)
 8006830:	f000 f832 	bl	8006898 <_init>
 8006834:	1b64      	subs	r4, r4, r5
 8006836:	10a4      	asrs	r4, r4, #2
 8006838:	2600      	movs	r6, #0
 800683a:	42a6      	cmp	r6, r4
 800683c:	d105      	bne.n	800684a <__libc_init_array+0x2e>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	f855 3b04 	ldr.w	r3, [r5], #4
 8006844:	4798      	blx	r3
 8006846:	3601      	adds	r6, #1
 8006848:	e7ee      	b.n	8006828 <__libc_init_array+0xc>
 800684a:	f855 3b04 	ldr.w	r3, [r5], #4
 800684e:	4798      	blx	r3
 8006850:	3601      	adds	r6, #1
 8006852:	e7f2      	b.n	800683a <__libc_init_array+0x1e>
 8006854:	08006940 	.word	0x08006940
 8006858:	08006940 	.word	0x08006940
 800685c:	08006940 	.word	0x08006940
 8006860:	08006944 	.word	0x08006944

08006864 <memset>:
 8006864:	4402      	add	r2, r0
 8006866:	4603      	mov	r3, r0
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	f803 1b01 	strb.w	r1, [r3], #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <strncmp>:
 8006874:	b510      	push	{r4, lr}
 8006876:	b16a      	cbz	r2, 8006894 <strncmp+0x20>
 8006878:	3901      	subs	r1, #1
 800687a:	1884      	adds	r4, r0, r2
 800687c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006880:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006884:	4293      	cmp	r3, r2
 8006886:	d103      	bne.n	8006890 <strncmp+0x1c>
 8006888:	42a0      	cmp	r0, r4
 800688a:	d001      	beq.n	8006890 <strncmp+0x1c>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1f5      	bne.n	800687c <strncmp+0x8>
 8006890:	1a98      	subs	r0, r3, r2
 8006892:	bd10      	pop	{r4, pc}
 8006894:	4610      	mov	r0, r2
 8006896:	e7fc      	b.n	8006892 <strncmp+0x1e>

08006898 <_init>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	bf00      	nop
 800689c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689e:	bc08      	pop	{r3}
 80068a0:	469e      	mov	lr, r3
 80068a2:	4770      	bx	lr

080068a4 <_fini>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	bf00      	nop
 80068a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068aa:	bc08      	pop	{r3}
 80068ac:	469e      	mov	lr, r3
 80068ae:	4770      	bx	lr
