
CANopen-BLDC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a630  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800a830  0800a830  0001a830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad04  0800ad04  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad0c  0800ad0c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad10  0800ad10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ad14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  200001f4  0800af08  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  0800af08  00020940  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bca9  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003764  00000000  00000000  0003becb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  00040aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad2b  00000000  00000000  00041da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3be  00000000  00000000  0006cad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001025da  00000000  00000000  00086e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018946b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006544  00000000  00000000  001894c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a818 	.word	0x0800a818

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800a818 	.word	0x0800a818

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_CAN1_Init+0x68>)
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <MX_CAN1_Init+0x6c>)
 80005f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_CAN1_Init+0x68>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_CAN1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_CAN1_Init+0x68>)
 8000600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000604:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_CAN1_Init+0x68>)
 8000608:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_CAN1_Init+0x68>)
 8000610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000614:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_CAN1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_CAN1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_CAN1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_CAN1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_CAN1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_CAN1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_CAN1_Init+0x68>)
 800063c:	f002 fa6e 	bl	8002b1c <HAL_CAN_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000646:	f001 fd15 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000228 	.word	0x20000228
 8000654:	40006400 	.word	0x40006400

08000658 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <HAL_CAN_MspInit+0x8c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d12f      	bne.n	80006da <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_CAN_MspInit+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006aa:	2303      	movs	r3, #3
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ba:	2309      	movs	r3, #9
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <HAL_CAN_MspInit+0x94>)
 80006c6:	f003 fa3b 	bl	8003b40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2014      	movs	r0, #20
 80006d0:	f003 f96d 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006d4:	2014      	movs	r0, #20
 80006d6:	f003 f986 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40006400 	.word	0x40006400
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020c00 	.word	0x40020c00

080006f0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b6c      	ldr	r3, [pc, #432]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a6b      	ldr	r2, [pc, #428]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b66      	ldr	r3, [pc, #408]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a65      	ldr	r2, [pc, #404]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b63      	ldr	r3, [pc, #396]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a5f      	ldr	r2, [pc, #380]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a59      	ldr	r2, [pc, #356]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a53      	ldr	r2, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a4d      	ldr	r2, [pc, #308]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 8000784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <MX_GPIO_Init+0x1c8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f244 0181 	movw	r1, #16513	; 0x4081
 800079c:	4847      	ldr	r0, [pc, #284]	; (80008bc <MX_GPIO_Init+0x1cc>)
 800079e:	f003 fb7b 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	4846      	ldr	r0, [pc, #280]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 80007a8:	f003 fb76 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4840      	ldr	r0, [pc, #256]	; (80008c4 <MX_GPIO_Init+0x1d4>)
 80007c4:	f003 f9bc 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007c8:	2332      	movs	r3, #50	; 0x32
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d8:	230b      	movs	r3, #11
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4838      	ldr	r0, [pc, #224]	; (80008c4 <MX_GPIO_Init+0x1d4>)
 80007e4:	f003 f9ac 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007e8:	2386      	movs	r3, #134	; 0x86
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4831      	ldr	r0, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x1d8>)
 8000804:	f003 f99c 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000808:	f244 0381 	movw	r3, #16513	; 0x4081
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <MX_GPIO_Init+0x1cc>)
 8000822:	f003 f98d 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000838:	230b      	movs	r3, #11
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481e      	ldr	r0, [pc, #120]	; (80008bc <MX_GPIO_Init+0x1cc>)
 8000844:	f003 f97c 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 8000860:	f003 f96e 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 8000878:	f003 f962 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800087c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_GPIO_Init+0x1d0>)
 800089a:	f003 f951 	bl	8003b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2028      	movs	r0, #40	; 0x28
 80008a4:	f003 f883 	bl	80039ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a8:	2028      	movs	r0, #40	; 0x28
 80008aa:	f003 f89c 	bl	80039e6 <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000

080008cc <fnLEDsErrorState>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//ERROR SIGNALIZATION
void fnLEDsErrorState(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008d6:	f003 fadf 	bl	8003e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008e0:	f003 fada 	bl	8003e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ea:	4802      	ldr	r0, [pc, #8]	; (80008f4 <fnLEDsErrorState+0x28>)
 80008ec:	f003 fad4 	bl	8003e98 <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40020400 	.word	0x40020400

080008f8 <fnInit>:


//INIT FUNCTION
void fnInit(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 80008fc:	4bc6      	ldr	r3, [pc, #792]	; (8000c18 <fnInit+0x320>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b50      	cmp	r3, #80	; 0x50
 8000902:	f200 833a 	bhi.w	8000f7a <fnInit+0x682>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <fnInit+0x14>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000a51 	.word	0x08000a51
 8000910:	08000f7b 	.word	0x08000f7b
 8000914:	08000f7b 	.word	0x08000f7b
 8000918:	08000f7b 	.word	0x08000f7b
 800091c:	08000f7b 	.word	0x08000f7b
 8000920:	08000a99 	.word	0x08000a99
 8000924:	08000f7b 	.word	0x08000f7b
 8000928:	08000f7b 	.word	0x08000f7b
 800092c:	08000f7b 	.word	0x08000f7b
 8000930:	08000f7b 	.word	0x08000f7b
 8000934:	08000ae1 	.word	0x08000ae1
 8000938:	08000f7b 	.word	0x08000f7b
 800093c:	08000f7b 	.word	0x08000f7b
 8000940:	08000f7b 	.word	0x08000f7b
 8000944:	08000f7b 	.word	0x08000f7b
 8000948:	08000f7b 	.word	0x08000f7b
 800094c:	08000f7b 	.word	0x08000f7b
 8000950:	08000f7b 	.word	0x08000f7b
 8000954:	08000f7b 	.word	0x08000f7b
 8000958:	08000f7b 	.word	0x08000f7b
 800095c:	08000b4f 	.word	0x08000b4f
 8000960:	08000f7b 	.word	0x08000f7b
 8000964:	08000f7b 	.word	0x08000f7b
 8000968:	08000f7b 	.word	0x08000f7b
 800096c:	08000f7b 	.word	0x08000f7b
 8000970:	08000bbd 	.word	0x08000bbd
 8000974:	08000f7b 	.word	0x08000f7b
 8000978:	08000f7b 	.word	0x08000f7b
 800097c:	08000f7b 	.word	0x08000f7b
 8000980:	08000f7b 	.word	0x08000f7b
 8000984:	08000c55 	.word	0x08000c55
 8000988:	08000f7b 	.word	0x08000f7b
 800098c:	08000f7b 	.word	0x08000f7b
 8000990:	08000f7b 	.word	0x08000f7b
 8000994:	08000f7b 	.word	0x08000f7b
 8000998:	08000f7b 	.word	0x08000f7b
 800099c:	08000f7b 	.word	0x08000f7b
 80009a0:	08000f7b 	.word	0x08000f7b
 80009a4:	08000f7b 	.word	0x08000f7b
 80009a8:	08000f7b 	.word	0x08000f7b
 80009ac:	08000cc3 	.word	0x08000cc3
 80009b0:	08000f7b 	.word	0x08000f7b
 80009b4:	08000f7b 	.word	0x08000f7b
 80009b8:	08000f7b 	.word	0x08000f7b
 80009bc:	08000f7b 	.word	0x08000f7b
 80009c0:	08000f7b 	.word	0x08000f7b
 80009c4:	08000f7b 	.word	0x08000f7b
 80009c8:	08000f7b 	.word	0x08000f7b
 80009cc:	08000f7b 	.word	0x08000f7b
 80009d0:	08000f7b 	.word	0x08000f7b
 80009d4:	08000d31 	.word	0x08000d31
 80009d8:	08000f7b 	.word	0x08000f7b
 80009dc:	08000f7b 	.word	0x08000f7b
 80009e0:	08000f7b 	.word	0x08000f7b
 80009e4:	08000f7b 	.word	0x08000f7b
 80009e8:	08000d9f 	.word	0x08000d9f
 80009ec:	08000f7b 	.word	0x08000f7b
 80009f0:	08000f7b 	.word	0x08000f7b
 80009f4:	08000f7b 	.word	0x08000f7b
 80009f8:	08000f7b 	.word	0x08000f7b
 80009fc:	08000e1b 	.word	0x08000e1b
 8000a00:	08000f7b 	.word	0x08000f7b
 8000a04:	08000f7b 	.word	0x08000f7b
 8000a08:	08000f7b 	.word	0x08000f7b
 8000a0c:	08000f7b 	.word	0x08000f7b
 8000a10:	08000f7b 	.word	0x08000f7b
 8000a14:	08000f7b 	.word	0x08000f7b
 8000a18:	08000f7b 	.word	0x08000f7b
 8000a1c:	08000f7b 	.word	0x08000f7b
 8000a20:	08000f7b 	.word	0x08000f7b
 8000a24:	08000e89 	.word	0x08000e89
 8000a28:	08000f7b 	.word	0x08000f7b
 8000a2c:	08000f7b 	.word	0x08000f7b
 8000a30:	08000f7b 	.word	0x08000f7b
 8000a34:	08000f7b 	.word	0x08000f7b
 8000a38:	08000f7b 	.word	0x08000f7b
 8000a3c:	08000f7b 	.word	0x08000f7b
 8000a40:	08000f7b 	.word	0x08000f7b
 8000a44:	08000f7b 	.word	0x08000f7b
 8000a48:	08000f7b 	.word	0x08000f7b
 8000a4c:	08000f3d 	.word	0x08000f3d

	case 0: //RESET PDO
		TxHeader.StdId = 0x000;
 8000a50:	4b72      	ldr	r3, [pc, #456]	; (8000c1c <fnInit+0x324>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000a56:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <fnInit+0x324>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x82;
 8000a5c:	4b70      	ldr	r3, [pc, #448]	; (8000c20 <fnInit+0x328>)
 8000a5e:	2282      	movs	r2, #130	; 0x82
 8000a60:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000a62:	4b6f      	ldr	r3, [pc, #444]	; (8000c20 <fnInit+0x328>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000a68:	4b6e      	ldr	r3, [pc, #440]	; (8000c24 <fnInit+0x32c>)
 8000a6a:	4a6d      	ldr	r2, [pc, #436]	; (8000c20 <fnInit+0x328>)
 8000a6c:	496b      	ldr	r1, [pc, #428]	; (8000c1c <fnInit+0x324>)
 8000a6e:	486e      	ldr	r0, [pc, #440]	; (8000c28 <fnInit+0x330>)
 8000a70:	f002 fa80 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d004      	beq.n	8000a84 <fnInit+0x18c>
			fnLEDsErrorState();
 8000a7a:	f7ff ff27 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000a7e:	f001 faf9 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 5;
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
		}
		break;
 8000a82:	e27a      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 5;
 8000a84:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <fnInit+0x320>)
 8000a86:	2205      	movs	r2, #5
 8000a88:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C000", 4, 100);
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <fnInit+0x334>)
 8000a90:	4867      	ldr	r0, [pc, #412]	; (8000c30 <fnInit+0x338>)
 8000a92:	f005 fa2f 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000a96:	e270      	b.n	8000f7a <fnInit+0x682>

	case 5: //SET PDO
		TxHeader.StdId = 0x000;
 8000a98:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <fnInit+0x324>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 2;
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <fnInit+0x324>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x01;
 8000aa4:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <fnInit+0x328>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x0A;
 8000aaa:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <fnInit+0x328>)
 8000aac:	220a      	movs	r2, #10
 8000aae:	705a      	strb	r2, [r3, #1]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ab0:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <fnInit+0x32c>)
 8000ab2:	4a5b      	ldr	r2, [pc, #364]	; (8000c20 <fnInit+0x328>)
 8000ab4:	4959      	ldr	r1, [pc, #356]	; (8000c1c <fnInit+0x324>)
 8000ab6:	485c      	ldr	r0, [pc, #368]	; (8000c28 <fnInit+0x330>)
 8000ab8:	f002 fa5c 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d004      	beq.n	8000acc <fnInit+0x1d4>
			fnLEDsErrorState();
 8000ac2:	f7ff ff03 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000ac6:	f001 fad5 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 10;
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
		}
		break;
 8000aca:	e256      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 10;
 8000acc:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <fnInit+0x320>)
 8000ace:	220a      	movs	r2, #10
 8000ad0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C005", 4, 100);
 8000ad2:	2364      	movs	r3, #100	; 0x64
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	4957      	ldr	r1, [pc, #348]	; (8000c34 <fnInit+0x33c>)
 8000ad8:	4855      	ldr	r0, [pc, #340]	; (8000c30 <fnInit+0x338>)
 8000ada:	f005 fa0b 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000ade:	e24c      	b.n	8000f7a <fnInit+0x682>

	case 10: //SHUTDOWN
		TxHeader.StdId = 0x60A;
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <fnInit+0x324>)
 8000ae2:	f240 620a 	movw	r2, #1546	; 0x60a
 8000ae6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000ae8:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <fnInit+0x324>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000aee:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <fnInit+0x328>)
 8000af0:	2222      	movs	r2, #34	; 0x22
 8000af2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000af4:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <fnInit+0x328>)
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000afa:	4b49      	ldr	r3, [pc, #292]	; (8000c20 <fnInit+0x328>)
 8000afc:	2260      	movs	r2, #96	; 0x60
 8000afe:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b00:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <fnInit+0x328>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000b06:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <fnInit+0x328>)
 8000b08:	2206      	movs	r2, #6
 8000b0a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b0c:	4b44      	ldr	r3, [pc, #272]	; (8000c20 <fnInit+0x328>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b12:	4b43      	ldr	r3, [pc, #268]	; (8000c20 <fnInit+0x328>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b18:	4b41      	ldr	r3, [pc, #260]	; (8000c20 <fnInit+0x328>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b1e:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <fnInit+0x32c>)
 8000b20:	4a3f      	ldr	r2, [pc, #252]	; (8000c20 <fnInit+0x328>)
 8000b22:	493e      	ldr	r1, [pc, #248]	; (8000c1c <fnInit+0x324>)
 8000b24:	4840      	ldr	r0, [pc, #256]	; (8000c28 <fnInit+0x330>)
 8000b26:	f002 fa25 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <fnInit+0x242>
			fnLEDsErrorState();
 8000b30:	f7ff fecc 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000b34:	f001 fa9e 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 20;
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
		}
		break;
 8000b38:	e21f      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 20;
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <fnInit+0x320>)
 8000b3c:	2214      	movs	r2, #20
 8000b3e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C010", 4, 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	2204      	movs	r2, #4
 8000b44:	493c      	ldr	r1, [pc, #240]	; (8000c38 <fnInit+0x340>)
 8000b46:	483a      	ldr	r0, [pc, #232]	; (8000c30 <fnInit+0x338>)
 8000b48:	f005 f9d4 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000b4c:	e215      	b.n	8000f7a <fnInit+0x682>

	case 20://SWITCH ON
		TxHeader.StdId = 0x60A;
 8000b4e:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <fnInit+0x324>)
 8000b50:	f240 620a 	movw	r2, #1546	; 0x60a
 8000b54:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000b56:	4b31      	ldr	r3, [pc, #196]	; (8000c1c <fnInit+0x324>)
 8000b58:	2208      	movs	r2, #8
 8000b5a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <fnInit+0x328>)
 8000b5e:	2222      	movs	r2, #34	; 0x22
 8000b60:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <fnInit+0x328>)
 8000b64:	2240      	movs	r2, #64	; 0x40
 8000b66:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <fnInit+0x328>)
 8000b6a:	2260      	movs	r2, #96	; 0x60
 8000b6c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <fnInit+0x328>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <fnInit+0x328>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <fnInit+0x328>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <fnInit+0x328>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <fnInit+0x328>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <fnInit+0x32c>)
 8000b8e:	4a24      	ldr	r2, [pc, #144]	; (8000c20 <fnInit+0x328>)
 8000b90:	4922      	ldr	r1, [pc, #136]	; (8000c1c <fnInit+0x324>)
 8000b92:	4825      	ldr	r0, [pc, #148]	; (8000c28 <fnInit+0x330>)
 8000b94:	f002 f9ee 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <fnInit+0x2b0>
			fnLEDsErrorState();
 8000b9e:	f7ff fe95 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000ba2:	f001 fa67 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 25;
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
		}
		break;
 8000ba6:	e1e8      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 25;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <fnInit+0x320>)
 8000baa:	2219      	movs	r2, #25
 8000bac:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C020", 4, 100);
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4922      	ldr	r1, [pc, #136]	; (8000c3c <fnInit+0x344>)
 8000bb4:	481e      	ldr	r0, [pc, #120]	; (8000c30 <fnInit+0x338>)
 8000bb6:	f005 f99d 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000bba:	e1de      	b.n	8000f7a <fnInit+0x682>

	case 25://ENABLE OPERATION
		TxHeader.StdId = 0x60A;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <fnInit+0x324>)
 8000bbe:	f240 620a 	movw	r2, #1546	; 0x60a
 8000bc2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <fnInit+0x324>)
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <fnInit+0x328>)
 8000bcc:	2222      	movs	r2, #34	; 0x22
 8000bce:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <fnInit+0x328>)
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <fnInit+0x328>)
 8000bd8:	2260      	movs	r2, #96	; 0x60
 8000bda:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <fnInit+0x328>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <fnInit+0x328>)
 8000be4:	220f      	movs	r2, #15
 8000be6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <fnInit+0x328>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <fnInit+0x328>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <fnInit+0x328>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <fnInit+0x32c>)
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <fnInit+0x328>)
 8000bfe:	4907      	ldr	r1, [pc, #28]	; (8000c1c <fnInit+0x324>)
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <fnInit+0x330>)
 8000c02:	f002 f9b7 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d019      	beq.n	8000c40 <fnInit+0x348>
			fnLEDsErrorState();
 8000c0c:	f7ff fe5e 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000c10:	f001 fa30 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 30;
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
		}
		break;
 8000c14:	e1b1      	b.n	8000f7a <fnInit+0x682>
 8000c16:	bf00      	nop
 8000c18:	20000002 	.word	0x20000002
 8000c1c:	20000298 	.word	0x20000298
 8000c20:	20000258 	.word	0x20000258
 8000c24:	20000260 	.word	0x20000260
 8000c28:	20000228 	.word	0x20000228
 8000c2c:	0800a830 	.word	0x0800a830
 8000c30:	200004a4 	.word	0x200004a4
 8000c34:	0800a838 	.word	0x0800a838
 8000c38:	0800a840 	.word	0x0800a840
 8000c3c:	0800a848 	.word	0x0800a848
			iMachineStatus = 30;
 8000c40:	4bb0      	ldr	r3, [pc, #704]	; (8000f04 <fnInit+0x60c>)
 8000c42:	221e      	movs	r2, #30
 8000c44:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C025", 4, 100);
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	2204      	movs	r2, #4
 8000c4a:	49af      	ldr	r1, [pc, #700]	; (8000f08 <fnInit+0x610>)
 8000c4c:	48af      	ldr	r0, [pc, #700]	; (8000f0c <fnInit+0x614>)
 8000c4e:	f005 f951 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000c52:	e192      	b.n	8000f7a <fnInit+0x682>

	case 30://POSITION MODE
		TxHeader.StdId = 0x60A;
 8000c54:	4bae      	ldr	r3, [pc, #696]	; (8000f10 <fnInit+0x618>)
 8000c56:	f240 620a 	movw	r2, #1546	; 0x60a
 8000c5a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000c5c:	4bac      	ldr	r3, [pc, #688]	; (8000f10 <fnInit+0x618>)
 8000c5e:	2208      	movs	r2, #8
 8000c60:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000c62:	4bac      	ldr	r3, [pc, #688]	; (8000f14 <fnInit+0x61c>)
 8000c64:	2222      	movs	r2, #34	; 0x22
 8000c66:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x60;
 8000c68:	4baa      	ldr	r3, [pc, #680]	; (8000f14 <fnInit+0x61c>)
 8000c6a:	2260      	movs	r2, #96	; 0x60
 8000c6c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000c6e:	4ba9      	ldr	r3, [pc, #676]	; (8000f14 <fnInit+0x61c>)
 8000c70:	2260      	movs	r2, #96	; 0x60
 8000c72:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000c74:	4ba7      	ldr	r3, [pc, #668]	; (8000f14 <fnInit+0x61c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x01;
 8000c7a:	4ba6      	ldr	r3, [pc, #664]	; (8000f14 <fnInit+0x61c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000c80:	4ba4      	ldr	r3, [pc, #656]	; (8000f14 <fnInit+0x61c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000c86:	4ba3      	ldr	r3, [pc, #652]	; (8000f14 <fnInit+0x61c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000c8c:	4ba1      	ldr	r3, [pc, #644]	; (8000f14 <fnInit+0x61c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000c92:	4ba1      	ldr	r3, [pc, #644]	; (8000f18 <fnInit+0x620>)
 8000c94:	4a9f      	ldr	r2, [pc, #636]	; (8000f14 <fnInit+0x61c>)
 8000c96:	499e      	ldr	r1, [pc, #632]	; (8000f10 <fnInit+0x618>)
 8000c98:	48a0      	ldr	r0, [pc, #640]	; (8000f1c <fnInit+0x624>)
 8000c9a:	f002 f96b 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <fnInit+0x3b6>
			fnLEDsErrorState();
 8000ca4:	f7ff fe12 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000ca8:	f001 f9e4 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 40;
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
		}
		break;
 8000cac:	e165      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 40;
 8000cae:	4b95      	ldr	r3, [pc, #596]	; (8000f04 <fnInit+0x60c>)
 8000cb0:	2228      	movs	r2, #40	; 0x28
 8000cb2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C030", 4, 100);
 8000cb4:	2364      	movs	r3, #100	; 0x64
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4999      	ldr	r1, [pc, #612]	; (8000f20 <fnInit+0x628>)
 8000cba:	4894      	ldr	r0, [pc, #592]	; (8000f0c <fnInit+0x614>)
 8000cbc:	f005 f91a 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000cc0:	e15b      	b.n	8000f7a <fnInit+0x682>

	case 40:// POSITION 0
		TxHeader.StdId = 0x60A;
 8000cc2:	4b93      	ldr	r3, [pc, #588]	; (8000f10 <fnInit+0x618>)
 8000cc4:	f240 620a 	movw	r2, #1546	; 0x60a
 8000cc8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000cca:	4b91      	ldr	r3, [pc, #580]	; (8000f10 <fnInit+0x618>)
 8000ccc:	2208      	movs	r2, #8
 8000cce:	611a      	str	r2, [r3, #16]

		TxData[0] = 0x22;
 8000cd0:	4b90      	ldr	r3, [pc, #576]	; (8000f14 <fnInit+0x61c>)
 8000cd2:	2222      	movs	r2, #34	; 0x22
 8000cd4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 8000cd6:	4b8f      	ldr	r3, [pc, #572]	; (8000f14 <fnInit+0x61c>)
 8000cd8:	227a      	movs	r2, #122	; 0x7a
 8000cda:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000cdc:	4b8d      	ldr	r3, [pc, #564]	; (8000f14 <fnInit+0x61c>)
 8000cde:	2260      	movs	r2, #96	; 0x60
 8000ce0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ce2:	4b8c      	ldr	r3, [pc, #560]	; (8000f14 <fnInit+0x61c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000ce8:	4b8a      	ldr	r3, [pc, #552]	; (8000f14 <fnInit+0x61c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000cee:	4b89      	ldr	r3, [pc, #548]	; (8000f14 <fnInit+0x61c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000cf4:	4b87      	ldr	r3, [pc, #540]	; (8000f14 <fnInit+0x61c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000cfa:	4b86      	ldr	r3, [pc, #536]	; (8000f14 <fnInit+0x61c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d00:	4b85      	ldr	r3, [pc, #532]	; (8000f18 <fnInit+0x620>)
 8000d02:	4a84      	ldr	r2, [pc, #528]	; (8000f14 <fnInit+0x61c>)
 8000d04:	4982      	ldr	r1, [pc, #520]	; (8000f10 <fnInit+0x618>)
 8000d06:	4885      	ldr	r0, [pc, #532]	; (8000f1c <fnInit+0x624>)
 8000d08:	f002 f934 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <fnInit+0x424>
			fnLEDsErrorState();
 8000d12:	f7ff fddb 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000d16:	f001 f9ad 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 50;
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
		}
		break;
 8000d1a:	e12e      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 50;
 8000d1c:	4b79      	ldr	r3, [pc, #484]	; (8000f04 <fnInit+0x60c>)
 8000d1e:	2232      	movs	r2, #50	; 0x32
 8000d20:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "P000", 4, 100);
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	2204      	movs	r2, #4
 8000d26:	497f      	ldr	r1, [pc, #508]	; (8000f24 <fnInit+0x62c>)
 8000d28:	4878      	ldr	r0, [pc, #480]	; (8000f0c <fnInit+0x614>)
 8000d2a:	f005 f8e3 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000d2e:	e124      	b.n	8000f7a <fnInit+0x682>

	case 50://START SUPPLY
		TxHeader.StdId = 0x60A;
 8000d30:	4b77      	ldr	r3, [pc, #476]	; (8000f10 <fnInit+0x618>)
 8000d32:	f240 620a 	movw	r2, #1546	; 0x60a
 8000d36:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000d38:	4b75      	ldr	r3, [pc, #468]	; (8000f10 <fnInit+0x618>)
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000d3e:	4b75      	ldr	r3, [pc, #468]	; (8000f14 <fnInit+0x61c>)
 8000d40:	2222      	movs	r2, #34	; 0x22
 8000d42:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000d44:	4b73      	ldr	r3, [pc, #460]	; (8000f14 <fnInit+0x61c>)
 8000d46:	2240      	movs	r2, #64	; 0x40
 8000d48:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000d4a:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <fnInit+0x61c>)
 8000d4c:	2260      	movs	r2, #96	; 0x60
 8000d4e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000d50:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <fnInit+0x61c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8000d56:	4b6f      	ldr	r3, [pc, #444]	; (8000f14 <fnInit+0x61c>)
 8000d58:	221f      	movs	r2, #31
 8000d5a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000d5c:	4b6d      	ldr	r3, [pc, #436]	; (8000f14 <fnInit+0x61c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000d62:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <fnInit+0x61c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000d68:	4b6a      	ldr	r3, [pc, #424]	; (8000f14 <fnInit+0x61c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000d6e:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <fnInit+0x620>)
 8000d70:	4a68      	ldr	r2, [pc, #416]	; (8000f14 <fnInit+0x61c>)
 8000d72:	4967      	ldr	r1, [pc, #412]	; (8000f10 <fnInit+0x618>)
 8000d74:	4869      	ldr	r0, [pc, #420]	; (8000f1c <fnInit+0x624>)
 8000d76:	f002 f8fd 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <fnInit+0x492>
			fnLEDsErrorState();
 8000d80:	f7ff fda4 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000d84:	f001 f976 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 55;
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
		}
		break;
 8000d88:	e0f7      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 55;
 8000d8a:	4b5e      	ldr	r3, [pc, #376]	; (8000f04 <fnInit+0x60c>)
 8000d8c:	2237      	movs	r2, #55	; 0x37
 8000d8e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C050", 4, 100);
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	2204      	movs	r2, #4
 8000d94:	4964      	ldr	r1, [pc, #400]	; (8000f28 <fnInit+0x630>)
 8000d96:	485d      	ldr	r0, [pc, #372]	; (8000f0c <fnInit+0x614>)
 8000d98:	f005 f8ac 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000d9c:	e0ed      	b.n	8000f7a <fnInit+0x682>

	case 55://SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8000d9e:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <fnInit+0x618>)
 8000da0:	f240 620a 	movw	r2, #1546	; 0x60a
 8000da4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000da6:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <fnInit+0x618>)
 8000da8:	2208      	movs	r2, #8
 8000daa:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000dac:	4b59      	ldr	r3, [pc, #356]	; (8000f14 <fnInit+0x61c>)
 8000dae:	2240      	movs	r2, #64	; 0x40
 8000db0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000db2:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <fnInit+0x61c>)
 8000db4:	2241      	movs	r2, #65	; 0x41
 8000db6:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000db8:	4b56      	ldr	r3, [pc, #344]	; (8000f14 <fnInit+0x61c>)
 8000dba:	2260      	movs	r2, #96	; 0x60
 8000dbc:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000dbe:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <fnInit+0x61c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000dc4:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <fnInit+0x61c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000dca:	4b52      	ldr	r3, [pc, #328]	; (8000f14 <fnInit+0x61c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000dd0:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <fnInit+0x61c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000dd6:	4b4f      	ldr	r3, [pc, #316]	; (8000f14 <fnInit+0x61c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ddc:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <fnInit+0x620>)
 8000dde:	4a4d      	ldr	r2, [pc, #308]	; (8000f14 <fnInit+0x61c>)
 8000de0:	494b      	ldr	r1, [pc, #300]	; (8000f10 <fnInit+0x618>)
 8000de2:	484e      	ldr	r0, [pc, #312]	; (8000f1c <fnInit+0x624>)
 8000de4:	f002 f8c6 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <fnInit+0x500>
			fnLEDsErrorState();
 8000dee:	f7ff fd6d 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000df2:	f001 f93f 	bl	8002074 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iMachineStatus = 60;
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
		}
		break;
 8000df6:	e0bd      	b.n	8000f74 <fnInit+0x67c>
		else if (RxData[5] & 0b10000) {
 8000df8:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <fnInit+0x634>)
 8000dfa:	795b      	ldrb	r3, [r3, #5]
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80b7 	beq.w	8000f74 <fnInit+0x67c>
			iMachineStatus = 60;
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <fnInit+0x60c>)
 8000e08:	223c      	movs	r2, #60	; 0x3c
 8000e0a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C055", 4, 100);
 8000e0c:	2364      	movs	r3, #100	; 0x64
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4947      	ldr	r1, [pc, #284]	; (8000f30 <fnInit+0x638>)
 8000e12:	483e      	ldr	r0, [pc, #248]	; (8000f0c <fnInit+0x614>)
 8000e14:	f005 f86e 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000e18:	e0ac      	b.n	8000f74 <fnInit+0x67c>

	case 60://STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <fnInit+0x618>)
 8000e1c:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e20:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <fnInit+0x618>)
 8000e24:	2208      	movs	r2, #8
 8000e26:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <fnInit+0x61c>)
 8000e2a:	2222      	movs	r2, #34	; 0x22
 8000e2c:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <fnInit+0x61c>)
 8000e30:	2240      	movs	r2, #64	; 0x40
 8000e32:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <fnInit+0x61c>)
 8000e36:	2260      	movs	r2, #96	; 0x60
 8000e38:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <fnInit+0x61c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <fnInit+0x61c>)
 8000e42:	220f      	movs	r2, #15
 8000e44:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <fnInit+0x61c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <fnInit+0x61c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <fnInit+0x61c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <fnInit+0x620>)
 8000e5a:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <fnInit+0x61c>)
 8000e5c:	492c      	ldr	r1, [pc, #176]	; (8000f10 <fnInit+0x618>)
 8000e5e:	482f      	ldr	r0, [pc, #188]	; (8000f1c <fnInit+0x624>)
 8000e60:	f002 f888 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <fnInit+0x57c>
			fnLEDsErrorState();
 8000e6a:	f7ff fd2f 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000e6e:	f001 f901 	bl	8002074 <Error_Handler>
		}
		else{
			iMachineStatus = 70;
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
		}
		break;
 8000e72:	e082      	b.n	8000f7a <fnInit+0x682>
			iMachineStatus = 70;
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <fnInit+0x60c>)
 8000e76:	2246      	movs	r2, #70	; 0x46
 8000e78:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C060", 4, 100);
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	492d      	ldr	r1, [pc, #180]	; (8000f34 <fnInit+0x63c>)
 8000e80:	4822      	ldr	r0, [pc, #136]	; (8000f0c <fnInit+0x614>)
 8000e82:	f005 f837 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000e86:	e078      	b.n	8000f7a <fnInit+0x682>

	case 70://TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <fnInit+0x618>)
 8000e8a:	f240 620a 	movw	r2, #1546	; 0x60a
 8000e8e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <fnInit+0x618>)
 8000e92:	2208      	movs	r2, #8
 8000e94:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <fnInit+0x61c>)
 8000e98:	2240      	movs	r2, #64	; 0x40
 8000e9a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <fnInit+0x61c>)
 8000e9e:	2241      	movs	r2, #65	; 0x41
 8000ea0:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <fnInit+0x61c>)
 8000ea4:	2260      	movs	r2, #96	; 0x60
 8000ea6:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <fnInit+0x61c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <fnInit+0x61c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <fnInit+0x61c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <fnInit+0x61c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <fnInit+0x61c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <fnInit+0x620>)
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <fnInit+0x61c>)
 8000eca:	4911      	ldr	r1, [pc, #68]	; (8000f10 <fnInit+0x618>)
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <fnInit+0x624>)
 8000ece:	f002 f851 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <fnInit+0x5ea>
			fnLEDsErrorState();
 8000ed8:	f7ff fcf8 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000edc:	f001 f8ca 	bl	8002074 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iMachineStatus = 80;
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
		}
		break;
 8000ee0:	e04a      	b.n	8000f78 <fnInit+0x680>
		else if (RxData[5] & 0b00100) {
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <fnInit+0x634>)
 8000ee4:	795b      	ldrb	r3, [r3, #5]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d044      	beq.n	8000f78 <fnInit+0x680>
			iMachineStatus = 80;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <fnInit+0x60c>)
 8000ef0:	2250      	movs	r2, #80	; 0x50
 8000ef2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "C070", 4, 100);
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	490f      	ldr	r1, [pc, #60]	; (8000f38 <fnInit+0x640>)
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <fnInit+0x614>)
 8000efc:	f004 fffa 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8000f00:	e03a      	b.n	8000f78 <fnInit+0x680>
 8000f02:	bf00      	nop
 8000f04:	20000002 	.word	0x20000002
 8000f08:	0800a850 	.word	0x0800a850
 8000f0c:	200004a4 	.word	0x200004a4
 8000f10:	20000298 	.word	0x20000298
 8000f14:	20000258 	.word	0x20000258
 8000f18:	20000260 	.word	0x20000260
 8000f1c:	20000228 	.word	0x20000228
 8000f20:	0800a858 	.word	0x0800a858
 8000f24:	0800a860 	.word	0x0800a860
 8000f28:	0800a868 	.word	0x0800a868
 8000f2c:	20000264 	.word	0x20000264
 8000f30:	0800a870 	.word	0x0800a870
 8000f34:	0800a878 	.word	0x0800a878
 8000f38:	0800a880 	.word	0x0800a880

	case 80://READ STATUS CHECK
		if (RxData[4] == 39) {
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <fnInit+0x688>)
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	2b27      	cmp	r3, #39	; 0x27
 8000f42:	d112      	bne.n	8000f6a <fnInit+0x672>
			iMachineStatus = 1;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <fnInit+0x68c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 1;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <fnInit+0x690>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]

			// ENCODER TIMER START
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000f50:	213c      	movs	r1, #60	; 0x3c
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <fnInit+0x694>)
 8000f54:	f004 fc38 	bl	80057c8 <HAL_TIM_Encoder_Start>
			fnEncCalibration();
 8000f58:	f000 f97c 	bl	8001254 <fnEncCalibration>

			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, "redy", 4, 100);
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	2204      	movs	r2, #4
 8000f60:	490b      	ldr	r1, [pc, #44]	; (8000f90 <fnInit+0x698>)
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <fnInit+0x69c>)
 8000f64:	f004 ffc6 	bl	8005ef4 <HAL_UART_Transmit>
		else {
			fnLEDsErrorState();
			Error_Handler();
		}

		break;
 8000f68:	e007      	b.n	8000f7a <fnInit+0x682>
			fnLEDsErrorState();
 8000f6a:	f7ff fcaf 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8000f6e:	f001 f881 	bl	8002074 <Error_Handler>
		break;
 8000f72:	e002      	b.n	8000f7a <fnInit+0x682>
		break;
 8000f74:	bf00      	nop
 8000f76:	e000      	b.n	8000f7a <fnInit+0x682>
		break;
 8000f78:	bf00      	nop
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000264 	.word	0x20000264
 8000f84:	20000002 	.word	0x20000002
 8000f88:	20000003 	.word	0x20000003
 8000f8c:	20000328 	.word	0x20000328
 8000f90:	0800a888 	.word	0x0800a888
 8000f94:	200004a4 	.word	0x200004a4

08000f98 <fnReset>:

void fnReset(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	switch(iMachineStatus){
 8000f9c:	4b79      	ldr	r3, [pc, #484]	; (8001184 <fnReset+0x1ec>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b50      	cmp	r3, #80	; 0x50
 8000fa2:	f000 80d7 	beq.w	8001154 <fnReset+0x1bc>
 8000fa6:	2b50      	cmp	r3, #80	; 0x50
 8000fa8:	f300 80ea 	bgt.w	8001180 <fnReset+0x1e8>
 8000fac:	2b46      	cmp	r3, #70	; 0x46
 8000fae:	f000 80a0 	beq.w	80010f2 <fnReset+0x15a>
 8000fb2:	2b46      	cmp	r3, #70	; 0x46
 8000fb4:	f300 80e4 	bgt.w	8001180 <fnReset+0x1e8>
 8000fb8:	2b19      	cmp	r3, #25
 8000fba:	d069      	beq.n	8001090 <fnReset+0xf8>
 8000fbc:	2b19      	cmp	r3, #25
 8000fbe:	f300 80df 	bgt.w	8001180 <fnReset+0x1e8>
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	d002      	beq.n	8000fcc <fnReset+0x34>
 8000fc6:	2b14      	cmp	r3, #20
 8000fc8:	d031      	beq.n	800102e <fnReset+0x96>
			Error_Handler();
		}

		break;
	}
}
 8000fca:	e0d9      	b.n	8001180 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 8000fcc:	4b6e      	ldr	r3, [pc, #440]	; (8001188 <fnReset+0x1f0>)
 8000fce:	f240 620a 	movw	r2, #1546	; 0x60a
 8000fd2:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8000fd4:	4b6c      	ldr	r3, [pc, #432]	; (8001188 <fnReset+0x1f0>)
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8000fda:	4b6c      	ldr	r3, [pc, #432]	; (800118c <fnReset+0x1f4>)
 8000fdc:	2222      	movs	r2, #34	; 0x22
 8000fde:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8000fe0:	4b6a      	ldr	r3, [pc, #424]	; (800118c <fnReset+0x1f4>)
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8000fe6:	4b69      	ldr	r3, [pc, #420]	; (800118c <fnReset+0x1f4>)
 8000fe8:	2260      	movs	r2, #96	; 0x60
 8000fea:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8000fec:	4b67      	ldr	r3, [pc, #412]	; (800118c <fnReset+0x1f4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x06;
 8000ff2:	4b66      	ldr	r3, [pc, #408]	; (800118c <fnReset+0x1f4>)
 8000ff4:	2206      	movs	r2, #6
 8000ff6:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8000ff8:	4b64      	ldr	r3, [pc, #400]	; (800118c <fnReset+0x1f4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8000ffe:	4b63      	ldr	r3, [pc, #396]	; (800118c <fnReset+0x1f4>)
 8001000:	2200      	movs	r2, #0
 8001002:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001004:	4b61      	ldr	r3, [pc, #388]	; (800118c <fnReset+0x1f4>)
 8001006:	2200      	movs	r2, #0
 8001008:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800100a:	4b61      	ldr	r3, [pc, #388]	; (8001190 <fnReset+0x1f8>)
 800100c:	4a5f      	ldr	r2, [pc, #380]	; (800118c <fnReset+0x1f4>)
 800100e:	495e      	ldr	r1, [pc, #376]	; (8001188 <fnReset+0x1f0>)
 8001010:	4860      	ldr	r0, [pc, #384]	; (8001194 <fnReset+0x1fc>)
 8001012:	f001 ffaf 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <fnReset+0x8e>
			fnLEDsErrorState();
 800101c:	f7ff fc56 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001020:	f001 f828 	bl	8002074 <Error_Handler>
		break;
 8001024:	e0ac      	b.n	8001180 <fnReset+0x1e8>
			iMachineStatus = 20;
 8001026:	4b57      	ldr	r3, [pc, #348]	; (8001184 <fnReset+0x1ec>)
 8001028:	2214      	movs	r2, #20
 800102a:	701a      	strb	r2, [r3, #0]
		break;
 800102c:	e0a8      	b.n	8001180 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 800102e:	4b56      	ldr	r3, [pc, #344]	; (8001188 <fnReset+0x1f0>)
 8001030:	f240 620a 	movw	r2, #1546	; 0x60a
 8001034:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <fnReset+0x1f0>)
 8001038:	2208      	movs	r2, #8
 800103a:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800103c:	4b53      	ldr	r3, [pc, #332]	; (800118c <fnReset+0x1f4>)
 800103e:	2222      	movs	r2, #34	; 0x22
 8001040:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001042:	4b52      	ldr	r3, [pc, #328]	; (800118c <fnReset+0x1f4>)
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001048:	4b50      	ldr	r3, [pc, #320]	; (800118c <fnReset+0x1f4>)
 800104a:	2260      	movs	r2, #96	; 0x60
 800104c:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <fnReset+0x1f4>)
 8001050:	2200      	movs	r2, #0
 8001052:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x07;
 8001054:	4b4d      	ldr	r3, [pc, #308]	; (800118c <fnReset+0x1f4>)
 8001056:	2207      	movs	r2, #7
 8001058:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800105a:	4b4c      	ldr	r3, [pc, #304]	; (800118c <fnReset+0x1f4>)
 800105c:	2200      	movs	r2, #0
 800105e:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001060:	4b4a      	ldr	r3, [pc, #296]	; (800118c <fnReset+0x1f4>)
 8001062:	2200      	movs	r2, #0
 8001064:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001066:	4b49      	ldr	r3, [pc, #292]	; (800118c <fnReset+0x1f4>)
 8001068:	2200      	movs	r2, #0
 800106a:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800106c:	4b48      	ldr	r3, [pc, #288]	; (8001190 <fnReset+0x1f8>)
 800106e:	4a47      	ldr	r2, [pc, #284]	; (800118c <fnReset+0x1f4>)
 8001070:	4945      	ldr	r1, [pc, #276]	; (8001188 <fnReset+0x1f0>)
 8001072:	4848      	ldr	r0, [pc, #288]	; (8001194 <fnReset+0x1fc>)
 8001074:	f001 ff7e 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <fnReset+0xf0>
			fnLEDsErrorState();
 800107e:	f7ff fc25 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001082:	f000 fff7 	bl	8002074 <Error_Handler>
		break;
 8001086:	e07b      	b.n	8001180 <fnReset+0x1e8>
			iMachineStatus = 25;
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <fnReset+0x1ec>)
 800108a:	2219      	movs	r2, #25
 800108c:	701a      	strb	r2, [r3, #0]
		break;
 800108e:	e077      	b.n	8001180 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 8001090:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <fnReset+0x1f0>)
 8001092:	f240 620a 	movw	r2, #1546	; 0x60a
 8001096:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001098:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <fnReset+0x1f0>)
 800109a:	2208      	movs	r2, #8
 800109c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <fnReset+0x1f4>)
 80010a0:	2222      	movs	r2, #34	; 0x22
 80010a2:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <fnReset+0x1f4>)
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <fnReset+0x1f4>)
 80010ac:	2260      	movs	r2, #96	; 0x60
 80010ae:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <fnReset+0x1f4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <fnReset+0x1f4>)
 80010b8:	220f      	movs	r2, #15
 80010ba:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <fnReset+0x1f4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <fnReset+0x1f4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <fnReset+0x1f4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <fnReset+0x1f8>)
 80010d0:	4a2e      	ldr	r2, [pc, #184]	; (800118c <fnReset+0x1f4>)
 80010d2:	492d      	ldr	r1, [pc, #180]	; (8001188 <fnReset+0x1f0>)
 80010d4:	482f      	ldr	r0, [pc, #188]	; (8001194 <fnReset+0x1fc>)
 80010d6:	f001 ff4d 	bl	8002f74 <HAL_CAN_AddTxMessage>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <fnReset+0x152>
			fnLEDsErrorState();
 80010e0:	f7ff fbf4 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80010e4:	f000 ffc6 	bl	8002074 <Error_Handler>
		break;
 80010e8:	e04a      	b.n	8001180 <fnReset+0x1e8>
			iMachineStatus = 70;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <fnReset+0x1ec>)
 80010ec:	2246      	movs	r2, #70	; 0x46
 80010ee:	701a      	strb	r2, [r3, #0]
		break;
 80010f0:	e046      	b.n	8001180 <fnReset+0x1e8>
		TxHeader.StdId = 0x60A;
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <fnReset+0x1f0>)
 80010f4:	f240 620a 	movw	r2, #1546	; 0x60a
 80010f8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <fnReset+0x1f0>)
 80010fc:	2208      	movs	r2, #8
 80010fe:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <fnReset+0x1f4>)
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <fnReset+0x1f4>)
 8001108:	2241      	movs	r2, #65	; 0x41
 800110a:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <fnReset+0x1f4>)
 800110e:	2260      	movs	r2, #96	; 0x60
 8001110:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <fnReset+0x1f4>)
 8001114:	2200      	movs	r2, #0
 8001116:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <fnReset+0x1f4>)
 800111a:	2200      	movs	r2, #0
 800111c:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <fnReset+0x1f4>)
 8001120:	2200      	movs	r2, #0
 8001122:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <fnReset+0x1f4>)
 8001126:	2200      	movs	r2, #0
 8001128:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <fnReset+0x1f4>)
 800112c:	2200      	movs	r2, #0
 800112e:	71da      	strb	r2, [r3, #7]
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <fnReset+0x1f8>)
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <fnReset+0x1f4>)
 8001134:	4914      	ldr	r1, [pc, #80]	; (8001188 <fnReset+0x1f0>)
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <fnReset+0x1fc>)
 8001138:	f001 ff1c 	bl	8002f74 <HAL_CAN_AddTxMessage>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d004      	beq.n	800114c <fnReset+0x1b4>
			fnLEDsErrorState();
 8001142:	f7ff fbc3 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001146:	f000 ff95 	bl	8002074 <Error_Handler>
		break;
 800114a:	e019      	b.n	8001180 <fnReset+0x1e8>
			iMachineStatus = 80;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <fnReset+0x1ec>)
 800114e:	2250      	movs	r2, #80	; 0x50
 8001150:	701a      	strb	r2, [r3, #0]
		break;
 8001152:	e015      	b.n	8001180 <fnReset+0x1e8>
		if (RxData[4] == 39) {
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <fnReset+0x200>)
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	2b27      	cmp	r3, #39	; 0x27
 800115a:	d10c      	bne.n	8001176 <fnReset+0x1de>
			iMachineStatus = 1;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <fnReset+0x1ec>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <fnReset+0x204>)
 800116a:	f002 fe95 	bl	8003e98 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim14);
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <fnReset+0x208>)
 8001170:	f004 fa54 	bl	800561c <HAL_TIM_Base_Stop_IT>
		break;
 8001174:	e003      	b.n	800117e <fnReset+0x1e6>
			fnLEDsErrorState();
 8001176:	f7ff fba9 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800117a:	f000 ff7b 	bl	8002074 <Error_Handler>
		break;
 800117e:	bf00      	nop
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000002 	.word	0x20000002
 8001188:	20000298 	.word	0x20000298
 800118c:	20000258 	.word	0x20000258
 8001190:	20000260 	.word	0x20000260
 8001194:	20000228 	.word	0x20000228
 8001198:	20000264 	.word	0x20000264
 800119c:	40020400 	.word	0x40020400
 80011a0:	2000040c 	.word	0x2000040c

080011a4 <fnEncCounts2Angle>:


//CALCULATING ENCODER'S COUNTS TO ANGLE
float fnEncCounts2Angle(uint16_t iCounts)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	fEncAngleTemp = iCounts*fEncDegPerCount;
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <fnEncCounts2Angle+0x3c>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <fnEncCounts2Angle+0x40>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]

	return fEncAngleTemp;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <fnEncCounts2Angle+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	ee07 3a90 	vmov	s15, r3
}
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000218 	.word	0x20000218

080011e8 <fnEncReadCount>:

//READING DATA FROM ENCODER
void fnEncReadCount()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	iEncCountReal = __HAL_TIM_GET_COUNTER(&htim3);
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <fnEncReadCount+0x5c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <fnEncReadCount+0x60>)
 80011f6:	801a      	strh	r2, [r3, #0]
	if(iEncCountReal > iEncCountsNumber / 2)
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	085b      	lsrs	r3, r3, #1
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <fnEncReadCount+0x60>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d208      	bcs.n	800121a <fnEncReadCount+0x32>
	{
		iEncCount = iEncCountsNumber - iEncCountReal;
 8001208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <fnEncReadCount+0x60>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <fnEncReadCount+0x64>)
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e003      	b.n	8001222 <fnEncReadCount+0x3a>
	}
	else
	{
		iEncCount = iEncCountReal;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <fnEncReadCount+0x60>)
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <fnEncReadCount+0x64>)
 8001220:	801a      	strh	r2, [r3, #0]
	}

	fEncAngle = fnEncCounts2Angle(iEncCount)/2;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <fnEncReadCount+0x64>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffbc 	bl	80011a4 <fnEncCounts2Angle>
 800122c:	eeb0 7a40 	vmov.f32	s14, s0
 8001230:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <fnEncReadCount+0x68>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000328 	.word	0x20000328
 8001248:	20000210 	.word	0x20000210
 800124c:	20000212 	.word	0x20000212
 8001250:	20000214 	.word	0x20000214

08001254 <fnEncCalibration>:

//ENCODER CALIBRATION - BASE
void fnEncCalibration()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	TIM3->CNT = 0;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <fnEncCalibration+0x14>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
	fnEncReadCount();
 800125e:	f7ff ffc3 	bl	80011e8 <fnEncReadCount>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40000400 	.word	0x40000400

0800126c <fnMoveAbsolute>:

//FRAME SET POSITION SEND
void fnMoveAbsolute(uint32_t iNumber){
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

	//VAR CHECKING IF LEG IS SELECTED
	uint8_t iMoveEnabled = 100;
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	73fb      	strb	r3, [r7, #15]
	if (iNumber > 90) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b5a      	cmp	r3, #90	; 0x5a
 800127c:	d901      	bls.n	8001282 <fnMoveAbsolute+0x16>
		iNumber = 90;
 800127e:	235a      	movs	r3, #90	; 0x5a
 8001280:	607b      	str	r3, [r7, #4]
	else if (iNumber < 0) {
		iNumber = 0;
	}

	//ESTABLISHING MOTION DIRECTORY BASED ON SEL LEG
	if(iSelected_leg == 0){
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <fnMoveAbsolute+0xc4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d108      	bne.n	800129e <fnMoveAbsolute+0x32>
		iNumber = iNumber * 1000;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e00e      	b.n	80012bc <fnMoveAbsolute+0x50>
	}

	else if(iSelected_leg == 1){
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <fnMoveAbsolute+0xc4>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <fnMoveAbsolute+0x4c>
		iNumber = -iNumber * 1000;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <fnMoveAbsolute+0xc8>)
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	607b      	str	r3, [r7, #4]
		iMoveEnabled = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e001      	b.n	80012bc <fnMoveAbsolute+0x50>
	}

	else
		iMoveEnabled = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]

	if(iMoveEnabled == 1){
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d132      	bne.n	8001328 <fnMoveAbsolute+0xbc>
		TxHeader.StdId = 0x60A;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <fnMoveAbsolute+0xcc>)
 80012c4:	f240 620a 	movw	r2, #1546	; 0x60a
 80012c8:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <fnMoveAbsolute+0xcc>)
 80012cc:	2208      	movs	r2, #8
 80012ce:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <fnMoveAbsolute+0xd0>)
 80012d2:	2222      	movs	r2, #34	; 0x22
 80012d4:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x7A;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <fnMoveAbsolute+0xd0>)
 80012d8:	227a      	movs	r2, #122	; 0x7a
 80012da:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <fnMoveAbsolute+0xd0>)
 80012de:	2260      	movs	r2, #96	; 0x60
 80012e0:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <fnMoveAbsolute+0xd0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	70da      	strb	r2, [r3, #3]
		TxData[4] = (uint8_t) iNumber;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <fnMoveAbsolute+0xd0>)
 80012ee:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)(iNumber >> 8);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <fnMoveAbsolute+0xd0>)
 80012f8:	715a      	strb	r2, [r3, #5]
		TxData[6] = (uint8_t)(iNumber >> 16);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0c1b      	lsrs	r3, r3, #16
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <fnMoveAbsolute+0xd0>)
 8001302:	719a      	strb	r2, [r3, #6]
		TxData[7] = (uint8_t)(iNumber >> 24);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	0e1b      	lsrs	r3, r3, #24
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <fnMoveAbsolute+0xd0>)
 800130c:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <fnMoveAbsolute+0xd4>)
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <fnMoveAbsolute+0xd0>)
 8001312:	4909      	ldr	r1, [pc, #36]	; (8001338 <fnMoveAbsolute+0xcc>)
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <fnMoveAbsolute+0xd8>)
 8001316:	f001 fe2d 	bl	8002f74 <HAL_CAN_AddTxMessage>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <fnMoveAbsolute+0xbc>
			fnLEDsErrorState();
 8001320:	f7ff fad4 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001324:	f000 fea6 	bl	8002074 <Error_Handler>
		}

	}
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000001 	.word	0x20000001
 8001334:	fffffc18 	.word	0xfffffc18
 8001338:	20000298 	.word	0x20000298
 800133c:	20000258 	.word	0x20000258
 8001340:	20000260 	.word	0x20000260
 8001344:	20000228 	.word	0x20000228

08001348 <fnSingleMotionAction>:

void fnSingleMotionAction(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	HAL_UART_Transmit(&huart3, "work", 4, 100);
 800134c:	2364      	movs	r3, #100	; 0x64
 800134e:	2204      	movs	r2, #4
 8001350:	4994      	ldr	r1, [pc, #592]	; (80015a4 <fnSingleMotionAction+0x25c>)
 8001352:	4895      	ldr	r0, [pc, #596]	; (80015a8 <fnSingleMotionAction+0x260>)
 8001354:	f004 fdce 	bl	8005ef4 <HAL_UART_Transmit>
	switch (iSingleMachineStatus){
 8001358:	4b94      	ldr	r3, [pc, #592]	; (80015ac <fnSingleMotionAction+0x264>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3b0a      	subs	r3, #10
 800135e:	2b19      	cmp	r3, #25
 8001360:	f200 811d 	bhi.w	800159e <fnSingleMotionAction+0x256>
 8001364:	a201      	add	r2, pc, #4	; (adr r2, 800136c <fnSingleMotionAction+0x24>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	080013d5 	.word	0x080013d5
 8001370:	0800159f 	.word	0x0800159f
 8001374:	0800159f 	.word	0x0800159f
 8001378:	0800159f 	.word	0x0800159f
 800137c:	0800159f 	.word	0x0800159f
 8001380:	0800159f 	.word	0x0800159f
 8001384:	0800159f 	.word	0x0800159f
 8001388:	0800159f 	.word	0x0800159f
 800138c:	0800159f 	.word	0x0800159f
 8001390:	0800159f 	.word	0x0800159f
 8001394:	08001437 	.word	0x08001437
 8001398:	0800159f 	.word	0x0800159f
 800139c:	0800159f 	.word	0x0800159f
 80013a0:	0800159f 	.word	0x0800159f
 80013a4:	0800159f 	.word	0x0800159f
 80013a8:	08001449 	.word	0x08001449
 80013ac:	0800159f 	.word	0x0800159f
 80013b0:	0800159f 	.word	0x0800159f
 80013b4:	0800159f 	.word	0x0800159f
 80013b8:	0800159f 	.word	0x0800159f
 80013bc:	080014b7 	.word	0x080014b7
 80013c0:	0800159f 	.word	0x0800159f
 80013c4:	0800159f 	.word	0x0800159f
 80013c8:	0800159f 	.word	0x0800159f
 80013cc:	0800159f 	.word	0x0800159f
 80013d0:	08001519 	.word	0x08001519
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <fnSingleMotionAction+0x268>)
 80013d6:	f240 620a 	movw	r2, #1546	; 0x60a
 80013da:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80013dc:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <fnSingleMotionAction+0x268>)
 80013de:	2208      	movs	r2, #8
 80013e0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80013e4:	2222      	movs	r2, #34	; 0x22
 80013e6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80013e8:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80013ee:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80013f0:	2260      	movs	r2, #96	; 0x60
 80013f2:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80013f4:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 80013fa:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80013fc:	221f      	movs	r2, #31
 80013fe:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001400:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001402:	2200      	movs	r2, #0
 8001404:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001406:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001408:	2200      	movs	r2, #0
 800140a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800140c:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800140e:	2200      	movs	r2, #0
 8001410:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <fnSingleMotionAction+0x270>)
 8001414:	4a67      	ldr	r2, [pc, #412]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001416:	4966      	ldr	r1, [pc, #408]	; (80015b0 <fnSingleMotionAction+0x268>)
 8001418:	4868      	ldr	r0, [pc, #416]	; (80015bc <fnSingleMotionAction+0x274>)
 800141a:	f001 fdab 	bl	8002f74 <HAL_CAN_AddTxMessage>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <fnSingleMotionAction+0xe6>
			fnLEDsErrorState();
 8001424:	f7ff fa52 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001428:	f000 fe24 	bl	8002074 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 20;
		}
		break;
 800142c:	e0b7      	b.n	800159e <fnSingleMotionAction+0x256>
			iSingleMachineStatus = 20;
 800142e:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <fnSingleMotionAction+0x264>)
 8001430:	2214      	movs	r2, #20
 8001432:	701a      	strb	r2, [r3, #0]
		break;
 8001434:	e0b3      	b.n	800159e <fnSingleMotionAction+0x256>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 8001436:	4b62      	ldr	r3, [pc, #392]	; (80015c0 <fnSingleMotionAction+0x278>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff16 	bl	800126c <fnMoveAbsolute>
		iSingleMachineStatus = 25;
 8001440:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <fnSingleMotionAction+0x264>)
 8001442:	2219      	movs	r2, #25
 8001444:	701a      	strb	r2, [r3, #0]
		break;
 8001446:	e0aa      	b.n	800159e <fnSingleMotionAction+0x256>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <fnSingleMotionAction+0x268>)
 800144a:	f240 620a 	movw	r2, #1546	; 0x60a
 800144e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <fnSingleMotionAction+0x268>)
 8001452:	2208      	movs	r2, #8
 8001454:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001456:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800145c:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800145e:	2241      	movs	r2, #65	; 0x41
 8001460:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001464:	2260      	movs	r2, #96	; 0x60
 8001466:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001468:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800146a:	2200      	movs	r2, #0
 800146c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001470:	2200      	movs	r2, #0
 8001472:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001474:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001476:	2200      	movs	r2, #0
 8001478:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800147a:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800147c:	2200      	movs	r2, #0
 800147e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001480:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001482:	2200      	movs	r2, #0
 8001484:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <fnSingleMotionAction+0x270>)
 8001488:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800148a:	4949      	ldr	r1, [pc, #292]	; (80015b0 <fnSingleMotionAction+0x268>)
 800148c:	484b      	ldr	r0, [pc, #300]	; (80015bc <fnSingleMotionAction+0x274>)
 800148e:	f001 fd71 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <fnSingleMotionAction+0x15a>
			fnLEDsErrorState();
 8001498:	f7ff fa18 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800149c:	f000 fdea 	bl	8002074 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSingleMachineStatus = 30;
		}
		break;
 80014a0:	e07a      	b.n	8001598 <fnSingleMotionAction+0x250>
		else if (RxData[5] & 0b10000) {
 80014a2:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <fnSingleMotionAction+0x27c>)
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d074      	beq.n	8001598 <fnSingleMotionAction+0x250>
			iSingleMachineStatus = 30;
 80014ae:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <fnSingleMotionAction+0x264>)
 80014b0:	221e      	movs	r2, #30
 80014b2:	701a      	strb	r2, [r3, #0]
		break;
 80014b4:	e070      	b.n	8001598 <fnSingleMotionAction+0x250>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <fnSingleMotionAction+0x268>)
 80014b8:	f240 620a 	movw	r2, #1546	; 0x60a
 80014bc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <fnSingleMotionAction+0x268>)
 80014c0:	2208      	movs	r2, #8
 80014c2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014c6:	2222      	movs	r2, #34	; 0x22
 80014c8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014cc:	2240      	movs	r2, #64	; 0x40
 80014ce:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014d2:	2260      	movs	r2, #96	; 0x60
 80014d4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014de:	220f      	movs	r2, #15
 80014e0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <fnSingleMotionAction+0x270>)
 80014f6:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <fnSingleMotionAction+0x26c>)
 80014f8:	492d      	ldr	r1, [pc, #180]	; (80015b0 <fnSingleMotionAction+0x268>)
 80014fa:	4830      	ldr	r0, [pc, #192]	; (80015bc <fnSingleMotionAction+0x274>)
 80014fc:	f001 fd3a 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <fnSingleMotionAction+0x1c8>
			fnLEDsErrorState();
 8001506:	f7ff f9e1 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800150a:	f000 fdb3 	bl	8002074 <Error_Handler>
		}
		else{
			iSingleMachineStatus = 35;
		}
		break;
 800150e:	e046      	b.n	800159e <fnSingleMotionAction+0x256>
			iSingleMachineStatus = 35;
 8001510:	4b26      	ldr	r3, [pc, #152]	; (80015ac <fnSingleMotionAction+0x264>)
 8001512:	2223      	movs	r2, #35	; 0x23
 8001514:	701a      	strb	r2, [r3, #0]
		break;
 8001516:	e042      	b.n	800159e <fnSingleMotionAction+0x256>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <fnSingleMotionAction+0x268>)
 800151a:	f240 620a 	movw	r2, #1546	; 0x60a
 800151e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <fnSingleMotionAction+0x268>)
 8001522:	2208      	movs	r2, #8
 8001524:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800152e:	2241      	movs	r2, #65	; 0x41
 8001530:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001534:	2260      	movs	r2, #96	; 0x60
 8001536:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800153a:	2200      	movs	r2, #0
 800153c:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001540:	2200      	movs	r2, #0
 8001542:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001546:	2200      	movs	r2, #0
 8001548:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800154c:	2200      	movs	r2, #0
 800154e:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <fnSingleMotionAction+0x26c>)
 8001552:	2200      	movs	r2, #0
 8001554:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <fnSingleMotionAction+0x270>)
 8001558:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <fnSingleMotionAction+0x26c>)
 800155a:	4915      	ldr	r1, [pc, #84]	; (80015b0 <fnSingleMotionAction+0x268>)
 800155c:	4817      	ldr	r0, [pc, #92]	; (80015bc <fnSingleMotionAction+0x274>)
 800155e:	f001 fd09 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <fnSingleMotionAction+0x22a>
			fnLEDsErrorState();
 8001568:	f7ff f9b0 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800156c:	f000 fd82 	bl	8002074 <Error_Handler>
			iSingleMachineStatus = 100;
			HAL_TIM_Base_Stop_IT(&htim7);
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, "redy", 4, 100);
		}
		break;
 8001570:	e014      	b.n	800159c <fnSingleMotionAction+0x254>
		else if (RxData[5] & 0b00100) {
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <fnSingleMotionAction+0x27c>)
 8001574:	795b      	ldrb	r3, [r3, #5]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00e      	beq.n	800159c <fnSingleMotionAction+0x254>
			iSingleMachineStatus = 100;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <fnSingleMotionAction+0x264>)
 8001580:	2264      	movs	r2, #100	; 0x64
 8001582:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <fnSingleMotionAction+0x280>)
 8001586:	f004 f849 	bl	800561c <HAL_TIM_Base_Stop_IT>
			HAL_UART_Transmit(&huart3, "redy", 4, 100);
 800158a:	2364      	movs	r3, #100	; 0x64
 800158c:	2204      	movs	r2, #4
 800158e:	490f      	ldr	r1, [pc, #60]	; (80015cc <fnSingleMotionAction+0x284>)
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <fnSingleMotionAction+0x260>)
 8001592:	f004 fcaf 	bl	8005ef4 <HAL_UART_Transmit>
		break;
 8001596:	e001      	b.n	800159c <fnSingleMotionAction+0x254>
		break;
 8001598:	bf00      	nop
 800159a:	e000      	b.n	800159e <fnSingleMotionAction+0x256>
		break;
 800159c:	bf00      	nop
	}
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	0800a890 	.word	0x0800a890
 80015a8:	200004a4 	.word	0x200004a4
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000298 	.word	0x20000298
 80015b4:	20000258 	.word	0x20000258
 80015b8:	20000260 	.word	0x20000260
 80015bc:	20000228 	.word	0x20000228
 80015c0:	20000254 	.word	0x20000254
 80015c4:	20000264 	.word	0x20000264
 80015c8:	20000458 	.word	0x20000458
 80015cc:	0800a888 	.word	0x0800a888

080015d0 <fnSerialMotionAction>:

void fnSerialMotionAction(){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	//SEND INFO THAT ENGINE IS WORKING
	HAL_UART_Transmit(&huart3, "work", 4, 100);
 80015d4:	2364      	movs	r3, #100	; 0x64
 80015d6:	2204      	movs	r2, #4
 80015d8:	49b0      	ldr	r1, [pc, #704]	; (800189c <fnSerialMotionAction+0x2cc>)
 80015da:	48b1      	ldr	r0, [pc, #708]	; (80018a0 <fnSerialMotionAction+0x2d0>)
 80015dc:	f004 fc8a 	bl	8005ef4 <HAL_UART_Transmit>

	switch (iSerialMachineStatus){
 80015e0:	4bb0      	ldr	r3, [pc, #704]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3b0a      	subs	r3, #10
 80015e6:	2b1e      	cmp	r3, #30
 80015e8:	f200 8156 	bhi.w	8001898 <fnSerialMotionAction+0x2c8>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <fnSerialMotionAction+0x24>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001671 	.word	0x08001671
 80015f8:	08001899 	.word	0x08001899
 80015fc:	08001899 	.word	0x08001899
 8001600:	08001899 	.word	0x08001899
 8001604:	08001899 	.word	0x08001899
 8001608:	08001899 	.word	0x08001899
 800160c:	08001899 	.word	0x08001899
 8001610:	08001899 	.word	0x08001899
 8001614:	08001899 	.word	0x08001899
 8001618:	08001899 	.word	0x08001899
 800161c:	080016d3 	.word	0x080016d3
 8001620:	08001899 	.word	0x08001899
 8001624:	08001899 	.word	0x08001899
 8001628:	08001899 	.word	0x08001899
 800162c:	08001899 	.word	0x08001899
 8001630:	080016e5 	.word	0x080016e5
 8001634:	08001899 	.word	0x08001899
 8001638:	08001899 	.word	0x08001899
 800163c:	08001899 	.word	0x08001899
 8001640:	08001899 	.word	0x08001899
 8001644:	08001755 	.word	0x08001755
 8001648:	08001899 	.word	0x08001899
 800164c:	08001899 	.word	0x08001899
 8001650:	08001899 	.word	0x08001899
 8001654:	08001899 	.word	0x08001899
 8001658:	080017b7 	.word	0x080017b7
 800165c:	08001899 	.word	0x08001899
 8001660:	08001899 	.word	0x08001899
 8001664:	08001899 	.word	0x08001899
 8001668:	08001899 	.word	0x08001899
 800166c:	08001831 	.word	0x08001831
	case 10:
		//START SUPPLY
		TxHeader.StdId = 0x60A;
 8001670:	4b8d      	ldr	r3, [pc, #564]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 8001672:	f240 620a 	movw	r2, #1546	; 0x60a
 8001676:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8001678:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 800167a:	2208      	movs	r2, #8
 800167c:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 800167e:	4b8b      	ldr	r3, [pc, #556]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001680:	2222      	movs	r2, #34	; 0x22
 8001682:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001684:	4b89      	ldr	r3, [pc, #548]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800168a:	4b88      	ldr	r3, [pc, #544]	; (80018ac <fnSerialMotionAction+0x2dc>)
 800168c:	2260      	movs	r2, #96	; 0x60
 800168e:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001690:	4b86      	ldr	r3, [pc, #536]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001692:	2200      	movs	r2, #0
 8001694:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x1F;
 8001696:	4b85      	ldr	r3, [pc, #532]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001698:	221f      	movs	r2, #31
 800169a:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 800169c:	4b83      	ldr	r3, [pc, #524]	; (80018ac <fnSerialMotionAction+0x2dc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80016a2:	4b82      	ldr	r3, [pc, #520]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80016a8:	4b80      	ldr	r3, [pc, #512]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80016ae:	4b80      	ldr	r3, [pc, #512]	; (80018b0 <fnSerialMotionAction+0x2e0>)
 80016b0:	4a7e      	ldr	r2, [pc, #504]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80016b2:	497d      	ldr	r1, [pc, #500]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 80016b4:	487f      	ldr	r0, [pc, #508]	; (80018b4 <fnSerialMotionAction+0x2e4>)
 80016b6:	f001 fc5d 	bl	8002f74 <HAL_CAN_AddTxMessage>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <fnSerialMotionAction+0xfa>
			fnLEDsErrorState();
 80016c0:	f7ff f904 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80016c4:	f000 fcd6 	bl	8002074 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 20;
		}
		break;
 80016c8:	e0e6      	b.n	8001898 <fnSerialMotionAction+0x2c8>
			iSerialMachineStatus = 20;
 80016ca:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 80016cc:	2214      	movs	r2, #20
 80016ce:	701a      	strb	r2, [r3, #0]
		break;
 80016d0:	e0e2      	b.n	8001898 <fnSerialMotionAction+0x2c8>

	case 20:
		//MOVE
		fnMoveAbsolute(iPosition);
 80016d2:	4b79      	ldr	r3, [pc, #484]	; (80018b8 <fnSerialMotionAction+0x2e8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fdc8 	bl	800126c <fnMoveAbsolute>
		iSerialMachineStatus = 25;
 80016dc:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 80016de:	2219      	movs	r2, #25
 80016e0:	701a      	strb	r2, [r3, #0]
		break;
 80016e2:	e0d9      	b.n	8001898 <fnSerialMotionAction+0x2c8>

	case 25:
		//SET POINT ACK CHECK
		TxHeader.StdId = 0x60A;
 80016e4:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 80016e6:	f240 620a 	movw	r2, #1546	; 0x60a
 80016ea:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80016ec:	4b6e      	ldr	r3, [pc, #440]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 80016ee:	2208      	movs	r2, #8
 80016f0:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80016f2:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80016f8:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80016fa:	2241      	movs	r2, #65	; 0x41
 80016fc:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80016fe:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001700:	2260      	movs	r2, #96	; 0x60
 8001702:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001704:	4b69      	ldr	r3, [pc, #420]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001706:	2200      	movs	r2, #0
 8001708:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <fnSerialMotionAction+0x2dc>)
 800170c:	2200      	movs	r2, #0
 800170e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001710:	4b66      	ldr	r3, [pc, #408]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001712:	2200      	movs	r2, #0
 8001714:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001718:	2200      	movs	r2, #0
 800171a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800171c:	4b63      	ldr	r3, [pc, #396]	; (80018ac <fnSerialMotionAction+0x2dc>)
 800171e:	2200      	movs	r2, #0
 8001720:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <fnSerialMotionAction+0x2e0>)
 8001724:	4a61      	ldr	r2, [pc, #388]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001726:	4960      	ldr	r1, [pc, #384]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 8001728:	4862      	ldr	r0, [pc, #392]	; (80018b4 <fnSerialMotionAction+0x2e4>)
 800172a:	f001 fc23 	bl	8002f74 <HAL_CAN_AddTxMessage>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <fnSerialMotionAction+0x16e>
			fnLEDsErrorState();
 8001734:	f7ff f8ca 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 8001738:	f000 fc9c 	bl	8002074 <Error_Handler>
		}
		else if (RxData[5] & 0b10000) {
			iSerialMachineStatus = 30;
		}
		break;
 800173c:	e0a9      	b.n	8001892 <fnSerialMotionAction+0x2c2>
		else if (RxData[5] & 0b10000) {
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <fnSerialMotionAction+0x2ec>)
 8001740:	795b      	ldrb	r3, [r3, #5]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80a3 	beq.w	8001892 <fnSerialMotionAction+0x2c2>
			iSerialMachineStatus = 30;
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 800174e:	221e      	movs	r2, #30
 8001750:	701a      	strb	r2, [r3, #0]
		break;
 8001752:	e09e      	b.n	8001892 <fnSerialMotionAction+0x2c2>

	case 30:
		//STOP SUPPLY
		TxHeader.StdId = 0x60A;
 8001754:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 8001756:	f240 620a 	movw	r2, #1546	; 0x60a
 800175a:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800175c:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 800175e:	2208      	movs	r2, #8
 8001760:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x22;
 8001762:	4b52      	ldr	r3, [pc, #328]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001764:	2222      	movs	r2, #34	; 0x22
 8001766:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x40;
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <fnSerialMotionAction+0x2dc>)
 800176a:	2240      	movs	r2, #64	; 0x40
 800176c:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 800176e:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001770:	2260      	movs	r2, #96	; 0x60
 8001772:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 8001774:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001776:	2200      	movs	r2, #0
 8001778:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x0F;
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <fnSerialMotionAction+0x2dc>)
 800177c:	220f      	movs	r2, #15
 800177e:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 8001780:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001782:	2200      	movs	r2, #0
 8001784:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001788:	2200      	movs	r2, #0
 800178a:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 800178c:	4b47      	ldr	r3, [pc, #284]	; (80018ac <fnSerialMotionAction+0x2dc>)
 800178e:	2200      	movs	r2, #0
 8001790:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <fnSerialMotionAction+0x2e0>)
 8001794:	4a45      	ldr	r2, [pc, #276]	; (80018ac <fnSerialMotionAction+0x2dc>)
 8001796:	4944      	ldr	r1, [pc, #272]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 8001798:	4846      	ldr	r0, [pc, #280]	; (80018b4 <fnSerialMotionAction+0x2e4>)
 800179a:	f001 fbeb 	bl	8002f74 <HAL_CAN_AddTxMessage>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <fnSerialMotionAction+0x1de>
			fnLEDsErrorState();
 80017a4:	f7ff f892 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 80017a8:	f000 fc64 	bl	8002074 <Error_Handler>
		}
		else{
			iSerialMachineStatus = 35;
		}
		break;
 80017ac:	e074      	b.n	8001898 <fnSerialMotionAction+0x2c8>
			iSerialMachineStatus = 35;
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 80017b0:	2223      	movs	r2, #35	; 0x23
 80017b2:	701a      	strb	r2, [r3, #0]
		break;
 80017b4:	e070      	b.n	8001898 <fnSerialMotionAction+0x2c8>

	case 35:
		//TARGET REACHED CHECK
		TxHeader.StdId = 0x60A;
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 80017b8:	f240 620a 	movw	r2, #1546	; 0x60a
 80017bc:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 80017c0:	2208      	movs	r2, #8
 80017c2:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017cc:	2241      	movs	r2, #65	; 0x41
 80017ce:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017d2:	2260      	movs	r2, #96	; 0x60
 80017d4:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80017d6:	4b35      	ldr	r3, [pc, #212]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80017e2:	4b32      	ldr	r3, [pc, #200]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 80017ee:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <fnSerialMotionAction+0x2e0>)
 80017f6:	4a2d      	ldr	r2, [pc, #180]	; (80018ac <fnSerialMotionAction+0x2dc>)
 80017f8:	492b      	ldr	r1, [pc, #172]	; (80018a8 <fnSerialMotionAction+0x2d8>)
 80017fa:	482e      	ldr	r0, [pc, #184]	; (80018b4 <fnSerialMotionAction+0x2e4>)
 80017fc:	f001 fbba 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <fnSerialMotionAction+0x240>
			fnLEDsErrorState();
 8001806:	f7ff f861 	bl	80008cc <fnLEDsErrorState>
			Error_Handler();
 800180a:	f000 fc33 	bl	8002074 <Error_Handler>
		}
		else if (RxData[5] & 0b00100) {
			iSerialCounter++;
			iSerialMachineStatus = 40;
		}
		break;
 800180e:	e042      	b.n	8001896 <fnSerialMotionAction+0x2c6>
		else if (RxData[5] & 0b00100) {
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <fnSerialMotionAction+0x2ec>)
 8001812:	795b      	ldrb	r3, [r3, #5]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03c      	beq.n	8001896 <fnSerialMotionAction+0x2c6>
			iSerialCounter++;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <fnSerialMotionAction+0x2f0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <fnSerialMotionAction+0x2f0>)
 8001826:	701a      	strb	r2, [r3, #0]
			iSerialMachineStatus = 40;
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 800182a:	2228      	movs	r2, #40	; 0x28
 800182c:	701a      	strb	r2, [r3, #0]
		break;
 800182e:	e032      	b.n	8001896 <fnSerialMotionAction+0x2c6>

	case 40:
		//REPETITION COUNTER CHECK
		if (iSerialCounter / 2 == iSerialReps) {
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <fnSerialMotionAction+0x2f0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <fnSerialMotionAction+0x2f4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d112      	bne.n	8001866 <fnSerialMotionAction+0x296>
			iSerialMachineStatus = 100;
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 8001842:	2264      	movs	r2, #100	; 0x64
 8001844:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <fnSerialMotionAction+0x2f8>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <fnSerialMotionAction+0x2f4>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim10);
 8001852:	481e      	ldr	r0, [pc, #120]	; (80018cc <fnSerialMotionAction+0x2fc>)
 8001854:	f003 fe43 	bl	80054de <HAL_TIM_Base_Stop>
			//SEND INFO THAT ENGINE IS READY
			HAL_UART_Transmit(&huart3, "redy", 4, 100);
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	2204      	movs	r2, #4
 800185c:	491c      	ldr	r1, [pc, #112]	; (80018d0 <fnSerialMotionAction+0x300>)
 800185e:	4810      	ldr	r0, [pc, #64]	; (80018a0 <fnSerialMotionAction+0x2d0>)
 8001860:	f004 fb48 	bl	8005ef4 <HAL_UART_Transmit>
		}
		else {
			iPosition = 0;
			iSerialMachineStatus = 10;
		}
		break;
 8001864:	e018      	b.n	8001898 <fnSerialMotionAction+0x2c8>
		else if (iSerialCounter % 2 == 0) {
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <fnSerialMotionAction+0x2f0>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <fnSerialMotionAction+0x2b4>
			iPosition = iSerialRange;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <fnSerialMotionAction+0x2f8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <fnSerialMotionAction+0x2e8>)
 800187a:	6013      	str	r3, [r2, #0]
			iSerialMachineStatus = 10;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 800187e:	220a      	movs	r2, #10
 8001880:	701a      	strb	r2, [r3, #0]
		break;
 8001882:	e009      	b.n	8001898 <fnSerialMotionAction+0x2c8>
			iPosition = 0;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <fnSerialMotionAction+0x2e8>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
			iSerialMachineStatus = 10;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <fnSerialMotionAction+0x2d4>)
 800188c:	220a      	movs	r2, #10
 800188e:	701a      	strb	r2, [r3, #0]
		break;
 8001890:	e002      	b.n	8001898 <fnSerialMotionAction+0x2c8>
		break;
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <fnSerialMotionAction+0x2c8>
		break;
 8001896:	bf00      	nop
	}
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	0800a890 	.word	0x0800a890
 80018a0:	200004a4 	.word	0x200004a4
 80018a4:	20000005 	.word	0x20000005
 80018a8:	20000298 	.word	0x20000298
 80018ac:	20000258 	.word	0x20000258
 80018b0:	20000260 	.word	0x20000260
 80018b4:	20000228 	.word	0x20000228
 80018b8:	20000254 	.word	0x20000254
 80018bc:	20000264 	.word	0x20000264
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	20000014 	.word	0x20000014
 80018c8:	20000010 	.word	0x20000010
 80018cc:	200002dc 	.word	0x200002dc
 80018d0:	0800a888 	.word	0x0800a888

080018d4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2a      	ldr	r2, [pc, #168]	; (800198c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d112      	bne.n	800190c <HAL_TIM_PeriodElapsedCallback+0x38>
		if (iHomingStatus != 1) {
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d006      	beq.n	80018fc <HAL_TIM_PeriodElapsedCallback+0x28>
			fnInit();
 80018ee:	f7ff f803 	bl	80008f8 <fnInit>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80018f2:	2101      	movs	r1, #1
 80018f4:	4827      	ldr	r0, [pc, #156]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018f6:	f002 fae8 	bl	8003eca <HAL_GPIO_TogglePin>
	else if(htim -> Instance == TIM14){
		fnReset();
	}


}
 80018fa:	e043      	b.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xb0>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2101      	movs	r1, #1
 8001900:	4824      	ldr	r0, [pc, #144]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001902:	f002 fac9 	bl	8003e98 <HAL_GPIO_WritePin>
			fnEncReadCount();
 8001906:	f7ff fc6f 	bl	80011e8 <fnEncReadCount>
}
 800190a:	e03b      	b.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xb0>
	else if(htim -> Instance == TIM7){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d106      	bne.n	8001924 <HAL_TIM_PeriodElapsedCallback+0x50>
		fnSingleMotionAction();
 8001916:	f7ff fd17 	bl	8001348 <fnSingleMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	481d      	ldr	r0, [pc, #116]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800191e:	f002 fad4 	bl	8003eca <HAL_GPIO_TogglePin>
}
 8001922:	e02f      	b.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xb0>
	else if(htim -> Instance == TIM10){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d106      	bne.n	800193c <HAL_TIM_PeriodElapsedCallback+0x68>
		fnSerialMotionAction();
 800192e:	f7ff fe4f 	bl	80015d0 <fnSerialMotionAction>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	4817      	ldr	r0, [pc, #92]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001936:	f002 fac8 	bl	8003eca <HAL_GPIO_TogglePin>
}
 800193a:	e023      	b.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xb0>
	else if(htim -> Instance == TIM11){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d117      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0xa2>
		length = sprintf(data_msg, "e%.3f \r\n", fEncAngle);
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001950:	ec53 2b17 	vmov	r2, r3, d7
 8001954:	4914      	ldr	r1, [pc, #80]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001956:	4815      	ldr	r0, [pc, #84]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001958:	f006 fcfc 	bl	8008354 <siprintf>
 800195c:	4603      	mov	r3, r0
 800195e:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001960:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196c:	490f      	ldr	r1, [pc, #60]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001970:	f004 fac0 	bl	8005ef4 <HAL_UART_Transmit>
}
 8001974:	e006      	b.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xb0>
	else if(htim -> Instance == TIM14){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0xb0>
		fnReset();
 8001980:	f7ff fb0a 	bl	8000f98 <fnReset>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40001000 	.word	0x40001000
 8001990:	20000003 	.word	0x20000003
 8001994:	40020400 	.word	0x40020400
 8001998:	40001400 	.word	0x40001400
 800199c:	40014400 	.word	0x40014400
 80019a0:	40014800 	.word	0x40014800
 80019a4:	20000214 	.word	0x20000214
 80019a8:	0800a898 	.word	0x0800a898
 80019ac:	200002cc 	.word	0x200002cc
 80019b0:	20000250 	.word	0x20000250
 80019b4:	200004a4 	.word	0x200004a4
 80019b8:	40002000 	.word	0x40002000

080019bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019cc:	d129      	bne.n	8001a22 <HAL_GPIO_EXTI_Callback+0x66>
		TxHeader.StdId = 0x60A;
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x70>)
 80019d0:	f240 620a 	movw	r2, #1546	; 0x60a
 80019d4:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x70>)
 80019d8:	2208      	movs	r2, #8
 80019da:	611a      	str	r2, [r3, #16]
		TxData[0] = 0x40;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x41;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 80019e4:	2241      	movs	r2, #65	; 0x41
 80019e6:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x60;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 80019ea:	2260      	movs	r2, #96	; 0x60
 80019ec:	709a      	strb	r2, [r3, #2]
		TxData[3] = 0x00;
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	70da      	strb	r2, [r3, #3]
		TxData[4] = 0x00;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	711a      	strb	r2, [r3, #4]
		TxData[5] = 0x00;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	715a      	strb	r2, [r3, #5]
		TxData[6] = 0x00;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	719a      	strb	r2, [r3, #6]
		TxData[7] = 0x00;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	71da      	strb	r2, [r3, #7]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x78>)
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a10:	4906      	ldr	r1, [pc, #24]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x70>)
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001a14:	f001 faae 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_GPIO_EXTI_Callback+0x66>
			Error_Handler();
 8001a1e:	f000 fb29 	bl	8002074 <Error_Handler>

		}
	}
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000298 	.word	0x20000298
 8001a30:	20000258 	.word	0x20000258
 8001a34:	20000260 	.word	0x20000260
 8001a38:	20000228 	.word	0x20000228

08001a3c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a40:	f000 ffeb 	bl	8002a1a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a44:	f000 f874 	bl	8001b30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a48:	f7fe fe52 	bl	80006f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001a4c:	f000 feb6 	bl	80027bc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001a50:	f000 ff30 	bl	80028b4 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001a54:	f7fe fdc8 	bl	80005e8 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001a58:	f000 fcdc 	bl	8002414 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001a5c:	f000 fc84 	bl	8002368 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001a60:	f000 fd10 	bl	8002484 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001a64:	f000 fd46 	bl	80024f4 <MX_TIM10_Init>
	MX_TIM14_Init();
 8001a68:	f000 fd8c 	bl	8002584 <MX_TIM14_Init>
	MX_TIM11_Init();
 8001a6c:	f000 fd66 	bl	800253c <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a70:	f7fe fe3e 	bl	80006f0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001a74:	f000 fea2 	bl	80027bc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001a78:	f000 ff1c 	bl	80028b4 <MX_USB_OTG_FS_PCD_Init>
	MX_CAN1_Init();
 8001a7c:	f7fe fdb4 	bl	80005e8 <MX_CAN1_Init>
	MX_TIM6_Init();
 8001a80:	f000 fcc8 	bl	8002414 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001a84:	f000 fc70 	bl	8002368 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001a88:	f000 fcfc 	bl	8002484 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001a8c:	f000 fd32 	bl	80024f4 <MX_TIM10_Init>
	MX_TIM14_Init();
 8001a90:	f000 fd78 	bl	8002584 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	// UART START
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8001a94:	2204      	movs	r2, #4
 8001a96:	4921      	ldr	r1, [pc, #132]	; (8001b1c <main+0xe0>)
 8001a98:	4821      	ldr	r0, [pc, #132]	; (8001b20 <main+0xe4>)
 8001a9a:	f004 fabe 	bl	800601a <HAL_UART_Receive_IT>

	// CAN START
	HAL_CAN_Start(&hcan1);
 8001a9e:	4821      	ldr	r0, [pc, #132]	; (8001b24 <main+0xe8>)
 8001aa0:	f001 fa24 	bl	8002eec <HAL_CAN_Start>

	// CAN CONFIG
	// TxHeader param config
	TxHeader.StdId = 0x000;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <main+0xec>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <main+0xec>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <main+0xec>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <main+0xec>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 2;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <main+0xec>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <main+0xec>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	751a      	strb	r2, [r3, #20]

	// CANFilter param config
	CANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <main+0xf0>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	621a      	str	r2, [r3, #32]
	CANFilter.FilterBank = 18;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <main+0xf0>)
 8001ad0:	2212      	movs	r2, #18
 8001ad2:	615a      	str	r2, [r3, #20]
	CANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <main+0xf0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
	CANFilter.FilterIdHigh = 0x58A<<5;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <main+0xf0>)
 8001adc:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001ae0:	601a      	str	r2, [r3, #0]
	CANFilter.FilterIdLow = 0x0000;
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <main+0xf0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
	CANFilter.FilterMaskIdHigh = 0x58A<<5;
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <main+0xf0>)
 8001aea:	f24b 1240 	movw	r2, #45376	; 0xb140
 8001aee:	609a      	str	r2, [r3, #8]
	CANFilter.FilterMaskIdLow = 0x0000;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <main+0xf0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
	CANFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <main+0xf0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
	CANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <main+0xf0>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	61da      	str	r2, [r3, #28]
	CANFilter.SlaveStartFilterBank = 20;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <main+0xf0>)
 8001b04:	2214      	movs	r2, #20
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &CANFilter);
 8001b08:	4908      	ldr	r1, [pc, #32]	; (8001b2c <main+0xf0>)
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <main+0xe8>)
 8001b0c:	f001 f902 	bl	8002d14 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001b10:	2102      	movs	r1, #2
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <main+0xe8>)
 8001b14:	f001 fc1b 	bl	800334e <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001b18:	e7fe      	b.n	8001b18 <main+0xdc>
 8001b1a:	bf00      	nop
 8001b1c:	2000026c 	.word	0x2000026c
 8001b20:	200004a4 	.word	0x200004a4
 8001b24:	20000228 	.word	0x20000228
 8001b28:	20000298 	.word	0x20000298
 8001b2c:	20000270 	.word	0x20000270

08001b30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0b8      	sub	sp, #224	; 0xe0
 8001b34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b3a:	2234      	movs	r2, #52	; 0x34
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f005 ffbc 	bl	8007abc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2290      	movs	r2, #144	; 0x90
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f005 ffad 	bl	8007abc <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001b62:	f002 fb2d 	bl	80041c0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <SystemClock_Config+0x128>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <SystemClock_Config+0x128>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <SystemClock_Config+0x128>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <SystemClock_Config+0x12c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b86:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <SystemClock_Config+0x12c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <SystemClock_Config+0x12c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ba0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001bbc:	2360      	movs	r3, #96	; 0x60
 8001bbe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fb51 	bl	8004280 <HAL_RCC_OscConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001be4:	f000 fa46 	bl	8002074 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001be8:	f002 fafa 	bl	80041e0 <HAL_PWREx_EnableOverDrive>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001bf2:	f000 fa3f 	bl	8002074 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf6:	230f      	movs	r3, #15
 8001bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fddd 	bl	80047dc <HAL_RCC_ClockConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0xfc>
	{
		Error_Handler();
 8001c28:	f000 fa24 	bl	8002074 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <SystemClock_Config+0x130>)
 8001c2e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 ffce 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0x11e>
	{
		Error_Handler();
 8001c4a:	f000 fa13 	bl	8002074 <Error_Handler>
	}
}
 8001c4e:	bf00      	nop
 8001c50:	37e0      	adds	r7, #224	; 0xe0
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	00200100 	.word	0x00200100

08001c64 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4aab      	ldr	r2, [pc, #684]	; (8001f20 <HAL_UART_RxCpltCallback+0x2bc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	f040 81c8 	bne.w	8002008 <HAL_UART_RxCpltCallback+0x3a4>

		//INIT COMMAND
		if(strncmp(sUserMessage, sInitCommand,4) == 0){
 8001c78:	2204      	movs	r2, #4
 8001c7a:	49aa      	ldr	r1, [pc, #680]	; (8001f24 <HAL_UART_RxCpltCallback+0x2c0>)
 8001c7c:	48aa      	ldr	r0, [pc, #680]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001c7e:	f006 fb89 	bl	8008394 <strncmp>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_UART_RxCpltCallback+0x38>
			iMachineStatus = 0;
 8001c88:	4ba8      	ldr	r3, [pc, #672]	; (8001f2c <HAL_UART_RxCpltCallback+0x2c8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 0;
 8001c8e:	4ba8      	ldr	r3, [pc, #672]	; (8001f30 <HAL_UART_RxCpltCallback+0x2cc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8001c94:	48a7      	ldr	r0, [pc, #668]	; (8001f34 <HAL_UART_RxCpltCallback+0x2d0>)
 8001c96:	f003 fc49 	bl	800552c <HAL_TIM_Base_Start_IT>
 8001c9a:	e1bb      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
		}

		//MODE SELECTION [SNGL/SERL]
		else if(strncmp(sUserMessage, sSingle_mode, 4) == 0){
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	49a6      	ldr	r1, [pc, #664]	; (8001f38 <HAL_UART_RxCpltCallback+0x2d4>)
 8001ca0:	48a1      	ldr	r0, [pc, #644]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001ca2:	f006 fb77 	bl	8008394 <strncmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_UART_RxCpltCallback+0x58>
			iMode = 0;
 8001cac:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <HAL_UART_RxCpltCallback+0x2d8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	48a2      	ldr	r0, [pc, #648]	; (8001f40 <HAL_UART_RxCpltCallback+0x2dc>)
 8001cb6:	f002 f908 	bl	8003eca <HAL_GPIO_TogglePin>
 8001cba:	e1ab      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
		}

		else if(strncmp(sUserMessage, sSerial_mode, 4) == 0){
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	49a1      	ldr	r1, [pc, #644]	; (8001f44 <HAL_UART_RxCpltCallback+0x2e0>)
 8001cc0:	4899      	ldr	r0, [pc, #612]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001cc2:	f006 fb67 	bl	8008394 <strncmp>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_UART_RxCpltCallback+0x78>
			iMode = 1;
 8001ccc:	4b9b      	ldr	r3, [pc, #620]	; (8001f3c <HAL_UART_RxCpltCallback+0x2d8>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	489a      	ldr	r0, [pc, #616]	; (8001f40 <HAL_UART_RxCpltCallback+0x2dc>)
 8001cd6:	f002 f8f8 	bl	8003eca <HAL_GPIO_TogglePin>
 8001cda:	e19b      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
		}

		//LEG SELECTION [RGHT/LEFT]
		else if(strncmp(sUserMessage, sLeft, 4) == 0){
 8001cdc:	2204      	movs	r2, #4
 8001cde:	499a      	ldr	r1, [pc, #616]	; (8001f48 <HAL_UART_RxCpltCallback+0x2e4>)
 8001ce0:	4891      	ldr	r0, [pc, #580]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001ce2:	f006 fb57 	bl	8008394 <strncmp>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <HAL_UART_RxCpltCallback+0x96>
			iSelected_leg = 0;
 8001cec:	4b97      	ldr	r3, [pc, #604]	; (8001f4c <HAL_UART_RxCpltCallback+0x2e8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001cf2:	4897      	ldr	r0, [pc, #604]	; (8001f50 <HAL_UART_RxCpltCallback+0x2ec>)
 8001cf4:	f003 fc1a 	bl	800552c <HAL_TIM_Base_Start_IT>
 8001cf8:	e18c      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
		}

		else if(strncmp(sUserMessage, sRight, 4) == 0){
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4995      	ldr	r1, [pc, #596]	; (8001f54 <HAL_UART_RxCpltCallback+0x2f0>)
 8001cfe:	488a      	ldr	r0, [pc, #552]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d00:	f006 fb48 	bl	8008394 <strncmp>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_UART_RxCpltCallback+0xb4>
			iSelected_leg = 1;
 8001d0a:	4b90      	ldr	r3, [pc, #576]	; (8001f4c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 8001d10:	488f      	ldr	r0, [pc, #572]	; (8001f50 <HAL_UART_RxCpltCallback+0x2ec>)
 8001d12:	f003 fc0b 	bl	800552c <HAL_TIM_Base_Start_IT>
 8001d16:	e17d      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
		}

		//SINGLE POSITION [P]
		else if(sUserMessage[3] == 'P'){
 8001d18:	4b83      	ldr	r3, [pc, #524]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	2b50      	cmp	r3, #80	; 0x50
 8001d1e:	d113      	bne.n	8001d48 <HAL_UART_RxCpltCallback+0xe4>

			if(iMode == 0){
 8001d20:	4b86      	ldr	r3, [pc, #536]	; (8001f3c <HAL_UART_RxCpltCallback+0x2d8>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8174 	bne.w	8002014 <HAL_UART_RxCpltCallback+0x3b0>
				iPosition = (uint32_t)(atoi(sUserMessage));
 8001d2c:	487e      	ldr	r0, [pc, #504]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d2e:	f005 fe97 	bl	8007a60 <atoi>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <HAL_UART_RxCpltCallback+0x2f4>)
 8001d38:	601a      	str	r2, [r3, #0]
				iSingleMachineStatus = 10;
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_UART_RxCpltCallback+0x2f8>)
 8001d3c:	220a      	movs	r2, #10
 8001d3e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim7);
 8001d40:	4887      	ldr	r0, [pc, #540]	; (8001f60 <HAL_UART_RxCpltCallback+0x2fc>)
 8001d42:	f003 fbf3 	bl	800552c <HAL_TIM_Base_Start_IT>
 8001d46:	e165      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>

			}
		}

		//START SERIAL [STSE]
		else if(strncmp(sUserMessage, sSerialStart, 4) == 0){
 8001d48:	2204      	movs	r2, #4
 8001d4a:	4986      	ldr	r1, [pc, #536]	; (8001f64 <HAL_UART_RxCpltCallback+0x300>)
 8001d4c:	4876      	ldr	r0, [pc, #472]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d4e:	f006 fb21 	bl	8008394 <strncmp>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11f      	bne.n	8001d98 <HAL_UART_RxCpltCallback+0x134>

			if(iMode == 1 && iSelected_leg != 100 && iSerialReps != 0 && iSerialRange != 0){
 8001d58:	4b78      	ldr	r3, [pc, #480]	; (8001f3c <HAL_UART_RxCpltCallback+0x2d8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f040 8158 	bne.w	8002014 <HAL_UART_RxCpltCallback+0x3b0>
 8001d64:	4b79      	ldr	r3, [pc, #484]	; (8001f4c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	f000 8152 	beq.w	8002014 <HAL_UART_RxCpltCallback+0x3b0>
 8001d70:	4b7d      	ldr	r3, [pc, #500]	; (8001f68 <HAL_UART_RxCpltCallback+0x304>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 814d 	beq.w	8002014 <HAL_UART_RxCpltCallback+0x3b0>
 8001d7a:	4b7c      	ldr	r3, [pc, #496]	; (8001f6c <HAL_UART_RxCpltCallback+0x308>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8148 	beq.w	8002014 <HAL_UART_RxCpltCallback+0x3b0>
				iSerialCounter = 0;
 8001d84:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <HAL_UART_RxCpltCallback+0x30c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
				iSerialMachineStatus = 10;
 8001d8a:	4b7a      	ldr	r3, [pc, #488]	; (8001f74 <HAL_UART_RxCpltCallback+0x310>)
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 8001d90:	4879      	ldr	r0, [pc, #484]	; (8001f78 <HAL_UART_RxCpltCallback+0x314>)
 8001d92:	f003 fbcb 	bl	800552c <HAL_TIM_Base_Start_IT>
 8001d96:	e13d      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>

		}


		//SERIAL - REPETITIONS [N]
		else if(sUserMessage[3] == 'N'){
 8001d98:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001d9a:	78db      	ldrb	r3, [r3, #3]
 8001d9c:	2b4e      	cmp	r3, #78	; 0x4e
 8001d9e:	d10d      	bne.n	8001dbc <HAL_UART_RxCpltCallback+0x158>
			if(iMode == 1){
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_UART_RxCpltCallback+0x2d8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	f040 8134 	bne.w	8002014 <HAL_UART_RxCpltCallback+0x3b0>
				iSerialReps = (uint32_t)(atoi(sUserMessage));
 8001dac:	485e      	ldr	r0, [pc, #376]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dae:	f005 fe57 	bl	8007a60 <atoi>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b6c      	ldr	r3, [pc, #432]	; (8001f68 <HAL_UART_RxCpltCallback+0x304>)
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	e12b      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
			}
		}

		//SERIAL - RANGE [R]
		else if(sUserMessage[3] == 'R'){
 8001dbc:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dbe:	78db      	ldrb	r3, [r3, #3]
 8001dc0:	2b52      	cmp	r3, #82	; 0x52
 8001dc2:	d111      	bne.n	8001de8 <HAL_UART_RxCpltCallback+0x184>
			if(iMode == 1){
 8001dc4:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_UART_RxCpltCallback+0x2d8>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	f040 8122 	bne.w	8002014 <HAL_UART_RxCpltCallback+0x3b0>
				iSerialRange = (uint32_t)(atoi(sUserMessage));
 8001dd0:	4855      	ldr	r0, [pc, #340]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dd2:	f005 fe45 	bl	8007a60 <atoi>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <HAL_UART_RxCpltCallback+0x308>)
 8001ddc:	601a      	str	r2, [r3, #0]
				iPosition = iSerialRange;
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_UART_RxCpltCallback+0x308>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5d      	ldr	r2, [pc, #372]	; (8001f58 <HAL_UART_RxCpltCallback+0x2f4>)
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e115      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
			}
		}

		//GENERAL STOP COMMAND [HALT]
		else if(strncmp(sUserMessage, sGeneralStop, 4) == 0){
 8001de8:	2204      	movs	r2, #4
 8001dea:	4964      	ldr	r1, [pc, #400]	; (8001f7c <HAL_UART_RxCpltCallback+0x318>)
 8001dec:	484e      	ldr	r0, [pc, #312]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001dee:	f006 fad1 	bl	8008394 <strncmp>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d166      	bne.n	8001ec6 <HAL_UART_RxCpltCallback+0x262>

			//QUICK STOP
			TxHeader.StdId = 0x60A;
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_UART_RxCpltCallback+0x31c>)
 8001dfa:	f240 620a 	movw	r2, #1546	; 0x60a
 8001dfe:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 8;
 8001e00:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <HAL_UART_RxCpltCallback+0x31c>)
 8001e02:	2208      	movs	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
			TxData[0] = 0x22;
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e08:	2222      	movs	r2, #34	; 0x22
 8001e0a:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x40;
 8001e0c:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0x60;
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e14:	2260      	movs	r2, #96	; 0x60
 8001e16:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x00;
 8001e18:	4b5a      	ldr	r3, [pc, #360]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x02;
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e20:	2202      	movs	r2, #2
 8001e22:	711a      	strb	r2, [r3, #4]
			TxData[5] = 0x00;
 8001e24:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	715a      	strb	r2, [r3, #5]
			TxData[6] = 0x00;
 8001e2a:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	719a      	strb	r2, [r3, #6]
			TxData[7] = 0x00;
 8001e30:	4b54      	ldr	r3, [pc, #336]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	71da      	strb	r2, [r3, #7]

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_UART_RxCpltCallback+0x324>)
 8001e38:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e3a:	4951      	ldr	r1, [pc, #324]	; (8001f80 <HAL_UART_RxCpltCallback+0x31c>)
 8001e3c:	4853      	ldr	r0, [pc, #332]	; (8001f8c <HAL_UART_RxCpltCallback+0x328>)
 8001e3e:	f001 f899 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_UART_RxCpltCallback+0x1ee>
				fnLEDsErrorState();
 8001e48:	f7fe fd40 	bl	80008cc <fnLEDsErrorState>
				Error_Handler();
 8001e4c:	f000 f912 	bl	8002074 <Error_Handler>
 8001e50:	e0e0      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
			}
			else{
				//DISBALE VOLTAGE
				TxHeader.StdId = 0x60A;
 8001e52:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <HAL_UART_RxCpltCallback+0x31c>)
 8001e54:	f240 620a 	movw	r2, #1546	; 0x60a
 8001e58:	601a      	str	r2, [r3, #0]
				TxHeader.DLC = 8;
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <HAL_UART_RxCpltCallback+0x31c>)
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	611a      	str	r2, [r3, #16]
				TxData[0] = 0x22;
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e62:	2222      	movs	r2, #34	; 0x22
 8001e64:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0x40;
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0x60;
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e6e:	2260      	movs	r2, #96	; 0x60
 8001e70:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0x00;
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0x00;
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	711a      	strb	r2, [r3, #4]
				TxData[5] = 0x00;
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	715a      	strb	r2, [r3, #5]
				TxData[6] = 0x00;
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	719a      	strb	r2, [r3, #6]
				TxData[7] = 0x00;
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	71da      	strb	r2, [r3, #7]

				if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001e90:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_UART_RxCpltCallback+0x324>)
 8001e92:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <HAL_UART_RxCpltCallback+0x320>)
 8001e94:	493a      	ldr	r1, [pc, #232]	; (8001f80 <HAL_UART_RxCpltCallback+0x31c>)
 8001e96:	483d      	ldr	r0, [pc, #244]	; (8001f8c <HAL_UART_RxCpltCallback+0x328>)
 8001e98:	f001 f86c 	bl	8002f74 <HAL_CAN_AddTxMessage>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <HAL_UART_RxCpltCallback+0x248>
					fnLEDsErrorState();
 8001ea2:	f7fe fd13 	bl	80008cc <fnLEDsErrorState>
					Error_Handler();
 8001ea6:	f000 f8e5 	bl	8002074 <Error_Handler>
 8001eaa:	e0b3      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
				}
				else {
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <HAL_UART_RxCpltCallback+0x2dc>)
 8001eb4:	f001 fff0 	bl	8003e98 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart3, "STOP", 4, 100);
 8001eb8:	2364      	movs	r3, #100	; 0x64
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_UART_RxCpltCallback+0x32c>)
 8001ebe:	4835      	ldr	r0, [pc, #212]	; (8001f94 <HAL_UART_RxCpltCallback+0x330>)
 8001ec0:	f004 f818 	bl	8005ef4 <HAL_UART_Transmit>
 8001ec4:	e0a6      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
				}
			}
		}

		//RESET COMMAND [RSET]
		else if(strncmp(sUserMessage, sReset, 4) == 0){
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	4933      	ldr	r1, [pc, #204]	; (8001f98 <HAL_UART_RxCpltCallback+0x334>)
 8001eca:	4817      	ldr	r0, [pc, #92]	; (8001f28 <HAL_UART_RxCpltCallback+0x2c4>)
 8001ecc:	f006 fa62 	bl	8008394 <strncmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d162      	bne.n	8001f9c <HAL_UART_RxCpltCallback+0x338>
			iMachineStatus = 10;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_UART_RxCpltCallback+0x2c8>)
 8001ed8:	220a      	movs	r2, #10
 8001eda:	701a      	strb	r2, [r3, #0]
			iHomingStatus = 100;
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_UART_RxCpltCallback+0x2cc>)
 8001ede:	2264      	movs	r2, #100	; 0x64
 8001ee0:	701a      	strb	r2, [r3, #0]
			iMode = 100;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_UART_RxCpltCallback+0x2d8>)
 8001ee4:	2264      	movs	r2, #100	; 0x64
 8001ee6:	701a      	strb	r2, [r3, #0]

			iSerialMachineStatus = 100;
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_UART_RxCpltCallback+0x310>)
 8001eea:	2264      	movs	r2, #100	; 0x64
 8001eec:	701a      	strb	r2, [r3, #0]
			iSerialRange = 0;
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_UART_RxCpltCallback+0x308>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
			iSerialReps = 0;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_UART_RxCpltCallback+0x304>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]

			iSingleMachineStatus = 100;
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_UART_RxCpltCallback+0x2f8>)
 8001efc:	2264      	movs	r2, #100	; 0x64
 8001efe:	701a      	strb	r2, [r3, #0]
			iPosition = 0;
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_RxCpltCallback+0x2f4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim7);
 8001f06:	4816      	ldr	r0, [pc, #88]	; (8001f60 <HAL_UART_RxCpltCallback+0x2fc>)
 8001f08:	f003 fb88 	bl	800561c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim10);
 8001f0c:	481a      	ldr	r0, [pc, #104]	; (8001f78 <HAL_UART_RxCpltCallback+0x314>)
 8001f0e:	f003 fb85 	bl	800561c <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f18:	4809      	ldr	r0, [pc, #36]	; (8001f40 <HAL_UART_RxCpltCallback+0x2dc>)
 8001f1a:	f001 ffbd 	bl	8003e98 <HAL_GPIO_WritePin>
 8001f1e:	e079      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
 8001f20:	40004800 	.word	0x40004800
 8001f24:	0800a8ac 	.word	0x0800a8ac
 8001f28:	2000026c 	.word	0x2000026c
 8001f2c:	20000002 	.word	0x20000002
 8001f30:	20000003 	.word	0x20000003
 8001f34:	200003c0 	.word	0x200003c0
 8001f38:	0800a8e4 	.word	0x0800a8e4
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	0800a8ec 	.word	0x0800a8ec
 8001f48:	0800a8fc 	.word	0x0800a8fc
 8001f4c:	20000001 	.word	0x20000001
 8001f50:	20000374 	.word	0x20000374
 8001f54:	0800a8f4 	.word	0x0800a8f4
 8001f58:	20000254 	.word	0x20000254
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	20000458 	.word	0x20000458
 8001f64:	0800a8c4 	.word	0x0800a8c4
 8001f68:	20000014 	.word	0x20000014
 8001f6c:	20000010 	.word	0x20000010
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	20000005 	.word	0x20000005
 8001f78:	200002dc 	.word	0x200002dc
 8001f7c:	0800a8cc 	.word	0x0800a8cc
 8001f80:	20000298 	.word	0x20000298
 8001f84:	20000258 	.word	0x20000258
 8001f88:	20000260 	.word	0x20000260
 8001f8c:	20000228 	.word	0x20000228
 8001f90:	0800a8a4 	.word	0x0800a8a4
 8001f94:	200004a4 	.word	0x200004a4
 8001f98:	0800a8d4 	.word	0x0800a8d4
		}

		//CONTINUE COMMAND [CONT]
		else if(strncmp(sUserMessage, sContinue, 4) == 0){
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4922      	ldr	r1, [pc, #136]	; (8002028 <HAL_UART_RxCpltCallback+0x3c4>)
 8001fa0:	4822      	ldr	r0, [pc, #136]	; (800202c <HAL_UART_RxCpltCallback+0x3c8>)
 8001fa2:	f006 f9f7 	bl	8008394 <strncmp>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d133      	bne.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
			iMachineStatus=10;
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_UART_RxCpltCallback+0x3cc>)
 8001fae:	220a      	movs	r2, #10
 8001fb0:	701a      	strb	r2, [r3, #0]

			if (iMode == 0 && iSingleMachineStatus != 100) {
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_UART_RxCpltCallback+0x3d0>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d107      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0x368>
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_UART_RxCpltCallback+0x3d4>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b64      	cmp	r3, #100	; 0x64
 8001fc2:	d003      	beq.n	8001fcc <HAL_UART_RxCpltCallback+0x368>
				iSingleMachineStatus=10;
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_UART_RxCpltCallback+0x3d4>)
 8001fc6:	220a      	movs	r2, #10
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e019      	b.n	8002000 <HAL_UART_RxCpltCallback+0x39c>
			}
			else if (iMode == 1 && iSerialMachineStatus != 100) {
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_UART_RxCpltCallback+0x3d0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d114      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x39c>
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_UART_RxCpltCallback+0x3d8>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d010      	beq.n	8002000 <HAL_UART_RxCpltCallback+0x39c>
				if (iSerialMachineStatus == 40) {
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_UART_RxCpltCallback+0x3d8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b28      	cmp	r3, #40	; 0x28
 8001fe4:	d109      	bne.n	8001ffa <HAL_UART_RxCpltCallback+0x396>
					iSerialCounter--;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_UART_RxCpltCallback+0x3dc>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_UART_RxCpltCallback+0x3dc>)
 8001ff0:	701a      	strb	r2, [r3, #0]
					iSerialMachineStatus = 10;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_UART_RxCpltCallback+0x3d8>)
 8001ff4:	220a      	movs	r2, #10
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e002      	b.n	8002000 <HAL_UART_RxCpltCallback+0x39c>
				}
				else{
					iSerialMachineStatus = 10;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_UART_RxCpltCallback+0x3d8>)
 8001ffc:	220a      	movs	r2, #10
 8001ffe:	701a      	strb	r2, [r3, #0]
				}
			}

			HAL_TIM_Base_Start_IT(&htim14);
 8002000:	4810      	ldr	r0, [pc, #64]	; (8002044 <HAL_UART_RxCpltCallback+0x3e0>)
 8002002:	f003 fa93 	bl	800552c <HAL_TIM_Base_Start_IT>
 8002006:	e005      	b.n	8002014 <HAL_UART_RxCpltCallback+0x3b0>
		}


	}
	else{
		HAL_UART_Transmit(&huart3, sErrorMessage, strlen(sErrorMessage), 100);
 8002008:	2364      	movs	r3, #100	; 0x64
 800200a:	220c      	movs	r2, #12
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_UART_RxCpltCallback+0x3e4>)
 800200e:	480f      	ldr	r0, [pc, #60]	; (800204c <HAL_UART_RxCpltCallback+0x3e8>)
 8002010:	f003 ff70 	bl	8005ef4 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3, sUserMessage, 4);
 8002014:	2204      	movs	r2, #4
 8002016:	4905      	ldr	r1, [pc, #20]	; (800202c <HAL_UART_RxCpltCallback+0x3c8>)
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <HAL_UART_RxCpltCallback+0x3e8>)
 800201a:	f003 fffe 	bl	800601a <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart3, "C200", 4, 100);
		}
		break;
	}
	 */
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	0800a8dc 	.word	0x0800a8dc
 800202c:	2000026c 	.word	0x2000026c
 8002030:	20000002 	.word	0x20000002
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004
 800203c:	20000005 	.word	0x20000005
 8002040:	2000000c 	.word	0x2000000c
 8002044:	2000040c 	.word	0x2000040c
 8002048:	0800a8b4 	.word	0x0800a8b4
 800204c:	200004a4 	.word	0x200004a4

08002050 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800205c:	2100      	movs	r1, #0
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f001 f863 	bl	800312a <HAL_CAN_GetRxMessage>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000264 	.word	0x20000264
 8002070:	200002b0 	.word	0x200002b0

08002074 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800207c:	e7fe      	b.n	800207c <Error_Handler+0x8>
	...

08002080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_MspInit+0x44>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_MspInit+0x44>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_MspInit+0x44>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_MspInit+0x44>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_MspInit+0x44>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_MspInit+0x44>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler+0x4>

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002114:	f000 fcbe 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <CAN1_RX0_IRQHandler+0x10>)
 8002122:	f001 f93a 	bl	800339a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000228 	.word	0x20000228

08002130 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002136:	f003 fbd5 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200002dc 	.word	0x200002dc

08002144 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <TIM3_IRQHandler+0x10>)
 800214a:	f003 fbcb 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000328 	.word	0x20000328

08002158 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <USART3_IRQHandler+0x10>)
 800215e:	f003 ffab 	bl	80060b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200004a4 	.word	0x200004a4

0800216c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002170:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002174:	f001 fec4 	bl	8003f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002182:	f003 fbaf 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000040c 	.word	0x2000040c

08002190 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM6_DAC_IRQHandler+0x10>)
 8002196:	f003 fba5 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200003c0 	.word	0x200003c0

080021a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM7_IRQHandler+0x10>)
 80021aa:	f003 fb9b 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000458 	.word	0x20000458

080021b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	return 1;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_kill>:

int _kill(int pid, int sig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021d2:	f005 fc49 	bl	8007a68 <__errno>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2216      	movs	r2, #22
 80021da:	601a      	str	r2, [r3, #0]
	return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_exit>:

void _exit (int status)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe7 	bl	80021c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021fa:	e7fe      	b.n	80021fa <_exit+0x12>

080021fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e00a      	b.n	8002224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800220e:	f3af 8000 	nop.w
 8002212:	4601      	mov	r1, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60ba      	str	r2, [r7, #8]
 800221a:	b2ca      	uxtb	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf0      	blt.n	800220e <_read+0x12>
	}

return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e009      	b.n	800225c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	dbf1      	blt.n	8002248 <_write+0x12>
	}
	return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_close>:

int _close(int file)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	return -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002296:	605a      	str	r2, [r3, #4]
	return 0;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_isatty>:

int _isatty(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	return 1;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <_sbrk+0x5c>)
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <_sbrk+0x60>)
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <_sbrk+0x64>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <_sbrk+0x68>)
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	d207      	bcs.n	8002318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002308:	f005 fbae 	bl	8007a68 <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	220c      	movs	r2, #12
 8002310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	e009      	b.n	800232c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <_sbrk+0x64>)
 8002328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20080000 	.word	0x20080000
 8002338:	00000400 	.word	0x00000400
 800233c:	2000021c 	.word	0x2000021c
 8002340:	20000940 	.word	0x20000940

08002344 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <SystemInit+0x20>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <SystemInit+0x20>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f005 fba0 	bl	8007abc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <MX_TIM3_Init+0xa4>)
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <MX_TIM3_Init+0xa8>)
 800238a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <MX_TIM3_Init+0xa4>)
 800238e:	2200      	movs	r2, #0
 8002390:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <MX_TIM3_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_TIM3_Init+0xa4>)
 800239a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800239e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_TIM3_Init+0xa4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_TIM3_Init+0xa4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023b4:	2301      	movs	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023c4:	2301      	movs	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_TIM3_Init+0xa4>)
 80023d8:	f003 f950 	bl	800567c <HAL_TIM_Encoder_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80023e2:	f7ff fe47 	bl	8002074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <MX_TIM3_Init+0xa4>)
 80023f4:	f003 fc84 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80023fe:	f7ff fe39 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000328 	.word	0x20000328
 8002410:	40000400 	.word	0x40000400

08002414 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <MX_TIM6_Init+0x68>)
 8002426:	4a16      	ldr	r2, [pc, #88]	; (8002480 <MX_TIM6_Init+0x6c>)
 8002428:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_TIM6_Init+0x68>)
 800242c:	f242 527f 	movw	r2, #9599	; 0x257f
 8002430:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_TIM6_Init+0x68>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <MX_TIM6_Init+0x68>)
 800243a:	f241 3287 	movw	r2, #4999	; 0x1387
 800243e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_TIM6_Init+0x68>)
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002446:	480d      	ldr	r0, [pc, #52]	; (800247c <MX_TIM6_Init+0x68>)
 8002448:	f002 fff2 	bl	8005430 <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002452:	f7ff fe0f 	bl	8002074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4806      	ldr	r0, [pc, #24]	; (800247c <MX_TIM6_Init+0x68>)
 8002464:	f003 fc4c 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800246e:	f7ff fe01 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200003c0 	.word	0x200003c0
 8002480:	40001000 	.word	0x40001000

08002484 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_TIM7_Init+0x68>)
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <MX_TIM7_Init+0x6c>)
 8002498:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9600-1;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_TIM7_Init+0x68>)
 800249c:	f242 527f 	movw	r2, #9599	; 0x257f
 80024a0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_TIM7_Init+0x68>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <MX_TIM7_Init+0x68>)
 80024aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80024ae:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_TIM7_Init+0x68>)
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024b6:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_TIM7_Init+0x68>)
 80024b8:	f002 ffba 	bl	8005430 <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80024c2:	f7ff fdd7 	bl	8002074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <MX_TIM7_Init+0x68>)
 80024d4:	f003 fc14 	bl	8005d00 <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80024de:	f7ff fdc9 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000458 	.word	0x20000458
 80024f0:	40001400 	.word	0x40001400

080024f4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_TIM10_Init+0x40>)
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <MX_TIM10_Init+0x44>)
 80024fc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9600-1;
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <MX_TIM10_Init+0x40>)
 8002500:	f242 527f 	movw	r2, #9599	; 0x257f
 8002504:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_TIM10_Init+0x40>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_TIM10_Init+0x40>)
 800250e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002512:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <MX_TIM10_Init+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_TIM10_Init+0x40>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	; (8002534 <MX_TIM10_Init+0x40>)
 8002522:	f002 ff85 	bl	8005430 <HAL_TIM_Base_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800252c:	f7ff fda2 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200002dc 	.word	0x200002dc
 8002538:	40014400 	.word	0x40014400

0800253c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_TIM11_Init+0x40>)
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <MX_TIM11_Init+0x44>)
 8002544:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9599;
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <MX_TIM11_Init+0x40>)
 8002548:	f242 527f 	movw	r2, #9599	; 0x257f
 800254c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_TIM11_Init+0x40>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_TIM11_Init+0x40>)
 8002556:	f242 720f 	movw	r2, #9999	; 0x270f
 800255a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <MX_TIM11_Init+0x40>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_TIM11_Init+0x40>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MX_TIM11_Init+0x40>)
 800256a:	f002 ff61 	bl	8005430 <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002574:	f7ff fd7e 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000374 	.word	0x20000374
 8002580:	40014800 	.word	0x40014800

08002584 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_TIM14_Init+0x40>)
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <MX_TIM14_Init+0x44>)
 800258c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9599;
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <MX_TIM14_Init+0x40>)
 8002590:	f242 527f 	movw	r2, #9599	; 0x257f
 8002594:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <MX_TIM14_Init+0x40>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_TIM14_Init+0x40>)
 800259e:	f241 3287 	movw	r2, #4999	; 0x1387
 80025a2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <MX_TIM14_Init+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_TIM14_Init+0x40>)
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <MX_TIM14_Init+0x40>)
 80025b2:	f002 ff3d 	bl	8005430 <HAL_TIM_Base_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80025bc:	f7ff fd5a 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000040c 	.word	0x2000040c
 80025c8:	40002000 	.word	0x40002000

080025cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a29      	ldr	r2, [pc, #164]	; (8002690 <HAL_TIM_Encoder_MspInit+0xc4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d14b      	bne.n	8002686 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a28      	ldr	r2, [pc, #160]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_TIM_Encoder_MspInit+0xc8>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002636:	2340      	movs	r3, #64	; 0x40
 8002638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002646:	2302      	movs	r3, #2
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	4811      	ldr	r0, [pc, #68]	; (8002698 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002652:	f001 fa75 	bl	8003b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002666:	2302      	movs	r3, #2
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	480a      	ldr	r0, [pc, #40]	; (800269c <HAL_TIM_Encoder_MspInit+0xd0>)
 8002672:	f001 fa65 	bl	8003b40 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	201d      	movs	r0, #29
 800267c:	f001 f997 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002680:	201d      	movs	r0, #29
 8002682:	f001 f9b0 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40000400 	.word	0x40000400
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020800 	.word	0x40020800

080026a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <HAL_TIM_Base_MspInit+0x104>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d114      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a3c      	ldr	r2, [pc, #240]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2036      	movs	r0, #54	; 0x36
 80026d0:	f001 f96d 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026d4:	2036      	movs	r0, #54	; 0x36
 80026d6:	f001 f986 	bl	80039e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80026da:	e05e      	b.n	800279a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM7)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_TIM_Base_MspInit+0x10c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d114      	bne.n	8002710 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026e6:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 80026ec:	f043 0320 	orr.w	r3, r3, #32
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	2037      	movs	r0, #55	; 0x37
 8002704:	f001 f953 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002708:	2037      	movs	r0, #55	; 0x37
 800270a:	f001 f96c 	bl	80039e6 <HAL_NVIC_EnableIRQ>
}
 800270e:	e044      	b.n	800279a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM10)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <HAL_TIM_Base_MspInit+0x110>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d114      	bne.n	8002744 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	2019      	movs	r0, #25
 8002738:	f001 f939 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800273c:	2019      	movs	r0, #25
 800273e:	f001 f952 	bl	80039e6 <HAL_NVIC_EnableIRQ>
}
 8002742:	e02a      	b.n	800279a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM11)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_TIM_Base_MspInit+0x114>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10c      	bne.n	8002768 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 8002754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
}
 8002766:	e018      	b.n	800279a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM14)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_TIM_Base_MspInit+0x118>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d113      	bne.n	800279a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_TIM_Base_MspInit+0x108>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	202d      	movs	r0, #45	; 0x2d
 8002790:	f001 f90d 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002794:	202d      	movs	r0, #45	; 0x2d
 8002796:	f001 f926 	bl	80039e6 <HAL_NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40001000 	.word	0x40001000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40001400 	.word	0x40001400
 80027b0:	40014400 	.word	0x40014400
 80027b4:	40014800 	.word	0x40014800
 80027b8:	40002000 	.word	0x40002000

080027bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <MX_USART3_UART_Init+0x5c>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027e2:	220c      	movs	r2, #12
 80027e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_USART3_UART_Init+0x58>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <MX_USART3_UART_Init+0x58>)
 8002800:	f003 fb2a 	bl	8005e58 <HAL_UART_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800280a:	f7ff fc33 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200004a4 	.word	0x200004a4
 8002818:	40004800 	.word	0x40004800

0800281c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <HAL_UART_MspInit+0x8c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d130      	bne.n	80028a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_UART_MspInit+0x90>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_UART_MspInit+0x90>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_UART_MspInit+0x90>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_UART_MspInit+0x90>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_UART_MspInit+0x90>)
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_UART_MspInit+0x90>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800286e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002880:	2307      	movs	r3, #7
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	4809      	ldr	r0, [pc, #36]	; (80028b0 <HAL_UART_MspInit+0x94>)
 800288c:	f001 f958 	bl	8003b40 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2100      	movs	r1, #0
 8002894:	2027      	movs	r0, #39	; 0x27
 8002896:	f001 f88a 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800289a:	2027      	movs	r0, #39	; 0x27
 800289c:	f001 f8a3 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028a0:	bf00      	nop
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40004800 	.word	0x40004800
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020c00 	.word	0x40020c00

080028b4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80028be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028c2:	2206      	movs	r2, #6
 80028c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028c8:	2202      	movs	r2, #2
 80028ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028da:	2201      	movs	r2, #1
 80028dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028f8:	f001 fb1a 	bl	8003f30 <HAL_PCD_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002902:	f7ff fbb7 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000528 	.word	0x20000528

08002910 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002930:	d141      	bne.n	80029b6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800294a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800295c:	230a      	movs	r3, #10
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4817      	ldr	r0, [pc, #92]	; (80029c4 <HAL_PCD_MspInit+0xb4>)
 8002968:	f001 f8ea 	bl	8003b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800296c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4810      	ldr	r0, [pc, #64]	; (80029c4 <HAL_PCD_MspInit+0xb4>)
 8002982:	f001 f8dd 	bl	8003b40 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 800298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002990:	6353      	str	r3, [r2, #52]	; 0x34
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 80029a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a8:	6453      	str	r3, [r2, #68]	; 0x44
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_PCD_MspInit+0xb0>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ce:	490e      	ldr	r1, [pc, #56]	; (8002a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029e4:	4c0b      	ldr	r4, [pc, #44]	; (8002a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029f2:	f7ff fca7 	bl	8002344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f005 f83d 	bl	8007a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7ff f81f 	bl	8001a3c <main>
  bx  lr    
 80029fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a08:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002a0c:	0800ad14 	.word	0x0800ad14
  ldr r2, =_sbss
 8002a10:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002a14:	20000940 	.word	0x20000940

08002a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC_IRQHandler>

08002a1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f000 ffba 	bl	8003998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f000 f805 	bl	8002a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a2a:	f7ff fb29 	bl	8002080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_InitTick+0x54>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_InitTick+0x58>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 ffd5 	bl	8003a02 <HAL_SYSTICK_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00e      	b.n	8002a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d80a      	bhi.n	8002a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f000 ff9d 	bl	80039ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <HAL_InitTick+0x5c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000018 	.word	0x20000018
 8002a8c:	20000020 	.word	0x20000020
 8002a90:	2000001c 	.word	0x2000001c

08002a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_IncTick+0x20>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_IncTick+0x24>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000020 	.word	0x20000020
 8002ab8:	2000092c 	.word	0x2000092c

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_GetTick+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000092c 	.word	0x2000092c

08002ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff ffee 	bl	8002abc <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d005      	beq.n	8002afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_Delay+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afa:	bf00      	nop
 8002afc:	f7ff ffde 	bl	8002abc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d8f7      	bhi.n	8002afc <HAL_Delay+0x28>
  {
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000020 	.word	0x20000020

08002b1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0ed      	b.n	8002d0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd fd8c 	bl	8000658 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b50:	f7ff ffb4 	bl	8002abc <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b56:	e012      	b.n	8002b7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b58:	f7ff ffb0 	bl	8002abc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b0a      	cmp	r3, #10
 8002b64:	d90b      	bls.n	8002b7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2205      	movs	r2, #5
 8002b76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0c5      	b.n	8002d0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0e5      	beq.n	8002b58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0202 	bic.w	r2, r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff ff8e 	bl	8002abc <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ba2:	e012      	b.n	8002bca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba4:	f7ff ff8a 	bl	8002abc <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b0a      	cmp	r3, #10
 8002bb0:	d90b      	bls.n	8002bca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e09f      	b.n	8002d0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e5      	bne.n	8002ba4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7e1b      	ldrb	r3, [r3, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d108      	bne.n	8002bf2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e007      	b.n	8002c02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7e5b      	ldrb	r3, [r3, #25]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e007      	b.n	8002c2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e9b      	ldrb	r3, [r3, #26]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d108      	bne.n	8002c46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0220 	orr.w	r2, r2, #32
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e007      	b.n	8002c56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0220 	bic.w	r2, r2, #32
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7edb      	ldrb	r3, [r3, #27]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d108      	bne.n	8002c70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0210 	bic.w	r2, r2, #16
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e007      	b.n	8002c80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0210 	orr.w	r2, r2, #16
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7f1b      	ldrb	r3, [r3, #28]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d108      	bne.n	8002c9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0208 	orr.w	r2, r2, #8
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e007      	b.n	8002caa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0208 	bic.w	r2, r2, #8
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7f5b      	ldrb	r3, [r3, #29]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d108      	bne.n	8002cc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0204 	orr.w	r2, r2, #4
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e007      	b.n	8002cd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0204 	bic.w	r2, r2, #4
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	ea42 0103 	orr.w	r1, r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d003      	beq.n	8002d3a <HAL_CAN_ConfigFilter+0x26>
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	f040 80c7 	bne.w	8002ec8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d001      	beq.n	8002d48 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002d44:	4b68      	ldr	r3, [pc, #416]	; (8002ee8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002d46:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4a63      	ldr	r2, [pc, #396]	; (8002ee8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d111      	bne.n	8002d84 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d66:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d123      	bne.n	8002df6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	401a      	ands	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3248      	adds	r2, #72	; 0x48
 8002dd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	3348      	adds	r3, #72	; 0x48
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d122      	bne.n	8002e44 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3248      	adds	r2, #72	; 0x48
 8002e24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e3a:	6979      	ldr	r1, [r7, #20]
 8002e3c:	3348      	adds	r3, #72	; 0x48
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e5e:	e007      	b.n	8002e70 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e8a:	e007      	b.n	8002e9c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e006      	b.n	8002ed6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40003400 	.word	0x40003400
 8002ee8:	40006400 	.word	0x40006400

08002eec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d12e      	bne.n	8002f5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f18:	f7ff fdd0 	bl	8002abc <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f1e:	e012      	b.n	8002f46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f20:	f7ff fdcc 	bl	8002abc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b0a      	cmp	r3, #10
 8002f2c:	d90b      	bls.n	8002f46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e012      	b.n	8002f6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e5      	bne.n	8002f20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e006      	b.n	8002f6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d003      	beq.n	8002fa0 <HAL_CAN_AddTxMessage+0x2c>
 8002f98:	7ffb      	ldrb	r3, [r7, #31]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	f040 80b8 	bne.w	8003110 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80a0 	beq.w	8003100 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	0e1b      	lsrs	r3, r3, #24
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d907      	bls.n	8002fe0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e09e      	b.n	800311e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ffc:	68f9      	ldr	r1, [r7, #12]
 8002ffe:	6809      	ldr	r1, [r1, #0]
 8003000:	431a      	orrs	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3318      	adds	r3, #24
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	440b      	add	r3, r1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e00f      	b.n	800302e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003018:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800301e:	68f9      	ldr	r1, [r7, #12]
 8003020:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003022:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3318      	adds	r3, #24
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	440b      	add	r3, r1
 800302c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3318      	adds	r3, #24
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	440b      	add	r3, r1
 800303e:	3304      	adds	r3, #4
 8003040:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	7d1b      	ldrb	r3, [r3, #20]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d111      	bne.n	800306e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3318      	adds	r3, #24
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	6811      	ldr	r1, [r2, #0]
 800305e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3318      	adds	r3, #24
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	440b      	add	r3, r1
 800306a:	3304      	adds	r3, #4
 800306c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3307      	adds	r3, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	061a      	lsls	r2, r3, #24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3306      	adds	r3, #6
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3305      	adds	r3, #5
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	4313      	orrs	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	3204      	adds	r2, #4
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	4610      	mov	r0, r2
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	6811      	ldr	r1, [r2, #0]
 8003096:	ea43 0200 	orr.w	r2, r3, r0
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	440b      	add	r3, r1
 80030a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3303      	adds	r3, #3
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	061a      	lsls	r2, r3, #24
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3302      	adds	r3, #2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3301      	adds	r3, #1
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	4313      	orrs	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	7812      	ldrb	r2, [r2, #0]
 80030c6:	4610      	mov	r0, r2
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	6811      	ldr	r1, [r2, #0]
 80030cc:	ea43 0200 	orr.w	r2, r3, r0
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	440b      	add	r3, r1
 80030d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3318      	adds	r3, #24
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	4413      	add	r3, r2
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	6811      	ldr	r1, [r2, #0]
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3318      	adds	r3, #24
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	440b      	add	r3, r1
 80030fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e00e      	b.n	800311e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e006      	b.n	800311e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800312a:	b480      	push	{r7}
 800312c:	b087      	sub	sp, #28
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800313e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d003      	beq.n	800314e <HAL_CAN_GetRxMessage+0x24>
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b02      	cmp	r3, #2
 800314a:	f040 80f3 	bne.w	8003334 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10e      	bne.n	8003172 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0e7      	b.n	8003342 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0d8      	b.n	8003342 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	331b      	adds	r3, #27
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	4413      	add	r3, r2
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0204 	and.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	331b      	adds	r3, #27
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0d5b      	lsrs	r3, r3, #21
 80031be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	331b      	adds	r3, #27
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	4413      	add	r3, r2
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	08db      	lsrs	r3, r3, #3
 80031d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	331b      	adds	r3, #27
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0202 	and.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	331b      	adds	r3, #27
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	331b      	adds	r3, #27
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	b2da      	uxtb	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	331b      	adds	r3, #27
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	4413      	add	r3, r2
 8003232:	3304      	adds	r3, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	b29a      	uxth	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	4413      	add	r3, r2
 8003248:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	4413      	add	r3, r2
 800325e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	0a1a      	lsrs	r2, r3, #8
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4413      	add	r3, r2
 8003278:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0c1a      	lsrs	r2, r3, #16
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	3302      	adds	r3, #2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e1a      	lsrs	r2, r3, #24
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3303      	adds	r3, #3
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3304      	adds	r3, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0a1a      	lsrs	r2, r3, #8
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3305      	adds	r3, #5
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0c1a      	lsrs	r2, r3, #16
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3306      	adds	r3, #6
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e1a      	lsrs	r2, r3, #24
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3307      	adds	r3, #7
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0220 	orr.w	r2, r2, #32
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	e007      	b.n	8003330 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0220 	orr.w	r2, r2, #32
 800332e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e006      	b.n	8003342 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d002      	beq.n	800336c <HAL_CAN_ActivateNotification+0x1e>
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d109      	bne.n	8003380 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6959      	ldr	r1, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e006      	b.n	800338e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	; 0x28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d07c      	beq.n	80034da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d023      	beq.n	8003432 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f983 	bl	8003708 <HAL_CAN_TxMailbox0CompleteCallback>
 8003402:	e016      	b.n	8003432 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
 8003416:	e00c      	b.n	8003432 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	e002      	b.n	8003432 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f989 	bl	8003744 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d024      	beq.n	8003486 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003444:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f963 	bl	800371c <HAL_CAN_TxMailbox1CompleteCallback>
 8003456:	e016      	b.n	8003486 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	e00c      	b.n	8003486 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	e002      	b.n	8003486 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f969 	bl	8003758 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d024      	beq.n	80034da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003498:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f943 	bl	8003730 <HAL_CAN_TxMailbox2CompleteCallback>
 80034aa:	e016      	b.n	80034da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	e00c      	b.n	80034da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	e002      	b.n	80034da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f949 	bl	800376c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00c      	beq.n	80034fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2210      	movs	r2, #16
 80034fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2208      	movs	r2, #8
 8003518:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f930 	bl	8003780 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fe fd89 	bl	8002050 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003558:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2210      	movs	r2, #16
 8003560:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2208      	movs	r2, #8
 800357c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f912 	bl	80037a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f8f9 	bl	8003794 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2210      	movs	r2, #16
 80035bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8fc 	bl	80037bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2208      	movs	r2, #8
 80035de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8f5 	bl	80037d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d07b      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d072      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d043      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800365e:	2b00      	cmp	r3, #0
 8003660:	d03e      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003668:	2b60      	cmp	r3, #96	; 0x60
 800366a:	d02b      	beq.n	80036c4 <HAL_CAN_IRQHandler+0x32a>
 800366c:	2b60      	cmp	r3, #96	; 0x60
 800366e:	d82e      	bhi.n	80036ce <HAL_CAN_IRQHandler+0x334>
 8003670:	2b50      	cmp	r3, #80	; 0x50
 8003672:	d022      	beq.n	80036ba <HAL_CAN_IRQHandler+0x320>
 8003674:	2b50      	cmp	r3, #80	; 0x50
 8003676:	d82a      	bhi.n	80036ce <HAL_CAN_IRQHandler+0x334>
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	d019      	beq.n	80036b0 <HAL_CAN_IRQHandler+0x316>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d826      	bhi.n	80036ce <HAL_CAN_IRQHandler+0x334>
 8003680:	2b30      	cmp	r3, #48	; 0x30
 8003682:	d010      	beq.n	80036a6 <HAL_CAN_IRQHandler+0x30c>
 8003684:	2b30      	cmp	r3, #48	; 0x30
 8003686:	d822      	bhi.n	80036ce <HAL_CAN_IRQHandler+0x334>
 8003688:	2b10      	cmp	r3, #16
 800368a:	d002      	beq.n	8003692 <HAL_CAN_IRQHandler+0x2f8>
 800368c:	2b20      	cmp	r3, #32
 800368e:	d005      	beq.n	800369c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003690:	e01d      	b.n	80036ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f043 0308 	orr.w	r3, r3, #8
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800369a:	e019      	b.n	80036d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f043 0310 	orr.w	r3, r3, #16
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036a4:	e014      	b.n	80036d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f043 0320 	orr.w	r3, r3, #32
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ae:	e00f      	b.n	80036d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036b8:	e00a      	b.n	80036d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036c2:	e005      	b.n	80036d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036cc:	e000      	b.n	80036d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80036ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2204      	movs	r2, #4
 80036e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f872 	bl	80037e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003700:	bf00      	nop
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <__NVIC_SetPriorityGrouping+0x40>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003814:	4013      	ands	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <__NVIC_SetPriorityGrouping+0x44>)
 8003822:	4313      	orrs	r3, r2
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x40>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00
 800383c:	05fa0000 	.word	0x05fa0000

08003840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <__NVIC_GetPriorityGrouping+0x18>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f003 0307 	and.w	r3, r3, #7
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	db0b      	blt.n	8003886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4907      	ldr	r1, [pc, #28]	; (8003894 <__NVIC_EnableIRQ+0x38>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2001      	movs	r0, #1
 800387e:	fa00 f202 	lsl.w	r2, r0, r2
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000e100 	.word	0xe000e100

08003898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db0a      	blt.n	80038c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	490c      	ldr	r1, [pc, #48]	; (80038e4 <__NVIC_SetPriority+0x4c>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	440b      	add	r3, r1
 80038bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c0:	e00a      	b.n	80038d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <__NVIC_SetPriority+0x50>)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3b04      	subs	r3, #4
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	440b      	add	r3, r1
 80038d6:	761a      	strb	r2, [r3, #24]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000e100 	.word	0xe000e100
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f1c3 0307 	rsb	r3, r3, #7
 8003906:	2b04      	cmp	r3, #4
 8003908:	bf28      	it	cs
 800390a:	2304      	movcs	r3, #4
 800390c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3304      	adds	r3, #4
 8003912:	2b06      	cmp	r3, #6
 8003914:	d902      	bls.n	800391c <NVIC_EncodePriority+0x30>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3b03      	subs	r3, #3
 800391a:	e000      	b.n	800391e <NVIC_EncodePriority+0x32>
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	401a      	ands	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	43d9      	mvns	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	4313      	orrs	r3, r2
         );
}
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	; 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003964:	d301      	bcc.n	800396a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003966:	2301      	movs	r3, #1
 8003968:	e00f      	b.n	800398a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800396a:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <SysTick_Config+0x40>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003972:	210f      	movs	r1, #15
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	f7ff ff8e 	bl	8003898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <SysTick_Config+0x40>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <SysTick_Config+0x40>)
 8003984:	2207      	movs	r2, #7
 8003986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	e000e010 	.word	0xe000e010

08003998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff29 	bl	80037f8 <__NVIC_SetPriorityGrouping>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c0:	f7ff ff3e 	bl	8003840 <__NVIC_GetPriorityGrouping>
 80039c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f7ff ff8e 	bl	80038ec <NVIC_EncodePriority>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff5d 	bl	8003898 <__NVIC_SetPriority>
}
 80039de:	bf00      	nop
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff31 	bl	800385c <__NVIC_EnableIRQ>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffa2 	bl	8003954 <SysTick_Config>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff f848 	bl	8002abc <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d008      	beq.n	8003a4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e052      	b.n	8003af2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0216 	bic.w	r2, r2, #22
 8003a5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <HAL_DMA_Abort+0x62>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0208 	bic.w	r2, r2, #8
 8003a8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9c:	e013      	b.n	8003ac6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a9e:	f7ff f80d 	bl	8002abc <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d90c      	bls.n	8003ac6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e015      	b.n	8003af2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e4      	bne.n	8003a9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	223f      	movs	r2, #63	; 0x3f
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d004      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e00c      	b.n	8003b32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	; 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e175      	b.n	8003e4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b60:	2201      	movs	r2, #1
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f040 8164 	bne.w	8003e46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d005      	beq.n	8003b96 <HAL_GPIO_Init+0x56>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d130      	bne.n	8003bf8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bcc:	2201      	movs	r2, #1
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 0201 	and.w	r2, r3, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d017      	beq.n	8003c34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d123      	bne.n	8003c88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	08da      	lsrs	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3208      	adds	r2, #8
 8003c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	220f      	movs	r2, #15
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	08da      	lsrs	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3208      	adds	r2, #8
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0203 	and.w	r2, r3, #3
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80be 	beq.w	8003e46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cca:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ce2:	4a61      	ldr	r2, [pc, #388]	; (8003e68 <HAL_GPIO_Init+0x328>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_GPIO_Init+0x32c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d037      	beq.n	8003d7e <HAL_GPIO_Init+0x23e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a57      	ldr	r2, [pc, #348]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d031      	beq.n	8003d7a <HAL_GPIO_Init+0x23a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a56      	ldr	r2, [pc, #344]	; (8003e74 <HAL_GPIO_Init+0x334>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02b      	beq.n	8003d76 <HAL_GPIO_Init+0x236>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a55      	ldr	r2, [pc, #340]	; (8003e78 <HAL_GPIO_Init+0x338>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d025      	beq.n	8003d72 <HAL_GPIO_Init+0x232>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a54      	ldr	r2, [pc, #336]	; (8003e7c <HAL_GPIO_Init+0x33c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01f      	beq.n	8003d6e <HAL_GPIO_Init+0x22e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a53      	ldr	r2, [pc, #332]	; (8003e80 <HAL_GPIO_Init+0x340>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d019      	beq.n	8003d6a <HAL_GPIO_Init+0x22a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a52      	ldr	r2, [pc, #328]	; (8003e84 <HAL_GPIO_Init+0x344>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0x226>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a51      	ldr	r2, [pc, #324]	; (8003e88 <HAL_GPIO_Init+0x348>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00d      	beq.n	8003d62 <HAL_GPIO_Init+0x222>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a50      	ldr	r2, [pc, #320]	; (8003e8c <HAL_GPIO_Init+0x34c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <HAL_GPIO_Init+0x21e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4f      	ldr	r2, [pc, #316]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_GPIO_Init+0x21a>
 8003d56:	2309      	movs	r3, #9
 8003d58:	e012      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d5a:	230a      	movs	r3, #10
 8003d5c:	e010      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	e00e      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d62:	2307      	movs	r3, #7
 8003d64:	e00c      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d66:	2306      	movs	r3, #6
 8003d68:	e00a      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d6a:	2305      	movs	r3, #5
 8003d6c:	e008      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d6e:	2304      	movs	r3, #4
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d72:	2303      	movs	r3, #3
 8003d74:	e004      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	f002 0203 	and.w	r2, r2, #3
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	4093      	lsls	r3, r2
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d90:	4935      	ldr	r1, [pc, #212]	; (8003e68 <HAL_GPIO_Init+0x328>)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3302      	adds	r3, #2
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dc2:	4a34      	ldr	r2, [pc, #208]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc8:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003df2:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	f67f ae86 	bls.w	8003b60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40013800 	.word	0x40013800
 8003e6c:	40020000 	.word	0x40020000
 8003e70:	40020400 	.word	0x40020400
 8003e74:	40020800 	.word	0x40020800
 8003e78:	40020c00 	.word	0x40020c00
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40021400 	.word	0x40021400
 8003e84:	40021800 	.word	0x40021800
 8003e88:	40021c00 	.word	0x40021c00
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40022400 	.word	0x40022400
 8003e94:	40013c00 	.word	0x40013c00

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003eb4:	e003      	b.n	8003ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	041a      	lsls	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003edc:	887a      	ldrh	r2, [r7, #2]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	041a      	lsls	r2, r3, #16
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	400b      	ands	r3, r1
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	619a      	str	r2, [r3, #24]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fd4c 	bl	80019bc <HAL_GPIO_EXTI_Callback>
  }
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40013c00 	.word	0x40013c00

08003f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	b08f      	sub	sp, #60	; 0x3c
 8003f34:	af0a      	add	r7, sp, #40	; 0x28
 8003f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e116      	b.n	8004170 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fe fcd7 	bl	8002910 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2203      	movs	r2, #3
 8003f66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 fad7 	bl	8007534 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	687e      	ldr	r6, [r7, #4]
 8003f8e:	466d      	mov	r5, sp
 8003f90:	f106 0410 	add.w	r4, r6, #16
 8003f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa4:	1d33      	adds	r3, r6, #4
 8003fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa8:	6838      	ldr	r0, [r7, #0]
 8003faa:	f003 fa6b 	bl	8007484 <USB_CoreInit>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0d7      	b.n	8004170 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f003 fac5 	bl	8007556 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e04a      	b.n	8004068 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	333d      	adds	r3, #61	; 0x3d
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	333c      	adds	r3, #60	; 0x3c
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	b298      	uxth	r0, r3
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3342      	adds	r3, #66	; 0x42
 800400e:	4602      	mov	r2, r0
 8004010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	333f      	adds	r3, #63	; 0x3f
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3344      	adds	r3, #68	; 0x44
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3348      	adds	r3, #72	; 0x48
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3350      	adds	r3, #80	; 0x50
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3301      	adds	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d3af      	bcc.n	8003fd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e044      	b.n	8004102 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	3301      	adds	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3b5      	bcc.n	8004078 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	687e      	ldr	r6, [r7, #4]
 8004114:	466d      	mov	r5, sp
 8004116:	f106 0410 	add.w	r4, r6, #16
 800411a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004126:	e885 0003 	stmia.w	r5, {r0, r1}
 800412a:	1d33      	adds	r3, r6, #4
 800412c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412e:	6838      	ldr	r0, [r7, #0]
 8004130:	f003 fa5e 	bl	80075f0 <USB_DevInit>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e014      	b.n	8004170 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b01      	cmp	r3, #1
 800415c:	d102      	bne.n	8004164 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f80a 	bl	8004178 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f003 fc18 	bl	800799e <USB_DevDisconnect>

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004178 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_PCDEx_ActivateLPM+0x44>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	10000003 	.word	0x10000003

080041c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a04      	ldr	r2, [pc, #16]	; (80041dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40007000 	.word	0x40007000

080041e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_PWREx_EnableOverDrive+0x98>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a22      	ldr	r2, [pc, #136]	; (8004278 <HAL_PWREx_EnableOverDrive+0x98>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_PWREx_EnableOverDrive+0x98>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1d      	ldr	r2, [pc, #116]	; (800427c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800420e:	f7fe fc55 	bl	8002abc <HAL_GetTick>
 8004212:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004214:	e009      	b.n	800422a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004216:	f7fe fc51 	bl	8002abc <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004224:	d901      	bls.n	800422a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e022      	b.n	8004270 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800422a:	4b14      	ldr	r3, [pc, #80]	; (800427c <HAL_PWREx_EnableOverDrive+0x9c>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004236:	d1ee      	bne.n	8004216 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <HAL_PWREx_EnableOverDrive+0x9c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a0f      	ldr	r2, [pc, #60]	; (800427c <HAL_PWREx_EnableOverDrive+0x9c>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004244:	f7fe fc3a 	bl	8002abc <HAL_GetTick>
 8004248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800424a:	e009      	b.n	8004260 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800424c:	f7fe fc36 	bl	8002abc <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800425a:	d901      	bls.n	8004260 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e007      	b.n	8004270 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800426c:	d1ee      	bne.n	800424c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	40007000 	.word	0x40007000

08004280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e29b      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8087 	beq.w	80043b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a4:	4b96      	ldr	r3, [pc, #600]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d00c      	beq.n	80042ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b0:	4b93      	ldr	r3, [pc, #588]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d112      	bne.n	80042e2 <HAL_RCC_OscConfig+0x62>
 80042bc:	4b90      	ldr	r3, [pc, #576]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ca:	4b8d      	ldr	r3, [pc, #564]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d06c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x130>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d168      	bne.n	80043b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e275      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x7a>
 80042ec:	4b84      	ldr	r3, [pc, #528]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a83      	ldr	r2, [pc, #524]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e02e      	b.n	8004358 <HAL_RCC_OscConfig+0xd8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x9c>
 8004302:	4b7f      	ldr	r3, [pc, #508]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7e      	ldr	r2, [pc, #504]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b7c      	ldr	r3, [pc, #496]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a7b      	ldr	r2, [pc, #492]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xd8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0xc0>
 8004326:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b73      	ldr	r3, [pc, #460]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a72      	ldr	r2, [pc, #456]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xd8>
 8004340:	4b6f      	ldr	r3, [pc, #444]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6e      	ldr	r2, [pc, #440]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b6c      	ldr	r3, [pc, #432]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe fbac 	bl	8002abc <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fba8 	bl	8002abc <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e229      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b61      	ldr	r3, [pc, #388]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xe8>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe fb98 	bl	8002abc <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fe fb94 	bl	8002abc <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e215      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b57      	ldr	r3, [pc, #348]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x110>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d069      	beq.n	8004492 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043be:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x190>
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x17a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1e9      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	493d      	ldr	r1, [pc, #244]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e040      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d023      	beq.n	8004460 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a38      	ldr	r2, [pc, #224]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fe fb4a 	bl	8002abc <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442c:	f7fe fb46 	bl	8002abc <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1c7      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443e:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4929      	ldr	r1, [pc, #164]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	e018      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a26      	ldr	r2, [pc, #152]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe fb26 	bl	8002abc <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004474:	f7fe fb22 	bl	8002abc <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1a3      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4b1e      	ldr	r3, [pc, #120]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d038      	beq.n	8004510 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d019      	beq.n	80044da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a6:	4b16      	ldr	r3, [pc, #88]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7fe fb03 	bl	8002abc <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fe faff 	bl	8002abc <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e180      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80044ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x23a>
 80044d8:	e01a      	b.n	8004510 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80044dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <HAL_RCC_OscConfig+0x280>)
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fe fae9 	bl	8002abc <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e00a      	b.n	8004504 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fe fae5 	bl	8002abc <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d903      	bls.n	8004504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e166      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
 8004500:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	4b92      	ldr	r3, [pc, #584]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1ee      	bne.n	80044ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a4 	beq.w	8004666 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451e:	4b8c      	ldr	r3, [pc, #560]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10d      	bne.n	8004546 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	4b89      	ldr	r3, [pc, #548]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a88      	ldr	r2, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
 8004536:	4b86      	ldr	r3, [pc, #536]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004546:	4b83      	ldr	r3, [pc, #524]	; (8004754 <HAL_RCC_OscConfig+0x4d4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d118      	bne.n	8004584 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004552:	4b80      	ldr	r3, [pc, #512]	; (8004754 <HAL_RCC_OscConfig+0x4d4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a7f      	ldr	r2, [pc, #508]	; (8004754 <HAL_RCC_OscConfig+0x4d4>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455e:	f7fe faad 	bl	8002abc <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7fe faa9 	bl	8002abc <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	; 0x64
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e12a      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004578:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x4d4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x31a>
 800458c:	4b70      	ldr	r3, [pc, #448]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4a6f      	ldr	r2, [pc, #444]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	; 0x70
 8004598:	e02d      	b.n	80045f6 <HAL_RCC_OscConfig+0x376>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x33c>
 80045a2:	4b6b      	ldr	r3, [pc, #428]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a6a      	ldr	r2, [pc, #424]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
 80045ae:	4b68      	ldr	r3, [pc, #416]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a67      	ldr	r2, [pc, #412]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	e01c      	b.n	80045f6 <HAL_RCC_OscConfig+0x376>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d10c      	bne.n	80045de <HAL_RCC_OscConfig+0x35e>
 80045c4:	4b62      	ldr	r3, [pc, #392]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	4a61      	ldr	r2, [pc, #388]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045ca:	f043 0304 	orr.w	r3, r3, #4
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70
 80045d0:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a5e      	ldr	r2, [pc, #376]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	e00b      	b.n	80045f6 <HAL_RCC_OscConfig+0x376>
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a5b      	ldr	r2, [pc, #364]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80045f0:	f023 0304 	bic.w	r3, r3, #4
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d015      	beq.n	800462a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7fe fa5d 	bl	8002abc <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004604:	e00a      	b.n	800461c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004606:	f7fe fa59 	bl	8002abc <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f241 3288 	movw	r2, #5000	; 0x1388
 8004614:	4293      	cmp	r3, r2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e0d8      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ee      	beq.n	8004606 <HAL_RCC_OscConfig+0x386>
 8004628:	e014      	b.n	8004654 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fe fa47 	bl	8002abc <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fe fa43 	bl	8002abc <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0c2      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004648:	4b41      	ldr	r3, [pc, #260]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ee      	bne.n	8004632 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d105      	bne.n	8004666 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a3c      	ldr	r2, [pc, #240]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80ae 	beq.w	80047cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004670:	4b37      	ldr	r3, [pc, #220]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b08      	cmp	r3, #8
 800467a:	d06d      	beq.n	8004758 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d14b      	bne.n	800471c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004684:	4b32      	ldr	r3, [pc, #200]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a31      	ldr	r2, [pc, #196]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 800468a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe fa14 	bl	8002abc <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004698:	f7fe fa10 	bl	8002abc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e091      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	071b      	lsls	r3, r3, #28
 80046e2:	491b      	ldr	r1, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 80046ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fe f9e2 	bl	8002abc <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fe f9de 	bl	8002abc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e05f      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x47c>
 800471a:	e057      	b.n	80047cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fe f9c8 	bl	8002abc <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fe f9c4 	bl	8002abc <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e045      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <HAL_RCC_OscConfig+0x4d0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x4b0>
 800474e:	e03d      	b.n	80047cc <HAL_RCC_OscConfig+0x54c>
 8004750:	40023800 	.word	0x40023800
 8004754:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004758:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <HAL_RCC_OscConfig+0x558>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d030      	beq.n	80047c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d129      	bne.n	80047c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d122      	bne.n	80047c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800478e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004790:	4293      	cmp	r3, r2
 8004792:	d119      	bne.n	80047c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	3b01      	subs	r3, #1
 80047a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d10f      	bne.n	80047c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800

080047dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0d0      	b.n	8004996 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f4:	4b6a      	ldr	r3, [pc, #424]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d910      	bls.n	8004824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b67      	ldr	r3, [pc, #412]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 020f 	bic.w	r2, r3, #15
 800480a:	4965      	ldr	r1, [pc, #404]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b63      	ldr	r3, [pc, #396]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0b8      	b.n	8004996 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800483c:	4b59      	ldr	r3, [pc, #356]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a58      	ldr	r2, [pc, #352]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004854:	4b53      	ldr	r3, [pc, #332]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a52      	ldr	r2, [pc, #328]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800485a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800485e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004860:	4b50      	ldr	r3, [pc, #320]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	494d      	ldr	r1, [pc, #308]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d040      	beq.n	8004900 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d115      	bne.n	80048be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e07f      	b.n	8004996 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489e:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e073      	b.n	8004996 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ae:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06b      	b.n	8004996 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048be:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4936      	ldr	r1, [pc, #216]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d0:	f7fe f8f4 	bl	8002abc <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d8:	f7fe f8f0 	bl	8002abc <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e053      	b.n	8004996 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	4b2d      	ldr	r3, [pc, #180]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 020c 	and.w	r2, r3, #12
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d1eb      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d210      	bcs.n	8004930 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 020f 	bic.w	r2, r3, #15
 8004916:	4922      	ldr	r1, [pc, #136]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e032      	b.n	8004996 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800493c:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4916      	ldr	r1, [pc, #88]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	490e      	ldr	r1, [pc, #56]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800496e:	f000 f821 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004972:	4602      	mov	r2, r0
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	490a      	ldr	r1, [pc, #40]	; (80049a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004980:	5ccb      	ldrb	r3, [r1, r3]
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <HAL_RCC_ClockConfig+0x1d0>)
 8004988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <HAL_RCC_ClockConfig+0x1d4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fe f850 	bl	8002a34 <HAL_InitTick>

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023c00 	.word	0x40023c00
 80049a4:	40023800 	.word	0x40023800
 80049a8:	0800a904 	.word	0x0800a904
 80049ac:	20000018 	.word	0x20000018
 80049b0:	2000001c 	.word	0x2000001c

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	2300      	movs	r3, #0
 80049c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049cc:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d00d      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0x40>
 80049d8:	2b08      	cmp	r3, #8
 80049da:	f200 80bd 	bhi.w	8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x34>
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d003      	beq.n	80049ee <HAL_RCC_GetSysClockFreq+0x3a>
 80049e6:	e0b7      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049e8:	4b61      	ldr	r3, [pc, #388]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049ea:	60bb      	str	r3, [r7, #8]
      break;
 80049ec:	e0b7      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ee:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049f0:	60bb      	str	r3, [r7, #8]
      break;
 80049f2:	e0b4      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049f4:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049fe:	4b5b      	ldr	r3, [pc, #364]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d04d      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a0a:	4b58      	ldr	r3, [pc, #352]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	099b      	lsrs	r3, r3, #6
 8004a10:	461a      	mov	r2, r3
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	ea02 0800 	and.w	r8, r2, r0
 8004a22:	ea03 0901 	and.w	r9, r3, r1
 8004a26:	4640      	mov	r0, r8
 8004a28:	4649      	mov	r1, r9
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	014b      	lsls	r3, r1, #5
 8004a34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a38:	0142      	lsls	r2, r0, #5
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	ebb0 0008 	subs.w	r0, r0, r8
 8004a42:	eb61 0109 	sbc.w	r1, r1, r9
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	018b      	lsls	r3, r1, #6
 8004a50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a54:	0182      	lsls	r2, r0, #6
 8004a56:	1a12      	subs	r2, r2, r0
 8004a58:	eb63 0301 	sbc.w	r3, r3, r1
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	00d9      	lsls	r1, r3, #3
 8004a66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a6a:	00d0      	lsls	r0, r2, #3
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	eb12 0208 	adds.w	r2, r2, r8
 8004a74:	eb43 0309 	adc.w	r3, r3, r9
 8004a78:	f04f 0000 	mov.w	r0, #0
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	0259      	lsls	r1, r3, #9
 8004a82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a86:	0250      	lsls	r0, r2, #9
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	f7fb fc2a 	bl	80002f0 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e04a      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa6:	4b31      	ldr	r3, [pc, #196]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	099b      	lsrs	r3, r3, #6
 8004aac:	461a      	mov	r2, r3
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	ea02 0400 	and.w	r4, r2, r0
 8004abe:	ea03 0501 	and.w	r5, r3, r1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	014b      	lsls	r3, r1, #5
 8004ad0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ad4:	0142      	lsls	r2, r0, #5
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	1b00      	subs	r0, r0, r4
 8004adc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	018b      	lsls	r3, r1, #6
 8004aea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aee:	0182      	lsls	r2, r0, #6
 8004af0:	1a12      	subs	r2, r2, r0
 8004af2:	eb63 0301 	sbc.w	r3, r3, r1
 8004af6:	f04f 0000 	mov.w	r0, #0
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	00d9      	lsls	r1, r3, #3
 8004b00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b04:	00d0      	lsls	r0, r2, #3
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	1912      	adds	r2, r2, r4
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	0299      	lsls	r1, r3, #10
 8004b1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b1e:	0290      	lsls	r0, r2, #10
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	f7fb fbde 	bl	80002f0 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	3301      	adds	r3, #1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	60bb      	str	r3, [r7, #8]
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b5a:	60bb      	str	r3, [r7, #8]
      break;
 8004b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200

08004b78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000018 	.word	0x20000018

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	0800a914 	.word	0x0800a914

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bbc:	f7ff ffdc 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0b5b      	lsrs	r3, r3, #13
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	0800a914 	.word	0x0800a914

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c08:	4b69      	ldr	r3, [pc, #420]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1c:	4964      	ldr	r1, [pc, #400]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d017      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	4959      	ldr	r1, [pc, #356]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c58:	d101      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d017      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c76:	4b4e      	ldr	r3, [pc, #312]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	494a      	ldr	r1, [pc, #296]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d101      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 808b 	beq.w	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc4:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	4a39      	ldr	r2, [pc, #228]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cce:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd0:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cdc:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a34      	ldr	r2, [pc, #208]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fd fee8 	bl	8002abc <HAL_GetTick>
 8004cec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fd fee4 	bl	8002abc <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	; 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e38f      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d02:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d035      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d02e      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d36:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d42:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d114      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fd feac 	bl	8002abc <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fd fea8 	bl	8002abc <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e351      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d96:	d111      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004da6:	400b      	ands	r3, r1
 8004da8:	4901      	ldr	r1, [pc, #4]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000
 8004db8:	0ffffcff 	.word	0x0ffffcff
 8004dbc:	4bb3      	ldr	r3, [pc, #716]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4ab2      	ldr	r2, [pc, #712]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dc6:	6093      	str	r3, [r2, #8]
 8004dc8:	4bb0      	ldr	r3, [pc, #704]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd4:	49ad      	ldr	r1, [pc, #692]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d010      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004de6:	4ba9      	ldr	r3, [pc, #676]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	4aa7      	ldr	r2, [pc, #668]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004df6:	4ba5      	ldr	r3, [pc, #660]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	49a2      	ldr	r1, [pc, #648]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e14:	4b9d      	ldr	r3, [pc, #628]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e22:	499a      	ldr	r1, [pc, #616]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e36:	4b95      	ldr	r3, [pc, #596]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e44:	4991      	ldr	r1, [pc, #580]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e58:	4b8c      	ldr	r3, [pc, #560]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	4989      	ldr	r1, [pc, #548]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e7a:	4b84      	ldr	r3, [pc, #528]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4980      	ldr	r1, [pc, #512]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9c:	4b7b      	ldr	r3, [pc, #492]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4978      	ldr	r1, [pc, #480]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ebe:	4b73      	ldr	r3, [pc, #460]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	f023 020c 	bic.w	r2, r3, #12
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ecc:	496f      	ldr	r1, [pc, #444]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee0:	4b6a      	ldr	r3, [pc, #424]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	4967      	ldr	r1, [pc, #412]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f02:	4b62      	ldr	r3, [pc, #392]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	495e      	ldr	r1, [pc, #376]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	4956      	ldr	r1, [pc, #344]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f46:	4b51      	ldr	r3, [pc, #324]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	494d      	ldr	r1, [pc, #308]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f68:	4b48      	ldr	r3, [pc, #288]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	4945      	ldr	r1, [pc, #276]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	493c      	ldr	r1, [pc, #240]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fac:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fba:	4934      	ldr	r1, [pc, #208]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fce:	4b2f      	ldr	r3, [pc, #188]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fdc:	492b      	ldr	r1, [pc, #172]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500e:	4b1f      	ldr	r3, [pc, #124]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	491b      	ldr	r1, [pc, #108]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005040:	4912      	ldr	r1, [pc, #72]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00b      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005064:	4909      	ldr	r1, [pc, #36]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00f      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800507e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	e002      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	4986      	ldr	r1, [pc, #536]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050a4:	4b81      	ldr	r3, [pc, #516]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b4:	497d      	ldr	r1, [pc, #500]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d006      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80d6 	beq.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050d0:	4b76      	ldr	r3, [pc, #472]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a75      	ldr	r2, [pc, #468]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fd fcee 	bl	8002abc <HAL_GetTick>
 80050e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050e4:	f7fd fcea 	bl	8002abc <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e195      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050f6:	4b6d      	ldr	r3, [pc, #436]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d021      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11d      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005124:	4b61      	ldr	r3, [pc, #388]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	0e1b      	lsrs	r3, r3, #24
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	019a      	lsls	r2, r3, #6
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	061b      	lsls	r3, r3, #24
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	071b      	lsls	r3, r3, #28
 800514a:	4958      	ldr	r1, [pc, #352]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02e      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800517c:	d129      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800517e:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800518c:	4b47      	ldr	r3, [pc, #284]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005192:	0f1b      	lsrs	r3, r3, #28
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	019a      	lsls	r2, r3, #6
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	431a      	orrs	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	071b      	lsls	r3, r3, #28
 80051b2:	493e      	ldr	r1, [pc, #248]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051ba:	4b3c      	ldr	r3, [pc, #240]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c0:	f023 021f 	bic.w	r2, r3, #31
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	3b01      	subs	r3, #1
 80051ca:	4938      	ldr	r1, [pc, #224]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01d      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051de:	4b33      	ldr	r3, [pc, #204]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e4:	0e1b      	lsrs	r3, r3, #24
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051ec:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f2:	0f1b      	lsrs	r3, r3, #28
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	019a      	lsls	r2, r3, #6
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	431a      	orrs	r2, r3
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	061b      	lsls	r3, r3, #24
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	071b      	lsls	r3, r3, #28
 8005212:	4926      	ldr	r1, [pc, #152]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d011      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	019a      	lsls	r2, r3, #6
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	491a      	ldr	r1, [pc, #104]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800524a:	4b18      	ldr	r3, [pc, #96]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005256:	f7fd fc31 	bl	8002abc <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800525e:	f7fd fc2d 	bl	8002abc <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b64      	cmp	r3, #100	; 0x64
 800526a:	d901      	bls.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0d8      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005270:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b01      	cmp	r3, #1
 8005280:	f040 80ce 	bne.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005290:	f7fd fc14 	bl	8002abc <HAL_GetTick>
 8005294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005296:	e00b      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005298:	f7fd fc10 	bl	8002abc <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d904      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0bb      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052aa:	bf00      	nop
 80052ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052b0:	4b5e      	ldr	r3, [pc, #376]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052bc:	d0ec      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d02e      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d12a      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f4:	4b4d      	ldr	r3, [pc, #308]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	0f1b      	lsrs	r3, r3, #28
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	4944      	ldr	r1, [pc, #272]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005328:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	493d      	ldr	r1, [pc, #244]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d022      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005350:	d11d      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005352:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	0e1b      	lsrs	r3, r3, #24
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005360:	4b32      	ldr	r3, [pc, #200]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	0f1b      	lsrs	r3, r3, #28
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	019a      	lsls	r2, r3, #6
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	431a      	orrs	r2, r3
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	071b      	lsls	r3, r3, #28
 8005386:	4929      	ldr	r1, [pc, #164]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d028      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	0e1b      	lsrs	r3, r3, #24
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053a8:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	0c1b      	lsrs	r3, r3, #16
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	019a      	lsls	r2, r3, #6
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	071b      	lsls	r3, r3, #28
 80053ce:	4917      	ldr	r1, [pc, #92]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	4911      	ldr	r1, [pc, #68]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053ec:	4b0f      	ldr	r3, [pc, #60]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0e      	ldr	r2, [pc, #56]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f8:	f7fd fb60 	bl	8002abc <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005400:	f7fd fb5c 	bl	8002abc <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e007      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541e:	d1ef      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800

08005430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e049      	b.n	80054d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fd f922 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 fb80 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a1a      	ldr	r2, [r3, #32]
 80054ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10f      	bne.n	8005516 <HAL_TIM_Base_Stop+0x38>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	f240 4344 	movw	r3, #1092	; 0x444
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d107      	bne.n	8005516 <HAL_TIM_Base_Stop+0x38>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d001      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e054      	b.n	80055ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a26      	ldr	r2, [pc, #152]	; (80055fc <HAL_TIM_Base_Start_IT+0xd0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d022      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d01d      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a22      	ldr	r2, [pc, #136]	; (8005600 <HAL_TIM_Base_Start_IT+0xd4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_TIM_Base_Start_IT+0xd8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_TIM_Base_Start_IT+0xdc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_TIM_Base_Start_IT+0xe0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIM_Base_Start_IT+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_TIM_Base_Start_IT+0x80>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <HAL_TIM_Base_Start_IT+0xe8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d115      	bne.n	80055d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	4b19      	ldr	r3, [pc, #100]	; (8005618 <HAL_TIM_Base_Start_IT+0xec>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d015      	beq.n	80055ea <HAL_TIM_Base_Start_IT+0xbe>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c4:	d011      	beq.n	80055ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	e008      	b.n	80055ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e000      	b.n	80055ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800
 8005608:	40000c00 	.word	0x40000c00
 800560c:	40010400 	.word	0x40010400
 8005610:	40014000 	.word	0x40014000
 8005614:	40001800 	.word	0x40001800
 8005618:	00010007 	.word	0x00010007

0800561c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a1a      	ldr	r2, [r3, #32]
 800563a:	f241 1311 	movw	r3, #4369	; 0x1111
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10f      	bne.n	8005664 <HAL_TIM_Base_Stop_IT+0x48>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	f240 4344 	movw	r3, #1092	; 0x444
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <HAL_TIM_Base_Stop_IT+0x48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e08f      	b.n	80057b0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fc ff91 	bl	80025cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6899      	ldr	r1, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b3e      	ldr	r3, [pc, #248]	; (80057b8 <HAL_TIM_Encoder_Init+0x13c>)
 80056be:	400b      	ands	r3, r1
 80056c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3304      	adds	r3, #4
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f000 fa51 	bl	8005b74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <HAL_TIM_Encoder_Init+0x140>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	4313      	orrs	r3, r2
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4b2b      	ldr	r3, [pc, #172]	; (80057c0 <HAL_TIM_Encoder_Init+0x144>)
 8005712:	4013      	ands	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <HAL_TIM_Encoder_Init+0x148>)
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	4313      	orrs	r3, r2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	011a      	lsls	r2, r3, #4
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	031b      	lsls	r3, r3, #12
 800573c:	4313      	orrs	r3, r2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	4313      	orrs	r3, r2
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	fffebff8 	.word	0xfffebff8
 80057bc:	fffffcfc 	.word	0xfffffcfc
 80057c0:	fffff3f3 	.word	0xfffff3f3
 80057c4:	ffff0f0f 	.word	0xffff0f0f

080057c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d110      	bne.n	800581a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d102      	bne.n	8005804 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057fe:	7b7b      	ldrb	r3, [r7, #13]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d001      	beq.n	8005808 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e069      	b.n	80058dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005818:	e031      	b.n	800587e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d110      	bne.n	8005842 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005820:	7bbb      	ldrb	r3, [r7, #14]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d102      	bne.n	800582c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005826:	7b3b      	ldrb	r3, [r7, #12]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d001      	beq.n	8005830 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e055      	b.n	80058dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005840:	e01d      	b.n	800587e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d108      	bne.n	800585a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d105      	bne.n	800585a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	7b7b      	ldrb	r3, [r7, #13]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d102      	bne.n	800585a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005854:	7b3b      	ldrb	r3, [r7, #12]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e03e      	b.n	80058dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_TIM_Encoder_Start+0xc4>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d008      	beq.n	800589c <HAL_TIM_Encoder_Start+0xd4>
 800588a:	e00f      	b.n	80058ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2201      	movs	r2, #1
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fa0d 	bl	8005cb4 <TIM_CCxChannelCmd>
      break;
 800589a:	e016      	b.n	80058ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	2104      	movs	r1, #4
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fa05 	bl	8005cb4 <TIM_CCxChannelCmd>
      break;
 80058aa:	e00e      	b.n	80058ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	2100      	movs	r1, #0
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 f9fd 	bl	8005cb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	2104      	movs	r1, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9f6 	bl	8005cb4 <TIM_CCxChannelCmd>
      break;
 80058c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0202 	mvn.w	r2, #2
 8005910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f905 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f8f7 	bl	8005b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f908 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0204 	mvn.w	r2, #4
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8db 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8cd 	bl	8005b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8de 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0208 	mvn.w	r2, #8
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8b1 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8a3 	bl	8005b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8b4 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2208      	movs	r2, #8
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f887 	bl	8005b36 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f879 	bl	8005b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f88a 	bl	8005b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0201 	mvn.w	r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb ff36 	bl	80018d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9ce 	bl	8005e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa2:	d10e      	bne.n	8005ac2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aae:	2b80      	cmp	r3, #128	; 0x80
 8005ab0:	d107      	bne.n	8005ac2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f9c1 	bl	8005e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d10e      	bne.n	8005aee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d107      	bne.n	8005aee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f838 	bl	8005b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d10e      	bne.n	8005b1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d107      	bne.n	8005b1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f06f 0220 	mvn.w	r2, #32
 8005b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f981 	bl	8005e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a40      	ldr	r2, [pc, #256]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3d      	ldr	r2, [pc, #244]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3c      	ldr	r2, [pc, #240]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3b      	ldr	r2, [pc, #236]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d108      	bne.n	8005bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2f      	ldr	r2, [pc, #188]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd4:	d027      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_Base_SetConfig+0x118>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d023      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2b      	ldr	r2, [pc, #172]	; (8005c90 <TIM_Base_SetConfig+0x11c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <TIM_Base_SetConfig+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a28      	ldr	r2, [pc, #160]	; (8005c9c <TIM_Base_SetConfig+0x128>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <TIM_Base_SetConfig+0x134>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a24      	ldr	r2, [pc, #144]	; (8005cac <TIM_Base_SetConfig+0x138>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <TIM_Base_SetConfig+0x13c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <TIM_Base_SetConfig+0x114>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <TIM_Base_SetConfig+0x124>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800
 8005ca8:	40001800 	.word	0x40001800
 8005cac:	40001c00 	.word	0x40001c00
 8005cb0:	40002000 	.word	0x40002000

08005cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cec:	431a      	orrs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e06d      	b.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a30      	ldr	r2, [pc, #192]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2f      	ldr	r2, [pc, #188]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d108      	bne.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a16      	ldr	r2, [pc, #88]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10c      	bne.n	8005de2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40001800 	.word	0x40001800

08005e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e040      	b.n	8005eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc fcce 	bl	800281c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fc18 	bl	80066cc <UART_SetConfig>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e022      	b.n	8005eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fe6e 	bl	8006b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fef5 	bl	8006cd4 <UART_CheckIdleState>
 8005eea:	4603      	mov	r3, r0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08a      	sub	sp, #40	; 0x28
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	f040 8081 	bne.w	8006010 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_UART_Transmit+0x26>
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e079      	b.n	8006012 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Transmit+0x38>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e072      	b.n	8006012 <HAL_UART_Transmit+0x11e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2221      	movs	r2, #33	; 0x21
 8005f40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f42:	f7fc fdbb 	bl	8002abc <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f60:	d108      	bne.n	8005f74 <HAL_UART_Transmit+0x80>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	e003      	b.n	8005f7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f84:	e02c      	b.n	8005fe0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	; 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fee8 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e038      	b.n	8006012 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	3302      	adds	r3, #2
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	e007      	b.n	8005fce <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1cc      	bne.n	8005f86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2140      	movs	r1, #64	; 0x40
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 feb5 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e005      	b.n	8006012 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e000      	b.n	8006012 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006010:	2302      	movs	r3, #2
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08a      	sub	sp, #40	; 0x28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	4613      	mov	r3, r2
 8006026:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602c:	2b20      	cmp	r3, #32
 800602e:	d13d      	bne.n	80060ac <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_UART_Receive_IT+0x22>
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e036      	b.n	80060ae <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_UART_Receive_IT+0x34>
 800604a:	2302      	movs	r3, #2
 800604c:	e02f      	b.n	80060ae <HAL_UART_Receive_IT+0x94>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	613b      	str	r3, [r7, #16]
   return(result);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	69f9      	ldr	r1, [r7, #28]
 800608e:	6a3a      	ldr	r2, [r7, #32]
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	61bb      	str	r3, [r7, #24]
   return(result);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	461a      	mov	r2, r3
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 ff24 	bl	8006ef0 <UART_Start_Receive_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	e000      	b.n	80060ae <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3728      	adds	r7, #40	; 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b0ba      	sub	sp, #232	; 0xe8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80060e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80060e6:	4013      	ands	r3, r2
 80060e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80060ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d115      	bne.n	8006120 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00f      	beq.n	8006120 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 82a4 	beq.w	800665e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
      }
      return;
 800611e:	e29e      	b.n	800665e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8117 	beq.w	8006358 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800612a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800613a:	4b85      	ldr	r3, [pc, #532]	; (8006350 <HAL_UART_IRQHandler+0x298>)
 800613c:	4013      	ands	r3, r2
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 810a 	beq.w	8006358 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d011      	beq.n	8006174 <HAL_UART_IRQHandler+0xbc>
 8006150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800616a:	f043 0201 	orr.w	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d011      	beq.n	80061a4 <HAL_UART_IRQHandler+0xec>
 8006180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2202      	movs	r2, #2
 8006192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800619a:	f043 0204 	orr.w	r2, r3, #4
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d011      	beq.n	80061d4 <HAL_UART_IRQHandler+0x11c>
 80061b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2204      	movs	r2, #4
 80061c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ca:	f043 0202 	orr.w	r2, r3, #2
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d017      	beq.n	8006210 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d105      	bne.n	80061f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2208      	movs	r2, #8
 80061fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006206:	f043 0208 	orr.w	r2, r3, #8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <HAL_UART_IRQHandler+0x18a>
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00c      	beq.n	8006242 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006238:	f043 0220 	orr.w	r2, r3, #32
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 820a 	beq.w	8006662 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00d      	beq.n	8006276 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800625a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800627c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d005      	beq.n	800629a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800628e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006296:	2b00      	cmp	r3, #0
 8006298:	d04f      	beq.n	800633a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fef2 	bl	8007084 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d141      	bne.n	8006332 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1d9      	bne.n	80062ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d013      	beq.n	800632a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	4a13      	ldr	r2, [pc, #76]	; (8006354 <HAL_UART_IRQHandler+0x29c>)
 8006308:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fbf3 	bl	8003afa <HAL_DMA_Abort_IT>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d017      	beq.n	800634a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e00f      	b.n	800634a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9ae 	bl	800668c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e00b      	b.n	800634a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9aa 	bl	800668c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	e007      	b.n	800634a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f9a6 	bl	800668c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006348:	e18b      	b.n	8006662 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800634a:	bf00      	nop
    return;
 800634c:	e189      	b.n	8006662 <HAL_UART_IRQHandler+0x5aa>
 800634e:	bf00      	nop
 8006350:	04000120 	.word	0x04000120
 8006354:	0800714b 	.word	0x0800714b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635c:	2b01      	cmp	r3, #1
 800635e:	f040 8144 	bne.w	80065ea <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 813d 	beq.w	80065ea <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8136 	beq.w	80065ea <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2210      	movs	r2, #16
 8006384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	f040 80b2 	bne.w	80064fa <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 815d 	beq.w	8006666 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063b6:	429a      	cmp	r2, r3
 80063b8:	f080 8155 	bcs.w	8006666 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d0:	f000 8085 	beq.w	80064de <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006402:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800640a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1da      	bne.n	80063d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800642e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006442:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006446:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800644a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e1      	bne.n	800641e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800646a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800646c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800647e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800648c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e3      	bne.n	800645a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ae:	f023 0310 	bic.w	r3, r3, #16
 80064b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e4      	bne.n	800649e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fa9e 	bl	8003a1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8d4 	bl	80066a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064f8:	e0b5      	b.n	8006666 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006506:	b29b      	uxth	r3, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80a7 	beq.w	800666a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800651c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80a2 	beq.w	800666a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800653a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006548:	647b      	str	r3, [r7, #68]	; 0x44
 800654a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800654e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e4      	bne.n	8006526 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3308      	adds	r3, #8
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	623b      	str	r3, [r7, #32]
   return(result);
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006580:	633a      	str	r2, [r7, #48]	; 0x30
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e3      	bne.n	800655c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0310 	bic.w	r3, r3, #16
 80065ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	69b9      	ldr	r1, [r7, #24]
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	617b      	str	r3, [r7, #20]
   return(result);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e4      	bne.n	80065a6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f85c 	bl	80066a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065e8:	e03f      	b.n	800666a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <HAL_UART_IRQHandler+0x55c>
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800660a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f853 	bl	80066b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006612:	e02d      	b.n	8006670 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00e      	beq.n	800663e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01c      	beq.n	800666e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
    }
    return;
 800663c:	e017      	b.n	800666e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d012      	beq.n	8006670 <HAL_UART_IRQHandler+0x5b8>
 800664a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00c      	beq.n	8006670 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fd8d 	bl	8007176 <UART_EndTransmit_IT>
    return;
 800665c:	e008      	b.n	8006670 <HAL_UART_IRQHandler+0x5b8>
      return;
 800665e:	bf00      	nop
 8006660:	e006      	b.n	8006670 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006662:	bf00      	nop
 8006664:	e004      	b.n	8006670 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006666:	bf00      	nop
 8006668:	e002      	b.n	8006670 <HAL_UART_IRQHandler+0x5b8>
      return;
 800666a:	bf00      	nop
 800666c:	e000      	b.n	8006670 <HAL_UART_IRQHandler+0x5b8>
    return;
 800666e:	bf00      	nop
  }

}
 8006670:	37e8      	adds	r7, #232	; 0xe8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop

08006678 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4ba7      	ldr	r3, [pc, #668]	; (8006994 <UART_SetConfig+0x2c8>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	6979      	ldr	r1, [r7, #20]
 8006700:	430b      	orrs	r3, r1
 8006702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	430a      	orrs	r2, r1
 800673c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a95      	ldr	r2, [pc, #596]	; (8006998 <UART_SetConfig+0x2cc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d120      	bne.n	800678a <UART_SetConfig+0xbe>
 8006748:	4b94      	ldr	r3, [pc, #592]	; (800699c <UART_SetConfig+0x2d0>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b03      	cmp	r3, #3
 8006754:	d816      	bhi.n	8006784 <UART_SetConfig+0xb8>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x90>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006779 	.word	0x08006779
 8006764:	08006773 	.word	0x08006773
 8006768:	0800677f 	.word	0x0800677f
 800676c:	2301      	movs	r3, #1
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e14f      	b.n	8006a12 <UART_SetConfig+0x346>
 8006772:	2302      	movs	r3, #2
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e14c      	b.n	8006a12 <UART_SetConfig+0x346>
 8006778:	2304      	movs	r3, #4
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e149      	b.n	8006a12 <UART_SetConfig+0x346>
 800677e:	2308      	movs	r3, #8
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e146      	b.n	8006a12 <UART_SetConfig+0x346>
 8006784:	2310      	movs	r3, #16
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e143      	b.n	8006a12 <UART_SetConfig+0x346>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a84      	ldr	r2, [pc, #528]	; (80069a0 <UART_SetConfig+0x2d4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d132      	bne.n	80067fa <UART_SetConfig+0x12e>
 8006794:	4b81      	ldr	r3, [pc, #516]	; (800699c <UART_SetConfig+0x2d0>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b0c      	cmp	r3, #12
 80067a0:	d828      	bhi.n	80067f4 <UART_SetConfig+0x128>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <UART_SetConfig+0xdc>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	080067f5 	.word	0x080067f5
 80067b0:	080067f5 	.word	0x080067f5
 80067b4:	080067f5 	.word	0x080067f5
 80067b8:	080067e9 	.word	0x080067e9
 80067bc:	080067f5 	.word	0x080067f5
 80067c0:	080067f5 	.word	0x080067f5
 80067c4:	080067f5 	.word	0x080067f5
 80067c8:	080067e3 	.word	0x080067e3
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	080067f5 	.word	0x080067f5
 80067d8:	080067ef 	.word	0x080067ef
 80067dc:	2300      	movs	r3, #0
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e117      	b.n	8006a12 <UART_SetConfig+0x346>
 80067e2:	2302      	movs	r3, #2
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e114      	b.n	8006a12 <UART_SetConfig+0x346>
 80067e8:	2304      	movs	r3, #4
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e111      	b.n	8006a12 <UART_SetConfig+0x346>
 80067ee:	2308      	movs	r3, #8
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e10e      	b.n	8006a12 <UART_SetConfig+0x346>
 80067f4:	2310      	movs	r3, #16
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e10b      	b.n	8006a12 <UART_SetConfig+0x346>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a69      	ldr	r2, [pc, #420]	; (80069a4 <UART_SetConfig+0x2d8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d120      	bne.n	8006846 <UART_SetConfig+0x17a>
 8006804:	4b65      	ldr	r3, [pc, #404]	; (800699c <UART_SetConfig+0x2d0>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800680e:	2b30      	cmp	r3, #48	; 0x30
 8006810:	d013      	beq.n	800683a <UART_SetConfig+0x16e>
 8006812:	2b30      	cmp	r3, #48	; 0x30
 8006814:	d814      	bhi.n	8006840 <UART_SetConfig+0x174>
 8006816:	2b20      	cmp	r3, #32
 8006818:	d009      	beq.n	800682e <UART_SetConfig+0x162>
 800681a:	2b20      	cmp	r3, #32
 800681c:	d810      	bhi.n	8006840 <UART_SetConfig+0x174>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <UART_SetConfig+0x15c>
 8006822:	2b10      	cmp	r3, #16
 8006824:	d006      	beq.n	8006834 <UART_SetConfig+0x168>
 8006826:	e00b      	b.n	8006840 <UART_SetConfig+0x174>
 8006828:	2300      	movs	r3, #0
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e0f1      	b.n	8006a12 <UART_SetConfig+0x346>
 800682e:	2302      	movs	r3, #2
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e0ee      	b.n	8006a12 <UART_SetConfig+0x346>
 8006834:	2304      	movs	r3, #4
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e0eb      	b.n	8006a12 <UART_SetConfig+0x346>
 800683a:	2308      	movs	r3, #8
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e0e8      	b.n	8006a12 <UART_SetConfig+0x346>
 8006840:	2310      	movs	r3, #16
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e0e5      	b.n	8006a12 <UART_SetConfig+0x346>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a57      	ldr	r2, [pc, #348]	; (80069a8 <UART_SetConfig+0x2dc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d120      	bne.n	8006892 <UART_SetConfig+0x1c6>
 8006850:	4b52      	ldr	r3, [pc, #328]	; (800699c <UART_SetConfig+0x2d0>)
 8006852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006856:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800685a:	2bc0      	cmp	r3, #192	; 0xc0
 800685c:	d013      	beq.n	8006886 <UART_SetConfig+0x1ba>
 800685e:	2bc0      	cmp	r3, #192	; 0xc0
 8006860:	d814      	bhi.n	800688c <UART_SetConfig+0x1c0>
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d009      	beq.n	800687a <UART_SetConfig+0x1ae>
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d810      	bhi.n	800688c <UART_SetConfig+0x1c0>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <UART_SetConfig+0x1a8>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d006      	beq.n	8006880 <UART_SetConfig+0x1b4>
 8006872:	e00b      	b.n	800688c <UART_SetConfig+0x1c0>
 8006874:	2300      	movs	r3, #0
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e0cb      	b.n	8006a12 <UART_SetConfig+0x346>
 800687a:	2302      	movs	r3, #2
 800687c:	77fb      	strb	r3, [r7, #31]
 800687e:	e0c8      	b.n	8006a12 <UART_SetConfig+0x346>
 8006880:	2304      	movs	r3, #4
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e0c5      	b.n	8006a12 <UART_SetConfig+0x346>
 8006886:	2308      	movs	r3, #8
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e0c2      	b.n	8006a12 <UART_SetConfig+0x346>
 800688c:	2310      	movs	r3, #16
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e0bf      	b.n	8006a12 <UART_SetConfig+0x346>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a45      	ldr	r2, [pc, #276]	; (80069ac <UART_SetConfig+0x2e0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d125      	bne.n	80068e8 <UART_SetConfig+0x21c>
 800689c:	4b3f      	ldr	r3, [pc, #252]	; (800699c <UART_SetConfig+0x2d0>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068aa:	d017      	beq.n	80068dc <UART_SetConfig+0x210>
 80068ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b0:	d817      	bhi.n	80068e2 <UART_SetConfig+0x216>
 80068b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b6:	d00b      	beq.n	80068d0 <UART_SetConfig+0x204>
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068bc:	d811      	bhi.n	80068e2 <UART_SetConfig+0x216>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <UART_SetConfig+0x1fe>
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	d006      	beq.n	80068d6 <UART_SetConfig+0x20a>
 80068c8:	e00b      	b.n	80068e2 <UART_SetConfig+0x216>
 80068ca:	2300      	movs	r3, #0
 80068cc:	77fb      	strb	r3, [r7, #31]
 80068ce:	e0a0      	b.n	8006a12 <UART_SetConfig+0x346>
 80068d0:	2302      	movs	r3, #2
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e09d      	b.n	8006a12 <UART_SetConfig+0x346>
 80068d6:	2304      	movs	r3, #4
 80068d8:	77fb      	strb	r3, [r7, #31]
 80068da:	e09a      	b.n	8006a12 <UART_SetConfig+0x346>
 80068dc:	2308      	movs	r3, #8
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e097      	b.n	8006a12 <UART_SetConfig+0x346>
 80068e2:	2310      	movs	r3, #16
 80068e4:	77fb      	strb	r3, [r7, #31]
 80068e6:	e094      	b.n	8006a12 <UART_SetConfig+0x346>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a30      	ldr	r2, [pc, #192]	; (80069b0 <UART_SetConfig+0x2e4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d125      	bne.n	800693e <UART_SetConfig+0x272>
 80068f2:	4b2a      	ldr	r3, [pc, #168]	; (800699c <UART_SetConfig+0x2d0>)
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006900:	d017      	beq.n	8006932 <UART_SetConfig+0x266>
 8006902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006906:	d817      	bhi.n	8006938 <UART_SetConfig+0x26c>
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690c:	d00b      	beq.n	8006926 <UART_SetConfig+0x25a>
 800690e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006912:	d811      	bhi.n	8006938 <UART_SetConfig+0x26c>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <UART_SetConfig+0x254>
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691c:	d006      	beq.n	800692c <UART_SetConfig+0x260>
 800691e:	e00b      	b.n	8006938 <UART_SetConfig+0x26c>
 8006920:	2301      	movs	r3, #1
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e075      	b.n	8006a12 <UART_SetConfig+0x346>
 8006926:	2302      	movs	r3, #2
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e072      	b.n	8006a12 <UART_SetConfig+0x346>
 800692c:	2304      	movs	r3, #4
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e06f      	b.n	8006a12 <UART_SetConfig+0x346>
 8006932:	2308      	movs	r3, #8
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e06c      	b.n	8006a12 <UART_SetConfig+0x346>
 8006938:	2310      	movs	r3, #16
 800693a:	77fb      	strb	r3, [r7, #31]
 800693c:	e069      	b.n	8006a12 <UART_SetConfig+0x346>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <UART_SetConfig+0x2e8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d137      	bne.n	80069b8 <UART_SetConfig+0x2ec>
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <UART_SetConfig+0x2d0>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006952:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006956:	d017      	beq.n	8006988 <UART_SetConfig+0x2bc>
 8006958:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800695c:	d817      	bhi.n	800698e <UART_SetConfig+0x2c2>
 800695e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006962:	d00b      	beq.n	800697c <UART_SetConfig+0x2b0>
 8006964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006968:	d811      	bhi.n	800698e <UART_SetConfig+0x2c2>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <UART_SetConfig+0x2aa>
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006972:	d006      	beq.n	8006982 <UART_SetConfig+0x2b6>
 8006974:	e00b      	b.n	800698e <UART_SetConfig+0x2c2>
 8006976:	2300      	movs	r3, #0
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e04a      	b.n	8006a12 <UART_SetConfig+0x346>
 800697c:	2302      	movs	r3, #2
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e047      	b.n	8006a12 <UART_SetConfig+0x346>
 8006982:	2304      	movs	r3, #4
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e044      	b.n	8006a12 <UART_SetConfig+0x346>
 8006988:	2308      	movs	r3, #8
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e041      	b.n	8006a12 <UART_SetConfig+0x346>
 800698e:	2310      	movs	r3, #16
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e03e      	b.n	8006a12 <UART_SetConfig+0x346>
 8006994:	efff69f3 	.word	0xefff69f3
 8006998:	40011000 	.word	0x40011000
 800699c:	40023800 	.word	0x40023800
 80069a0:	40004400 	.word	0x40004400
 80069a4:	40004800 	.word	0x40004800
 80069a8:	40004c00 	.word	0x40004c00
 80069ac:	40005000 	.word	0x40005000
 80069b0:	40011400 	.word	0x40011400
 80069b4:	40007800 	.word	0x40007800
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a71      	ldr	r2, [pc, #452]	; (8006b84 <UART_SetConfig+0x4b8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d125      	bne.n	8006a0e <UART_SetConfig+0x342>
 80069c2:	4b71      	ldr	r3, [pc, #452]	; (8006b88 <UART_SetConfig+0x4bc>)
 80069c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069d0:	d017      	beq.n	8006a02 <UART_SetConfig+0x336>
 80069d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069d6:	d817      	bhi.n	8006a08 <UART_SetConfig+0x33c>
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069dc:	d00b      	beq.n	80069f6 <UART_SetConfig+0x32a>
 80069de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e2:	d811      	bhi.n	8006a08 <UART_SetConfig+0x33c>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <UART_SetConfig+0x324>
 80069e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ec:	d006      	beq.n	80069fc <UART_SetConfig+0x330>
 80069ee:	e00b      	b.n	8006a08 <UART_SetConfig+0x33c>
 80069f0:	2300      	movs	r3, #0
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e00d      	b.n	8006a12 <UART_SetConfig+0x346>
 80069f6:	2302      	movs	r3, #2
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e00a      	b.n	8006a12 <UART_SetConfig+0x346>
 80069fc:	2304      	movs	r3, #4
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e007      	b.n	8006a12 <UART_SetConfig+0x346>
 8006a02:	2308      	movs	r3, #8
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e004      	b.n	8006a12 <UART_SetConfig+0x346>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e001      	b.n	8006a12 <UART_SetConfig+0x346>
 8006a0e:	2310      	movs	r3, #16
 8006a10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1a:	d15a      	bne.n	8006ad2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006a1c:	7ffb      	ldrb	r3, [r7, #31]
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d827      	bhi.n	8006a72 <UART_SetConfig+0x3a6>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x35c>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	08006a73 	.word	0x08006a73
 8006a38:	08006a63 	.word	0x08006a63
 8006a3c:	08006a73 	.word	0x08006a73
 8006a40:	08006a73 	.word	0x08006a73
 8006a44:	08006a73 	.word	0x08006a73
 8006a48:	08006a6b 	.word	0x08006a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a4c:	f7fe f8a0 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006a50:	61b8      	str	r0, [r7, #24]
        break;
 8006a52:	e013      	b.n	8006a7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a54:	f7fe f8b0 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8006a58:	61b8      	str	r0, [r7, #24]
        break;
 8006a5a:	e00f      	b.n	8006a7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a5c:	4b4b      	ldr	r3, [pc, #300]	; (8006b8c <UART_SetConfig+0x4c0>)
 8006a5e:	61bb      	str	r3, [r7, #24]
        break;
 8006a60:	e00c      	b.n	8006a7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a62:	f7fd ffa7 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8006a66:	61b8      	str	r0, [r7, #24]
        break;
 8006a68:	e008      	b.n	8006a7c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6e:	61bb      	str	r3, [r7, #24]
        break;
 8006a70:	e004      	b.n	8006a7c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	77bb      	strb	r3, [r7, #30]
        break;
 8006a7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d074      	beq.n	8006b6c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	005a      	lsls	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	441a      	add	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b0f      	cmp	r3, #15
 8006a9c:	d916      	bls.n	8006acc <UART_SetConfig+0x400>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa4:	d212      	bcs.n	8006acc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f023 030f 	bic.w	r3, r3, #15
 8006aae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	085b      	lsrs	r3, r3, #1
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	89fb      	ldrh	r3, [r7, #14]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	89fa      	ldrh	r2, [r7, #14]
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	e04f      	b.n	8006b6c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	77bb      	strb	r3, [r7, #30]
 8006ad0:	e04c      	b.n	8006b6c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad2:	7ffb      	ldrb	r3, [r7, #31]
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d828      	bhi.n	8006b2a <UART_SetConfig+0x45e>
 8006ad8:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0x414>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006b05 	.word	0x08006b05
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	08006b2b 	.word	0x08006b2b
 8006af0:	08006b1b 	.word	0x08006b1b
 8006af4:	08006b2b 	.word	0x08006b2b
 8006af8:	08006b2b 	.word	0x08006b2b
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b23 	.word	0x08006b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fe f844 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006b08:	61b8      	str	r0, [r7, #24]
        break;
 8006b0a:	e013      	b.n	8006b34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7fe f854 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8006b10:	61b8      	str	r0, [r7, #24]
        break;
 8006b12:	e00f      	b.n	8006b34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b14:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <UART_SetConfig+0x4c0>)
 8006b16:	61bb      	str	r3, [r7, #24]
        break;
 8006b18:	e00c      	b.n	8006b34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1a:	f7fd ff4b 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8006b1e:	61b8      	str	r0, [r7, #24]
        break;
 8006b20:	e008      	b.n	8006b34 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b26:	61bb      	str	r3, [r7, #24]
        break;
 8006b28:	e004      	b.n	8006b34 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	77bb      	strb	r3, [r7, #30]
        break;
 8006b32:	bf00      	nop
    }

    if (pclk != 0U)
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d018      	beq.n	8006b6c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	085a      	lsrs	r2, r3, #1
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	441a      	add	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b0f      	cmp	r3, #15
 8006b52:	d909      	bls.n	8006b68 <UART_SetConfig+0x49c>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5a:	d205      	bcs.n	8006b68 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60da      	str	r2, [r3, #12]
 8006b66:	e001      	b.n	8006b6c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b78:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40007c00 	.word	0x40007c00
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	00f42400 	.word	0x00f42400

08006b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8e:	d10a      	bne.n	8006ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ce4:	f7fb feea 	bl	8002abc <HAL_GetTick>
 8006ce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d10e      	bne.n	8006d16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f82d 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e023      	b.n	8006d5e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d10e      	bne.n	8006d42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f817 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e00d      	b.n	8006d5e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b09c      	sub	sp, #112	; 0x70
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	4613      	mov	r3, r2
 8006d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d76:	e0a5      	b.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	f000 80a1 	beq.w	8006ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d82:	f7fb fe9b 	bl	8002abc <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d302      	bcc.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d13e      	bne.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dac:	667b      	str	r3, [r7, #100]	; 0x64
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	663b      	str	r3, [r7, #96]	; 0x60
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dea:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e067      	b.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d04f      	beq.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e32:	d147      	bne.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e6      	bne.n	8006e3e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e90:	623a      	str	r2, [r7, #32]
 8006e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	69f9      	ldr	r1, [r7, #28]
 8006e96:	6a3a      	ldr	r2, [r7, #32]
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e5      	bne.n	8006e70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e010      	b.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69da      	ldr	r2, [r3, #28]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	bf0c      	ite	eq
 8006ed4:	2301      	moveq	r3, #1
 8006ed6:	2300      	movne	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f43f af4a 	beq.w	8006d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3770      	adds	r7, #112	; 0x70
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b097      	sub	sp, #92	; 0x5c
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d10e      	bne.n	8006f42 <UART_Start_Receive_IT+0x52>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d105      	bne.n	8006f38 <UART_Start_Receive_IT+0x48>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f36:	e02d      	b.n	8006f94 <UART_Start_Receive_IT+0xa4>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	22ff      	movs	r2, #255	; 0xff
 8006f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f40:	e028      	b.n	8006f94 <UART_Start_Receive_IT+0xa4>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10d      	bne.n	8006f66 <UART_Start_Receive_IT+0x76>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <UART_Start_Receive_IT+0x6c>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	22ff      	movs	r2, #255	; 0xff
 8006f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f5a:	e01b      	b.n	8006f94 <UART_Start_Receive_IT+0xa4>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	227f      	movs	r2, #127	; 0x7f
 8006f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f64:	e016      	b.n	8006f94 <UART_Start_Receive_IT+0xa4>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f6e:	d10d      	bne.n	8006f8c <UART_Start_Receive_IT+0x9c>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <UART_Start_Receive_IT+0x92>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	227f      	movs	r2, #127	; 0x7f
 8006f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f80:	e008      	b.n	8006f94 <UART_Start_Receive_IT+0xa4>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	223f      	movs	r2, #63	; 0x3f
 8006f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f8a:	e003      	b.n	8006f94 <UART_Start_Receive_IT+0xa4>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2222      	movs	r2, #34	; 0x22
 8006fa0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fde:	d107      	bne.n	8006ff0 <UART_Start_Receive_IT+0x100>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a24      	ldr	r2, [pc, #144]	; (800707c <UART_Start_Receive_IT+0x18c>)
 8006fec:	665a      	str	r2, [r3, #100]	; 0x64
 8006fee:	e002      	b.n	8006ff6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a23      	ldr	r2, [pc, #140]	; (8007080 <UART_Start_Receive_IT+0x190>)
 8006ff4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d019      	beq.n	800703a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800701a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
 8007026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800702a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_Start_Receive_IT+0x116>
 8007038:	e018      	b.n	800706c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f043 0320 	orr.w	r3, r3, #32
 800704e:	653b      	str	r3, [r7, #80]	; 0x50
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007058:	623b      	str	r3, [r7, #32]
 800705a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	61bb      	str	r3, [r7, #24]
   return(result);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e6      	bne.n	800703a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	375c      	adds	r7, #92	; 0x5c
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	08007327 	.word	0x08007327
 8007080:	080071cb 	.word	0x080071cb

08007084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007084:	b480      	push	{r7}
 8007086:	b095      	sub	sp, #84	; 0x54
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070aa:	643b      	str	r3, [r7, #64]	; 0x40
 80070ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e6      	bne.n	800708c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3308      	adds	r3, #8
 80070c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3308      	adds	r3, #8
 80070dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e5      	bne.n	80070be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d118      	bne.n	800712c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	60bb      	str	r3, [r7, #8]
   return(result);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f023 0310 	bic.w	r3, r3, #16
 800710e:	647b      	str	r3, [r7, #68]	; 0x44
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6979      	ldr	r1, [r7, #20]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e6      	bne.n	80070fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800713e:	bf00      	nop
 8007140:	3754      	adds	r7, #84	; 0x54
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7ff fa8f 	bl	800668c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b088      	sub	sp, #32
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60bb      	str	r3, [r7, #8]
   return(result);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6979      	ldr	r1, [r7, #20]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	613b      	str	r3, [r7, #16]
   return(result);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff fa5b 	bl	8006678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c2:	bf00      	nop
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b096      	sub	sp, #88	; 0x58
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e0:	2b22      	cmp	r3, #34	; 0x22
 80071e2:	f040 8094 	bne.w	800730e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80071f4:	b2d9      	uxtb	r1, r3
 80071f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	400a      	ands	r2, r1
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d177      	bne.n	800731e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007242:	653b      	str	r3, [r7, #80]	; 0x50
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800724c:	647b      	str	r3, [r7, #68]	; 0x44
 800724e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800725a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e6      	bne.n	800722e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	623b      	str	r3, [r7, #32]
   return(result);
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007280:	633a      	str	r2, [r7, #48]	; 0x30
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e5      	bne.n	8007260 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2220      	movs	r2, #32
 8007298:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d12e      	bne.n	8007306 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0310 	bic.w	r3, r3, #16
 80072c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	69b9      	ldr	r1, [r7, #24]
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	617b      	str	r3, [r7, #20]
   return(result);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d103      	bne.n	80072f6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2210      	movs	r2, #16
 80072f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff f9ce 	bl	80066a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007304:	e00b      	b.n	800731e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fa fcac 	bl	8001c64 <HAL_UART_RxCpltCallback>
}
 800730c:	e007      	b.n	800731e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0208 	orr.w	r2, r2, #8
 800731c:	619a      	str	r2, [r3, #24]
}
 800731e:	bf00      	nop
 8007320:	3758      	adds	r7, #88	; 0x58
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b096      	sub	sp, #88	; 0x58
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007334:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800733c:	2b22      	cmp	r3, #34	; 0x22
 800733e:	f040 8094 	bne.w	800746a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007350:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007352:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007356:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800735a:	4013      	ands	r3, r2
 800735c:	b29a      	uxth	r2, r3
 800735e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007360:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d177      	bne.n	800747a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800739e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a8:	643b      	str	r3, [r7, #64]	; 0x40
 80073aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e6      	bne.n	800738a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3308      	adds	r3, #8
 80073c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f023 0301 	bic.w	r3, r3, #1
 80073d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e5      	bne.n	80073bc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007400:	2b01      	cmp	r3, #1
 8007402:	d12e      	bne.n	8007462 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	60bb      	str	r3, [r7, #8]
   return(result);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f023 0310 	bic.w	r3, r3, #16
 800741e:	647b      	str	r3, [r7, #68]	; 0x44
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6979      	ldr	r1, [r7, #20]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	613b      	str	r3, [r7, #16]
   return(result);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b10      	cmp	r3, #16
 8007448:	d103      	bne.n	8007452 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2210      	movs	r2, #16
 8007450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff f920 	bl	80066a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007460:	e00b      	b.n	800747a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fa fbfe 	bl	8001c64 <HAL_UART_RxCpltCallback>
}
 8007468:	e007      	b.n	800747a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0208 	orr.w	r2, r2, #8
 8007478:	619a      	str	r2, [r3, #24]
}
 800747a:	bf00      	nop
 800747c:	3758      	adds	r7, #88	; 0x58
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007484:	b084      	sub	sp, #16
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	f107 001c 	add.w	r0, r7, #28
 8007492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	2b01      	cmp	r3, #1
 800749a:	d120      	bne.n	80074de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	4b20      	ldr	r3, [pc, #128]	; (8007530 <USB_CoreInit+0xac>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d105      	bne.n	80074d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa92 	bl	80079fc <USB_CoreReset>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	e010      	b.n	8007500 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa86 	bl	80079fc <USB_CoreReset>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	2b01      	cmp	r3, #1
 8007504:	d10b      	bne.n	800751e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f043 0206 	orr.w	r2, r3, #6
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800752a:	b004      	add	sp, #16
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	ffbdffbf 	.word	0xffbdffbf

08007534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f023 0201 	bic.w	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d115      	bne.n	80075a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007584:	2001      	movs	r0, #1
 8007586:	f7fb faa5 	bl	8002ad4 <HAL_Delay>
      ms++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fa25 	bl	80079e0 <USB_GetMode>
 8007596:	4603      	mov	r3, r0
 8007598:	2b01      	cmp	r3, #1
 800759a:	d01e      	beq.n	80075da <USB_SetCurrentMode+0x84>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b31      	cmp	r3, #49	; 0x31
 80075a0:	d9f0      	bls.n	8007584 <USB_SetCurrentMode+0x2e>
 80075a2:	e01a      	b.n	80075da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d115      	bne.n	80075d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075b6:	2001      	movs	r0, #1
 80075b8:	f7fb fa8c 	bl	8002ad4 <HAL_Delay>
      ms++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa0c 	bl	80079e0 <USB_GetMode>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <USB_SetCurrentMode+0x84>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b31      	cmp	r3, #49	; 0x31
 80075d2:	d9f0      	bls.n	80075b6 <USB_SetCurrentMode+0x60>
 80075d4:	e001      	b.n	80075da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e005      	b.n	80075e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b32      	cmp	r3, #50	; 0x32
 80075de:	d101      	bne.n	80075e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e000      	b.n	80075e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075f0:	b084      	sub	sp, #16
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	e009      	b.n	8007624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	3340      	adds	r3, #64	; 0x40
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	3301      	adds	r3, #1
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2b0e      	cmp	r3, #14
 8007628:	d9f2      	bls.n	8007610 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800762a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d11c      	bne.n	800766a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763e:	f043 0302 	orr.w	r3, r3, #2
 8007642:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e005      	b.n	8007676 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800767c:	461a      	mov	r2, r3
 800767e:	2300      	movs	r3, #0
 8007680:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007688:	4619      	mov	r1, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007690:	461a      	mov	r2, r3
 8007692:	680b      	ldr	r3, [r1, #0]
 8007694:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	2b01      	cmp	r3, #1
 800769a:	d10c      	bne.n	80076b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f961 	bl	800796c <USB_SetDevSpeed>
 80076aa:	e008      	b.n	80076be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076ac:	2101      	movs	r1, #1
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f95c 	bl	800796c <USB_SetDevSpeed>
 80076b4:	e003      	b.n	80076be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076b6:	2103      	movs	r1, #3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f957 	bl	800796c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076be:	2110      	movs	r1, #16
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f8f3 	bl	80078ac <USB_FlushTxFifo>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f91d 	bl	8007910 <USB_FlushRxFifo>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	461a      	mov	r2, r3
 80076e8:	2300      	movs	r3, #0
 80076ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f2:	461a      	mov	r2, r3
 80076f4:	2300      	movs	r3, #0
 80076f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fe:	461a      	mov	r2, r3
 8007700:	2300      	movs	r3, #0
 8007702:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007704:	2300      	movs	r3, #0
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	e043      	b.n	8007792 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800771c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007720:	d118      	bne.n	8007754 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	461a      	mov	r2, r3
 8007736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	e013      	b.n	8007766 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774a:	461a      	mov	r2, r3
 800774c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	e008      	b.n	8007766 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007760:	461a      	mov	r2, r3
 8007762:	2300      	movs	r3, #0
 8007764:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	461a      	mov	r2, r3
 8007774:	2300      	movs	r3, #0
 8007776:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007784:	461a      	mov	r2, r3
 8007786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800778a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	3301      	adds	r3, #1
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	429a      	cmp	r2, r3
 8007798:	d3b7      	bcc.n	800770a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800779a:	2300      	movs	r3, #0
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	e043      	b.n	8007828 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077b6:	d118      	bne.n	80077ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	461a      	mov	r2, r3
 80077cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	e013      	b.n	80077fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e0:	461a      	mov	r2, r3
 80077e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	e008      	b.n	80077fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f6:	461a      	mov	r2, r3
 80077f8:	2300      	movs	r3, #0
 80077fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007808:	461a      	mov	r2, r3
 800780a:	2300      	movs	r3, #0
 800780c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	461a      	mov	r2, r3
 800781c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007820:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3301      	adds	r3, #1
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	429a      	cmp	r2, r3
 800782e:	d3b7      	bcc.n	80077a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800783e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007842:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007850:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	2b00      	cmp	r3, #0
 8007856:	d105      	bne.n	8007864 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f043 0210 	orr.w	r2, r3, #16
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699a      	ldr	r2, [r3, #24]
 8007868:	4b0e      	ldr	r3, [pc, #56]	; (80078a4 <USB_DevInit+0x2b4>)
 800786a:	4313      	orrs	r3, r2
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	f043 0208 	orr.w	r2, r3, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007884:	2b01      	cmp	r3, #1
 8007886:	d105      	bne.n	8007894 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699a      	ldr	r2, [r3, #24]
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <USB_DevInit+0x2b8>)
 800788e:	4313      	orrs	r3, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078a0:	b004      	add	sp, #16
 80078a2:	4770      	bx	lr
 80078a4:	803c3800 	.word	0x803c3800
 80078a8:	40000004 	.word	0x40000004

080078ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	4a12      	ldr	r2, [pc, #72]	; (800790c <USB_FlushTxFifo+0x60>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e01a      	b.n	8007900 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	daf3      	bge.n	80078ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	019b      	lsls	r3, r3, #6
 80078da:	f043 0220 	orr.w	r2, r3, #32
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	4a08      	ldr	r2, [pc, #32]	; (800790c <USB_FlushTxFifo+0x60>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d901      	bls.n	80078f2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e006      	b.n	8007900 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d0f1      	beq.n	80078e2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	00030d40 	.word	0x00030d40

08007910 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	4a11      	ldr	r2, [pc, #68]	; (8007968 <USB_FlushRxFifo+0x58>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e017      	b.n	800795c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	daf3      	bge.n	800791c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2210      	movs	r2, #16
 800793c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	4a08      	ldr	r2, [pc, #32]	; (8007968 <USB_FlushRxFifo+0x58>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e006      	b.n	800795c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b10      	cmp	r3, #16
 8007958:	d0f1      	beq.n	800793e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	00030d40 	.word	0x00030d40

0800796c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800798c:	4313      	orrs	r3, r2
 800798e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079b8:	f023 0303 	bic.w	r3, r3, #3
 80079bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079cc:	f043 0302 	orr.w	r3, r3, #2
 80079d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0301 	and.w	r3, r3, #1
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <USB_CoreReset+0x60>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d901      	bls.n	8007a18 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e01a      	b.n	8007a4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	daf3      	bge.n	8007a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f043 0201 	orr.w	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <USB_CoreReset+0x60>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d901      	bls.n	8007a40 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e006      	b.n	8007a4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d0f1      	beq.n	8007a30 <USB_CoreReset+0x34>

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	00030d40 	.word	0x00030d40

08007a60 <atoi>:
 8007a60:	220a      	movs	r2, #10
 8007a62:	2100      	movs	r1, #0
 8007a64:	f000 bd2c 	b.w	80084c0 <strtol>

08007a68 <__errno>:
 8007a68:	4b01      	ldr	r3, [pc, #4]	; (8007a70 <__errno+0x8>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20000024 	.word	0x20000024

08007a74 <__libc_init_array>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4d0d      	ldr	r5, [pc, #52]	; (8007aac <__libc_init_array+0x38>)
 8007a78:	4c0d      	ldr	r4, [pc, #52]	; (8007ab0 <__libc_init_array+0x3c>)
 8007a7a:	1b64      	subs	r4, r4, r5
 8007a7c:	10a4      	asrs	r4, r4, #2
 8007a7e:	2600      	movs	r6, #0
 8007a80:	42a6      	cmp	r6, r4
 8007a82:	d109      	bne.n	8007a98 <__libc_init_array+0x24>
 8007a84:	4d0b      	ldr	r5, [pc, #44]	; (8007ab4 <__libc_init_array+0x40>)
 8007a86:	4c0c      	ldr	r4, [pc, #48]	; (8007ab8 <__libc_init_array+0x44>)
 8007a88:	f002 fec6 	bl	800a818 <_init>
 8007a8c:	1b64      	subs	r4, r4, r5
 8007a8e:	10a4      	asrs	r4, r4, #2
 8007a90:	2600      	movs	r6, #0
 8007a92:	42a6      	cmp	r6, r4
 8007a94:	d105      	bne.n	8007aa2 <__libc_init_array+0x2e>
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9c:	4798      	blx	r3
 8007a9e:	3601      	adds	r6, #1
 8007aa0:	e7ee      	b.n	8007a80 <__libc_init_array+0xc>
 8007aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa6:	4798      	blx	r3
 8007aa8:	3601      	adds	r6, #1
 8007aaa:	e7f2      	b.n	8007a92 <__libc_init_array+0x1e>
 8007aac:	0800ad0c 	.word	0x0800ad0c
 8007ab0:	0800ad0c 	.word	0x0800ad0c
 8007ab4:	0800ad0c 	.word	0x0800ad0c
 8007ab8:	0800ad10 	.word	0x0800ad10

08007abc <memset>:
 8007abc:	4402      	add	r2, r0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d100      	bne.n	8007ac6 <memset+0xa>
 8007ac4:	4770      	bx	lr
 8007ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aca:	e7f9      	b.n	8007ac0 <memset+0x4>

08007acc <__cvt>:
 8007acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ace:	ed2d 8b02 	vpush	{d8}
 8007ad2:	eeb0 8b40 	vmov.f64	d8, d0
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	4617      	mov	r7, r2
 8007ada:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007adc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ade:	ee18 2a90 	vmov	r2, s17
 8007ae2:	f025 0520 	bic.w	r5, r5, #32
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	bfb6      	itet	lt
 8007aea:	222d      	movlt	r2, #45	; 0x2d
 8007aec:	2200      	movge	r2, #0
 8007aee:	eeb1 8b40 	vneglt.f64	d8, d0
 8007af2:	2d46      	cmp	r5, #70	; 0x46
 8007af4:	460c      	mov	r4, r1
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	d004      	beq.n	8007b04 <__cvt+0x38>
 8007afa:	2d45      	cmp	r5, #69	; 0x45
 8007afc:	d100      	bne.n	8007b00 <__cvt+0x34>
 8007afe:	3401      	adds	r4, #1
 8007b00:	2102      	movs	r1, #2
 8007b02:	e000      	b.n	8007b06 <__cvt+0x3a>
 8007b04:	2103      	movs	r1, #3
 8007b06:	ab03      	add	r3, sp, #12
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	ab02      	add	r3, sp, #8
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4633      	mov	r3, r6
 8007b12:	eeb0 0b48 	vmov.f64	d0, d8
 8007b16:	f000 fd6b 	bl	80085f0 <_dtoa_r>
 8007b1a:	2d47      	cmp	r5, #71	; 0x47
 8007b1c:	d109      	bne.n	8007b32 <__cvt+0x66>
 8007b1e:	07fb      	lsls	r3, r7, #31
 8007b20:	d407      	bmi.n	8007b32 <__cvt+0x66>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b26:	1a1b      	subs	r3, r3, r0
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	b005      	add	sp, #20
 8007b2c:	ecbd 8b02 	vpop	{d8}
 8007b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b32:	2d46      	cmp	r5, #70	; 0x46
 8007b34:	eb00 0204 	add.w	r2, r0, r4
 8007b38:	d10c      	bne.n	8007b54 <__cvt+0x88>
 8007b3a:	7803      	ldrb	r3, [r0, #0]
 8007b3c:	2b30      	cmp	r3, #48	; 0x30
 8007b3e:	d107      	bne.n	8007b50 <__cvt+0x84>
 8007b40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b48:	bf1c      	itt	ne
 8007b4a:	f1c4 0401 	rsbne	r4, r4, #1
 8007b4e:	6034      	strne	r4, [r6, #0]
 8007b50:	6833      	ldr	r3, [r6, #0]
 8007b52:	441a      	add	r2, r3
 8007b54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5c:	bf08      	it	eq
 8007b5e:	9203      	streq	r2, [sp, #12]
 8007b60:	2130      	movs	r1, #48	; 0x30
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d2dc      	bcs.n	8007b22 <__cvt+0x56>
 8007b68:	1c5c      	adds	r4, r3, #1
 8007b6a:	9403      	str	r4, [sp, #12]
 8007b6c:	7019      	strb	r1, [r3, #0]
 8007b6e:	e7f8      	b.n	8007b62 <__cvt+0x96>

08007b70 <__exponent>:
 8007b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b72:	4603      	mov	r3, r0
 8007b74:	2900      	cmp	r1, #0
 8007b76:	bfb8      	it	lt
 8007b78:	4249      	neglt	r1, r1
 8007b7a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b7e:	bfb4      	ite	lt
 8007b80:	222d      	movlt	r2, #45	; 0x2d
 8007b82:	222b      	movge	r2, #43	; 0x2b
 8007b84:	2909      	cmp	r1, #9
 8007b86:	7042      	strb	r2, [r0, #1]
 8007b88:	dd2a      	ble.n	8007be0 <__exponent+0x70>
 8007b8a:	f10d 0407 	add.w	r4, sp, #7
 8007b8e:	46a4      	mov	ip, r4
 8007b90:	270a      	movs	r7, #10
 8007b92:	46a6      	mov	lr, r4
 8007b94:	460a      	mov	r2, r1
 8007b96:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b9a:	fb07 1516 	mls	r5, r7, r6, r1
 8007b9e:	3530      	adds	r5, #48	; 0x30
 8007ba0:	2a63      	cmp	r2, #99	; 0x63
 8007ba2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ba6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007baa:	4631      	mov	r1, r6
 8007bac:	dcf1      	bgt.n	8007b92 <__exponent+0x22>
 8007bae:	3130      	adds	r1, #48	; 0x30
 8007bb0:	f1ae 0502 	sub.w	r5, lr, #2
 8007bb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bb8:	1c44      	adds	r4, r0, #1
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4561      	cmp	r1, ip
 8007bbe:	d30a      	bcc.n	8007bd6 <__exponent+0x66>
 8007bc0:	f10d 0209 	add.w	r2, sp, #9
 8007bc4:	eba2 020e 	sub.w	r2, r2, lr
 8007bc8:	4565      	cmp	r5, ip
 8007bca:	bf88      	it	hi
 8007bcc:	2200      	movhi	r2, #0
 8007bce:	4413      	add	r3, r2
 8007bd0:	1a18      	subs	r0, r3, r0
 8007bd2:	b003      	add	sp, #12
 8007bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007bde:	e7ed      	b.n	8007bbc <__exponent+0x4c>
 8007be0:	2330      	movs	r3, #48	; 0x30
 8007be2:	3130      	adds	r1, #48	; 0x30
 8007be4:	7083      	strb	r3, [r0, #2]
 8007be6:	70c1      	strb	r1, [r0, #3]
 8007be8:	1d03      	adds	r3, r0, #4
 8007bea:	e7f1      	b.n	8007bd0 <__exponent+0x60>
 8007bec:	0000      	movs	r0, r0
	...

08007bf0 <_printf_float>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	b08b      	sub	sp, #44	; 0x2c
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	461f      	mov	r7, r3
 8007c00:	4605      	mov	r5, r0
 8007c02:	f001 fa77 	bl	80090f4 <_localeconv_r>
 8007c06:	f8d0 b000 	ldr.w	fp, [r0]
 8007c0a:	4658      	mov	r0, fp
 8007c0c:	f7f8 fb18 	bl	8000240 <strlen>
 8007c10:	2300      	movs	r3, #0
 8007c12:	9308      	str	r3, [sp, #32]
 8007c14:	f8d8 3000 	ldr.w	r3, [r8]
 8007c18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c1c:	6822      	ldr	r2, [r4, #0]
 8007c1e:	3307      	adds	r3, #7
 8007c20:	f023 0307 	bic.w	r3, r3, #7
 8007c24:	f103 0108 	add.w	r1, r3, #8
 8007c28:	f8c8 1000 	str.w	r1, [r8]
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007c36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007e98 <_printf_float+0x2a8>
 8007c3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007c3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007c42:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4a:	dd24      	ble.n	8007c96 <_printf_float+0xa6>
 8007c4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c54:	d502      	bpl.n	8007c5c <_printf_float+0x6c>
 8007c56:	232d      	movs	r3, #45	; 0x2d
 8007c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5c:	4b90      	ldr	r3, [pc, #576]	; (8007ea0 <_printf_float+0x2b0>)
 8007c5e:	4891      	ldr	r0, [pc, #580]	; (8007ea4 <_printf_float+0x2b4>)
 8007c60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007c64:	bf94      	ite	ls
 8007c66:	4698      	movls	r8, r3
 8007c68:	4680      	movhi	r8, r0
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	f022 0204 	bic.w	r2, r2, #4
 8007c72:	2300      	movs	r3, #0
 8007c74:	6022      	str	r2, [r4, #0]
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	9700      	str	r7, [sp, #0]
 8007c7a:	4633      	mov	r3, r6
 8007c7c:	aa09      	add	r2, sp, #36	; 0x24
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f000 f9d3 	bl	800802c <_printf_common>
 8007c86:	3001      	adds	r0, #1
 8007c88:	f040 808a 	bne.w	8007da0 <_printf_float+0x1b0>
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	b00b      	add	sp, #44	; 0x2c
 8007c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c96:	eeb4 0b40 	vcmp.f64	d0, d0
 8007c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9e:	d709      	bvc.n	8007cb4 <_printf_float+0xc4>
 8007ca0:	ee10 3a90 	vmov	r3, s1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfbc      	itt	lt
 8007ca8:	232d      	movlt	r3, #45	; 0x2d
 8007caa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cae:	487e      	ldr	r0, [pc, #504]	; (8007ea8 <_printf_float+0x2b8>)
 8007cb0:	4b7e      	ldr	r3, [pc, #504]	; (8007eac <_printf_float+0x2bc>)
 8007cb2:	e7d5      	b.n	8007c60 <_printf_float+0x70>
 8007cb4:	6863      	ldr	r3, [r4, #4]
 8007cb6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007cba:	9104      	str	r1, [sp, #16]
 8007cbc:	1c59      	adds	r1, r3, #1
 8007cbe:	d13c      	bne.n	8007d3a <_printf_float+0x14a>
 8007cc0:	2306      	movs	r3, #6
 8007cc2:	6063      	str	r3, [r4, #4]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	ab08      	add	r3, sp, #32
 8007cca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cd2:	ab07      	add	r3, sp, #28
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	f10d 031b 	add.w	r3, sp, #27
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7ff fef4 	bl	8007acc <__cvt>
 8007ce4:	9b04      	ldr	r3, [sp, #16]
 8007ce6:	9907      	ldr	r1, [sp, #28]
 8007ce8:	2b47      	cmp	r3, #71	; 0x47
 8007cea:	4680      	mov	r8, r0
 8007cec:	d108      	bne.n	8007d00 <_printf_float+0x110>
 8007cee:	1cc8      	adds	r0, r1, #3
 8007cf0:	db02      	blt.n	8007cf8 <_printf_float+0x108>
 8007cf2:	6863      	ldr	r3, [r4, #4]
 8007cf4:	4299      	cmp	r1, r3
 8007cf6:	dd41      	ble.n	8007d7c <_printf_float+0x18c>
 8007cf8:	f1a9 0902 	sub.w	r9, r9, #2
 8007cfc:	fa5f f989 	uxtb.w	r9, r9
 8007d00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d04:	d820      	bhi.n	8007d48 <_printf_float+0x158>
 8007d06:	3901      	subs	r1, #1
 8007d08:	464a      	mov	r2, r9
 8007d0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d0e:	9107      	str	r1, [sp, #28]
 8007d10:	f7ff ff2e 	bl	8007b70 <__exponent>
 8007d14:	9a08      	ldr	r2, [sp, #32]
 8007d16:	9004      	str	r0, [sp, #16]
 8007d18:	1813      	adds	r3, r2, r0
 8007d1a:	2a01      	cmp	r2, #1
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	dc02      	bgt.n	8007d26 <_printf_float+0x136>
 8007d20:	6822      	ldr	r2, [r4, #0]
 8007d22:	07d2      	lsls	r2, r2, #31
 8007d24:	d501      	bpl.n	8007d2a <_printf_float+0x13a>
 8007d26:	3301      	adds	r3, #1
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0a2      	beq.n	8007c78 <_printf_float+0x88>
 8007d32:	232d      	movs	r3, #45	; 0x2d
 8007d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d38:	e79e      	b.n	8007c78 <_printf_float+0x88>
 8007d3a:	9904      	ldr	r1, [sp, #16]
 8007d3c:	2947      	cmp	r1, #71	; 0x47
 8007d3e:	d1c1      	bne.n	8007cc4 <_printf_float+0xd4>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1bf      	bne.n	8007cc4 <_printf_float+0xd4>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e7bc      	b.n	8007cc2 <_printf_float+0xd2>
 8007d48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007d4c:	d118      	bne.n	8007d80 <_printf_float+0x190>
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	dd0b      	ble.n	8007d6c <_printf_float+0x17c>
 8007d54:	6121      	str	r1, [r4, #16]
 8007d56:	b913      	cbnz	r3, 8007d5e <_printf_float+0x16e>
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	07d0      	lsls	r0, r2, #31
 8007d5c:	d502      	bpl.n	8007d64 <_printf_float+0x174>
 8007d5e:	3301      	adds	r3, #1
 8007d60:	440b      	add	r3, r1
 8007d62:	6123      	str	r3, [r4, #16]
 8007d64:	2300      	movs	r3, #0
 8007d66:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	e7de      	b.n	8007d2a <_printf_float+0x13a>
 8007d6c:	b913      	cbnz	r3, 8007d74 <_printf_float+0x184>
 8007d6e:	6822      	ldr	r2, [r4, #0]
 8007d70:	07d2      	lsls	r2, r2, #31
 8007d72:	d501      	bpl.n	8007d78 <_printf_float+0x188>
 8007d74:	3302      	adds	r3, #2
 8007d76:	e7f4      	b.n	8007d62 <_printf_float+0x172>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e7f2      	b.n	8007d62 <_printf_float+0x172>
 8007d7c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	4299      	cmp	r1, r3
 8007d84:	db05      	blt.n	8007d92 <_printf_float+0x1a2>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	6121      	str	r1, [r4, #16]
 8007d8a:	07d8      	lsls	r0, r3, #31
 8007d8c:	d5ea      	bpl.n	8007d64 <_printf_float+0x174>
 8007d8e:	1c4b      	adds	r3, r1, #1
 8007d90:	e7e7      	b.n	8007d62 <_printf_float+0x172>
 8007d92:	2900      	cmp	r1, #0
 8007d94:	bfd4      	ite	le
 8007d96:	f1c1 0202 	rsble	r2, r1, #2
 8007d9a:	2201      	movgt	r2, #1
 8007d9c:	4413      	add	r3, r2
 8007d9e:	e7e0      	b.n	8007d62 <_printf_float+0x172>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	055a      	lsls	r2, r3, #21
 8007da4:	d407      	bmi.n	8007db6 <_printf_float+0x1c6>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	4642      	mov	r2, r8
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	d12a      	bne.n	8007e0a <_printf_float+0x21a>
 8007db4:	e76a      	b.n	8007c8c <_printf_float+0x9c>
 8007db6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007dba:	f240 80e2 	bls.w	8007f82 <_printf_float+0x392>
 8007dbe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007dc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dca:	d133      	bne.n	8007e34 <_printf_float+0x244>
 8007dcc:	4a38      	ldr	r2, [pc, #224]	; (8007eb0 <_printf_float+0x2c0>)
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b8      	blx	r7
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f43f af58 	beq.w	8007c8c <_printf_float+0x9c>
 8007ddc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	db02      	blt.n	8007dea <_printf_float+0x1fa>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	07d8      	lsls	r0, r3, #31
 8007de8:	d50f      	bpl.n	8007e0a <_printf_float+0x21a>
 8007dea:	4653      	mov	r3, sl
 8007dec:	465a      	mov	r2, fp
 8007dee:	4631      	mov	r1, r6
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b8      	blx	r7
 8007df4:	3001      	adds	r0, #1
 8007df6:	f43f af49 	beq.w	8007c8c <_printf_float+0x9c>
 8007dfa:	f04f 0800 	mov.w	r8, #0
 8007dfe:	f104 091a 	add.w	r9, r4, #26
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	4543      	cmp	r3, r8
 8007e08:	dc09      	bgt.n	8007e1e <_printf_float+0x22e>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	079b      	lsls	r3, r3, #30
 8007e0e:	f100 8108 	bmi.w	8008022 <_printf_float+0x432>
 8007e12:	68e0      	ldr	r0, [r4, #12]
 8007e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e16:	4298      	cmp	r0, r3
 8007e18:	bfb8      	it	lt
 8007e1a:	4618      	movlt	r0, r3
 8007e1c:	e738      	b.n	8007c90 <_printf_float+0xa0>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	464a      	mov	r2, r9
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f af2f 	beq.w	8007c8c <_printf_float+0x9c>
 8007e2e:	f108 0801 	add.w	r8, r8, #1
 8007e32:	e7e6      	b.n	8007e02 <_printf_float+0x212>
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	dc3c      	bgt.n	8007eb4 <_printf_float+0x2c4>
 8007e3a:	4a1d      	ldr	r2, [pc, #116]	; (8007eb0 <_printf_float+0x2c0>)
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	f43f af21 	beq.w	8007c8c <_printf_float+0x9c>
 8007e4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	d102      	bne.n	8007e58 <_printf_float+0x268>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	07d9      	lsls	r1, r3, #31
 8007e56:	d5d8      	bpl.n	8007e0a <_printf_float+0x21a>
 8007e58:	4653      	mov	r3, sl
 8007e5a:	465a      	mov	r2, fp
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4628      	mov	r0, r5
 8007e60:	47b8      	blx	r7
 8007e62:	3001      	adds	r0, #1
 8007e64:	f43f af12 	beq.w	8007c8c <_printf_float+0x9c>
 8007e68:	f04f 0900 	mov.w	r9, #0
 8007e6c:	f104 0a1a 	add.w	sl, r4, #26
 8007e70:	9b07      	ldr	r3, [sp, #28]
 8007e72:	425b      	negs	r3, r3
 8007e74:	454b      	cmp	r3, r9
 8007e76:	dc01      	bgt.n	8007e7c <_printf_float+0x28c>
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	e795      	b.n	8007da8 <_printf_float+0x1b8>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	4652      	mov	r2, sl
 8007e80:	4631      	mov	r1, r6
 8007e82:	4628      	mov	r0, r5
 8007e84:	47b8      	blx	r7
 8007e86:	3001      	adds	r0, #1
 8007e88:	f43f af00 	beq.w	8007c8c <_printf_float+0x9c>
 8007e8c:	f109 0901 	add.w	r9, r9, #1
 8007e90:	e7ee      	b.n	8007e70 <_printf_float+0x280>
 8007e92:	bf00      	nop
 8007e94:	f3af 8000 	nop.w
 8007e98:	ffffffff 	.word	0xffffffff
 8007e9c:	7fefffff 	.word	0x7fefffff
 8007ea0:	0800a920 	.word	0x0800a920
 8007ea4:	0800a924 	.word	0x0800a924
 8007ea8:	0800a92c 	.word	0x0800a92c
 8007eac:	0800a928 	.word	0x0800a928
 8007eb0:	0800a930 	.word	0x0800a930
 8007eb4:	9a08      	ldr	r2, [sp, #32]
 8007eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	bfa8      	it	ge
 8007ebc:	461a      	movge	r2, r3
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	4691      	mov	r9, r2
 8007ec2:	dc38      	bgt.n	8007f36 <_printf_float+0x346>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9305      	str	r3, [sp, #20]
 8007ec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ecc:	f104 021a 	add.w	r2, r4, #26
 8007ed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ed2:	9905      	ldr	r1, [sp, #20]
 8007ed4:	9304      	str	r3, [sp, #16]
 8007ed6:	eba3 0309 	sub.w	r3, r3, r9
 8007eda:	428b      	cmp	r3, r1
 8007edc:	dc33      	bgt.n	8007f46 <_printf_float+0x356>
 8007ede:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	db3c      	blt.n	8007f60 <_printf_float+0x370>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	07da      	lsls	r2, r3, #31
 8007eea:	d439      	bmi.n	8007f60 <_printf_float+0x370>
 8007eec:	9a08      	ldr	r2, [sp, #32]
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	9907      	ldr	r1, [sp, #28]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	eba2 0901 	sub.w	r9, r2, r1
 8007ef8:	4599      	cmp	r9, r3
 8007efa:	bfa8      	it	ge
 8007efc:	4699      	movge	r9, r3
 8007efe:	f1b9 0f00 	cmp.w	r9, #0
 8007f02:	dc35      	bgt.n	8007f70 <_printf_float+0x380>
 8007f04:	f04f 0800 	mov.w	r8, #0
 8007f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f0c:	f104 0a1a 	add.w	sl, r4, #26
 8007f10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	eba3 0309 	sub.w	r3, r3, r9
 8007f1a:	4543      	cmp	r3, r8
 8007f1c:	f77f af75 	ble.w	8007e0a <_printf_float+0x21a>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4652      	mov	r2, sl
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f aeae 	beq.w	8007c8c <_printf_float+0x9c>
 8007f30:	f108 0801 	add.w	r8, r8, #1
 8007f34:	e7ec      	b.n	8007f10 <_printf_float+0x320>
 8007f36:	4613      	mov	r3, r2
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4642      	mov	r2, r8
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	d1bf      	bne.n	8007ec4 <_printf_float+0x2d4>
 8007f44:	e6a2      	b.n	8007c8c <_printf_float+0x9c>
 8007f46:	2301      	movs	r3, #1
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	9204      	str	r2, [sp, #16]
 8007f4e:	47b8      	blx	r7
 8007f50:	3001      	adds	r0, #1
 8007f52:	f43f ae9b 	beq.w	8007c8c <_printf_float+0x9c>
 8007f56:	9b05      	ldr	r3, [sp, #20]
 8007f58:	9a04      	ldr	r2, [sp, #16]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	9305      	str	r3, [sp, #20]
 8007f5e:	e7b7      	b.n	8007ed0 <_printf_float+0x2e0>
 8007f60:	4653      	mov	r3, sl
 8007f62:	465a      	mov	r2, fp
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d1be      	bne.n	8007eec <_printf_float+0x2fc>
 8007f6e:	e68d      	b.n	8007c8c <_printf_float+0x9c>
 8007f70:	9a04      	ldr	r2, [sp, #16]
 8007f72:	464b      	mov	r3, r9
 8007f74:	4442      	add	r2, r8
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d1c1      	bne.n	8007f04 <_printf_float+0x314>
 8007f80:	e684      	b.n	8007c8c <_printf_float+0x9c>
 8007f82:	9a08      	ldr	r2, [sp, #32]
 8007f84:	2a01      	cmp	r2, #1
 8007f86:	dc01      	bgt.n	8007f8c <_printf_float+0x39c>
 8007f88:	07db      	lsls	r3, r3, #31
 8007f8a:	d537      	bpl.n	8007ffc <_printf_float+0x40c>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4642      	mov	r2, r8
 8007f90:	4631      	mov	r1, r6
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	f43f ae78 	beq.w	8007c8c <_printf_float+0x9c>
 8007f9c:	4653      	mov	r3, sl
 8007f9e:	465a      	mov	r2, fp
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b8      	blx	r7
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	f43f ae70 	beq.w	8007c8c <_printf_float+0x9c>
 8007fac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007fb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb8:	d01b      	beq.n	8007ff2 <_printf_float+0x402>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	f108 0201 	add.w	r2, r8, #1
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d10e      	bne.n	8007fea <_printf_float+0x3fa>
 8007fcc:	e65e      	b.n	8007c8c <_printf_float+0x9c>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	464a      	mov	r2, r9
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae57 	beq.w	8007c8c <_printf_float+0x9c>
 8007fde:	f108 0801 	add.w	r8, r8, #1
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	4543      	cmp	r3, r8
 8007fe8:	dcf1      	bgt.n	8007fce <_printf_float+0x3de>
 8007fea:	9b04      	ldr	r3, [sp, #16]
 8007fec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ff0:	e6db      	b.n	8007daa <_printf_float+0x1ba>
 8007ff2:	f04f 0800 	mov.w	r8, #0
 8007ff6:	f104 091a 	add.w	r9, r4, #26
 8007ffa:	e7f2      	b.n	8007fe2 <_printf_float+0x3f2>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	4642      	mov	r2, r8
 8008000:	e7df      	b.n	8007fc2 <_printf_float+0x3d2>
 8008002:	2301      	movs	r3, #1
 8008004:	464a      	mov	r2, r9
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	f43f ae3d 	beq.w	8007c8c <_printf_float+0x9c>
 8008012:	f108 0801 	add.w	r8, r8, #1
 8008016:	68e3      	ldr	r3, [r4, #12]
 8008018:	9909      	ldr	r1, [sp, #36]	; 0x24
 800801a:	1a5b      	subs	r3, r3, r1
 800801c:	4543      	cmp	r3, r8
 800801e:	dcf0      	bgt.n	8008002 <_printf_float+0x412>
 8008020:	e6f7      	b.n	8007e12 <_printf_float+0x222>
 8008022:	f04f 0800 	mov.w	r8, #0
 8008026:	f104 0919 	add.w	r9, r4, #25
 800802a:	e7f4      	b.n	8008016 <_printf_float+0x426>

0800802c <_printf_common>:
 800802c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008030:	4616      	mov	r6, r2
 8008032:	4699      	mov	r9, r3
 8008034:	688a      	ldr	r2, [r1, #8]
 8008036:	690b      	ldr	r3, [r1, #16]
 8008038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800803c:	4293      	cmp	r3, r2
 800803e:	bfb8      	it	lt
 8008040:	4613      	movlt	r3, r2
 8008042:	6033      	str	r3, [r6, #0]
 8008044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008048:	4607      	mov	r7, r0
 800804a:	460c      	mov	r4, r1
 800804c:	b10a      	cbz	r2, 8008052 <_printf_common+0x26>
 800804e:	3301      	adds	r3, #1
 8008050:	6033      	str	r3, [r6, #0]
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	0699      	lsls	r1, r3, #26
 8008056:	bf42      	ittt	mi
 8008058:	6833      	ldrmi	r3, [r6, #0]
 800805a:	3302      	addmi	r3, #2
 800805c:	6033      	strmi	r3, [r6, #0]
 800805e:	6825      	ldr	r5, [r4, #0]
 8008060:	f015 0506 	ands.w	r5, r5, #6
 8008064:	d106      	bne.n	8008074 <_printf_common+0x48>
 8008066:	f104 0a19 	add.w	sl, r4, #25
 800806a:	68e3      	ldr	r3, [r4, #12]
 800806c:	6832      	ldr	r2, [r6, #0]
 800806e:	1a9b      	subs	r3, r3, r2
 8008070:	42ab      	cmp	r3, r5
 8008072:	dc26      	bgt.n	80080c2 <_printf_common+0x96>
 8008074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008078:	1e13      	subs	r3, r2, #0
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	bf18      	it	ne
 800807e:	2301      	movne	r3, #1
 8008080:	0692      	lsls	r2, r2, #26
 8008082:	d42b      	bmi.n	80080dc <_printf_common+0xb0>
 8008084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008088:	4649      	mov	r1, r9
 800808a:	4638      	mov	r0, r7
 800808c:	47c0      	blx	r8
 800808e:	3001      	adds	r0, #1
 8008090:	d01e      	beq.n	80080d0 <_printf_common+0xa4>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	68e5      	ldr	r5, [r4, #12]
 8008096:	6832      	ldr	r2, [r6, #0]
 8008098:	f003 0306 	and.w	r3, r3, #6
 800809c:	2b04      	cmp	r3, #4
 800809e:	bf08      	it	eq
 80080a0:	1aad      	subeq	r5, r5, r2
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	6922      	ldr	r2, [r4, #16]
 80080a6:	bf0c      	ite	eq
 80080a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080ac:	2500      	movne	r5, #0
 80080ae:	4293      	cmp	r3, r2
 80080b0:	bfc4      	itt	gt
 80080b2:	1a9b      	subgt	r3, r3, r2
 80080b4:	18ed      	addgt	r5, r5, r3
 80080b6:	2600      	movs	r6, #0
 80080b8:	341a      	adds	r4, #26
 80080ba:	42b5      	cmp	r5, r6
 80080bc:	d11a      	bne.n	80080f4 <_printf_common+0xc8>
 80080be:	2000      	movs	r0, #0
 80080c0:	e008      	b.n	80080d4 <_printf_common+0xa8>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4652      	mov	r2, sl
 80080c6:	4649      	mov	r1, r9
 80080c8:	4638      	mov	r0, r7
 80080ca:	47c0      	blx	r8
 80080cc:	3001      	adds	r0, #1
 80080ce:	d103      	bne.n	80080d8 <_printf_common+0xac>
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295
 80080d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d8:	3501      	adds	r5, #1
 80080da:	e7c6      	b.n	800806a <_printf_common+0x3e>
 80080dc:	18e1      	adds	r1, r4, r3
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	2030      	movs	r0, #48	; 0x30
 80080e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080e6:	4422      	add	r2, r4
 80080e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080f0:	3302      	adds	r3, #2
 80080f2:	e7c7      	b.n	8008084 <_printf_common+0x58>
 80080f4:	2301      	movs	r3, #1
 80080f6:	4622      	mov	r2, r4
 80080f8:	4649      	mov	r1, r9
 80080fa:	4638      	mov	r0, r7
 80080fc:	47c0      	blx	r8
 80080fe:	3001      	adds	r0, #1
 8008100:	d0e6      	beq.n	80080d0 <_printf_common+0xa4>
 8008102:	3601      	adds	r6, #1
 8008104:	e7d9      	b.n	80080ba <_printf_common+0x8e>
	...

08008108 <_printf_i>:
 8008108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	460c      	mov	r4, r1
 800810e:	4691      	mov	r9, r2
 8008110:	7e27      	ldrb	r7, [r4, #24]
 8008112:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008114:	2f78      	cmp	r7, #120	; 0x78
 8008116:	4680      	mov	r8, r0
 8008118:	469a      	mov	sl, r3
 800811a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800811e:	d807      	bhi.n	8008130 <_printf_i+0x28>
 8008120:	2f62      	cmp	r7, #98	; 0x62
 8008122:	d80a      	bhi.n	800813a <_printf_i+0x32>
 8008124:	2f00      	cmp	r7, #0
 8008126:	f000 80d8 	beq.w	80082da <_printf_i+0x1d2>
 800812a:	2f58      	cmp	r7, #88	; 0x58
 800812c:	f000 80a3 	beq.w	8008276 <_printf_i+0x16e>
 8008130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008138:	e03a      	b.n	80081b0 <_printf_i+0xa8>
 800813a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800813e:	2b15      	cmp	r3, #21
 8008140:	d8f6      	bhi.n	8008130 <_printf_i+0x28>
 8008142:	a001      	add	r0, pc, #4	; (adr r0, 8008148 <_printf_i+0x40>)
 8008144:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008148:	080081a1 	.word	0x080081a1
 800814c:	080081b5 	.word	0x080081b5
 8008150:	08008131 	.word	0x08008131
 8008154:	08008131 	.word	0x08008131
 8008158:	08008131 	.word	0x08008131
 800815c:	08008131 	.word	0x08008131
 8008160:	080081b5 	.word	0x080081b5
 8008164:	08008131 	.word	0x08008131
 8008168:	08008131 	.word	0x08008131
 800816c:	08008131 	.word	0x08008131
 8008170:	08008131 	.word	0x08008131
 8008174:	080082c1 	.word	0x080082c1
 8008178:	080081e5 	.word	0x080081e5
 800817c:	080082a3 	.word	0x080082a3
 8008180:	08008131 	.word	0x08008131
 8008184:	08008131 	.word	0x08008131
 8008188:	080082e3 	.word	0x080082e3
 800818c:	08008131 	.word	0x08008131
 8008190:	080081e5 	.word	0x080081e5
 8008194:	08008131 	.word	0x08008131
 8008198:	08008131 	.word	0x08008131
 800819c:	080082ab 	.word	0x080082ab
 80081a0:	680b      	ldr	r3, [r1, #0]
 80081a2:	1d1a      	adds	r2, r3, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	600a      	str	r2, [r1, #0]
 80081a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0a3      	b.n	80082fc <_printf_i+0x1f4>
 80081b4:	6825      	ldr	r5, [r4, #0]
 80081b6:	6808      	ldr	r0, [r1, #0]
 80081b8:	062e      	lsls	r6, r5, #24
 80081ba:	f100 0304 	add.w	r3, r0, #4
 80081be:	d50a      	bpl.n	80081d6 <_printf_i+0xce>
 80081c0:	6805      	ldr	r5, [r0, #0]
 80081c2:	600b      	str	r3, [r1, #0]
 80081c4:	2d00      	cmp	r5, #0
 80081c6:	da03      	bge.n	80081d0 <_printf_i+0xc8>
 80081c8:	232d      	movs	r3, #45	; 0x2d
 80081ca:	426d      	negs	r5, r5
 80081cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d0:	485e      	ldr	r0, [pc, #376]	; (800834c <_printf_i+0x244>)
 80081d2:	230a      	movs	r3, #10
 80081d4:	e019      	b.n	800820a <_printf_i+0x102>
 80081d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081da:	6805      	ldr	r5, [r0, #0]
 80081dc:	600b      	str	r3, [r1, #0]
 80081de:	bf18      	it	ne
 80081e0:	b22d      	sxthne	r5, r5
 80081e2:	e7ef      	b.n	80081c4 <_printf_i+0xbc>
 80081e4:	680b      	ldr	r3, [r1, #0]
 80081e6:	6825      	ldr	r5, [r4, #0]
 80081e8:	1d18      	adds	r0, r3, #4
 80081ea:	6008      	str	r0, [r1, #0]
 80081ec:	0628      	lsls	r0, r5, #24
 80081ee:	d501      	bpl.n	80081f4 <_printf_i+0xec>
 80081f0:	681d      	ldr	r5, [r3, #0]
 80081f2:	e002      	b.n	80081fa <_printf_i+0xf2>
 80081f4:	0669      	lsls	r1, r5, #25
 80081f6:	d5fb      	bpl.n	80081f0 <_printf_i+0xe8>
 80081f8:	881d      	ldrh	r5, [r3, #0]
 80081fa:	4854      	ldr	r0, [pc, #336]	; (800834c <_printf_i+0x244>)
 80081fc:	2f6f      	cmp	r7, #111	; 0x6f
 80081fe:	bf0c      	ite	eq
 8008200:	2308      	moveq	r3, #8
 8008202:	230a      	movne	r3, #10
 8008204:	2100      	movs	r1, #0
 8008206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800820a:	6866      	ldr	r6, [r4, #4]
 800820c:	60a6      	str	r6, [r4, #8]
 800820e:	2e00      	cmp	r6, #0
 8008210:	bfa2      	ittt	ge
 8008212:	6821      	ldrge	r1, [r4, #0]
 8008214:	f021 0104 	bicge.w	r1, r1, #4
 8008218:	6021      	strge	r1, [r4, #0]
 800821a:	b90d      	cbnz	r5, 8008220 <_printf_i+0x118>
 800821c:	2e00      	cmp	r6, #0
 800821e:	d04d      	beq.n	80082bc <_printf_i+0x1b4>
 8008220:	4616      	mov	r6, r2
 8008222:	fbb5 f1f3 	udiv	r1, r5, r3
 8008226:	fb03 5711 	mls	r7, r3, r1, r5
 800822a:	5dc7      	ldrb	r7, [r0, r7]
 800822c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008230:	462f      	mov	r7, r5
 8008232:	42bb      	cmp	r3, r7
 8008234:	460d      	mov	r5, r1
 8008236:	d9f4      	bls.n	8008222 <_printf_i+0x11a>
 8008238:	2b08      	cmp	r3, #8
 800823a:	d10b      	bne.n	8008254 <_printf_i+0x14c>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	07df      	lsls	r7, r3, #31
 8008240:	d508      	bpl.n	8008254 <_printf_i+0x14c>
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	6861      	ldr	r1, [r4, #4]
 8008246:	4299      	cmp	r1, r3
 8008248:	bfde      	ittt	le
 800824a:	2330      	movle	r3, #48	; 0x30
 800824c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008250:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008254:	1b92      	subs	r2, r2, r6
 8008256:	6122      	str	r2, [r4, #16]
 8008258:	f8cd a000 	str.w	sl, [sp]
 800825c:	464b      	mov	r3, r9
 800825e:	aa03      	add	r2, sp, #12
 8008260:	4621      	mov	r1, r4
 8008262:	4640      	mov	r0, r8
 8008264:	f7ff fee2 	bl	800802c <_printf_common>
 8008268:	3001      	adds	r0, #1
 800826a:	d14c      	bne.n	8008306 <_printf_i+0x1fe>
 800826c:	f04f 30ff 	mov.w	r0, #4294967295
 8008270:	b004      	add	sp, #16
 8008272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008276:	4835      	ldr	r0, [pc, #212]	; (800834c <_printf_i+0x244>)
 8008278:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	680e      	ldr	r6, [r1, #0]
 8008280:	061f      	lsls	r7, r3, #24
 8008282:	f856 5b04 	ldr.w	r5, [r6], #4
 8008286:	600e      	str	r6, [r1, #0]
 8008288:	d514      	bpl.n	80082b4 <_printf_i+0x1ac>
 800828a:	07d9      	lsls	r1, r3, #31
 800828c:	bf44      	itt	mi
 800828e:	f043 0320 	orrmi.w	r3, r3, #32
 8008292:	6023      	strmi	r3, [r4, #0]
 8008294:	b91d      	cbnz	r5, 800829e <_printf_i+0x196>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	f023 0320 	bic.w	r3, r3, #32
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	2310      	movs	r3, #16
 80082a0:	e7b0      	b.n	8008204 <_printf_i+0xfc>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f043 0320 	orr.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	2378      	movs	r3, #120	; 0x78
 80082ac:	4828      	ldr	r0, [pc, #160]	; (8008350 <_printf_i+0x248>)
 80082ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082b2:	e7e3      	b.n	800827c <_printf_i+0x174>
 80082b4:	065e      	lsls	r6, r3, #25
 80082b6:	bf48      	it	mi
 80082b8:	b2ad      	uxthmi	r5, r5
 80082ba:	e7e6      	b.n	800828a <_printf_i+0x182>
 80082bc:	4616      	mov	r6, r2
 80082be:	e7bb      	b.n	8008238 <_printf_i+0x130>
 80082c0:	680b      	ldr	r3, [r1, #0]
 80082c2:	6826      	ldr	r6, [r4, #0]
 80082c4:	6960      	ldr	r0, [r4, #20]
 80082c6:	1d1d      	adds	r5, r3, #4
 80082c8:	600d      	str	r5, [r1, #0]
 80082ca:	0635      	lsls	r5, r6, #24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	d501      	bpl.n	80082d4 <_printf_i+0x1cc>
 80082d0:	6018      	str	r0, [r3, #0]
 80082d2:	e002      	b.n	80082da <_printf_i+0x1d2>
 80082d4:	0671      	lsls	r1, r6, #25
 80082d6:	d5fb      	bpl.n	80082d0 <_printf_i+0x1c8>
 80082d8:	8018      	strh	r0, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	4616      	mov	r6, r2
 80082e0:	e7ba      	b.n	8008258 <_printf_i+0x150>
 80082e2:	680b      	ldr	r3, [r1, #0]
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	600a      	str	r2, [r1, #0]
 80082e8:	681e      	ldr	r6, [r3, #0]
 80082ea:	6862      	ldr	r2, [r4, #4]
 80082ec:	2100      	movs	r1, #0
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7f7 ffae 	bl	8000250 <memchr>
 80082f4:	b108      	cbz	r0, 80082fa <_printf_i+0x1f2>
 80082f6:	1b80      	subs	r0, r0, r6
 80082f8:	6060      	str	r0, [r4, #4]
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	2300      	movs	r3, #0
 8008300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008304:	e7a8      	b.n	8008258 <_printf_i+0x150>
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	4632      	mov	r2, r6
 800830a:	4649      	mov	r1, r9
 800830c:	4640      	mov	r0, r8
 800830e:	47d0      	blx	sl
 8008310:	3001      	adds	r0, #1
 8008312:	d0ab      	beq.n	800826c <_printf_i+0x164>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	079b      	lsls	r3, r3, #30
 8008318:	d413      	bmi.n	8008342 <_printf_i+0x23a>
 800831a:	68e0      	ldr	r0, [r4, #12]
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	4298      	cmp	r0, r3
 8008320:	bfb8      	it	lt
 8008322:	4618      	movlt	r0, r3
 8008324:	e7a4      	b.n	8008270 <_printf_i+0x168>
 8008326:	2301      	movs	r3, #1
 8008328:	4632      	mov	r2, r6
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d09b      	beq.n	800826c <_printf_i+0x164>
 8008334:	3501      	adds	r5, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	9903      	ldr	r1, [sp, #12]
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	42ab      	cmp	r3, r5
 800833e:	dcf2      	bgt.n	8008326 <_printf_i+0x21e>
 8008340:	e7eb      	b.n	800831a <_printf_i+0x212>
 8008342:	2500      	movs	r5, #0
 8008344:	f104 0619 	add.w	r6, r4, #25
 8008348:	e7f5      	b.n	8008336 <_printf_i+0x22e>
 800834a:	bf00      	nop
 800834c:	0800a932 	.word	0x0800a932
 8008350:	0800a943 	.word	0x0800a943

08008354 <siprintf>:
 8008354:	b40e      	push	{r1, r2, r3}
 8008356:	b500      	push	{lr}
 8008358:	b09c      	sub	sp, #112	; 0x70
 800835a:	ab1d      	add	r3, sp, #116	; 0x74
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	9006      	str	r0, [sp, #24]
 8008360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008364:	4809      	ldr	r0, [pc, #36]	; (800838c <siprintf+0x38>)
 8008366:	9107      	str	r1, [sp, #28]
 8008368:	9104      	str	r1, [sp, #16]
 800836a:	4909      	ldr	r1, [pc, #36]	; (8008390 <siprintf+0x3c>)
 800836c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	6800      	ldr	r0, [r0, #0]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	a902      	add	r1, sp, #8
 8008378:	f001 fb6a 	bl	8009a50 <_svfiprintf_r>
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	b01c      	add	sp, #112	; 0x70
 8008384:	f85d eb04 	ldr.w	lr, [sp], #4
 8008388:	b003      	add	sp, #12
 800838a:	4770      	bx	lr
 800838c:	20000024 	.word	0x20000024
 8008390:	ffff0208 	.word	0xffff0208

08008394 <strncmp>:
 8008394:	b510      	push	{r4, lr}
 8008396:	b16a      	cbz	r2, 80083b4 <strncmp+0x20>
 8008398:	3901      	subs	r1, #1
 800839a:	1884      	adds	r4, r0, r2
 800839c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80083a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d103      	bne.n	80083b0 <strncmp+0x1c>
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d001      	beq.n	80083b0 <strncmp+0x1c>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1f5      	bne.n	800839c <strncmp+0x8>
 80083b0:	1a98      	subs	r0, r3, r2
 80083b2:	bd10      	pop	{r4, pc}
 80083b4:	4610      	mov	r0, r2
 80083b6:	e7fc      	b.n	80083b2 <strncmp+0x1e>

080083b8 <_strtol_l.isra.0>:
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083be:	d001      	beq.n	80083c4 <_strtol_l.isra.0+0xc>
 80083c0:	2b24      	cmp	r3, #36	; 0x24
 80083c2:	d906      	bls.n	80083d2 <_strtol_l.isra.0+0x1a>
 80083c4:	f7ff fb50 	bl	8007a68 <__errno>
 80083c8:	2316      	movs	r3, #22
 80083ca:	6003      	str	r3, [r0, #0]
 80083cc:	2000      	movs	r0, #0
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	4f3a      	ldr	r7, [pc, #232]	; (80084bc <_strtol_l.isra.0+0x104>)
 80083d4:	468e      	mov	lr, r1
 80083d6:	4676      	mov	r6, lr
 80083d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80083dc:	5de5      	ldrb	r5, [r4, r7]
 80083de:	f015 0508 	ands.w	r5, r5, #8
 80083e2:	d1f8      	bne.n	80083d6 <_strtol_l.isra.0+0x1e>
 80083e4:	2c2d      	cmp	r4, #45	; 0x2d
 80083e6:	d134      	bne.n	8008452 <_strtol_l.isra.0+0x9a>
 80083e8:	f89e 4000 	ldrb.w	r4, [lr]
 80083ec:	f04f 0801 	mov.w	r8, #1
 80083f0:	f106 0e02 	add.w	lr, r6, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d05c      	beq.n	80084b2 <_strtol_l.isra.0+0xfa>
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d10c      	bne.n	8008416 <_strtol_l.isra.0+0x5e>
 80083fc:	2c30      	cmp	r4, #48	; 0x30
 80083fe:	d10a      	bne.n	8008416 <_strtol_l.isra.0+0x5e>
 8008400:	f89e 4000 	ldrb.w	r4, [lr]
 8008404:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008408:	2c58      	cmp	r4, #88	; 0x58
 800840a:	d14d      	bne.n	80084a8 <_strtol_l.isra.0+0xf0>
 800840c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008410:	2310      	movs	r3, #16
 8008412:	f10e 0e02 	add.w	lr, lr, #2
 8008416:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800841a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800841e:	2600      	movs	r6, #0
 8008420:	fbbc f9f3 	udiv	r9, ip, r3
 8008424:	4635      	mov	r5, r6
 8008426:	fb03 ca19 	mls	sl, r3, r9, ip
 800842a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800842e:	2f09      	cmp	r7, #9
 8008430:	d818      	bhi.n	8008464 <_strtol_l.isra.0+0xac>
 8008432:	463c      	mov	r4, r7
 8008434:	42a3      	cmp	r3, r4
 8008436:	dd24      	ble.n	8008482 <_strtol_l.isra.0+0xca>
 8008438:	2e00      	cmp	r6, #0
 800843a:	db1f      	blt.n	800847c <_strtol_l.isra.0+0xc4>
 800843c:	45a9      	cmp	r9, r5
 800843e:	d31d      	bcc.n	800847c <_strtol_l.isra.0+0xc4>
 8008440:	d101      	bne.n	8008446 <_strtol_l.isra.0+0x8e>
 8008442:	45a2      	cmp	sl, r4
 8008444:	db1a      	blt.n	800847c <_strtol_l.isra.0+0xc4>
 8008446:	fb05 4503 	mla	r5, r5, r3, r4
 800844a:	2601      	movs	r6, #1
 800844c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008450:	e7eb      	b.n	800842a <_strtol_l.isra.0+0x72>
 8008452:	2c2b      	cmp	r4, #43	; 0x2b
 8008454:	bf08      	it	eq
 8008456:	f89e 4000 	ldrbeq.w	r4, [lr]
 800845a:	46a8      	mov	r8, r5
 800845c:	bf08      	it	eq
 800845e:	f106 0e02 	addeq.w	lr, r6, #2
 8008462:	e7c7      	b.n	80083f4 <_strtol_l.isra.0+0x3c>
 8008464:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008468:	2f19      	cmp	r7, #25
 800846a:	d801      	bhi.n	8008470 <_strtol_l.isra.0+0xb8>
 800846c:	3c37      	subs	r4, #55	; 0x37
 800846e:	e7e1      	b.n	8008434 <_strtol_l.isra.0+0x7c>
 8008470:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008474:	2f19      	cmp	r7, #25
 8008476:	d804      	bhi.n	8008482 <_strtol_l.isra.0+0xca>
 8008478:	3c57      	subs	r4, #87	; 0x57
 800847a:	e7db      	b.n	8008434 <_strtol_l.isra.0+0x7c>
 800847c:	f04f 36ff 	mov.w	r6, #4294967295
 8008480:	e7e4      	b.n	800844c <_strtol_l.isra.0+0x94>
 8008482:	2e00      	cmp	r6, #0
 8008484:	da05      	bge.n	8008492 <_strtol_l.isra.0+0xda>
 8008486:	2322      	movs	r3, #34	; 0x22
 8008488:	6003      	str	r3, [r0, #0]
 800848a:	4665      	mov	r5, ip
 800848c:	b942      	cbnz	r2, 80084a0 <_strtol_l.isra.0+0xe8>
 800848e:	4628      	mov	r0, r5
 8008490:	e79d      	b.n	80083ce <_strtol_l.isra.0+0x16>
 8008492:	f1b8 0f00 	cmp.w	r8, #0
 8008496:	d000      	beq.n	800849a <_strtol_l.isra.0+0xe2>
 8008498:	426d      	negs	r5, r5
 800849a:	2a00      	cmp	r2, #0
 800849c:	d0f7      	beq.n	800848e <_strtol_l.isra.0+0xd6>
 800849e:	b10e      	cbz	r6, 80084a4 <_strtol_l.isra.0+0xec>
 80084a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80084a4:	6011      	str	r1, [r2, #0]
 80084a6:	e7f2      	b.n	800848e <_strtol_l.isra.0+0xd6>
 80084a8:	2430      	movs	r4, #48	; 0x30
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1b3      	bne.n	8008416 <_strtol_l.isra.0+0x5e>
 80084ae:	2308      	movs	r3, #8
 80084b0:	e7b1      	b.n	8008416 <_strtol_l.isra.0+0x5e>
 80084b2:	2c30      	cmp	r4, #48	; 0x30
 80084b4:	d0a4      	beq.n	8008400 <_strtol_l.isra.0+0x48>
 80084b6:	230a      	movs	r3, #10
 80084b8:	e7ad      	b.n	8008416 <_strtol_l.isra.0+0x5e>
 80084ba:	bf00      	nop
 80084bc:	0800a955 	.word	0x0800a955

080084c0 <strtol>:
 80084c0:	4613      	mov	r3, r2
 80084c2:	460a      	mov	r2, r1
 80084c4:	4601      	mov	r1, r0
 80084c6:	4802      	ldr	r0, [pc, #8]	; (80084d0 <strtol+0x10>)
 80084c8:	6800      	ldr	r0, [r0, #0]
 80084ca:	f7ff bf75 	b.w	80083b8 <_strtol_l.isra.0>
 80084ce:	bf00      	nop
 80084d0:	20000024 	.word	0x20000024

080084d4 <quorem>:
 80084d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	6903      	ldr	r3, [r0, #16]
 80084da:	690c      	ldr	r4, [r1, #16]
 80084dc:	42a3      	cmp	r3, r4
 80084de:	4607      	mov	r7, r0
 80084e0:	f2c0 8081 	blt.w	80085e6 <quorem+0x112>
 80084e4:	3c01      	subs	r4, #1
 80084e6:	f101 0814 	add.w	r8, r1, #20
 80084ea:	f100 0514 	add.w	r5, r0, #20
 80084ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084fc:	3301      	adds	r3, #1
 80084fe:	429a      	cmp	r2, r3
 8008500:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008504:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008508:	fbb2 f6f3 	udiv	r6, r2, r3
 800850c:	d331      	bcc.n	8008572 <quorem+0x9e>
 800850e:	f04f 0e00 	mov.w	lr, #0
 8008512:	4640      	mov	r0, r8
 8008514:	46ac      	mov	ip, r5
 8008516:	46f2      	mov	sl, lr
 8008518:	f850 2b04 	ldr.w	r2, [r0], #4
 800851c:	b293      	uxth	r3, r2
 800851e:	fb06 e303 	mla	r3, r6, r3, lr
 8008522:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008526:	b29b      	uxth	r3, r3
 8008528:	ebaa 0303 	sub.w	r3, sl, r3
 800852c:	0c12      	lsrs	r2, r2, #16
 800852e:	f8dc a000 	ldr.w	sl, [ip]
 8008532:	fb06 e202 	mla	r2, r6, r2, lr
 8008536:	fa13 f38a 	uxtah	r3, r3, sl
 800853a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800853e:	fa1f fa82 	uxth.w	sl, r2
 8008542:	f8dc 2000 	ldr.w	r2, [ip]
 8008546:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800854a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800854e:	b29b      	uxth	r3, r3
 8008550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008554:	4581      	cmp	r9, r0
 8008556:	f84c 3b04 	str.w	r3, [ip], #4
 800855a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800855e:	d2db      	bcs.n	8008518 <quorem+0x44>
 8008560:	f855 300b 	ldr.w	r3, [r5, fp]
 8008564:	b92b      	cbnz	r3, 8008572 <quorem+0x9e>
 8008566:	9b01      	ldr	r3, [sp, #4]
 8008568:	3b04      	subs	r3, #4
 800856a:	429d      	cmp	r5, r3
 800856c:	461a      	mov	r2, r3
 800856e:	d32e      	bcc.n	80085ce <quorem+0xfa>
 8008570:	613c      	str	r4, [r7, #16]
 8008572:	4638      	mov	r0, r7
 8008574:	f001 f856 	bl	8009624 <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	db24      	blt.n	80085c6 <quorem+0xf2>
 800857c:	3601      	adds	r6, #1
 800857e:	4628      	mov	r0, r5
 8008580:	f04f 0c00 	mov.w	ip, #0
 8008584:	f858 2b04 	ldr.w	r2, [r8], #4
 8008588:	f8d0 e000 	ldr.w	lr, [r0]
 800858c:	b293      	uxth	r3, r2
 800858e:	ebac 0303 	sub.w	r3, ip, r3
 8008592:	0c12      	lsrs	r2, r2, #16
 8008594:	fa13 f38e 	uxtah	r3, r3, lr
 8008598:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800859c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a6:	45c1      	cmp	r9, r8
 80085a8:	f840 3b04 	str.w	r3, [r0], #4
 80085ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80085b0:	d2e8      	bcs.n	8008584 <quorem+0xb0>
 80085b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ba:	b922      	cbnz	r2, 80085c6 <quorem+0xf2>
 80085bc:	3b04      	subs	r3, #4
 80085be:	429d      	cmp	r5, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	d30a      	bcc.n	80085da <quorem+0x106>
 80085c4:	613c      	str	r4, [r7, #16]
 80085c6:	4630      	mov	r0, r6
 80085c8:	b003      	add	sp, #12
 80085ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ce:	6812      	ldr	r2, [r2, #0]
 80085d0:	3b04      	subs	r3, #4
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	d1cc      	bne.n	8008570 <quorem+0x9c>
 80085d6:	3c01      	subs	r4, #1
 80085d8:	e7c7      	b.n	800856a <quorem+0x96>
 80085da:	6812      	ldr	r2, [r2, #0]
 80085dc:	3b04      	subs	r3, #4
 80085de:	2a00      	cmp	r2, #0
 80085e0:	d1f0      	bne.n	80085c4 <quorem+0xf0>
 80085e2:	3c01      	subs	r4, #1
 80085e4:	e7eb      	b.n	80085be <quorem+0xea>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e7ee      	b.n	80085c8 <quorem+0xf4>
 80085ea:	0000      	movs	r0, r0
 80085ec:	0000      	movs	r0, r0
	...

080085f0 <_dtoa_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	ec59 8b10 	vmov	r8, r9, d0
 80085f8:	b095      	sub	sp, #84	; 0x54
 80085fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085fc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80085fe:	9107      	str	r1, [sp, #28]
 8008600:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008604:	4606      	mov	r6, r0
 8008606:	9209      	str	r2, [sp, #36]	; 0x24
 8008608:	9310      	str	r3, [sp, #64]	; 0x40
 800860a:	b975      	cbnz	r5, 800862a <_dtoa_r+0x3a>
 800860c:	2010      	movs	r0, #16
 800860e:	f000 fd75 	bl	80090fc <malloc>
 8008612:	4602      	mov	r2, r0
 8008614:	6270      	str	r0, [r6, #36]	; 0x24
 8008616:	b920      	cbnz	r0, 8008622 <_dtoa_r+0x32>
 8008618:	4bab      	ldr	r3, [pc, #684]	; (80088c8 <_dtoa_r+0x2d8>)
 800861a:	21ea      	movs	r1, #234	; 0xea
 800861c:	48ab      	ldr	r0, [pc, #684]	; (80088cc <_dtoa_r+0x2dc>)
 800861e:	f001 fb27 	bl	8009c70 <__assert_func>
 8008622:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008626:	6005      	str	r5, [r0, #0]
 8008628:	60c5      	str	r5, [r0, #12]
 800862a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800862c:	6819      	ldr	r1, [r3, #0]
 800862e:	b151      	cbz	r1, 8008646 <_dtoa_r+0x56>
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	604a      	str	r2, [r1, #4]
 8008634:	2301      	movs	r3, #1
 8008636:	4093      	lsls	r3, r2
 8008638:	608b      	str	r3, [r1, #8]
 800863a:	4630      	mov	r0, r6
 800863c:	f000 fdb4 	bl	80091a8 <_Bfree>
 8008640:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f1b9 0300 	subs.w	r3, r9, #0
 800864a:	bfbb      	ittet	lt
 800864c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008650:	9303      	strlt	r3, [sp, #12]
 8008652:	2300      	movge	r3, #0
 8008654:	2201      	movlt	r2, #1
 8008656:	bfac      	ite	ge
 8008658:	6023      	strge	r3, [r4, #0]
 800865a:	6022      	strlt	r2, [r4, #0]
 800865c:	4b9c      	ldr	r3, [pc, #624]	; (80088d0 <_dtoa_r+0x2e0>)
 800865e:	9c03      	ldr	r4, [sp, #12]
 8008660:	43a3      	bics	r3, r4
 8008662:	d11a      	bne.n	800869a <_dtoa_r+0xaa>
 8008664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008666:	f242 730f 	movw	r3, #9999	; 0x270f
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008670:	ea53 0308 	orrs.w	r3, r3, r8
 8008674:	f000 8512 	beq.w	800909c <_dtoa_r+0xaac>
 8008678:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800867a:	b953      	cbnz	r3, 8008692 <_dtoa_r+0xa2>
 800867c:	4b95      	ldr	r3, [pc, #596]	; (80088d4 <_dtoa_r+0x2e4>)
 800867e:	e01f      	b.n	80086c0 <_dtoa_r+0xd0>
 8008680:	4b95      	ldr	r3, [pc, #596]	; (80088d8 <_dtoa_r+0x2e8>)
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	9800      	ldr	r0, [sp, #0]
 800868c:	b015      	add	sp, #84	; 0x54
 800868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008692:	4b90      	ldr	r3, [pc, #576]	; (80088d4 <_dtoa_r+0x2e4>)
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	3303      	adds	r3, #3
 8008698:	e7f5      	b.n	8008686 <_dtoa_r+0x96>
 800869a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800869e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80086aa:	d10b      	bne.n	80086c4 <_dtoa_r+0xd4>
 80086ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086ae:	2301      	movs	r3, #1
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 84ee 	beq.w	8009096 <_dtoa_r+0xaa6>
 80086ba:	4888      	ldr	r0, [pc, #544]	; (80088dc <_dtoa_r+0x2ec>)
 80086bc:	6018      	str	r0, [r3, #0]
 80086be:	1e43      	subs	r3, r0, #1
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	e7e2      	b.n	800868a <_dtoa_r+0x9a>
 80086c4:	a913      	add	r1, sp, #76	; 0x4c
 80086c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80086ca:	aa12      	add	r2, sp, #72	; 0x48
 80086cc:	4630      	mov	r0, r6
 80086ce:	f001 f84d 	bl	800976c <__d2b>
 80086d2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80086d6:	4605      	mov	r5, r0
 80086d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80086da:	2900      	cmp	r1, #0
 80086dc:	d047      	beq.n	800876e <_dtoa_r+0x17e>
 80086de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80086e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80086e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086e8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80086ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086f0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80086f4:	2400      	movs	r4, #0
 80086f6:	ec43 2b16 	vmov	d6, r2, r3
 80086fa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80086fe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80088b0 <_dtoa_r+0x2c0>
 8008702:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008706:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80088b8 <_dtoa_r+0x2c8>
 800870a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800870e:	eeb0 7b46 	vmov.f64	d7, d6
 8008712:	ee06 1a90 	vmov	s13, r1
 8008716:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800871a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80088c0 <_dtoa_r+0x2d0>
 800871e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008722:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008726:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800872a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872e:	ee16 ba90 	vmov	fp, s13
 8008732:	9411      	str	r4, [sp, #68]	; 0x44
 8008734:	d508      	bpl.n	8008748 <_dtoa_r+0x158>
 8008736:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800873a:	eeb4 6b47 	vcmp.f64	d6, d7
 800873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008742:	bf18      	it	ne
 8008744:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008748:	f1bb 0f16 	cmp.w	fp, #22
 800874c:	d832      	bhi.n	80087b4 <_dtoa_r+0x1c4>
 800874e:	4b64      	ldr	r3, [pc, #400]	; (80088e0 <_dtoa_r+0x2f0>)
 8008750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008754:	ed93 7b00 	vldr	d7, [r3]
 8008758:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800875c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008764:	d501      	bpl.n	800876a <_dtoa_r+0x17a>
 8008766:	f10b 3bff 	add.w	fp, fp, #4294967295
 800876a:	2300      	movs	r3, #0
 800876c:	e023      	b.n	80087b6 <_dtoa_r+0x1c6>
 800876e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008770:	4401      	add	r1, r0
 8008772:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008776:	2b20      	cmp	r3, #32
 8008778:	bfc3      	ittte	gt
 800877a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800877e:	fa04 f303 	lslgt.w	r3, r4, r3
 8008782:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008786:	f1c3 0320 	rsble	r3, r3, #32
 800878a:	bfc6      	itte	gt
 800878c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008790:	ea43 0308 	orrgt.w	r3, r3, r8
 8008794:	fa08 f303 	lslle.w	r3, r8, r3
 8008798:	ee07 3a90 	vmov	s15, r3
 800879c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80087a0:	3901      	subs	r1, #1
 80087a2:	ed8d 7b00 	vstr	d7, [sp]
 80087a6:	9c01      	ldr	r4, [sp, #4]
 80087a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80087b0:	2401      	movs	r4, #1
 80087b2:	e7a0      	b.n	80086f6 <_dtoa_r+0x106>
 80087b4:	2301      	movs	r3, #1
 80087b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087b8:	1a43      	subs	r3, r0, r1
 80087ba:	1e5a      	subs	r2, r3, #1
 80087bc:	bf45      	ittet	mi
 80087be:	f1c3 0301 	rsbmi	r3, r3, #1
 80087c2:	9305      	strmi	r3, [sp, #20]
 80087c4:	2300      	movpl	r3, #0
 80087c6:	2300      	movmi	r3, #0
 80087c8:	9206      	str	r2, [sp, #24]
 80087ca:	bf54      	ite	pl
 80087cc:	9305      	strpl	r3, [sp, #20]
 80087ce:	9306      	strmi	r3, [sp, #24]
 80087d0:	f1bb 0f00 	cmp.w	fp, #0
 80087d4:	db18      	blt.n	8008808 <_dtoa_r+0x218>
 80087d6:	9b06      	ldr	r3, [sp, #24]
 80087d8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80087dc:	445b      	add	r3, fp
 80087de:	9306      	str	r3, [sp, #24]
 80087e0:	2300      	movs	r3, #0
 80087e2:	9a07      	ldr	r2, [sp, #28]
 80087e4:	2a09      	cmp	r2, #9
 80087e6:	d849      	bhi.n	800887c <_dtoa_r+0x28c>
 80087e8:	2a05      	cmp	r2, #5
 80087ea:	bfc4      	itt	gt
 80087ec:	3a04      	subgt	r2, #4
 80087ee:	9207      	strgt	r2, [sp, #28]
 80087f0:	9a07      	ldr	r2, [sp, #28]
 80087f2:	f1a2 0202 	sub.w	r2, r2, #2
 80087f6:	bfcc      	ite	gt
 80087f8:	2400      	movgt	r4, #0
 80087fa:	2401      	movle	r4, #1
 80087fc:	2a03      	cmp	r2, #3
 80087fe:	d848      	bhi.n	8008892 <_dtoa_r+0x2a2>
 8008800:	e8df f002 	tbb	[pc, r2]
 8008804:	3a2c2e0b 	.word	0x3a2c2e0b
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	2200      	movs	r2, #0
 800880c:	eba3 030b 	sub.w	r3, r3, fp
 8008810:	9305      	str	r3, [sp, #20]
 8008812:	920e      	str	r2, [sp, #56]	; 0x38
 8008814:	f1cb 0300 	rsb	r3, fp, #0
 8008818:	e7e3      	b.n	80087e2 <_dtoa_r+0x1f2>
 800881a:	2200      	movs	r2, #0
 800881c:	9208      	str	r2, [sp, #32]
 800881e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008820:	2a00      	cmp	r2, #0
 8008822:	dc39      	bgt.n	8008898 <_dtoa_r+0x2a8>
 8008824:	f04f 0a01 	mov.w	sl, #1
 8008828:	46d1      	mov	r9, sl
 800882a:	4652      	mov	r2, sl
 800882c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008830:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008832:	2100      	movs	r1, #0
 8008834:	6079      	str	r1, [r7, #4]
 8008836:	2004      	movs	r0, #4
 8008838:	f100 0c14 	add.w	ip, r0, #20
 800883c:	4594      	cmp	ip, r2
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	d92f      	bls.n	80088a2 <_dtoa_r+0x2b2>
 8008842:	4630      	mov	r0, r6
 8008844:	930c      	str	r3, [sp, #48]	; 0x30
 8008846:	f000 fc6f 	bl	8009128 <_Balloc>
 800884a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800884c:	9000      	str	r0, [sp, #0]
 800884e:	4602      	mov	r2, r0
 8008850:	2800      	cmp	r0, #0
 8008852:	d149      	bne.n	80088e8 <_dtoa_r+0x2f8>
 8008854:	4b23      	ldr	r3, [pc, #140]	; (80088e4 <_dtoa_r+0x2f4>)
 8008856:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800885a:	e6df      	b.n	800861c <_dtoa_r+0x2c>
 800885c:	2201      	movs	r2, #1
 800885e:	e7dd      	b.n	800881c <_dtoa_r+0x22c>
 8008860:	2200      	movs	r2, #0
 8008862:	9208      	str	r2, [sp, #32]
 8008864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008866:	eb0b 0a02 	add.w	sl, fp, r2
 800886a:	f10a 0901 	add.w	r9, sl, #1
 800886e:	464a      	mov	r2, r9
 8008870:	2a01      	cmp	r2, #1
 8008872:	bfb8      	it	lt
 8008874:	2201      	movlt	r2, #1
 8008876:	e7db      	b.n	8008830 <_dtoa_r+0x240>
 8008878:	2201      	movs	r2, #1
 800887a:	e7f2      	b.n	8008862 <_dtoa_r+0x272>
 800887c:	2401      	movs	r4, #1
 800887e:	2200      	movs	r2, #0
 8008880:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008884:	f04f 3aff 	mov.w	sl, #4294967295
 8008888:	2100      	movs	r1, #0
 800888a:	46d1      	mov	r9, sl
 800888c:	2212      	movs	r2, #18
 800888e:	9109      	str	r1, [sp, #36]	; 0x24
 8008890:	e7ce      	b.n	8008830 <_dtoa_r+0x240>
 8008892:	2201      	movs	r2, #1
 8008894:	9208      	str	r2, [sp, #32]
 8008896:	e7f5      	b.n	8008884 <_dtoa_r+0x294>
 8008898:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800889c:	46d1      	mov	r9, sl
 800889e:	4652      	mov	r2, sl
 80088a0:	e7c6      	b.n	8008830 <_dtoa_r+0x240>
 80088a2:	3101      	adds	r1, #1
 80088a4:	6079      	str	r1, [r7, #4]
 80088a6:	0040      	lsls	r0, r0, #1
 80088a8:	e7c6      	b.n	8008838 <_dtoa_r+0x248>
 80088aa:	bf00      	nop
 80088ac:	f3af 8000 	nop.w
 80088b0:	636f4361 	.word	0x636f4361
 80088b4:	3fd287a7 	.word	0x3fd287a7
 80088b8:	8b60c8b3 	.word	0x8b60c8b3
 80088bc:	3fc68a28 	.word	0x3fc68a28
 80088c0:	509f79fb 	.word	0x509f79fb
 80088c4:	3fd34413 	.word	0x3fd34413
 80088c8:	0800aa62 	.word	0x0800aa62
 80088cc:	0800aa79 	.word	0x0800aa79
 80088d0:	7ff00000 	.word	0x7ff00000
 80088d4:	0800aa5e 	.word	0x0800aa5e
 80088d8:	0800aa55 	.word	0x0800aa55
 80088dc:	0800a931 	.word	0x0800a931
 80088e0:	0800ab78 	.word	0x0800ab78
 80088e4:	0800aad8 	.word	0x0800aad8
 80088e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80088ea:	9900      	ldr	r1, [sp, #0]
 80088ec:	6011      	str	r1, [r2, #0]
 80088ee:	f1b9 0f0e 	cmp.w	r9, #14
 80088f2:	d872      	bhi.n	80089da <_dtoa_r+0x3ea>
 80088f4:	2c00      	cmp	r4, #0
 80088f6:	d070      	beq.n	80089da <_dtoa_r+0x3ea>
 80088f8:	f1bb 0f00 	cmp.w	fp, #0
 80088fc:	f340 80a6 	ble.w	8008a4c <_dtoa_r+0x45c>
 8008900:	49ca      	ldr	r1, [pc, #808]	; (8008c2c <_dtoa_r+0x63c>)
 8008902:	f00b 020f 	and.w	r2, fp, #15
 8008906:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800890a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800890e:	ed92 7b00 	vldr	d7, [r2]
 8008912:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008916:	f000 808d 	beq.w	8008a34 <_dtoa_r+0x444>
 800891a:	4ac5      	ldr	r2, [pc, #788]	; (8008c30 <_dtoa_r+0x640>)
 800891c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008920:	ed92 6b08 	vldr	d6, [r2, #32]
 8008924:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008928:	ed8d 6b02 	vstr	d6, [sp, #8]
 800892c:	f001 010f 	and.w	r1, r1, #15
 8008930:	2203      	movs	r2, #3
 8008932:	48bf      	ldr	r0, [pc, #764]	; (8008c30 <_dtoa_r+0x640>)
 8008934:	2900      	cmp	r1, #0
 8008936:	d17f      	bne.n	8008a38 <_dtoa_r+0x448>
 8008938:	ed9d 6b02 	vldr	d6, [sp, #8]
 800893c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008944:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008946:	2900      	cmp	r1, #0
 8008948:	f000 80b2 	beq.w	8008ab0 <_dtoa_r+0x4c0>
 800894c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008954:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895c:	f140 80a8 	bpl.w	8008ab0 <_dtoa_r+0x4c0>
 8008960:	f1b9 0f00 	cmp.w	r9, #0
 8008964:	f000 80a4 	beq.w	8008ab0 <_dtoa_r+0x4c0>
 8008968:	f1ba 0f00 	cmp.w	sl, #0
 800896c:	dd31      	ble.n	80089d2 <_dtoa_r+0x3e2>
 800896e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008972:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008976:	ed8d 7b02 	vstr	d7, [sp, #8]
 800897a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800897e:	3201      	adds	r2, #1
 8008980:	4650      	mov	r0, sl
 8008982:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008986:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800898a:	ee07 2a90 	vmov	s15, r2
 800898e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008992:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008996:	ed8d 5b02 	vstr	d5, [sp, #8]
 800899a:	9c03      	ldr	r4, [sp, #12]
 800899c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80089a0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f040 8086 	bne.w	8008ab6 <_dtoa_r+0x4c6>
 80089aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80089ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80089b2:	ec42 1b17 	vmov	d7, r1, r2
 80089b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089be:	f300 8272 	bgt.w	8008ea6 <_dtoa_r+0x8b6>
 80089c2:	eeb1 7b47 	vneg.f64	d7, d7
 80089c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ce:	f100 8267 	bmi.w	8008ea0 <_dtoa_r+0x8b0>
 80089d2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80089d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80089da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089dc:	2a00      	cmp	r2, #0
 80089de:	f2c0 8129 	blt.w	8008c34 <_dtoa_r+0x644>
 80089e2:	f1bb 0f0e 	cmp.w	fp, #14
 80089e6:	f300 8125 	bgt.w	8008c34 <_dtoa_r+0x644>
 80089ea:	4b90      	ldr	r3, [pc, #576]	; (8008c2c <_dtoa_r+0x63c>)
 80089ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089f0:	ed93 6b00 	vldr	d6, [r3]
 80089f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f280 80c3 	bge.w	8008b82 <_dtoa_r+0x592>
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	f300 80bf 	bgt.w	8008b82 <_dtoa_r+0x592>
 8008a04:	f040 824c 	bne.w	8008ea0 <_dtoa_r+0x8b0>
 8008a08:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008a0c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008a10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	464c      	mov	r4, r9
 8008a1e:	464f      	mov	r7, r9
 8008a20:	f280 8222 	bge.w	8008e68 <_dtoa_r+0x878>
 8008a24:	f8dd 8000 	ldr.w	r8, [sp]
 8008a28:	2331      	movs	r3, #49	; 0x31
 8008a2a:	f808 3b01 	strb.w	r3, [r8], #1
 8008a2e:	f10b 0b01 	add.w	fp, fp, #1
 8008a32:	e21e      	b.n	8008e72 <_dtoa_r+0x882>
 8008a34:	2202      	movs	r2, #2
 8008a36:	e77c      	b.n	8008932 <_dtoa_r+0x342>
 8008a38:	07cc      	lsls	r4, r1, #31
 8008a3a:	d504      	bpl.n	8008a46 <_dtoa_r+0x456>
 8008a3c:	ed90 6b00 	vldr	d6, [r0]
 8008a40:	3201      	adds	r2, #1
 8008a42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a46:	1049      	asrs	r1, r1, #1
 8008a48:	3008      	adds	r0, #8
 8008a4a:	e773      	b.n	8008934 <_dtoa_r+0x344>
 8008a4c:	d02e      	beq.n	8008aac <_dtoa_r+0x4bc>
 8008a4e:	f1cb 0100 	rsb	r1, fp, #0
 8008a52:	4a76      	ldr	r2, [pc, #472]	; (8008c2c <_dtoa_r+0x63c>)
 8008a54:	f001 000f 	and.w	r0, r1, #15
 8008a58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008a5c:	ed92 7b00 	vldr	d7, [r2]
 8008a60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008a64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a68:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008a6c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008a70:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008a74:	486e      	ldr	r0, [pc, #440]	; (8008c30 <_dtoa_r+0x640>)
 8008a76:	1109      	asrs	r1, r1, #4
 8008a78:	2400      	movs	r4, #0
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	b939      	cbnz	r1, 8008a8e <_dtoa_r+0x49e>
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	f43f af60 	beq.w	8008944 <_dtoa_r+0x354>
 8008a84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a8c:	e75a      	b.n	8008944 <_dtoa_r+0x354>
 8008a8e:	07cf      	lsls	r7, r1, #31
 8008a90:	d509      	bpl.n	8008aa6 <_dtoa_r+0x4b6>
 8008a92:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008a96:	ed90 7b00 	vldr	d7, [r0]
 8008a9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a9e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008aa2:	3201      	adds	r2, #1
 8008aa4:	2401      	movs	r4, #1
 8008aa6:	1049      	asrs	r1, r1, #1
 8008aa8:	3008      	adds	r0, #8
 8008aaa:	e7e7      	b.n	8008a7c <_dtoa_r+0x48c>
 8008aac:	2202      	movs	r2, #2
 8008aae:	e749      	b.n	8008944 <_dtoa_r+0x354>
 8008ab0:	465f      	mov	r7, fp
 8008ab2:	4648      	mov	r0, r9
 8008ab4:	e765      	b.n	8008982 <_dtoa_r+0x392>
 8008ab6:	ec42 1b17 	vmov	d7, r1, r2
 8008aba:	4a5c      	ldr	r2, [pc, #368]	; (8008c2c <_dtoa_r+0x63c>)
 8008abc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008ac0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008ac4:	9a00      	ldr	r2, [sp, #0]
 8008ac6:	1814      	adds	r4, r2, r0
 8008ac8:	9a08      	ldr	r2, [sp, #32]
 8008aca:	b352      	cbz	r2, 8008b22 <_dtoa_r+0x532>
 8008acc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008ad0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008ad4:	f8dd 8000 	ldr.w	r8, [sp]
 8008ad8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008adc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008ae0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ae4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008ae8:	ee14 2a90 	vmov	r2, s9
 8008aec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008af0:	3230      	adds	r2, #48	; 0x30
 8008af2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008af6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	f808 2b01 	strb.w	r2, [r8], #1
 8008b02:	d439      	bmi.n	8008b78 <_dtoa_r+0x588>
 8008b04:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008b08:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b10:	d472      	bmi.n	8008bf8 <_dtoa_r+0x608>
 8008b12:	45a0      	cmp	r8, r4
 8008b14:	f43f af5d 	beq.w	80089d2 <_dtoa_r+0x3e2>
 8008b18:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008b1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008b20:	e7e0      	b.n	8008ae4 <_dtoa_r+0x4f4>
 8008b22:	f8dd 8000 	ldr.w	r8, [sp]
 8008b26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008b30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008b34:	ee14 2a90 	vmov	r2, s9
 8008b38:	3230      	adds	r2, #48	; 0x30
 8008b3a:	f808 2b01 	strb.w	r2, [r8], #1
 8008b3e:	45a0      	cmp	r8, r4
 8008b40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008b44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008b48:	d118      	bne.n	8008b7c <_dtoa_r+0x58c>
 8008b4a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008b4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008b52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5a:	dc4d      	bgt.n	8008bf8 <_dtoa_r+0x608>
 8008b5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008b60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b68:	f57f af33 	bpl.w	80089d2 <_dtoa_r+0x3e2>
 8008b6c:	4688      	mov	r8, r1
 8008b6e:	3901      	subs	r1, #1
 8008b70:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008b74:	2b30      	cmp	r3, #48	; 0x30
 8008b76:	d0f9      	beq.n	8008b6c <_dtoa_r+0x57c>
 8008b78:	46bb      	mov	fp, r7
 8008b7a:	e02a      	b.n	8008bd2 <_dtoa_r+0x5e2>
 8008b7c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008b80:	e7d6      	b.n	8008b30 <_dtoa_r+0x540>
 8008b82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b86:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008b8a:	f8dd 8000 	ldr.w	r8, [sp]
 8008b8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008b92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008b96:	ee15 3a10 	vmov	r3, s10
 8008b9a:	3330      	adds	r3, #48	; 0x30
 8008b9c:	f808 3b01 	strb.w	r3, [r8], #1
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	eba8 0303 	sub.w	r3, r8, r3
 8008ba6:	4599      	cmp	r9, r3
 8008ba8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008bac:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008bb0:	d133      	bne.n	8008c1a <_dtoa_r+0x62a>
 8008bb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008bb6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bbe:	dc1a      	bgt.n	8008bf6 <_dtoa_r+0x606>
 8008bc0:	eeb4 7b46 	vcmp.f64	d7, d6
 8008bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc8:	d103      	bne.n	8008bd2 <_dtoa_r+0x5e2>
 8008bca:	ee15 3a10 	vmov	r3, s10
 8008bce:	07d9      	lsls	r1, r3, #31
 8008bd0:	d411      	bmi.n	8008bf6 <_dtoa_r+0x606>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f000 fae7 	bl	80091a8 <_Bfree>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bde:	f888 3000 	strb.w	r3, [r8]
 8008be2:	f10b 0301 	add.w	r3, fp, #1
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f43f ad4d 	beq.w	800868a <_dtoa_r+0x9a>
 8008bf0:	f8c3 8000 	str.w	r8, [r3]
 8008bf4:	e549      	b.n	800868a <_dtoa_r+0x9a>
 8008bf6:	465f      	mov	r7, fp
 8008bf8:	4643      	mov	r3, r8
 8008bfa:	4698      	mov	r8, r3
 8008bfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c00:	2a39      	cmp	r2, #57	; 0x39
 8008c02:	d106      	bne.n	8008c12 <_dtoa_r+0x622>
 8008c04:	9a00      	ldr	r2, [sp, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d1f7      	bne.n	8008bfa <_dtoa_r+0x60a>
 8008c0a:	9900      	ldr	r1, [sp, #0]
 8008c0c:	2230      	movs	r2, #48	; 0x30
 8008c0e:	3701      	adds	r7, #1
 8008c10:	700a      	strb	r2, [r1, #0]
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	3201      	adds	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e7ae      	b.n	8008b78 <_dtoa_r+0x588>
 8008c1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008c1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c26:	d1b2      	bne.n	8008b8e <_dtoa_r+0x59e>
 8008c28:	e7d3      	b.n	8008bd2 <_dtoa_r+0x5e2>
 8008c2a:	bf00      	nop
 8008c2c:	0800ab78 	.word	0x0800ab78
 8008c30:	0800ab50 	.word	0x0800ab50
 8008c34:	9908      	ldr	r1, [sp, #32]
 8008c36:	2900      	cmp	r1, #0
 8008c38:	f000 80d1 	beq.w	8008dde <_dtoa_r+0x7ee>
 8008c3c:	9907      	ldr	r1, [sp, #28]
 8008c3e:	2901      	cmp	r1, #1
 8008c40:	f300 80b4 	bgt.w	8008dac <_dtoa_r+0x7bc>
 8008c44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c46:	2900      	cmp	r1, #0
 8008c48:	f000 80ac 	beq.w	8008da4 <_dtoa_r+0x7b4>
 8008c4c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c50:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008c54:	461c      	mov	r4, r3
 8008c56:	930a      	str	r3, [sp, #40]	; 0x28
 8008c58:	9b05      	ldr	r3, [sp, #20]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	9305      	str	r3, [sp, #20]
 8008c5e:	9b06      	ldr	r3, [sp, #24]
 8008c60:	2101      	movs	r1, #1
 8008c62:	4413      	add	r3, r2
 8008c64:	4630      	mov	r0, r6
 8008c66:	9306      	str	r3, [sp, #24]
 8008c68:	f000 fb5a 	bl	8009320 <__i2b>
 8008c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c6e:	4607      	mov	r7, r0
 8008c70:	f1b8 0f00 	cmp.w	r8, #0
 8008c74:	dd0d      	ble.n	8008c92 <_dtoa_r+0x6a2>
 8008c76:	9a06      	ldr	r2, [sp, #24]
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	dd0a      	ble.n	8008c92 <_dtoa_r+0x6a2>
 8008c7c:	4542      	cmp	r2, r8
 8008c7e:	9905      	ldr	r1, [sp, #20]
 8008c80:	bfa8      	it	ge
 8008c82:	4642      	movge	r2, r8
 8008c84:	1a89      	subs	r1, r1, r2
 8008c86:	9105      	str	r1, [sp, #20]
 8008c88:	9906      	ldr	r1, [sp, #24]
 8008c8a:	eba8 0802 	sub.w	r8, r8, r2
 8008c8e:	1a8a      	subs	r2, r1, r2
 8008c90:	9206      	str	r2, [sp, #24]
 8008c92:	b303      	cbz	r3, 8008cd6 <_dtoa_r+0x6e6>
 8008c94:	9a08      	ldr	r2, [sp, #32]
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	f000 80a6 	beq.w	8008de8 <_dtoa_r+0x7f8>
 8008c9c:	2c00      	cmp	r4, #0
 8008c9e:	dd13      	ble.n	8008cc8 <_dtoa_r+0x6d8>
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ca8:	f000 fbf6 	bl	8009498 <__pow5mult>
 8008cac:	462a      	mov	r2, r5
 8008cae:	4601      	mov	r1, r0
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f000 fb4a 	bl	800934c <__multiply>
 8008cb8:	4629      	mov	r1, r5
 8008cba:	900a      	str	r0, [sp, #40]	; 0x28
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f000 fa73 	bl	80091a8 <_Bfree>
 8008cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc6:	4615      	mov	r5, r2
 8008cc8:	1b1a      	subs	r2, r3, r4
 8008cca:	d004      	beq.n	8008cd6 <_dtoa_r+0x6e6>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f000 fbe2 	bl	8009498 <__pow5mult>
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 fb21 	bl	8009320 <__i2b>
 8008cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	f340 8082 	ble.w	8008dec <_dtoa_r+0x7fc>
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4601      	mov	r1, r0
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 fbd3 	bl	8009498 <__pow5mult>
 8008cf2:	9b07      	ldr	r3, [sp, #28]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	dd7b      	ble.n	8008df2 <_dtoa_r+0x802>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8008cfe:	6922      	ldr	r2, [r4, #16]
 8008d00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008d04:	6910      	ldr	r0, [r2, #16]
 8008d06:	f000 fabb 	bl	8009280 <__hi0bits>
 8008d0a:	f1c0 0020 	rsb	r0, r0, #32
 8008d0e:	9b06      	ldr	r3, [sp, #24]
 8008d10:	4418      	add	r0, r3
 8008d12:	f010 001f 	ands.w	r0, r0, #31
 8008d16:	f000 808d 	beq.w	8008e34 <_dtoa_r+0x844>
 8008d1a:	f1c0 0220 	rsb	r2, r0, #32
 8008d1e:	2a04      	cmp	r2, #4
 8008d20:	f340 8086 	ble.w	8008e30 <_dtoa_r+0x840>
 8008d24:	f1c0 001c 	rsb	r0, r0, #28
 8008d28:	9b05      	ldr	r3, [sp, #20]
 8008d2a:	4403      	add	r3, r0
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	9b06      	ldr	r3, [sp, #24]
 8008d30:	4403      	add	r3, r0
 8008d32:	4480      	add	r8, r0
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	9b05      	ldr	r3, [sp, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dd05      	ble.n	8008d48 <_dtoa_r+0x758>
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4630      	mov	r0, r6
 8008d42:	f000 fc03 	bl	800954c <__lshift>
 8008d46:	4605      	mov	r5, r0
 8008d48:	9b06      	ldr	r3, [sp, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	dd05      	ble.n	8008d5a <_dtoa_r+0x76a>
 8008d4e:	4621      	mov	r1, r4
 8008d50:	461a      	mov	r2, r3
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 fbfa 	bl	800954c <__lshift>
 8008d58:	4604      	mov	r4, r0
 8008d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d06b      	beq.n	8008e38 <_dtoa_r+0x848>
 8008d60:	4621      	mov	r1, r4
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 fc5e 	bl	8009624 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	da65      	bge.n	8008e38 <_dtoa_r+0x848>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4629      	mov	r1, r5
 8008d70:	220a      	movs	r2, #10
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 fa3a 	bl	80091ec <__multadd>
 8008d78:	9b08      	ldr	r3, [sp, #32]
 8008d7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d7e:	4605      	mov	r5, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 8192 	beq.w	80090aa <_dtoa_r+0xaba>
 8008d86:	4639      	mov	r1, r7
 8008d88:	2300      	movs	r3, #0
 8008d8a:	220a      	movs	r2, #10
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f000 fa2d 	bl	80091ec <__multadd>
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	4607      	mov	r7, r0
 8008d98:	f300 808e 	bgt.w	8008eb8 <_dtoa_r+0x8c8>
 8008d9c:	9b07      	ldr	r3, [sp, #28]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	dc51      	bgt.n	8008e46 <_dtoa_r+0x856>
 8008da2:	e089      	b.n	8008eb8 <_dtoa_r+0x8c8>
 8008da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008da6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008daa:	e751      	b.n	8008c50 <_dtoa_r+0x660>
 8008dac:	f109 34ff 	add.w	r4, r9, #4294967295
 8008db0:	42a3      	cmp	r3, r4
 8008db2:	bfbf      	itttt	lt
 8008db4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008db6:	1ae3      	sublt	r3, r4, r3
 8008db8:	18d2      	addlt	r2, r2, r3
 8008dba:	4613      	movlt	r3, r2
 8008dbc:	bfb7      	itett	lt
 8008dbe:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008dc0:	1b1c      	subge	r4, r3, r4
 8008dc2:	4623      	movlt	r3, r4
 8008dc4:	2400      	movlt	r4, #0
 8008dc6:	f1b9 0f00 	cmp.w	r9, #0
 8008dca:	bfb5      	itete	lt
 8008dcc:	9a05      	ldrlt	r2, [sp, #20]
 8008dce:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008dd2:	eba2 0809 	sublt.w	r8, r2, r9
 8008dd6:	464a      	movge	r2, r9
 8008dd8:	bfb8      	it	lt
 8008dda:	2200      	movlt	r2, #0
 8008ddc:	e73b      	b.n	8008c56 <_dtoa_r+0x666>
 8008dde:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008de2:	9f08      	ldr	r7, [sp, #32]
 8008de4:	461c      	mov	r4, r3
 8008de6:	e743      	b.n	8008c70 <_dtoa_r+0x680>
 8008de8:	461a      	mov	r2, r3
 8008dea:	e76f      	b.n	8008ccc <_dtoa_r+0x6dc>
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	dc18      	bgt.n	8008e24 <_dtoa_r+0x834>
 8008df2:	9b02      	ldr	r3, [sp, #8]
 8008df4:	b9b3      	cbnz	r3, 8008e24 <_dtoa_r+0x834>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008dfc:	b9a2      	cbnz	r2, 8008e28 <_dtoa_r+0x838>
 8008dfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e02:	0d12      	lsrs	r2, r2, #20
 8008e04:	0512      	lsls	r2, r2, #20
 8008e06:	b18a      	cbz	r2, 8008e2c <_dtoa_r+0x83c>
 8008e08:	9b05      	ldr	r3, [sp, #20]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	9b06      	ldr	r3, [sp, #24]
 8008e10:	3301      	adds	r3, #1
 8008e12:	9306      	str	r3, [sp, #24]
 8008e14:	2301      	movs	r3, #1
 8008e16:	930a      	str	r3, [sp, #40]	; 0x28
 8008e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f47f af6f 	bne.w	8008cfe <_dtoa_r+0x70e>
 8008e20:	2001      	movs	r0, #1
 8008e22:	e774      	b.n	8008d0e <_dtoa_r+0x71e>
 8008e24:	2300      	movs	r3, #0
 8008e26:	e7f6      	b.n	8008e16 <_dtoa_r+0x826>
 8008e28:	9b02      	ldr	r3, [sp, #8]
 8008e2a:	e7f4      	b.n	8008e16 <_dtoa_r+0x826>
 8008e2c:	920a      	str	r2, [sp, #40]	; 0x28
 8008e2e:	e7f3      	b.n	8008e18 <_dtoa_r+0x828>
 8008e30:	d081      	beq.n	8008d36 <_dtoa_r+0x746>
 8008e32:	4610      	mov	r0, r2
 8008e34:	301c      	adds	r0, #28
 8008e36:	e777      	b.n	8008d28 <_dtoa_r+0x738>
 8008e38:	f1b9 0f00 	cmp.w	r9, #0
 8008e3c:	dc37      	bgt.n	8008eae <_dtoa_r+0x8be>
 8008e3e:	9b07      	ldr	r3, [sp, #28]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	dd34      	ble.n	8008eae <_dtoa_r+0x8be>
 8008e44:	46ca      	mov	sl, r9
 8008e46:	f1ba 0f00 	cmp.w	sl, #0
 8008e4a:	d10d      	bne.n	8008e68 <_dtoa_r+0x878>
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4653      	mov	r3, sl
 8008e50:	2205      	movs	r2, #5
 8008e52:	4630      	mov	r0, r6
 8008e54:	f000 f9ca 	bl	80091ec <__multadd>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f000 fbe1 	bl	8009624 <__mcmp>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f73f adde 	bgt.w	8008a24 <_dtoa_r+0x434>
 8008e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6a:	f8dd 8000 	ldr.w	r8, [sp]
 8008e6e:	ea6f 0b03 	mvn.w	fp, r3
 8008e72:	f04f 0900 	mov.w	r9, #0
 8008e76:	4621      	mov	r1, r4
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f000 f995 	bl	80091a8 <_Bfree>
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	f43f aea7 	beq.w	8008bd2 <_dtoa_r+0x5e2>
 8008e84:	f1b9 0f00 	cmp.w	r9, #0
 8008e88:	d005      	beq.n	8008e96 <_dtoa_r+0x8a6>
 8008e8a:	45b9      	cmp	r9, r7
 8008e8c:	d003      	beq.n	8008e96 <_dtoa_r+0x8a6>
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4630      	mov	r0, r6
 8008e92:	f000 f989 	bl	80091a8 <_Bfree>
 8008e96:	4639      	mov	r1, r7
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f000 f985 	bl	80091a8 <_Bfree>
 8008e9e:	e698      	b.n	8008bd2 <_dtoa_r+0x5e2>
 8008ea0:	2400      	movs	r4, #0
 8008ea2:	4627      	mov	r7, r4
 8008ea4:	e7e0      	b.n	8008e68 <_dtoa_r+0x878>
 8008ea6:	46bb      	mov	fp, r7
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4607      	mov	r7, r0
 8008eac:	e5ba      	b.n	8008a24 <_dtoa_r+0x434>
 8008eae:	9b08      	ldr	r3, [sp, #32]
 8008eb0:	46ca      	mov	sl, r9
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 8100 	beq.w	80090b8 <_dtoa_r+0xac8>
 8008eb8:	f1b8 0f00 	cmp.w	r8, #0
 8008ebc:	dd05      	ble.n	8008eca <_dtoa_r+0x8da>
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 fb42 	bl	800954c <__lshift>
 8008ec8:	4607      	mov	r7, r0
 8008eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d05d      	beq.n	8008f8c <_dtoa_r+0x99c>
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 f928 	bl	8009128 <_Balloc>
 8008ed8:	4680      	mov	r8, r0
 8008eda:	b928      	cbnz	r0, 8008ee8 <_dtoa_r+0x8f8>
 8008edc:	4b82      	ldr	r3, [pc, #520]	; (80090e8 <_dtoa_r+0xaf8>)
 8008ede:	4602      	mov	r2, r0
 8008ee0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ee4:	f7ff bb9a 	b.w	800861c <_dtoa_r+0x2c>
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	3202      	adds	r2, #2
 8008eec:	0092      	lsls	r2, r2, #2
 8008eee:	f107 010c 	add.w	r1, r7, #12
 8008ef2:	300c      	adds	r0, #12
 8008ef4:	f000 f90a 	bl	800910c <memcpy>
 8008ef8:	2201      	movs	r2, #1
 8008efa:	4641      	mov	r1, r8
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 fb25 	bl	800954c <__lshift>
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	3301      	adds	r3, #1
 8008f06:	9305      	str	r3, [sp, #20]
 8008f08:	9b00      	ldr	r3, [sp, #0]
 8008f0a:	4453      	add	r3, sl
 8008f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0e:	9b02      	ldr	r3, [sp, #8]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	46b9      	mov	r9, r7
 8008f16:	9308      	str	r3, [sp, #32]
 8008f18:	4607      	mov	r7, r0
 8008f1a:	9b05      	ldr	r3, [sp, #20]
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4628      	mov	r0, r5
 8008f22:	9302      	str	r3, [sp, #8]
 8008f24:	f7ff fad6 	bl	80084d4 <quorem>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	3330      	adds	r3, #48	; 0x30
 8008f2c:	9006      	str	r0, [sp, #24]
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4628      	mov	r0, r5
 8008f32:	930a      	str	r3, [sp, #40]	; 0x28
 8008f34:	f000 fb76 	bl	8009624 <__mcmp>
 8008f38:	463a      	mov	r2, r7
 8008f3a:	4682      	mov	sl, r0
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f000 fb8c 	bl	800965c <__mdiff>
 8008f44:	68c2      	ldr	r2, [r0, #12]
 8008f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f48:	4680      	mov	r8, r0
 8008f4a:	bb0a      	cbnz	r2, 8008f90 <_dtoa_r+0x9a0>
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 fb68 	bl	8009624 <__mcmp>
 8008f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f56:	4602      	mov	r2, r0
 8008f58:	4641      	mov	r1, r8
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	920e      	str	r2, [sp, #56]	; 0x38
 8008f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f60:	f000 f922 	bl	80091a8 <_Bfree>
 8008f64:	9b07      	ldr	r3, [sp, #28]
 8008f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f68:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008f6c:	ea43 0102 	orr.w	r1, r3, r2
 8008f70:	9b08      	ldr	r3, [sp, #32]
 8008f72:	430b      	orrs	r3, r1
 8008f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f76:	d10d      	bne.n	8008f94 <_dtoa_r+0x9a4>
 8008f78:	2b39      	cmp	r3, #57	; 0x39
 8008f7a:	d029      	beq.n	8008fd0 <_dtoa_r+0x9e0>
 8008f7c:	f1ba 0f00 	cmp.w	sl, #0
 8008f80:	dd01      	ble.n	8008f86 <_dtoa_r+0x996>
 8008f82:	9b06      	ldr	r3, [sp, #24]
 8008f84:	3331      	adds	r3, #49	; 0x31
 8008f86:	9a02      	ldr	r2, [sp, #8]
 8008f88:	7013      	strb	r3, [r2, #0]
 8008f8a:	e774      	b.n	8008e76 <_dtoa_r+0x886>
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	e7b8      	b.n	8008f02 <_dtoa_r+0x912>
 8008f90:	2201      	movs	r2, #1
 8008f92:	e7e1      	b.n	8008f58 <_dtoa_r+0x968>
 8008f94:	f1ba 0f00 	cmp.w	sl, #0
 8008f98:	db06      	blt.n	8008fa8 <_dtoa_r+0x9b8>
 8008f9a:	9907      	ldr	r1, [sp, #28]
 8008f9c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008fa0:	9908      	ldr	r1, [sp, #32]
 8008fa2:	ea5a 0101 	orrs.w	r1, sl, r1
 8008fa6:	d120      	bne.n	8008fea <_dtoa_r+0x9fa>
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	ddec      	ble.n	8008f86 <_dtoa_r+0x996>
 8008fac:	4629      	mov	r1, r5
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	9305      	str	r3, [sp, #20]
 8008fb4:	f000 faca 	bl	800954c <__lshift>
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4605      	mov	r5, r0
 8008fbc:	f000 fb32 	bl	8009624 <__mcmp>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	9b05      	ldr	r3, [sp, #20]
 8008fc4:	dc02      	bgt.n	8008fcc <_dtoa_r+0x9dc>
 8008fc6:	d1de      	bne.n	8008f86 <_dtoa_r+0x996>
 8008fc8:	07da      	lsls	r2, r3, #31
 8008fca:	d5dc      	bpl.n	8008f86 <_dtoa_r+0x996>
 8008fcc:	2b39      	cmp	r3, #57	; 0x39
 8008fce:	d1d8      	bne.n	8008f82 <_dtoa_r+0x992>
 8008fd0:	9a02      	ldr	r2, [sp, #8]
 8008fd2:	2339      	movs	r3, #57	; 0x39
 8008fd4:	7013      	strb	r3, [r2, #0]
 8008fd6:	4643      	mov	r3, r8
 8008fd8:	4698      	mov	r8, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008fe0:	2a39      	cmp	r2, #57	; 0x39
 8008fe2:	d051      	beq.n	8009088 <_dtoa_r+0xa98>
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e745      	b.n	8008e76 <_dtoa_r+0x886>
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	dd03      	ble.n	8008ff6 <_dtoa_r+0xa06>
 8008fee:	2b39      	cmp	r3, #57	; 0x39
 8008ff0:	d0ee      	beq.n	8008fd0 <_dtoa_r+0x9e0>
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	e7c7      	b.n	8008f86 <_dtoa_r+0x996>
 8008ff6:	9a05      	ldr	r2, [sp, #20]
 8008ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffa:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ffe:	428a      	cmp	r2, r1
 8009000:	d02b      	beq.n	800905a <_dtoa_r+0xa6a>
 8009002:	4629      	mov	r1, r5
 8009004:	2300      	movs	r3, #0
 8009006:	220a      	movs	r2, #10
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f8ef 	bl	80091ec <__multadd>
 800900e:	45b9      	cmp	r9, r7
 8009010:	4605      	mov	r5, r0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	f04f 020a 	mov.w	r2, #10
 800901a:	4649      	mov	r1, r9
 800901c:	4630      	mov	r0, r6
 800901e:	d107      	bne.n	8009030 <_dtoa_r+0xa40>
 8009020:	f000 f8e4 	bl	80091ec <__multadd>
 8009024:	4681      	mov	r9, r0
 8009026:	4607      	mov	r7, r0
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	3301      	adds	r3, #1
 800902c:	9305      	str	r3, [sp, #20]
 800902e:	e774      	b.n	8008f1a <_dtoa_r+0x92a>
 8009030:	f000 f8dc 	bl	80091ec <__multadd>
 8009034:	4639      	mov	r1, r7
 8009036:	4681      	mov	r9, r0
 8009038:	2300      	movs	r3, #0
 800903a:	220a      	movs	r2, #10
 800903c:	4630      	mov	r0, r6
 800903e:	f000 f8d5 	bl	80091ec <__multadd>
 8009042:	4607      	mov	r7, r0
 8009044:	e7f0      	b.n	8009028 <_dtoa_r+0xa38>
 8009046:	f1ba 0f00 	cmp.w	sl, #0
 800904a:	9a00      	ldr	r2, [sp, #0]
 800904c:	bfcc      	ite	gt
 800904e:	46d0      	movgt	r8, sl
 8009050:	f04f 0801 	movle.w	r8, #1
 8009054:	4490      	add	r8, r2
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	4629      	mov	r1, r5
 800905c:	2201      	movs	r2, #1
 800905e:	4630      	mov	r0, r6
 8009060:	9302      	str	r3, [sp, #8]
 8009062:	f000 fa73 	bl	800954c <__lshift>
 8009066:	4621      	mov	r1, r4
 8009068:	4605      	mov	r5, r0
 800906a:	f000 fadb 	bl	8009624 <__mcmp>
 800906e:	2800      	cmp	r0, #0
 8009070:	dcb1      	bgt.n	8008fd6 <_dtoa_r+0x9e6>
 8009072:	d102      	bne.n	800907a <_dtoa_r+0xa8a>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	07db      	lsls	r3, r3, #31
 8009078:	d4ad      	bmi.n	8008fd6 <_dtoa_r+0x9e6>
 800907a:	4643      	mov	r3, r8
 800907c:	4698      	mov	r8, r3
 800907e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009082:	2a30      	cmp	r2, #48	; 0x30
 8009084:	d0fa      	beq.n	800907c <_dtoa_r+0xa8c>
 8009086:	e6f6      	b.n	8008e76 <_dtoa_r+0x886>
 8009088:	9a00      	ldr	r2, [sp, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d1a4      	bne.n	8008fd8 <_dtoa_r+0x9e8>
 800908e:	f10b 0b01 	add.w	fp, fp, #1
 8009092:	2331      	movs	r3, #49	; 0x31
 8009094:	e778      	b.n	8008f88 <_dtoa_r+0x998>
 8009096:	4b15      	ldr	r3, [pc, #84]	; (80090ec <_dtoa_r+0xafc>)
 8009098:	f7ff bb12 	b.w	80086c0 <_dtoa_r+0xd0>
 800909c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f47f aaee 	bne.w	8008680 <_dtoa_r+0x90>
 80090a4:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <_dtoa_r+0xb00>)
 80090a6:	f7ff bb0b 	b.w	80086c0 <_dtoa_r+0xd0>
 80090aa:	f1ba 0f00 	cmp.w	sl, #0
 80090ae:	dc03      	bgt.n	80090b8 <_dtoa_r+0xac8>
 80090b0:	9b07      	ldr	r3, [sp, #28]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	f73f aec7 	bgt.w	8008e46 <_dtoa_r+0x856>
 80090b8:	f8dd 8000 	ldr.w	r8, [sp]
 80090bc:	4621      	mov	r1, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f7ff fa08 	bl	80084d4 <quorem>
 80090c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80090c8:	f808 3b01 	strb.w	r3, [r8], #1
 80090cc:	9a00      	ldr	r2, [sp, #0]
 80090ce:	eba8 0202 	sub.w	r2, r8, r2
 80090d2:	4592      	cmp	sl, r2
 80090d4:	ddb7      	ble.n	8009046 <_dtoa_r+0xa56>
 80090d6:	4629      	mov	r1, r5
 80090d8:	2300      	movs	r3, #0
 80090da:	220a      	movs	r2, #10
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 f885 	bl	80091ec <__multadd>
 80090e2:	4605      	mov	r5, r0
 80090e4:	e7ea      	b.n	80090bc <_dtoa_r+0xacc>
 80090e6:	bf00      	nop
 80090e8:	0800aad8 	.word	0x0800aad8
 80090ec:	0800a930 	.word	0x0800a930
 80090f0:	0800aa55 	.word	0x0800aa55

080090f4 <_localeconv_r>:
 80090f4:	4800      	ldr	r0, [pc, #0]	; (80090f8 <_localeconv_r+0x4>)
 80090f6:	4770      	bx	lr
 80090f8:	20000178 	.word	0x20000178

080090fc <malloc>:
 80090fc:	4b02      	ldr	r3, [pc, #8]	; (8009108 <malloc+0xc>)
 80090fe:	4601      	mov	r1, r0
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f000 bbef 	b.w	80098e4 <_malloc_r>
 8009106:	bf00      	nop
 8009108:	20000024 	.word	0x20000024

0800910c <memcpy>:
 800910c:	440a      	add	r2, r1
 800910e:	4291      	cmp	r1, r2
 8009110:	f100 33ff 	add.w	r3, r0, #4294967295
 8009114:	d100      	bne.n	8009118 <memcpy+0xc>
 8009116:	4770      	bx	lr
 8009118:	b510      	push	{r4, lr}
 800911a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800911e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009122:	4291      	cmp	r1, r2
 8009124:	d1f9      	bne.n	800911a <memcpy+0xe>
 8009126:	bd10      	pop	{r4, pc}

08009128 <_Balloc>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	b976      	cbnz	r6, 8009150 <_Balloc+0x28>
 8009132:	2010      	movs	r0, #16
 8009134:	f7ff ffe2 	bl	80090fc <malloc>
 8009138:	4602      	mov	r2, r0
 800913a:	6260      	str	r0, [r4, #36]	; 0x24
 800913c:	b920      	cbnz	r0, 8009148 <_Balloc+0x20>
 800913e:	4b18      	ldr	r3, [pc, #96]	; (80091a0 <_Balloc+0x78>)
 8009140:	4818      	ldr	r0, [pc, #96]	; (80091a4 <_Balloc+0x7c>)
 8009142:	2166      	movs	r1, #102	; 0x66
 8009144:	f000 fd94 	bl	8009c70 <__assert_func>
 8009148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800914c:	6006      	str	r6, [r0, #0]
 800914e:	60c6      	str	r6, [r0, #12]
 8009150:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009152:	68f3      	ldr	r3, [r6, #12]
 8009154:	b183      	cbz	r3, 8009178 <_Balloc+0x50>
 8009156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800915e:	b9b8      	cbnz	r0, 8009190 <_Balloc+0x68>
 8009160:	2101      	movs	r1, #1
 8009162:	fa01 f605 	lsl.w	r6, r1, r5
 8009166:	1d72      	adds	r2, r6, #5
 8009168:	0092      	lsls	r2, r2, #2
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fb5a 	bl	8009824 <_calloc_r>
 8009170:	b160      	cbz	r0, 800918c <_Balloc+0x64>
 8009172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009176:	e00e      	b.n	8009196 <_Balloc+0x6e>
 8009178:	2221      	movs	r2, #33	; 0x21
 800917a:	2104      	movs	r1, #4
 800917c:	4620      	mov	r0, r4
 800917e:	f000 fb51 	bl	8009824 <_calloc_r>
 8009182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009184:	60f0      	str	r0, [r6, #12]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e4      	bne.n	8009156 <_Balloc+0x2e>
 800918c:	2000      	movs	r0, #0
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	6802      	ldr	r2, [r0, #0]
 8009192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009196:	2300      	movs	r3, #0
 8009198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800919c:	e7f7      	b.n	800918e <_Balloc+0x66>
 800919e:	bf00      	nop
 80091a0:	0800aa62 	.word	0x0800aa62
 80091a4:	0800aae9 	.word	0x0800aae9

080091a8 <_Bfree>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091ac:	4605      	mov	r5, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	b976      	cbnz	r6, 80091d0 <_Bfree+0x28>
 80091b2:	2010      	movs	r0, #16
 80091b4:	f7ff ffa2 	bl	80090fc <malloc>
 80091b8:	4602      	mov	r2, r0
 80091ba:	6268      	str	r0, [r5, #36]	; 0x24
 80091bc:	b920      	cbnz	r0, 80091c8 <_Bfree+0x20>
 80091be:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <_Bfree+0x3c>)
 80091c0:	4809      	ldr	r0, [pc, #36]	; (80091e8 <_Bfree+0x40>)
 80091c2:	218a      	movs	r1, #138	; 0x8a
 80091c4:	f000 fd54 	bl	8009c70 <__assert_func>
 80091c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091cc:	6006      	str	r6, [r0, #0]
 80091ce:	60c6      	str	r6, [r0, #12]
 80091d0:	b13c      	cbz	r4, 80091e2 <_Bfree+0x3a>
 80091d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091d4:	6862      	ldr	r2, [r4, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091dc:	6021      	str	r1, [r4, #0]
 80091de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	0800aa62 	.word	0x0800aa62
 80091e8:	0800aae9 	.word	0x0800aae9

080091ec <__multadd>:
 80091ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f0:	690e      	ldr	r6, [r1, #16]
 80091f2:	4607      	mov	r7, r0
 80091f4:	4698      	mov	r8, r3
 80091f6:	460c      	mov	r4, r1
 80091f8:	f101 0014 	add.w	r0, r1, #20
 80091fc:	2300      	movs	r3, #0
 80091fe:	6805      	ldr	r5, [r0, #0]
 8009200:	b2a9      	uxth	r1, r5
 8009202:	fb02 8101 	mla	r1, r2, r1, r8
 8009206:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800920a:	0c2d      	lsrs	r5, r5, #16
 800920c:	fb02 c505 	mla	r5, r2, r5, ip
 8009210:	b289      	uxth	r1, r1
 8009212:	3301      	adds	r3, #1
 8009214:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009218:	429e      	cmp	r6, r3
 800921a:	f840 1b04 	str.w	r1, [r0], #4
 800921e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009222:	dcec      	bgt.n	80091fe <__multadd+0x12>
 8009224:	f1b8 0f00 	cmp.w	r8, #0
 8009228:	d022      	beq.n	8009270 <__multadd+0x84>
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	42b3      	cmp	r3, r6
 800922e:	dc19      	bgt.n	8009264 <__multadd+0x78>
 8009230:	6861      	ldr	r1, [r4, #4]
 8009232:	4638      	mov	r0, r7
 8009234:	3101      	adds	r1, #1
 8009236:	f7ff ff77 	bl	8009128 <_Balloc>
 800923a:	4605      	mov	r5, r0
 800923c:	b928      	cbnz	r0, 800924a <__multadd+0x5e>
 800923e:	4602      	mov	r2, r0
 8009240:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <__multadd+0x8c>)
 8009242:	480e      	ldr	r0, [pc, #56]	; (800927c <__multadd+0x90>)
 8009244:	21b5      	movs	r1, #181	; 0xb5
 8009246:	f000 fd13 	bl	8009c70 <__assert_func>
 800924a:	6922      	ldr	r2, [r4, #16]
 800924c:	3202      	adds	r2, #2
 800924e:	f104 010c 	add.w	r1, r4, #12
 8009252:	0092      	lsls	r2, r2, #2
 8009254:	300c      	adds	r0, #12
 8009256:	f7ff ff59 	bl	800910c <memcpy>
 800925a:	4621      	mov	r1, r4
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff ffa3 	bl	80091a8 <_Bfree>
 8009262:	462c      	mov	r4, r5
 8009264:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009268:	3601      	adds	r6, #1
 800926a:	f8c3 8014 	str.w	r8, [r3, #20]
 800926e:	6126      	str	r6, [r4, #16]
 8009270:	4620      	mov	r0, r4
 8009272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009276:	bf00      	nop
 8009278:	0800aad8 	.word	0x0800aad8
 800927c:	0800aae9 	.word	0x0800aae9

08009280 <__hi0bits>:
 8009280:	0c03      	lsrs	r3, r0, #16
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	b9d3      	cbnz	r3, 80092bc <__hi0bits+0x3c>
 8009286:	0400      	lsls	r0, r0, #16
 8009288:	2310      	movs	r3, #16
 800928a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800928e:	bf04      	itt	eq
 8009290:	0200      	lsleq	r0, r0, #8
 8009292:	3308      	addeq	r3, #8
 8009294:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009298:	bf04      	itt	eq
 800929a:	0100      	lsleq	r0, r0, #4
 800929c:	3304      	addeq	r3, #4
 800929e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092a2:	bf04      	itt	eq
 80092a4:	0080      	lsleq	r0, r0, #2
 80092a6:	3302      	addeq	r3, #2
 80092a8:	2800      	cmp	r0, #0
 80092aa:	db05      	blt.n	80092b8 <__hi0bits+0x38>
 80092ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092b0:	f103 0301 	add.w	r3, r3, #1
 80092b4:	bf08      	it	eq
 80092b6:	2320      	moveq	r3, #32
 80092b8:	4618      	mov	r0, r3
 80092ba:	4770      	bx	lr
 80092bc:	2300      	movs	r3, #0
 80092be:	e7e4      	b.n	800928a <__hi0bits+0xa>

080092c0 <__lo0bits>:
 80092c0:	6803      	ldr	r3, [r0, #0]
 80092c2:	f013 0207 	ands.w	r2, r3, #7
 80092c6:	4601      	mov	r1, r0
 80092c8:	d00b      	beq.n	80092e2 <__lo0bits+0x22>
 80092ca:	07da      	lsls	r2, r3, #31
 80092cc:	d424      	bmi.n	8009318 <__lo0bits+0x58>
 80092ce:	0798      	lsls	r0, r3, #30
 80092d0:	bf49      	itett	mi
 80092d2:	085b      	lsrmi	r3, r3, #1
 80092d4:	089b      	lsrpl	r3, r3, #2
 80092d6:	2001      	movmi	r0, #1
 80092d8:	600b      	strmi	r3, [r1, #0]
 80092da:	bf5c      	itt	pl
 80092dc:	600b      	strpl	r3, [r1, #0]
 80092de:	2002      	movpl	r0, #2
 80092e0:	4770      	bx	lr
 80092e2:	b298      	uxth	r0, r3
 80092e4:	b9b0      	cbnz	r0, 8009314 <__lo0bits+0x54>
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	2010      	movs	r0, #16
 80092ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80092ee:	bf04      	itt	eq
 80092f0:	0a1b      	lsreq	r3, r3, #8
 80092f2:	3008      	addeq	r0, #8
 80092f4:	071a      	lsls	r2, r3, #28
 80092f6:	bf04      	itt	eq
 80092f8:	091b      	lsreq	r3, r3, #4
 80092fa:	3004      	addeq	r0, #4
 80092fc:	079a      	lsls	r2, r3, #30
 80092fe:	bf04      	itt	eq
 8009300:	089b      	lsreq	r3, r3, #2
 8009302:	3002      	addeq	r0, #2
 8009304:	07da      	lsls	r2, r3, #31
 8009306:	d403      	bmi.n	8009310 <__lo0bits+0x50>
 8009308:	085b      	lsrs	r3, r3, #1
 800930a:	f100 0001 	add.w	r0, r0, #1
 800930e:	d005      	beq.n	800931c <__lo0bits+0x5c>
 8009310:	600b      	str	r3, [r1, #0]
 8009312:	4770      	bx	lr
 8009314:	4610      	mov	r0, r2
 8009316:	e7e8      	b.n	80092ea <__lo0bits+0x2a>
 8009318:	2000      	movs	r0, #0
 800931a:	4770      	bx	lr
 800931c:	2020      	movs	r0, #32
 800931e:	4770      	bx	lr

08009320 <__i2b>:
 8009320:	b510      	push	{r4, lr}
 8009322:	460c      	mov	r4, r1
 8009324:	2101      	movs	r1, #1
 8009326:	f7ff feff 	bl	8009128 <_Balloc>
 800932a:	4602      	mov	r2, r0
 800932c:	b928      	cbnz	r0, 800933a <__i2b+0x1a>
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <__i2b+0x24>)
 8009330:	4805      	ldr	r0, [pc, #20]	; (8009348 <__i2b+0x28>)
 8009332:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009336:	f000 fc9b 	bl	8009c70 <__assert_func>
 800933a:	2301      	movs	r3, #1
 800933c:	6144      	str	r4, [r0, #20]
 800933e:	6103      	str	r3, [r0, #16]
 8009340:	bd10      	pop	{r4, pc}
 8009342:	bf00      	nop
 8009344:	0800aad8 	.word	0x0800aad8
 8009348:	0800aae9 	.word	0x0800aae9

0800934c <__multiply>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	4614      	mov	r4, r2
 8009352:	690a      	ldr	r2, [r1, #16]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	429a      	cmp	r2, r3
 8009358:	bfb8      	it	lt
 800935a:	460b      	movlt	r3, r1
 800935c:	460d      	mov	r5, r1
 800935e:	bfbc      	itt	lt
 8009360:	4625      	movlt	r5, r4
 8009362:	461c      	movlt	r4, r3
 8009364:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009368:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800936c:	68ab      	ldr	r3, [r5, #8]
 800936e:	6869      	ldr	r1, [r5, #4]
 8009370:	eb0a 0709 	add.w	r7, sl, r9
 8009374:	42bb      	cmp	r3, r7
 8009376:	b085      	sub	sp, #20
 8009378:	bfb8      	it	lt
 800937a:	3101      	addlt	r1, #1
 800937c:	f7ff fed4 	bl	8009128 <_Balloc>
 8009380:	b930      	cbnz	r0, 8009390 <__multiply+0x44>
 8009382:	4602      	mov	r2, r0
 8009384:	4b42      	ldr	r3, [pc, #264]	; (8009490 <__multiply+0x144>)
 8009386:	4843      	ldr	r0, [pc, #268]	; (8009494 <__multiply+0x148>)
 8009388:	f240 115d 	movw	r1, #349	; 0x15d
 800938c:	f000 fc70 	bl	8009c70 <__assert_func>
 8009390:	f100 0614 	add.w	r6, r0, #20
 8009394:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009398:	4633      	mov	r3, r6
 800939a:	2200      	movs	r2, #0
 800939c:	4543      	cmp	r3, r8
 800939e:	d31e      	bcc.n	80093de <__multiply+0x92>
 80093a0:	f105 0c14 	add.w	ip, r5, #20
 80093a4:	f104 0314 	add.w	r3, r4, #20
 80093a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80093ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80093b0:	9202      	str	r2, [sp, #8]
 80093b2:	ebac 0205 	sub.w	r2, ip, r5
 80093b6:	3a15      	subs	r2, #21
 80093b8:	f022 0203 	bic.w	r2, r2, #3
 80093bc:	3204      	adds	r2, #4
 80093be:	f105 0115 	add.w	r1, r5, #21
 80093c2:	458c      	cmp	ip, r1
 80093c4:	bf38      	it	cc
 80093c6:	2204      	movcc	r2, #4
 80093c8:	9201      	str	r2, [sp, #4]
 80093ca:	9a02      	ldr	r2, [sp, #8]
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d808      	bhi.n	80093e4 <__multiply+0x98>
 80093d2:	2f00      	cmp	r7, #0
 80093d4:	dc55      	bgt.n	8009482 <__multiply+0x136>
 80093d6:	6107      	str	r7, [r0, #16]
 80093d8:	b005      	add	sp, #20
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	f843 2b04 	str.w	r2, [r3], #4
 80093e2:	e7db      	b.n	800939c <__multiply+0x50>
 80093e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80093e8:	f1ba 0f00 	cmp.w	sl, #0
 80093ec:	d020      	beq.n	8009430 <__multiply+0xe4>
 80093ee:	f105 0e14 	add.w	lr, r5, #20
 80093f2:	46b1      	mov	r9, r6
 80093f4:	2200      	movs	r2, #0
 80093f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80093fa:	f8d9 b000 	ldr.w	fp, [r9]
 80093fe:	b2a1      	uxth	r1, r4
 8009400:	fa1f fb8b 	uxth.w	fp, fp
 8009404:	fb0a b101 	mla	r1, sl, r1, fp
 8009408:	4411      	add	r1, r2
 800940a:	f8d9 2000 	ldr.w	r2, [r9]
 800940e:	0c24      	lsrs	r4, r4, #16
 8009410:	0c12      	lsrs	r2, r2, #16
 8009412:	fb0a 2404 	mla	r4, sl, r4, r2
 8009416:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800941a:	b289      	uxth	r1, r1
 800941c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009420:	45f4      	cmp	ip, lr
 8009422:	f849 1b04 	str.w	r1, [r9], #4
 8009426:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800942a:	d8e4      	bhi.n	80093f6 <__multiply+0xaa>
 800942c:	9901      	ldr	r1, [sp, #4]
 800942e:	5072      	str	r2, [r6, r1]
 8009430:	9a03      	ldr	r2, [sp, #12]
 8009432:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009436:	3304      	adds	r3, #4
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	d01f      	beq.n	800947e <__multiply+0x132>
 800943e:	6834      	ldr	r4, [r6, #0]
 8009440:	f105 0114 	add.w	r1, r5, #20
 8009444:	46b6      	mov	lr, r6
 8009446:	f04f 0a00 	mov.w	sl, #0
 800944a:	880a      	ldrh	r2, [r1, #0]
 800944c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009450:	fb09 b202 	mla	r2, r9, r2, fp
 8009454:	4492      	add	sl, r2
 8009456:	b2a4      	uxth	r4, r4
 8009458:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800945c:	f84e 4b04 	str.w	r4, [lr], #4
 8009460:	f851 4b04 	ldr.w	r4, [r1], #4
 8009464:	f8be 2000 	ldrh.w	r2, [lr]
 8009468:	0c24      	lsrs	r4, r4, #16
 800946a:	fb09 2404 	mla	r4, r9, r4, r2
 800946e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009472:	458c      	cmp	ip, r1
 8009474:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009478:	d8e7      	bhi.n	800944a <__multiply+0xfe>
 800947a:	9a01      	ldr	r2, [sp, #4]
 800947c:	50b4      	str	r4, [r6, r2]
 800947e:	3604      	adds	r6, #4
 8009480:	e7a3      	b.n	80093ca <__multiply+0x7e>
 8009482:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1a5      	bne.n	80093d6 <__multiply+0x8a>
 800948a:	3f01      	subs	r7, #1
 800948c:	e7a1      	b.n	80093d2 <__multiply+0x86>
 800948e:	bf00      	nop
 8009490:	0800aad8 	.word	0x0800aad8
 8009494:	0800aae9 	.word	0x0800aae9

08009498 <__pow5mult>:
 8009498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800949c:	4615      	mov	r5, r2
 800949e:	f012 0203 	ands.w	r2, r2, #3
 80094a2:	4606      	mov	r6, r0
 80094a4:	460f      	mov	r7, r1
 80094a6:	d007      	beq.n	80094b8 <__pow5mult+0x20>
 80094a8:	4c25      	ldr	r4, [pc, #148]	; (8009540 <__pow5mult+0xa8>)
 80094aa:	3a01      	subs	r2, #1
 80094ac:	2300      	movs	r3, #0
 80094ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094b2:	f7ff fe9b 	bl	80091ec <__multadd>
 80094b6:	4607      	mov	r7, r0
 80094b8:	10ad      	asrs	r5, r5, #2
 80094ba:	d03d      	beq.n	8009538 <__pow5mult+0xa0>
 80094bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094be:	b97c      	cbnz	r4, 80094e0 <__pow5mult+0x48>
 80094c0:	2010      	movs	r0, #16
 80094c2:	f7ff fe1b 	bl	80090fc <malloc>
 80094c6:	4602      	mov	r2, r0
 80094c8:	6270      	str	r0, [r6, #36]	; 0x24
 80094ca:	b928      	cbnz	r0, 80094d8 <__pow5mult+0x40>
 80094cc:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <__pow5mult+0xac>)
 80094ce:	481e      	ldr	r0, [pc, #120]	; (8009548 <__pow5mult+0xb0>)
 80094d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80094d4:	f000 fbcc 	bl	8009c70 <__assert_func>
 80094d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094dc:	6004      	str	r4, [r0, #0]
 80094de:	60c4      	str	r4, [r0, #12]
 80094e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094e8:	b94c      	cbnz	r4, 80094fe <__pow5mult+0x66>
 80094ea:	f240 2171 	movw	r1, #625	; 0x271
 80094ee:	4630      	mov	r0, r6
 80094f0:	f7ff ff16 	bl	8009320 <__i2b>
 80094f4:	2300      	movs	r3, #0
 80094f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094fa:	4604      	mov	r4, r0
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	f04f 0900 	mov.w	r9, #0
 8009502:	07eb      	lsls	r3, r5, #31
 8009504:	d50a      	bpl.n	800951c <__pow5mult+0x84>
 8009506:	4639      	mov	r1, r7
 8009508:	4622      	mov	r2, r4
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ff1e 	bl	800934c <__multiply>
 8009510:	4639      	mov	r1, r7
 8009512:	4680      	mov	r8, r0
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff fe47 	bl	80091a8 <_Bfree>
 800951a:	4647      	mov	r7, r8
 800951c:	106d      	asrs	r5, r5, #1
 800951e:	d00b      	beq.n	8009538 <__pow5mult+0xa0>
 8009520:	6820      	ldr	r0, [r4, #0]
 8009522:	b938      	cbnz	r0, 8009534 <__pow5mult+0x9c>
 8009524:	4622      	mov	r2, r4
 8009526:	4621      	mov	r1, r4
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff ff0f 	bl	800934c <__multiply>
 800952e:	6020      	str	r0, [r4, #0]
 8009530:	f8c0 9000 	str.w	r9, [r0]
 8009534:	4604      	mov	r4, r0
 8009536:	e7e4      	b.n	8009502 <__pow5mult+0x6a>
 8009538:	4638      	mov	r0, r7
 800953a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800953e:	bf00      	nop
 8009540:	0800ac40 	.word	0x0800ac40
 8009544:	0800aa62 	.word	0x0800aa62
 8009548:	0800aae9 	.word	0x0800aae9

0800954c <__lshift>:
 800954c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	6849      	ldr	r1, [r1, #4]
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800955a:	68a3      	ldr	r3, [r4, #8]
 800955c:	4607      	mov	r7, r0
 800955e:	4691      	mov	r9, r2
 8009560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009564:	f108 0601 	add.w	r6, r8, #1
 8009568:	42b3      	cmp	r3, r6
 800956a:	db0b      	blt.n	8009584 <__lshift+0x38>
 800956c:	4638      	mov	r0, r7
 800956e:	f7ff fddb 	bl	8009128 <_Balloc>
 8009572:	4605      	mov	r5, r0
 8009574:	b948      	cbnz	r0, 800958a <__lshift+0x3e>
 8009576:	4602      	mov	r2, r0
 8009578:	4b28      	ldr	r3, [pc, #160]	; (800961c <__lshift+0xd0>)
 800957a:	4829      	ldr	r0, [pc, #164]	; (8009620 <__lshift+0xd4>)
 800957c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009580:	f000 fb76 	bl	8009c70 <__assert_func>
 8009584:	3101      	adds	r1, #1
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	e7ee      	b.n	8009568 <__lshift+0x1c>
 800958a:	2300      	movs	r3, #0
 800958c:	f100 0114 	add.w	r1, r0, #20
 8009590:	f100 0210 	add.w	r2, r0, #16
 8009594:	4618      	mov	r0, r3
 8009596:	4553      	cmp	r3, sl
 8009598:	db33      	blt.n	8009602 <__lshift+0xb6>
 800959a:	6920      	ldr	r0, [r4, #16]
 800959c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095a0:	f104 0314 	add.w	r3, r4, #20
 80095a4:	f019 091f 	ands.w	r9, r9, #31
 80095a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095b0:	d02b      	beq.n	800960a <__lshift+0xbe>
 80095b2:	f1c9 0e20 	rsb	lr, r9, #32
 80095b6:	468a      	mov	sl, r1
 80095b8:	2200      	movs	r2, #0
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	fa00 f009 	lsl.w	r0, r0, r9
 80095c0:	4302      	orrs	r2, r0
 80095c2:	f84a 2b04 	str.w	r2, [sl], #4
 80095c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ca:	459c      	cmp	ip, r3
 80095cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80095d0:	d8f3      	bhi.n	80095ba <__lshift+0x6e>
 80095d2:	ebac 0304 	sub.w	r3, ip, r4
 80095d6:	3b15      	subs	r3, #21
 80095d8:	f023 0303 	bic.w	r3, r3, #3
 80095dc:	3304      	adds	r3, #4
 80095de:	f104 0015 	add.w	r0, r4, #21
 80095e2:	4584      	cmp	ip, r0
 80095e4:	bf38      	it	cc
 80095e6:	2304      	movcc	r3, #4
 80095e8:	50ca      	str	r2, [r1, r3]
 80095ea:	b10a      	cbz	r2, 80095f0 <__lshift+0xa4>
 80095ec:	f108 0602 	add.w	r6, r8, #2
 80095f0:	3e01      	subs	r6, #1
 80095f2:	4638      	mov	r0, r7
 80095f4:	612e      	str	r6, [r5, #16]
 80095f6:	4621      	mov	r1, r4
 80095f8:	f7ff fdd6 	bl	80091a8 <_Bfree>
 80095fc:	4628      	mov	r0, r5
 80095fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009602:	f842 0f04 	str.w	r0, [r2, #4]!
 8009606:	3301      	adds	r3, #1
 8009608:	e7c5      	b.n	8009596 <__lshift+0x4a>
 800960a:	3904      	subs	r1, #4
 800960c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009610:	f841 2f04 	str.w	r2, [r1, #4]!
 8009614:	459c      	cmp	ip, r3
 8009616:	d8f9      	bhi.n	800960c <__lshift+0xc0>
 8009618:	e7ea      	b.n	80095f0 <__lshift+0xa4>
 800961a:	bf00      	nop
 800961c:	0800aad8 	.word	0x0800aad8
 8009620:	0800aae9 	.word	0x0800aae9

08009624 <__mcmp>:
 8009624:	b530      	push	{r4, r5, lr}
 8009626:	6902      	ldr	r2, [r0, #16]
 8009628:	690c      	ldr	r4, [r1, #16]
 800962a:	1b12      	subs	r2, r2, r4
 800962c:	d10e      	bne.n	800964c <__mcmp+0x28>
 800962e:	f100 0314 	add.w	r3, r0, #20
 8009632:	3114      	adds	r1, #20
 8009634:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009638:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800963c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009640:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009644:	42a5      	cmp	r5, r4
 8009646:	d003      	beq.n	8009650 <__mcmp+0x2c>
 8009648:	d305      	bcc.n	8009656 <__mcmp+0x32>
 800964a:	2201      	movs	r2, #1
 800964c:	4610      	mov	r0, r2
 800964e:	bd30      	pop	{r4, r5, pc}
 8009650:	4283      	cmp	r3, r0
 8009652:	d3f3      	bcc.n	800963c <__mcmp+0x18>
 8009654:	e7fa      	b.n	800964c <__mcmp+0x28>
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	e7f7      	b.n	800964c <__mcmp+0x28>

0800965c <__mdiff>:
 800965c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	460c      	mov	r4, r1
 8009662:	4606      	mov	r6, r0
 8009664:	4611      	mov	r1, r2
 8009666:	4620      	mov	r0, r4
 8009668:	4617      	mov	r7, r2
 800966a:	f7ff ffdb 	bl	8009624 <__mcmp>
 800966e:	1e05      	subs	r5, r0, #0
 8009670:	d110      	bne.n	8009694 <__mdiff+0x38>
 8009672:	4629      	mov	r1, r5
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff fd57 	bl	8009128 <_Balloc>
 800967a:	b930      	cbnz	r0, 800968a <__mdiff+0x2e>
 800967c:	4b39      	ldr	r3, [pc, #228]	; (8009764 <__mdiff+0x108>)
 800967e:	4602      	mov	r2, r0
 8009680:	f240 2132 	movw	r1, #562	; 0x232
 8009684:	4838      	ldr	r0, [pc, #224]	; (8009768 <__mdiff+0x10c>)
 8009686:	f000 faf3 	bl	8009c70 <__assert_func>
 800968a:	2301      	movs	r3, #1
 800968c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009694:	bfa4      	itt	ge
 8009696:	463b      	movge	r3, r7
 8009698:	4627      	movge	r7, r4
 800969a:	4630      	mov	r0, r6
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	bfa6      	itte	ge
 80096a0:	461c      	movge	r4, r3
 80096a2:	2500      	movge	r5, #0
 80096a4:	2501      	movlt	r5, #1
 80096a6:	f7ff fd3f 	bl	8009128 <_Balloc>
 80096aa:	b920      	cbnz	r0, 80096b6 <__mdiff+0x5a>
 80096ac:	4b2d      	ldr	r3, [pc, #180]	; (8009764 <__mdiff+0x108>)
 80096ae:	4602      	mov	r2, r0
 80096b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096b4:	e7e6      	b.n	8009684 <__mdiff+0x28>
 80096b6:	693e      	ldr	r6, [r7, #16]
 80096b8:	60c5      	str	r5, [r0, #12]
 80096ba:	6925      	ldr	r5, [r4, #16]
 80096bc:	f107 0114 	add.w	r1, r7, #20
 80096c0:	f104 0914 	add.w	r9, r4, #20
 80096c4:	f100 0e14 	add.w	lr, r0, #20
 80096c8:	f107 0210 	add.w	r2, r7, #16
 80096cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80096d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80096d4:	46f2      	mov	sl, lr
 80096d6:	2700      	movs	r7, #0
 80096d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80096dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096e0:	fa1f f883 	uxth.w	r8, r3
 80096e4:	fa17 f78b 	uxtah	r7, r7, fp
 80096e8:	0c1b      	lsrs	r3, r3, #16
 80096ea:	eba7 0808 	sub.w	r8, r7, r8
 80096ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096f6:	fa1f f888 	uxth.w	r8, r8
 80096fa:	141f      	asrs	r7, r3, #16
 80096fc:	454d      	cmp	r5, r9
 80096fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009702:	f84a 3b04 	str.w	r3, [sl], #4
 8009706:	d8e7      	bhi.n	80096d8 <__mdiff+0x7c>
 8009708:	1b2b      	subs	r3, r5, r4
 800970a:	3b15      	subs	r3, #21
 800970c:	f023 0303 	bic.w	r3, r3, #3
 8009710:	3304      	adds	r3, #4
 8009712:	3415      	adds	r4, #21
 8009714:	42a5      	cmp	r5, r4
 8009716:	bf38      	it	cc
 8009718:	2304      	movcc	r3, #4
 800971a:	4419      	add	r1, r3
 800971c:	4473      	add	r3, lr
 800971e:	469e      	mov	lr, r3
 8009720:	460d      	mov	r5, r1
 8009722:	4565      	cmp	r5, ip
 8009724:	d30e      	bcc.n	8009744 <__mdiff+0xe8>
 8009726:	f10c 0203 	add.w	r2, ip, #3
 800972a:	1a52      	subs	r2, r2, r1
 800972c:	f022 0203 	bic.w	r2, r2, #3
 8009730:	3903      	subs	r1, #3
 8009732:	458c      	cmp	ip, r1
 8009734:	bf38      	it	cc
 8009736:	2200      	movcc	r2, #0
 8009738:	441a      	add	r2, r3
 800973a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800973e:	b17b      	cbz	r3, 8009760 <__mdiff+0x104>
 8009740:	6106      	str	r6, [r0, #16]
 8009742:	e7a5      	b.n	8009690 <__mdiff+0x34>
 8009744:	f855 8b04 	ldr.w	r8, [r5], #4
 8009748:	fa17 f488 	uxtah	r4, r7, r8
 800974c:	1422      	asrs	r2, r4, #16
 800974e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009752:	b2a4      	uxth	r4, r4
 8009754:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009758:	f84e 4b04 	str.w	r4, [lr], #4
 800975c:	1417      	asrs	r7, r2, #16
 800975e:	e7e0      	b.n	8009722 <__mdiff+0xc6>
 8009760:	3e01      	subs	r6, #1
 8009762:	e7ea      	b.n	800973a <__mdiff+0xde>
 8009764:	0800aad8 	.word	0x0800aad8
 8009768:	0800aae9 	.word	0x0800aae9

0800976c <__d2b>:
 800976c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009770:	4689      	mov	r9, r1
 8009772:	2101      	movs	r1, #1
 8009774:	ec57 6b10 	vmov	r6, r7, d0
 8009778:	4690      	mov	r8, r2
 800977a:	f7ff fcd5 	bl	8009128 <_Balloc>
 800977e:	4604      	mov	r4, r0
 8009780:	b930      	cbnz	r0, 8009790 <__d2b+0x24>
 8009782:	4602      	mov	r2, r0
 8009784:	4b25      	ldr	r3, [pc, #148]	; (800981c <__d2b+0xb0>)
 8009786:	4826      	ldr	r0, [pc, #152]	; (8009820 <__d2b+0xb4>)
 8009788:	f240 310a 	movw	r1, #778	; 0x30a
 800978c:	f000 fa70 	bl	8009c70 <__assert_func>
 8009790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009798:	bb35      	cbnz	r5, 80097e8 <__d2b+0x7c>
 800979a:	2e00      	cmp	r6, #0
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	d028      	beq.n	80097f2 <__d2b+0x86>
 80097a0:	4668      	mov	r0, sp
 80097a2:	9600      	str	r6, [sp, #0]
 80097a4:	f7ff fd8c 	bl	80092c0 <__lo0bits>
 80097a8:	9900      	ldr	r1, [sp, #0]
 80097aa:	b300      	cbz	r0, 80097ee <__d2b+0x82>
 80097ac:	9a01      	ldr	r2, [sp, #4]
 80097ae:	f1c0 0320 	rsb	r3, r0, #32
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	430b      	orrs	r3, r1
 80097b8:	40c2      	lsrs	r2, r0
 80097ba:	6163      	str	r3, [r4, #20]
 80097bc:	9201      	str	r2, [sp, #4]
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	61a3      	str	r3, [r4, #24]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bf14      	ite	ne
 80097c6:	2202      	movne	r2, #2
 80097c8:	2201      	moveq	r2, #1
 80097ca:	6122      	str	r2, [r4, #16]
 80097cc:	b1d5      	cbz	r5, 8009804 <__d2b+0x98>
 80097ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097d2:	4405      	add	r5, r0
 80097d4:	f8c9 5000 	str.w	r5, [r9]
 80097d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097dc:	f8c8 0000 	str.w	r0, [r8]
 80097e0:	4620      	mov	r0, r4
 80097e2:	b003      	add	sp, #12
 80097e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ec:	e7d5      	b.n	800979a <__d2b+0x2e>
 80097ee:	6161      	str	r1, [r4, #20]
 80097f0:	e7e5      	b.n	80097be <__d2b+0x52>
 80097f2:	a801      	add	r0, sp, #4
 80097f4:	f7ff fd64 	bl	80092c0 <__lo0bits>
 80097f8:	9b01      	ldr	r3, [sp, #4]
 80097fa:	6163      	str	r3, [r4, #20]
 80097fc:	2201      	movs	r2, #1
 80097fe:	6122      	str	r2, [r4, #16]
 8009800:	3020      	adds	r0, #32
 8009802:	e7e3      	b.n	80097cc <__d2b+0x60>
 8009804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800980c:	f8c9 0000 	str.w	r0, [r9]
 8009810:	6918      	ldr	r0, [r3, #16]
 8009812:	f7ff fd35 	bl	8009280 <__hi0bits>
 8009816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800981a:	e7df      	b.n	80097dc <__d2b+0x70>
 800981c:	0800aad8 	.word	0x0800aad8
 8009820:	0800aae9 	.word	0x0800aae9

08009824 <_calloc_r>:
 8009824:	b513      	push	{r0, r1, r4, lr}
 8009826:	434a      	muls	r2, r1
 8009828:	4611      	mov	r1, r2
 800982a:	9201      	str	r2, [sp, #4]
 800982c:	f000 f85a 	bl	80098e4 <_malloc_r>
 8009830:	4604      	mov	r4, r0
 8009832:	b118      	cbz	r0, 800983c <_calloc_r+0x18>
 8009834:	9a01      	ldr	r2, [sp, #4]
 8009836:	2100      	movs	r1, #0
 8009838:	f7fe f940 	bl	8007abc <memset>
 800983c:	4620      	mov	r0, r4
 800983e:	b002      	add	sp, #8
 8009840:	bd10      	pop	{r4, pc}
	...

08009844 <_free_r>:
 8009844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009846:	2900      	cmp	r1, #0
 8009848:	d048      	beq.n	80098dc <_free_r+0x98>
 800984a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800984e:	9001      	str	r0, [sp, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f1a1 0404 	sub.w	r4, r1, #4
 8009856:	bfb8      	it	lt
 8009858:	18e4      	addlt	r4, r4, r3
 800985a:	f000 fa65 	bl	8009d28 <__malloc_lock>
 800985e:	4a20      	ldr	r2, [pc, #128]	; (80098e0 <_free_r+0x9c>)
 8009860:	9801      	ldr	r0, [sp, #4]
 8009862:	6813      	ldr	r3, [r2, #0]
 8009864:	4615      	mov	r5, r2
 8009866:	b933      	cbnz	r3, 8009876 <_free_r+0x32>
 8009868:	6063      	str	r3, [r4, #4]
 800986a:	6014      	str	r4, [r2, #0]
 800986c:	b003      	add	sp, #12
 800986e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009872:	f000 ba5f 	b.w	8009d34 <__malloc_unlock>
 8009876:	42a3      	cmp	r3, r4
 8009878:	d90b      	bls.n	8009892 <_free_r+0x4e>
 800987a:	6821      	ldr	r1, [r4, #0]
 800987c:	1862      	adds	r2, r4, r1
 800987e:	4293      	cmp	r3, r2
 8009880:	bf04      	itt	eq
 8009882:	681a      	ldreq	r2, [r3, #0]
 8009884:	685b      	ldreq	r3, [r3, #4]
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	bf04      	itt	eq
 800988a:	1852      	addeq	r2, r2, r1
 800988c:	6022      	streq	r2, [r4, #0]
 800988e:	602c      	str	r4, [r5, #0]
 8009890:	e7ec      	b.n	800986c <_free_r+0x28>
 8009892:	461a      	mov	r2, r3
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	b10b      	cbz	r3, 800989c <_free_r+0x58>
 8009898:	42a3      	cmp	r3, r4
 800989a:	d9fa      	bls.n	8009892 <_free_r+0x4e>
 800989c:	6811      	ldr	r1, [r2, #0]
 800989e:	1855      	adds	r5, r2, r1
 80098a0:	42a5      	cmp	r5, r4
 80098a2:	d10b      	bne.n	80098bc <_free_r+0x78>
 80098a4:	6824      	ldr	r4, [r4, #0]
 80098a6:	4421      	add	r1, r4
 80098a8:	1854      	adds	r4, r2, r1
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	6011      	str	r1, [r2, #0]
 80098ae:	d1dd      	bne.n	800986c <_free_r+0x28>
 80098b0:	681c      	ldr	r4, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	6053      	str	r3, [r2, #4]
 80098b6:	4421      	add	r1, r4
 80098b8:	6011      	str	r1, [r2, #0]
 80098ba:	e7d7      	b.n	800986c <_free_r+0x28>
 80098bc:	d902      	bls.n	80098c4 <_free_r+0x80>
 80098be:	230c      	movs	r3, #12
 80098c0:	6003      	str	r3, [r0, #0]
 80098c2:	e7d3      	b.n	800986c <_free_r+0x28>
 80098c4:	6825      	ldr	r5, [r4, #0]
 80098c6:	1961      	adds	r1, r4, r5
 80098c8:	428b      	cmp	r3, r1
 80098ca:	bf04      	itt	eq
 80098cc:	6819      	ldreq	r1, [r3, #0]
 80098ce:	685b      	ldreq	r3, [r3, #4]
 80098d0:	6063      	str	r3, [r4, #4]
 80098d2:	bf04      	itt	eq
 80098d4:	1949      	addeq	r1, r1, r5
 80098d6:	6021      	streq	r1, [r4, #0]
 80098d8:	6054      	str	r4, [r2, #4]
 80098da:	e7c7      	b.n	800986c <_free_r+0x28>
 80098dc:	b003      	add	sp, #12
 80098de:	bd30      	pop	{r4, r5, pc}
 80098e0:	20000220 	.word	0x20000220

080098e4 <_malloc_r>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	1ccd      	adds	r5, r1, #3
 80098e8:	f025 0503 	bic.w	r5, r5, #3
 80098ec:	3508      	adds	r5, #8
 80098ee:	2d0c      	cmp	r5, #12
 80098f0:	bf38      	it	cc
 80098f2:	250c      	movcc	r5, #12
 80098f4:	2d00      	cmp	r5, #0
 80098f6:	4606      	mov	r6, r0
 80098f8:	db01      	blt.n	80098fe <_malloc_r+0x1a>
 80098fa:	42a9      	cmp	r1, r5
 80098fc:	d903      	bls.n	8009906 <_malloc_r+0x22>
 80098fe:	230c      	movs	r3, #12
 8009900:	6033      	str	r3, [r6, #0]
 8009902:	2000      	movs	r0, #0
 8009904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009906:	f000 fa0f 	bl	8009d28 <__malloc_lock>
 800990a:	4921      	ldr	r1, [pc, #132]	; (8009990 <_malloc_r+0xac>)
 800990c:	680a      	ldr	r2, [r1, #0]
 800990e:	4614      	mov	r4, r2
 8009910:	b99c      	cbnz	r4, 800993a <_malloc_r+0x56>
 8009912:	4f20      	ldr	r7, [pc, #128]	; (8009994 <_malloc_r+0xb0>)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	b923      	cbnz	r3, 8009922 <_malloc_r+0x3e>
 8009918:	4621      	mov	r1, r4
 800991a:	4630      	mov	r0, r6
 800991c:	f000 f998 	bl	8009c50 <_sbrk_r>
 8009920:	6038      	str	r0, [r7, #0]
 8009922:	4629      	mov	r1, r5
 8009924:	4630      	mov	r0, r6
 8009926:	f000 f993 	bl	8009c50 <_sbrk_r>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d123      	bne.n	8009976 <_malloc_r+0x92>
 800992e:	230c      	movs	r3, #12
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f9fe 	bl	8009d34 <__malloc_unlock>
 8009938:	e7e3      	b.n	8009902 <_malloc_r+0x1e>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	1b5b      	subs	r3, r3, r5
 800993e:	d417      	bmi.n	8009970 <_malloc_r+0x8c>
 8009940:	2b0b      	cmp	r3, #11
 8009942:	d903      	bls.n	800994c <_malloc_r+0x68>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	441c      	add	r4, r3
 8009948:	6025      	str	r5, [r4, #0]
 800994a:	e004      	b.n	8009956 <_malloc_r+0x72>
 800994c:	6863      	ldr	r3, [r4, #4]
 800994e:	42a2      	cmp	r2, r4
 8009950:	bf0c      	ite	eq
 8009952:	600b      	streq	r3, [r1, #0]
 8009954:	6053      	strne	r3, [r2, #4]
 8009956:	4630      	mov	r0, r6
 8009958:	f000 f9ec 	bl	8009d34 <__malloc_unlock>
 800995c:	f104 000b 	add.w	r0, r4, #11
 8009960:	1d23      	adds	r3, r4, #4
 8009962:	f020 0007 	bic.w	r0, r0, #7
 8009966:	1ac2      	subs	r2, r0, r3
 8009968:	d0cc      	beq.n	8009904 <_malloc_r+0x20>
 800996a:	1a1b      	subs	r3, r3, r0
 800996c:	50a3      	str	r3, [r4, r2]
 800996e:	e7c9      	b.n	8009904 <_malloc_r+0x20>
 8009970:	4622      	mov	r2, r4
 8009972:	6864      	ldr	r4, [r4, #4]
 8009974:	e7cc      	b.n	8009910 <_malloc_r+0x2c>
 8009976:	1cc4      	adds	r4, r0, #3
 8009978:	f024 0403 	bic.w	r4, r4, #3
 800997c:	42a0      	cmp	r0, r4
 800997e:	d0e3      	beq.n	8009948 <_malloc_r+0x64>
 8009980:	1a21      	subs	r1, r4, r0
 8009982:	4630      	mov	r0, r6
 8009984:	f000 f964 	bl	8009c50 <_sbrk_r>
 8009988:	3001      	adds	r0, #1
 800998a:	d1dd      	bne.n	8009948 <_malloc_r+0x64>
 800998c:	e7cf      	b.n	800992e <_malloc_r+0x4a>
 800998e:	bf00      	nop
 8009990:	20000220 	.word	0x20000220
 8009994:	20000224 	.word	0x20000224

08009998 <__ssputs_r>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	688e      	ldr	r6, [r1, #8]
 800999e:	429e      	cmp	r6, r3
 80099a0:	4682      	mov	sl, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	4690      	mov	r8, r2
 80099a6:	461f      	mov	r7, r3
 80099a8:	d838      	bhi.n	8009a1c <__ssputs_r+0x84>
 80099aa:	898a      	ldrh	r2, [r1, #12]
 80099ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099b0:	d032      	beq.n	8009a18 <__ssputs_r+0x80>
 80099b2:	6825      	ldr	r5, [r4, #0]
 80099b4:	6909      	ldr	r1, [r1, #16]
 80099b6:	eba5 0901 	sub.w	r9, r5, r1
 80099ba:	6965      	ldr	r5, [r4, #20]
 80099bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099c4:	3301      	adds	r3, #1
 80099c6:	444b      	add	r3, r9
 80099c8:	106d      	asrs	r5, r5, #1
 80099ca:	429d      	cmp	r5, r3
 80099cc:	bf38      	it	cc
 80099ce:	461d      	movcc	r5, r3
 80099d0:	0553      	lsls	r3, r2, #21
 80099d2:	d531      	bpl.n	8009a38 <__ssputs_r+0xa0>
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7ff ff85 	bl	80098e4 <_malloc_r>
 80099da:	4606      	mov	r6, r0
 80099dc:	b950      	cbnz	r0, 80099f4 <__ssputs_r+0x5c>
 80099de:	230c      	movs	r3, #12
 80099e0:	f8ca 3000 	str.w	r3, [sl]
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295
 80099f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f4:	6921      	ldr	r1, [r4, #16]
 80099f6:	464a      	mov	r2, r9
 80099f8:	f7ff fb88 	bl	800910c <memcpy>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	6126      	str	r6, [r4, #16]
 8009a0a:	6165      	str	r5, [r4, #20]
 8009a0c:	444e      	add	r6, r9
 8009a0e:	eba5 0509 	sub.w	r5, r5, r9
 8009a12:	6026      	str	r6, [r4, #0]
 8009a14:	60a5      	str	r5, [r4, #8]
 8009a16:	463e      	mov	r6, r7
 8009a18:	42be      	cmp	r6, r7
 8009a1a:	d900      	bls.n	8009a1e <__ssputs_r+0x86>
 8009a1c:	463e      	mov	r6, r7
 8009a1e:	4632      	mov	r2, r6
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	4641      	mov	r1, r8
 8009a24:	f000 f966 	bl	8009cf4 <memmove>
 8009a28:	68a3      	ldr	r3, [r4, #8]
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	1b9b      	subs	r3, r3, r6
 8009a2e:	4432      	add	r2, r6
 8009a30:	60a3      	str	r3, [r4, #8]
 8009a32:	6022      	str	r2, [r4, #0]
 8009a34:	2000      	movs	r0, #0
 8009a36:	e7db      	b.n	80099f0 <__ssputs_r+0x58>
 8009a38:	462a      	mov	r2, r5
 8009a3a:	f000 f981 	bl	8009d40 <_realloc_r>
 8009a3e:	4606      	mov	r6, r0
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d1e1      	bne.n	8009a08 <__ssputs_r+0x70>
 8009a44:	6921      	ldr	r1, [r4, #16]
 8009a46:	4650      	mov	r0, sl
 8009a48:	f7ff fefc 	bl	8009844 <_free_r>
 8009a4c:	e7c7      	b.n	80099de <__ssputs_r+0x46>
	...

08009a50 <_svfiprintf_r>:
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	4698      	mov	r8, r3
 8009a56:	898b      	ldrh	r3, [r1, #12]
 8009a58:	061b      	lsls	r3, r3, #24
 8009a5a:	b09d      	sub	sp, #116	; 0x74
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	460d      	mov	r5, r1
 8009a60:	4614      	mov	r4, r2
 8009a62:	d50e      	bpl.n	8009a82 <_svfiprintf_r+0x32>
 8009a64:	690b      	ldr	r3, [r1, #16]
 8009a66:	b963      	cbnz	r3, 8009a82 <_svfiprintf_r+0x32>
 8009a68:	2140      	movs	r1, #64	; 0x40
 8009a6a:	f7ff ff3b 	bl	80098e4 <_malloc_r>
 8009a6e:	6028      	str	r0, [r5, #0]
 8009a70:	6128      	str	r0, [r5, #16]
 8009a72:	b920      	cbnz	r0, 8009a7e <_svfiprintf_r+0x2e>
 8009a74:	230c      	movs	r3, #12
 8009a76:	603b      	str	r3, [r7, #0]
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	e0d1      	b.n	8009c22 <_svfiprintf_r+0x1d2>
 8009a7e:	2340      	movs	r3, #64	; 0x40
 8009a80:	616b      	str	r3, [r5, #20]
 8009a82:	2300      	movs	r3, #0
 8009a84:	9309      	str	r3, [sp, #36]	; 0x24
 8009a86:	2320      	movs	r3, #32
 8009a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a90:	2330      	movs	r3, #48	; 0x30
 8009a92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c3c <_svfiprintf_r+0x1ec>
 8009a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a9a:	f04f 0901 	mov.w	r9, #1
 8009a9e:	4623      	mov	r3, r4
 8009aa0:	469a      	mov	sl, r3
 8009aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa6:	b10a      	cbz	r2, 8009aac <_svfiprintf_r+0x5c>
 8009aa8:	2a25      	cmp	r2, #37	; 0x25
 8009aaa:	d1f9      	bne.n	8009aa0 <_svfiprintf_r+0x50>
 8009aac:	ebba 0b04 	subs.w	fp, sl, r4
 8009ab0:	d00b      	beq.n	8009aca <_svfiprintf_r+0x7a>
 8009ab2:	465b      	mov	r3, fp
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f7ff ff6d 	bl	8009998 <__ssputs_r>
 8009abe:	3001      	adds	r0, #1
 8009ac0:	f000 80aa 	beq.w	8009c18 <_svfiprintf_r+0x1c8>
 8009ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ac6:	445a      	add	r2, fp
 8009ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8009aca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 80a2 	beq.w	8009c18 <_svfiprintf_r+0x1c8>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8009ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ade:	f10a 0a01 	add.w	sl, sl, #1
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	9307      	str	r3, [sp, #28]
 8009ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aea:	931a      	str	r3, [sp, #104]	; 0x68
 8009aec:	4654      	mov	r4, sl
 8009aee:	2205      	movs	r2, #5
 8009af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af4:	4851      	ldr	r0, [pc, #324]	; (8009c3c <_svfiprintf_r+0x1ec>)
 8009af6:	f7f6 fbab 	bl	8000250 <memchr>
 8009afa:	9a04      	ldr	r2, [sp, #16]
 8009afc:	b9d8      	cbnz	r0, 8009b36 <_svfiprintf_r+0xe6>
 8009afe:	06d0      	lsls	r0, r2, #27
 8009b00:	bf44      	itt	mi
 8009b02:	2320      	movmi	r3, #32
 8009b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b08:	0711      	lsls	r1, r2, #28
 8009b0a:	bf44      	itt	mi
 8009b0c:	232b      	movmi	r3, #43	; 0x2b
 8009b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b12:	f89a 3000 	ldrb.w	r3, [sl]
 8009b16:	2b2a      	cmp	r3, #42	; 0x2a
 8009b18:	d015      	beq.n	8009b46 <_svfiprintf_r+0xf6>
 8009b1a:	9a07      	ldr	r2, [sp, #28]
 8009b1c:	4654      	mov	r4, sl
 8009b1e:	2000      	movs	r0, #0
 8009b20:	f04f 0c0a 	mov.w	ip, #10
 8009b24:	4621      	mov	r1, r4
 8009b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b2a:	3b30      	subs	r3, #48	; 0x30
 8009b2c:	2b09      	cmp	r3, #9
 8009b2e:	d94e      	bls.n	8009bce <_svfiprintf_r+0x17e>
 8009b30:	b1b0      	cbz	r0, 8009b60 <_svfiprintf_r+0x110>
 8009b32:	9207      	str	r2, [sp, #28]
 8009b34:	e014      	b.n	8009b60 <_svfiprintf_r+0x110>
 8009b36:	eba0 0308 	sub.w	r3, r0, r8
 8009b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	46a2      	mov	sl, r4
 8009b44:	e7d2      	b.n	8009aec <_svfiprintf_r+0x9c>
 8009b46:	9b03      	ldr	r3, [sp, #12]
 8009b48:	1d19      	adds	r1, r3, #4
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	9103      	str	r1, [sp, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bfbb      	ittet	lt
 8009b52:	425b      	neglt	r3, r3
 8009b54:	f042 0202 	orrlt.w	r2, r2, #2
 8009b58:	9307      	strge	r3, [sp, #28]
 8009b5a:	9307      	strlt	r3, [sp, #28]
 8009b5c:	bfb8      	it	lt
 8009b5e:	9204      	strlt	r2, [sp, #16]
 8009b60:	7823      	ldrb	r3, [r4, #0]
 8009b62:	2b2e      	cmp	r3, #46	; 0x2e
 8009b64:	d10c      	bne.n	8009b80 <_svfiprintf_r+0x130>
 8009b66:	7863      	ldrb	r3, [r4, #1]
 8009b68:	2b2a      	cmp	r3, #42	; 0x2a
 8009b6a:	d135      	bne.n	8009bd8 <_svfiprintf_r+0x188>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	1d1a      	adds	r2, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9203      	str	r2, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfb8      	it	lt
 8009b78:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b7c:	3402      	adds	r4, #2
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c4c <_svfiprintf_r+0x1fc>
 8009b84:	7821      	ldrb	r1, [r4, #0]
 8009b86:	2203      	movs	r2, #3
 8009b88:	4650      	mov	r0, sl
 8009b8a:	f7f6 fb61 	bl	8000250 <memchr>
 8009b8e:	b140      	cbz	r0, 8009ba2 <_svfiprintf_r+0x152>
 8009b90:	2340      	movs	r3, #64	; 0x40
 8009b92:	eba0 000a 	sub.w	r0, r0, sl
 8009b96:	fa03 f000 	lsl.w	r0, r3, r0
 8009b9a:	9b04      	ldr	r3, [sp, #16]
 8009b9c:	4303      	orrs	r3, r0
 8009b9e:	3401      	adds	r4, #1
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba6:	4826      	ldr	r0, [pc, #152]	; (8009c40 <_svfiprintf_r+0x1f0>)
 8009ba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bac:	2206      	movs	r2, #6
 8009bae:	f7f6 fb4f 	bl	8000250 <memchr>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d038      	beq.n	8009c28 <_svfiprintf_r+0x1d8>
 8009bb6:	4b23      	ldr	r3, [pc, #140]	; (8009c44 <_svfiprintf_r+0x1f4>)
 8009bb8:	bb1b      	cbnz	r3, 8009c02 <_svfiprintf_r+0x1b2>
 8009bba:	9b03      	ldr	r3, [sp, #12]
 8009bbc:	3307      	adds	r3, #7
 8009bbe:	f023 0307 	bic.w	r3, r3, #7
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc8:	4433      	add	r3, r6
 8009bca:	9309      	str	r3, [sp, #36]	; 0x24
 8009bcc:	e767      	b.n	8009a9e <_svfiprintf_r+0x4e>
 8009bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	e7a5      	b.n	8009b24 <_svfiprintf_r+0xd4>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	3401      	adds	r4, #1
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	4619      	mov	r1, r3
 8009be0:	f04f 0c0a 	mov.w	ip, #10
 8009be4:	4620      	mov	r0, r4
 8009be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bea:	3a30      	subs	r2, #48	; 0x30
 8009bec:	2a09      	cmp	r2, #9
 8009bee:	d903      	bls.n	8009bf8 <_svfiprintf_r+0x1a8>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0c5      	beq.n	8009b80 <_svfiprintf_r+0x130>
 8009bf4:	9105      	str	r1, [sp, #20]
 8009bf6:	e7c3      	b.n	8009b80 <_svfiprintf_r+0x130>
 8009bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e7f0      	b.n	8009be4 <_svfiprintf_r+0x194>
 8009c02:	ab03      	add	r3, sp, #12
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	462a      	mov	r2, r5
 8009c08:	4b0f      	ldr	r3, [pc, #60]	; (8009c48 <_svfiprintf_r+0x1f8>)
 8009c0a:	a904      	add	r1, sp, #16
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f7fd ffef 	bl	8007bf0 <_printf_float>
 8009c12:	1c42      	adds	r2, r0, #1
 8009c14:	4606      	mov	r6, r0
 8009c16:	d1d6      	bne.n	8009bc6 <_svfiprintf_r+0x176>
 8009c18:	89ab      	ldrh	r3, [r5, #12]
 8009c1a:	065b      	lsls	r3, r3, #25
 8009c1c:	f53f af2c 	bmi.w	8009a78 <_svfiprintf_r+0x28>
 8009c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c22:	b01d      	add	sp, #116	; 0x74
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c28:	ab03      	add	r3, sp, #12
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <_svfiprintf_r+0x1f8>)
 8009c30:	a904      	add	r1, sp, #16
 8009c32:	4638      	mov	r0, r7
 8009c34:	f7fe fa68 	bl	8008108 <_printf_i>
 8009c38:	e7eb      	b.n	8009c12 <_svfiprintf_r+0x1c2>
 8009c3a:	bf00      	nop
 8009c3c:	0800ac4c 	.word	0x0800ac4c
 8009c40:	0800ac56 	.word	0x0800ac56
 8009c44:	08007bf1 	.word	0x08007bf1
 8009c48:	08009999 	.word	0x08009999
 8009c4c:	0800ac52 	.word	0x0800ac52

08009c50 <_sbrk_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d06      	ldr	r5, [pc, #24]	; (8009c6c <_sbrk_r+0x1c>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	f7f8 fb3c 	bl	80022d8 <_sbrk>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_sbrk_r+0x1a>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_sbrk_r+0x1a>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	20000930 	.word	0x20000930

08009c70 <__assert_func>:
 8009c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c72:	4614      	mov	r4, r2
 8009c74:	461a      	mov	r2, r3
 8009c76:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <__assert_func+0x2c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	68d8      	ldr	r0, [r3, #12]
 8009c7e:	b14c      	cbz	r4, 8009c94 <__assert_func+0x24>
 8009c80:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <__assert_func+0x30>)
 8009c82:	9100      	str	r1, [sp, #0]
 8009c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c88:	4906      	ldr	r1, [pc, #24]	; (8009ca4 <__assert_func+0x34>)
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	f000 f80e 	bl	8009cac <fiprintf>
 8009c90:	f000 faa4 	bl	800a1dc <abort>
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <__assert_func+0x38>)
 8009c96:	461c      	mov	r4, r3
 8009c98:	e7f3      	b.n	8009c82 <__assert_func+0x12>
 8009c9a:	bf00      	nop
 8009c9c:	20000024 	.word	0x20000024
 8009ca0:	0800ac5d 	.word	0x0800ac5d
 8009ca4:	0800ac6a 	.word	0x0800ac6a
 8009ca8:	0800ac98 	.word	0x0800ac98

08009cac <fiprintf>:
 8009cac:	b40e      	push	{r1, r2, r3}
 8009cae:	b503      	push	{r0, r1, lr}
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	ab03      	add	r3, sp, #12
 8009cb4:	4805      	ldr	r0, [pc, #20]	; (8009ccc <fiprintf+0x20>)
 8009cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cba:	6800      	ldr	r0, [r0, #0]
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	f000 f88f 	bl	8009de0 <_vfiprintf_r>
 8009cc2:	b002      	add	sp, #8
 8009cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc8:	b003      	add	sp, #12
 8009cca:	4770      	bx	lr
 8009ccc:	20000024 	.word	0x20000024

08009cd0 <__ascii_mbtowc>:
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	b901      	cbnz	r1, 8009cd6 <__ascii_mbtowc+0x6>
 8009cd4:	a901      	add	r1, sp, #4
 8009cd6:	b142      	cbz	r2, 8009cea <__ascii_mbtowc+0x1a>
 8009cd8:	b14b      	cbz	r3, 8009cee <__ascii_mbtowc+0x1e>
 8009cda:	7813      	ldrb	r3, [r2, #0]
 8009cdc:	600b      	str	r3, [r1, #0]
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	1e10      	subs	r0, r2, #0
 8009ce2:	bf18      	it	ne
 8009ce4:	2001      	movne	r0, #1
 8009ce6:	b002      	add	sp, #8
 8009ce8:	4770      	bx	lr
 8009cea:	4610      	mov	r0, r2
 8009cec:	e7fb      	b.n	8009ce6 <__ascii_mbtowc+0x16>
 8009cee:	f06f 0001 	mvn.w	r0, #1
 8009cf2:	e7f8      	b.n	8009ce6 <__ascii_mbtowc+0x16>

08009cf4 <memmove>:
 8009cf4:	4288      	cmp	r0, r1
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	eb01 0402 	add.w	r4, r1, r2
 8009cfc:	d902      	bls.n	8009d04 <memmove+0x10>
 8009cfe:	4284      	cmp	r4, r0
 8009d00:	4623      	mov	r3, r4
 8009d02:	d807      	bhi.n	8009d14 <memmove+0x20>
 8009d04:	1e43      	subs	r3, r0, #1
 8009d06:	42a1      	cmp	r1, r4
 8009d08:	d008      	beq.n	8009d1c <memmove+0x28>
 8009d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d12:	e7f8      	b.n	8009d06 <memmove+0x12>
 8009d14:	4402      	add	r2, r0
 8009d16:	4601      	mov	r1, r0
 8009d18:	428a      	cmp	r2, r1
 8009d1a:	d100      	bne.n	8009d1e <memmove+0x2a>
 8009d1c:	bd10      	pop	{r4, pc}
 8009d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d26:	e7f7      	b.n	8009d18 <memmove+0x24>

08009d28 <__malloc_lock>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__malloc_lock+0x8>)
 8009d2a:	f000 bc17 	b.w	800a55c <__retarget_lock_acquire_recursive>
 8009d2e:	bf00      	nop
 8009d30:	20000938 	.word	0x20000938

08009d34 <__malloc_unlock>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__malloc_unlock+0x8>)
 8009d36:	f000 bc12 	b.w	800a55e <__retarget_lock_release_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	20000938 	.word	0x20000938

08009d40 <_realloc_r>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	4607      	mov	r7, r0
 8009d44:	4614      	mov	r4, r2
 8009d46:	460e      	mov	r6, r1
 8009d48:	b921      	cbnz	r1, 8009d54 <_realloc_r+0x14>
 8009d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d4e:	4611      	mov	r1, r2
 8009d50:	f7ff bdc8 	b.w	80098e4 <_malloc_r>
 8009d54:	b922      	cbnz	r2, 8009d60 <_realloc_r+0x20>
 8009d56:	f7ff fd75 	bl	8009844 <_free_r>
 8009d5a:	4625      	mov	r5, r4
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d60:	f000 fc62 	bl	800a628 <_malloc_usable_size_r>
 8009d64:	42a0      	cmp	r0, r4
 8009d66:	d20f      	bcs.n	8009d88 <_realloc_r+0x48>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	f7ff fdba 	bl	80098e4 <_malloc_r>
 8009d70:	4605      	mov	r5, r0
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d0f2      	beq.n	8009d5c <_realloc_r+0x1c>
 8009d76:	4631      	mov	r1, r6
 8009d78:	4622      	mov	r2, r4
 8009d7a:	f7ff f9c7 	bl	800910c <memcpy>
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4638      	mov	r0, r7
 8009d82:	f7ff fd5f 	bl	8009844 <_free_r>
 8009d86:	e7e9      	b.n	8009d5c <_realloc_r+0x1c>
 8009d88:	4635      	mov	r5, r6
 8009d8a:	e7e7      	b.n	8009d5c <_realloc_r+0x1c>

08009d8c <__sfputc_r>:
 8009d8c:	6893      	ldr	r3, [r2, #8]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	b410      	push	{r4}
 8009d94:	6093      	str	r3, [r2, #8]
 8009d96:	da08      	bge.n	8009daa <__sfputc_r+0x1e>
 8009d98:	6994      	ldr	r4, [r2, #24]
 8009d9a:	42a3      	cmp	r3, r4
 8009d9c:	db01      	blt.n	8009da2 <__sfputc_r+0x16>
 8009d9e:	290a      	cmp	r1, #10
 8009da0:	d103      	bne.n	8009daa <__sfputc_r+0x1e>
 8009da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da6:	f000 b94b 	b.w	800a040 <__swbuf_r>
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	1c58      	adds	r0, r3, #1
 8009dae:	6010      	str	r0, [r2, #0]
 8009db0:	7019      	strb	r1, [r3, #0]
 8009db2:	4608      	mov	r0, r1
 8009db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <__sfputs_r>:
 8009dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	460f      	mov	r7, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	18d5      	adds	r5, r2, r3
 8009dc4:	42ac      	cmp	r4, r5
 8009dc6:	d101      	bne.n	8009dcc <__sfputs_r+0x12>
 8009dc8:	2000      	movs	r0, #0
 8009dca:	e007      	b.n	8009ddc <__sfputs_r+0x22>
 8009dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd0:	463a      	mov	r2, r7
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ffda 	bl	8009d8c <__sfputc_r>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d1f3      	bne.n	8009dc4 <__sfputs_r+0xa>
 8009ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009de0 <_vfiprintf_r>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	460d      	mov	r5, r1
 8009de6:	b09d      	sub	sp, #116	; 0x74
 8009de8:	4614      	mov	r4, r2
 8009dea:	4698      	mov	r8, r3
 8009dec:	4606      	mov	r6, r0
 8009dee:	b118      	cbz	r0, 8009df8 <_vfiprintf_r+0x18>
 8009df0:	6983      	ldr	r3, [r0, #24]
 8009df2:	b90b      	cbnz	r3, 8009df8 <_vfiprintf_r+0x18>
 8009df4:	f000 fb14 	bl	800a420 <__sinit>
 8009df8:	4b89      	ldr	r3, [pc, #548]	; (800a020 <_vfiprintf_r+0x240>)
 8009dfa:	429d      	cmp	r5, r3
 8009dfc:	d11b      	bne.n	8009e36 <_vfiprintf_r+0x56>
 8009dfe:	6875      	ldr	r5, [r6, #4]
 8009e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e02:	07d9      	lsls	r1, r3, #31
 8009e04:	d405      	bmi.n	8009e12 <_vfiprintf_r+0x32>
 8009e06:	89ab      	ldrh	r3, [r5, #12]
 8009e08:	059a      	lsls	r2, r3, #22
 8009e0a:	d402      	bmi.n	8009e12 <_vfiprintf_r+0x32>
 8009e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e0e:	f000 fba5 	bl	800a55c <__retarget_lock_acquire_recursive>
 8009e12:	89ab      	ldrh	r3, [r5, #12]
 8009e14:	071b      	lsls	r3, r3, #28
 8009e16:	d501      	bpl.n	8009e1c <_vfiprintf_r+0x3c>
 8009e18:	692b      	ldr	r3, [r5, #16]
 8009e1a:	b9eb      	cbnz	r3, 8009e58 <_vfiprintf_r+0x78>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f000 f96e 	bl	800a100 <__swsetup_r>
 8009e24:	b1c0      	cbz	r0, 8009e58 <_vfiprintf_r+0x78>
 8009e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e28:	07dc      	lsls	r4, r3, #31
 8009e2a:	d50e      	bpl.n	8009e4a <_vfiprintf_r+0x6a>
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e30:	b01d      	add	sp, #116	; 0x74
 8009e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e36:	4b7b      	ldr	r3, [pc, #492]	; (800a024 <_vfiprintf_r+0x244>)
 8009e38:	429d      	cmp	r5, r3
 8009e3a:	d101      	bne.n	8009e40 <_vfiprintf_r+0x60>
 8009e3c:	68b5      	ldr	r5, [r6, #8]
 8009e3e:	e7df      	b.n	8009e00 <_vfiprintf_r+0x20>
 8009e40:	4b79      	ldr	r3, [pc, #484]	; (800a028 <_vfiprintf_r+0x248>)
 8009e42:	429d      	cmp	r5, r3
 8009e44:	bf08      	it	eq
 8009e46:	68f5      	ldreq	r5, [r6, #12]
 8009e48:	e7da      	b.n	8009e00 <_vfiprintf_r+0x20>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	0598      	lsls	r0, r3, #22
 8009e4e:	d4ed      	bmi.n	8009e2c <_vfiprintf_r+0x4c>
 8009e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e52:	f000 fb84 	bl	800a55e <__retarget_lock_release_recursive>
 8009e56:	e7e9      	b.n	8009e2c <_vfiprintf_r+0x4c>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5c:	2320      	movs	r3, #32
 8009e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e66:	2330      	movs	r3, #48	; 0x30
 8009e68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a02c <_vfiprintf_r+0x24c>
 8009e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e70:	f04f 0901 	mov.w	r9, #1
 8009e74:	4623      	mov	r3, r4
 8009e76:	469a      	mov	sl, r3
 8009e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e7c:	b10a      	cbz	r2, 8009e82 <_vfiprintf_r+0xa2>
 8009e7e:	2a25      	cmp	r2, #37	; 0x25
 8009e80:	d1f9      	bne.n	8009e76 <_vfiprintf_r+0x96>
 8009e82:	ebba 0b04 	subs.w	fp, sl, r4
 8009e86:	d00b      	beq.n	8009ea0 <_vfiprintf_r+0xc0>
 8009e88:	465b      	mov	r3, fp
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7ff ff93 	bl	8009dba <__sfputs_r>
 8009e94:	3001      	adds	r0, #1
 8009e96:	f000 80aa 	beq.w	8009fee <_vfiprintf_r+0x20e>
 8009e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e9c:	445a      	add	r2, fp
 8009e9e:	9209      	str	r2, [sp, #36]	; 0x24
 8009ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 80a2 	beq.w	8009fee <_vfiprintf_r+0x20e>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eb4:	f10a 0a01 	add.w	sl, sl, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	9307      	str	r3, [sp, #28]
 8009ebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ec0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ec2:	4654      	mov	r4, sl
 8009ec4:	2205      	movs	r2, #5
 8009ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eca:	4858      	ldr	r0, [pc, #352]	; (800a02c <_vfiprintf_r+0x24c>)
 8009ecc:	f7f6 f9c0 	bl	8000250 <memchr>
 8009ed0:	9a04      	ldr	r2, [sp, #16]
 8009ed2:	b9d8      	cbnz	r0, 8009f0c <_vfiprintf_r+0x12c>
 8009ed4:	06d1      	lsls	r1, r2, #27
 8009ed6:	bf44      	itt	mi
 8009ed8:	2320      	movmi	r3, #32
 8009eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ede:	0713      	lsls	r3, r2, #28
 8009ee0:	bf44      	itt	mi
 8009ee2:	232b      	movmi	r3, #43	; 0x2b
 8009ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8009eec:	2b2a      	cmp	r3, #42	; 0x2a
 8009eee:	d015      	beq.n	8009f1c <_vfiprintf_r+0x13c>
 8009ef0:	9a07      	ldr	r2, [sp, #28]
 8009ef2:	4654      	mov	r4, sl
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	f04f 0c0a 	mov.w	ip, #10
 8009efa:	4621      	mov	r1, r4
 8009efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f00:	3b30      	subs	r3, #48	; 0x30
 8009f02:	2b09      	cmp	r3, #9
 8009f04:	d94e      	bls.n	8009fa4 <_vfiprintf_r+0x1c4>
 8009f06:	b1b0      	cbz	r0, 8009f36 <_vfiprintf_r+0x156>
 8009f08:	9207      	str	r2, [sp, #28]
 8009f0a:	e014      	b.n	8009f36 <_vfiprintf_r+0x156>
 8009f0c:	eba0 0308 	sub.w	r3, r0, r8
 8009f10:	fa09 f303 	lsl.w	r3, r9, r3
 8009f14:	4313      	orrs	r3, r2
 8009f16:	9304      	str	r3, [sp, #16]
 8009f18:	46a2      	mov	sl, r4
 8009f1a:	e7d2      	b.n	8009ec2 <_vfiprintf_r+0xe2>
 8009f1c:	9b03      	ldr	r3, [sp, #12]
 8009f1e:	1d19      	adds	r1, r3, #4
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	9103      	str	r1, [sp, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	bfbb      	ittet	lt
 8009f28:	425b      	neglt	r3, r3
 8009f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f2e:	9307      	strge	r3, [sp, #28]
 8009f30:	9307      	strlt	r3, [sp, #28]
 8009f32:	bfb8      	it	lt
 8009f34:	9204      	strlt	r2, [sp, #16]
 8009f36:	7823      	ldrb	r3, [r4, #0]
 8009f38:	2b2e      	cmp	r3, #46	; 0x2e
 8009f3a:	d10c      	bne.n	8009f56 <_vfiprintf_r+0x176>
 8009f3c:	7863      	ldrb	r3, [r4, #1]
 8009f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f40:	d135      	bne.n	8009fae <_vfiprintf_r+0x1ce>
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	1d1a      	adds	r2, r3, #4
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	9203      	str	r2, [sp, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	bfb8      	it	lt
 8009f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f52:	3402      	adds	r4, #2
 8009f54:	9305      	str	r3, [sp, #20]
 8009f56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a03c <_vfiprintf_r+0x25c>
 8009f5a:	7821      	ldrb	r1, [r4, #0]
 8009f5c:	2203      	movs	r2, #3
 8009f5e:	4650      	mov	r0, sl
 8009f60:	f7f6 f976 	bl	8000250 <memchr>
 8009f64:	b140      	cbz	r0, 8009f78 <_vfiprintf_r+0x198>
 8009f66:	2340      	movs	r3, #64	; 0x40
 8009f68:	eba0 000a 	sub.w	r0, r0, sl
 8009f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8009f70:	9b04      	ldr	r3, [sp, #16]
 8009f72:	4303      	orrs	r3, r0
 8009f74:	3401      	adds	r4, #1
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f7c:	482c      	ldr	r0, [pc, #176]	; (800a030 <_vfiprintf_r+0x250>)
 8009f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f82:	2206      	movs	r2, #6
 8009f84:	f7f6 f964 	bl	8000250 <memchr>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d03f      	beq.n	800a00c <_vfiprintf_r+0x22c>
 8009f8c:	4b29      	ldr	r3, [pc, #164]	; (800a034 <_vfiprintf_r+0x254>)
 8009f8e:	bb1b      	cbnz	r3, 8009fd8 <_vfiprintf_r+0x1f8>
 8009f90:	9b03      	ldr	r3, [sp, #12]
 8009f92:	3307      	adds	r3, #7
 8009f94:	f023 0307 	bic.w	r3, r3, #7
 8009f98:	3308      	adds	r3, #8
 8009f9a:	9303      	str	r3, [sp, #12]
 8009f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9e:	443b      	add	r3, r7
 8009fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa2:	e767      	b.n	8009e74 <_vfiprintf_r+0x94>
 8009fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fa8:	460c      	mov	r4, r1
 8009faa:	2001      	movs	r0, #1
 8009fac:	e7a5      	b.n	8009efa <_vfiprintf_r+0x11a>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	3401      	adds	r4, #1
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	f04f 0c0a 	mov.w	ip, #10
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fc0:	3a30      	subs	r2, #48	; 0x30
 8009fc2:	2a09      	cmp	r2, #9
 8009fc4:	d903      	bls.n	8009fce <_vfiprintf_r+0x1ee>
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0c5      	beq.n	8009f56 <_vfiprintf_r+0x176>
 8009fca:	9105      	str	r1, [sp, #20]
 8009fcc:	e7c3      	b.n	8009f56 <_vfiprintf_r+0x176>
 8009fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e7f0      	b.n	8009fba <_vfiprintf_r+0x1da>
 8009fd8:	ab03      	add	r3, sp, #12
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	462a      	mov	r2, r5
 8009fde:	4b16      	ldr	r3, [pc, #88]	; (800a038 <_vfiprintf_r+0x258>)
 8009fe0:	a904      	add	r1, sp, #16
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7fd fe04 	bl	8007bf0 <_printf_float>
 8009fe8:	4607      	mov	r7, r0
 8009fea:	1c78      	adds	r0, r7, #1
 8009fec:	d1d6      	bne.n	8009f9c <_vfiprintf_r+0x1bc>
 8009fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff0:	07d9      	lsls	r1, r3, #31
 8009ff2:	d405      	bmi.n	800a000 <_vfiprintf_r+0x220>
 8009ff4:	89ab      	ldrh	r3, [r5, #12]
 8009ff6:	059a      	lsls	r2, r3, #22
 8009ff8:	d402      	bmi.n	800a000 <_vfiprintf_r+0x220>
 8009ffa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffc:	f000 faaf 	bl	800a55e <__retarget_lock_release_recursive>
 800a000:	89ab      	ldrh	r3, [r5, #12]
 800a002:	065b      	lsls	r3, r3, #25
 800a004:	f53f af12 	bmi.w	8009e2c <_vfiprintf_r+0x4c>
 800a008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a00a:	e711      	b.n	8009e30 <_vfiprintf_r+0x50>
 800a00c:	ab03      	add	r3, sp, #12
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	462a      	mov	r2, r5
 800a012:	4b09      	ldr	r3, [pc, #36]	; (800a038 <_vfiprintf_r+0x258>)
 800a014:	a904      	add	r1, sp, #16
 800a016:	4630      	mov	r0, r6
 800a018:	f7fe f876 	bl	8008108 <_printf_i>
 800a01c:	e7e4      	b.n	8009fe8 <_vfiprintf_r+0x208>
 800a01e:	bf00      	nop
 800a020:	0800acc4 	.word	0x0800acc4
 800a024:	0800ace4 	.word	0x0800ace4
 800a028:	0800aca4 	.word	0x0800aca4
 800a02c:	0800ac4c 	.word	0x0800ac4c
 800a030:	0800ac56 	.word	0x0800ac56
 800a034:	08007bf1 	.word	0x08007bf1
 800a038:	08009dbb 	.word	0x08009dbb
 800a03c:	0800ac52 	.word	0x0800ac52

0800a040 <__swbuf_r>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	460e      	mov	r6, r1
 800a044:	4614      	mov	r4, r2
 800a046:	4605      	mov	r5, r0
 800a048:	b118      	cbz	r0, 800a052 <__swbuf_r+0x12>
 800a04a:	6983      	ldr	r3, [r0, #24]
 800a04c:	b90b      	cbnz	r3, 800a052 <__swbuf_r+0x12>
 800a04e:	f000 f9e7 	bl	800a420 <__sinit>
 800a052:	4b21      	ldr	r3, [pc, #132]	; (800a0d8 <__swbuf_r+0x98>)
 800a054:	429c      	cmp	r4, r3
 800a056:	d12b      	bne.n	800a0b0 <__swbuf_r+0x70>
 800a058:	686c      	ldr	r4, [r5, #4]
 800a05a:	69a3      	ldr	r3, [r4, #24]
 800a05c:	60a3      	str	r3, [r4, #8]
 800a05e:	89a3      	ldrh	r3, [r4, #12]
 800a060:	071a      	lsls	r2, r3, #28
 800a062:	d52f      	bpl.n	800a0c4 <__swbuf_r+0x84>
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b36b      	cbz	r3, 800a0c4 <__swbuf_r+0x84>
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	6820      	ldr	r0, [r4, #0]
 800a06c:	1ac0      	subs	r0, r0, r3
 800a06e:	6963      	ldr	r3, [r4, #20]
 800a070:	b2f6      	uxtb	r6, r6
 800a072:	4283      	cmp	r3, r0
 800a074:	4637      	mov	r7, r6
 800a076:	dc04      	bgt.n	800a082 <__swbuf_r+0x42>
 800a078:	4621      	mov	r1, r4
 800a07a:	4628      	mov	r0, r5
 800a07c:	f000 f93c 	bl	800a2f8 <_fflush_r>
 800a080:	bb30      	cbnz	r0, 800a0d0 <__swbuf_r+0x90>
 800a082:	68a3      	ldr	r3, [r4, #8]
 800a084:	3b01      	subs	r3, #1
 800a086:	60a3      	str	r3, [r4, #8]
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	6022      	str	r2, [r4, #0]
 800a08e:	701e      	strb	r6, [r3, #0]
 800a090:	6963      	ldr	r3, [r4, #20]
 800a092:	3001      	adds	r0, #1
 800a094:	4283      	cmp	r3, r0
 800a096:	d004      	beq.n	800a0a2 <__swbuf_r+0x62>
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	07db      	lsls	r3, r3, #31
 800a09c:	d506      	bpl.n	800a0ac <__swbuf_r+0x6c>
 800a09e:	2e0a      	cmp	r6, #10
 800a0a0:	d104      	bne.n	800a0ac <__swbuf_r+0x6c>
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f000 f927 	bl	800a2f8 <_fflush_r>
 800a0aa:	b988      	cbnz	r0, 800a0d0 <__swbuf_r+0x90>
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b0:	4b0a      	ldr	r3, [pc, #40]	; (800a0dc <__swbuf_r+0x9c>)
 800a0b2:	429c      	cmp	r4, r3
 800a0b4:	d101      	bne.n	800a0ba <__swbuf_r+0x7a>
 800a0b6:	68ac      	ldr	r4, [r5, #8]
 800a0b8:	e7cf      	b.n	800a05a <__swbuf_r+0x1a>
 800a0ba:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <__swbuf_r+0xa0>)
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	bf08      	it	eq
 800a0c0:	68ec      	ldreq	r4, [r5, #12]
 800a0c2:	e7ca      	b.n	800a05a <__swbuf_r+0x1a>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 f81a 	bl	800a100 <__swsetup_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d0cb      	beq.n	800a068 <__swbuf_r+0x28>
 800a0d0:	f04f 37ff 	mov.w	r7, #4294967295
 800a0d4:	e7ea      	b.n	800a0ac <__swbuf_r+0x6c>
 800a0d6:	bf00      	nop
 800a0d8:	0800acc4 	.word	0x0800acc4
 800a0dc:	0800ace4 	.word	0x0800ace4
 800a0e0:	0800aca4 	.word	0x0800aca4

0800a0e4 <__ascii_wctomb>:
 800a0e4:	b149      	cbz	r1, 800a0fa <__ascii_wctomb+0x16>
 800a0e6:	2aff      	cmp	r2, #255	; 0xff
 800a0e8:	bf85      	ittet	hi
 800a0ea:	238a      	movhi	r3, #138	; 0x8a
 800a0ec:	6003      	strhi	r3, [r0, #0]
 800a0ee:	700a      	strbls	r2, [r1, #0]
 800a0f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0f4:	bf98      	it	ls
 800a0f6:	2001      	movls	r0, #1
 800a0f8:	4770      	bx	lr
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4770      	bx	lr
	...

0800a100 <__swsetup_r>:
 800a100:	4b32      	ldr	r3, [pc, #200]	; (800a1cc <__swsetup_r+0xcc>)
 800a102:	b570      	push	{r4, r5, r6, lr}
 800a104:	681d      	ldr	r5, [r3, #0]
 800a106:	4606      	mov	r6, r0
 800a108:	460c      	mov	r4, r1
 800a10a:	b125      	cbz	r5, 800a116 <__swsetup_r+0x16>
 800a10c:	69ab      	ldr	r3, [r5, #24]
 800a10e:	b913      	cbnz	r3, 800a116 <__swsetup_r+0x16>
 800a110:	4628      	mov	r0, r5
 800a112:	f000 f985 	bl	800a420 <__sinit>
 800a116:	4b2e      	ldr	r3, [pc, #184]	; (800a1d0 <__swsetup_r+0xd0>)
 800a118:	429c      	cmp	r4, r3
 800a11a:	d10f      	bne.n	800a13c <__swsetup_r+0x3c>
 800a11c:	686c      	ldr	r4, [r5, #4]
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a124:	0719      	lsls	r1, r3, #28
 800a126:	d42c      	bmi.n	800a182 <__swsetup_r+0x82>
 800a128:	06dd      	lsls	r5, r3, #27
 800a12a:	d411      	bmi.n	800a150 <__swsetup_r+0x50>
 800a12c:	2309      	movs	r3, #9
 800a12e:	6033      	str	r3, [r6, #0]
 800a130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	f04f 30ff 	mov.w	r0, #4294967295
 800a13a:	e03e      	b.n	800a1ba <__swsetup_r+0xba>
 800a13c:	4b25      	ldr	r3, [pc, #148]	; (800a1d4 <__swsetup_r+0xd4>)
 800a13e:	429c      	cmp	r4, r3
 800a140:	d101      	bne.n	800a146 <__swsetup_r+0x46>
 800a142:	68ac      	ldr	r4, [r5, #8]
 800a144:	e7eb      	b.n	800a11e <__swsetup_r+0x1e>
 800a146:	4b24      	ldr	r3, [pc, #144]	; (800a1d8 <__swsetup_r+0xd8>)
 800a148:	429c      	cmp	r4, r3
 800a14a:	bf08      	it	eq
 800a14c:	68ec      	ldreq	r4, [r5, #12]
 800a14e:	e7e6      	b.n	800a11e <__swsetup_r+0x1e>
 800a150:	0758      	lsls	r0, r3, #29
 800a152:	d512      	bpl.n	800a17a <__swsetup_r+0x7a>
 800a154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a156:	b141      	cbz	r1, 800a16a <__swsetup_r+0x6a>
 800a158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a15c:	4299      	cmp	r1, r3
 800a15e:	d002      	beq.n	800a166 <__swsetup_r+0x66>
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff fb6f 	bl	8009844 <_free_r>
 800a166:	2300      	movs	r3, #0
 800a168:	6363      	str	r3, [r4, #52]	; 0x34
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	2300      	movs	r3, #0
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	f043 0308 	orr.w	r3, r3, #8
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	b94b      	cbnz	r3, 800a19a <__swsetup_r+0x9a>
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a18c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a190:	d003      	beq.n	800a19a <__swsetup_r+0x9a>
 800a192:	4621      	mov	r1, r4
 800a194:	4630      	mov	r0, r6
 800a196:	f000 fa07 	bl	800a5a8 <__smakebuf_r>
 800a19a:	89a0      	ldrh	r0, [r4, #12]
 800a19c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1a0:	f010 0301 	ands.w	r3, r0, #1
 800a1a4:	d00a      	beq.n	800a1bc <__swsetup_r+0xbc>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60a3      	str	r3, [r4, #8]
 800a1aa:	6963      	ldr	r3, [r4, #20]
 800a1ac:	425b      	negs	r3, r3
 800a1ae:	61a3      	str	r3, [r4, #24]
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	b943      	cbnz	r3, 800a1c6 <__swsetup_r+0xc6>
 800a1b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1b8:	d1ba      	bne.n	800a130 <__swsetup_r+0x30>
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	0781      	lsls	r1, r0, #30
 800a1be:	bf58      	it	pl
 800a1c0:	6963      	ldrpl	r3, [r4, #20]
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	e7f4      	b.n	800a1b0 <__swsetup_r+0xb0>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e7f7      	b.n	800a1ba <__swsetup_r+0xba>
 800a1ca:	bf00      	nop
 800a1cc:	20000024 	.word	0x20000024
 800a1d0:	0800acc4 	.word	0x0800acc4
 800a1d4:	0800ace4 	.word	0x0800ace4
 800a1d8:	0800aca4 	.word	0x0800aca4

0800a1dc <abort>:
 800a1dc:	b508      	push	{r3, lr}
 800a1de:	2006      	movs	r0, #6
 800a1e0:	f000 fa52 	bl	800a688 <raise>
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f7f7 ffff 	bl	80021e8 <_exit>
	...

0800a1ec <__sflush_r>:
 800a1ec:	898a      	ldrh	r2, [r1, #12]
 800a1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	0710      	lsls	r0, r2, #28
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	d458      	bmi.n	800a2ac <__sflush_r+0xc0>
 800a1fa:	684b      	ldr	r3, [r1, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dc05      	bgt.n	800a20c <__sflush_r+0x20>
 800a200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	dc02      	bgt.n	800a20c <__sflush_r+0x20>
 800a206:	2000      	movs	r0, #0
 800a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a20e:	2e00      	cmp	r6, #0
 800a210:	d0f9      	beq.n	800a206 <__sflush_r+0x1a>
 800a212:	2300      	movs	r3, #0
 800a214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a218:	682f      	ldr	r7, [r5, #0]
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	d032      	beq.n	800a284 <__sflush_r+0x98>
 800a21e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	075a      	lsls	r2, r3, #29
 800a224:	d505      	bpl.n	800a232 <__sflush_r+0x46>
 800a226:	6863      	ldr	r3, [r4, #4]
 800a228:	1ac0      	subs	r0, r0, r3
 800a22a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a22c:	b10b      	cbz	r3, 800a232 <__sflush_r+0x46>
 800a22e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a230:	1ac0      	subs	r0, r0, r3
 800a232:	2300      	movs	r3, #0
 800a234:	4602      	mov	r2, r0
 800a236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a238:	6a21      	ldr	r1, [r4, #32]
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b0      	blx	r6
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	d106      	bne.n	800a252 <__sflush_r+0x66>
 800a244:	6829      	ldr	r1, [r5, #0]
 800a246:	291d      	cmp	r1, #29
 800a248:	d82c      	bhi.n	800a2a4 <__sflush_r+0xb8>
 800a24a:	4a2a      	ldr	r2, [pc, #168]	; (800a2f4 <__sflush_r+0x108>)
 800a24c:	40ca      	lsrs	r2, r1
 800a24e:	07d6      	lsls	r6, r2, #31
 800a250:	d528      	bpl.n	800a2a4 <__sflush_r+0xb8>
 800a252:	2200      	movs	r2, #0
 800a254:	6062      	str	r2, [r4, #4]
 800a256:	04d9      	lsls	r1, r3, #19
 800a258:	6922      	ldr	r2, [r4, #16]
 800a25a:	6022      	str	r2, [r4, #0]
 800a25c:	d504      	bpl.n	800a268 <__sflush_r+0x7c>
 800a25e:	1c42      	adds	r2, r0, #1
 800a260:	d101      	bne.n	800a266 <__sflush_r+0x7a>
 800a262:	682b      	ldr	r3, [r5, #0]
 800a264:	b903      	cbnz	r3, 800a268 <__sflush_r+0x7c>
 800a266:	6560      	str	r0, [r4, #84]	; 0x54
 800a268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a26a:	602f      	str	r7, [r5, #0]
 800a26c:	2900      	cmp	r1, #0
 800a26e:	d0ca      	beq.n	800a206 <__sflush_r+0x1a>
 800a270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a274:	4299      	cmp	r1, r3
 800a276:	d002      	beq.n	800a27e <__sflush_r+0x92>
 800a278:	4628      	mov	r0, r5
 800a27a:	f7ff fae3 	bl	8009844 <_free_r>
 800a27e:	2000      	movs	r0, #0
 800a280:	6360      	str	r0, [r4, #52]	; 0x34
 800a282:	e7c1      	b.n	800a208 <__sflush_r+0x1c>
 800a284:	6a21      	ldr	r1, [r4, #32]
 800a286:	2301      	movs	r3, #1
 800a288:	4628      	mov	r0, r5
 800a28a:	47b0      	blx	r6
 800a28c:	1c41      	adds	r1, r0, #1
 800a28e:	d1c7      	bne.n	800a220 <__sflush_r+0x34>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0c4      	beq.n	800a220 <__sflush_r+0x34>
 800a296:	2b1d      	cmp	r3, #29
 800a298:	d001      	beq.n	800a29e <__sflush_r+0xb2>
 800a29a:	2b16      	cmp	r3, #22
 800a29c:	d101      	bne.n	800a2a2 <__sflush_r+0xb6>
 800a29e:	602f      	str	r7, [r5, #0]
 800a2a0:	e7b1      	b.n	800a206 <__sflush_r+0x1a>
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	e7ad      	b.n	800a208 <__sflush_r+0x1c>
 800a2ac:	690f      	ldr	r7, [r1, #16]
 800a2ae:	2f00      	cmp	r7, #0
 800a2b0:	d0a9      	beq.n	800a206 <__sflush_r+0x1a>
 800a2b2:	0793      	lsls	r3, r2, #30
 800a2b4:	680e      	ldr	r6, [r1, #0]
 800a2b6:	bf08      	it	eq
 800a2b8:	694b      	ldreq	r3, [r1, #20]
 800a2ba:	600f      	str	r7, [r1, #0]
 800a2bc:	bf18      	it	ne
 800a2be:	2300      	movne	r3, #0
 800a2c0:	eba6 0807 	sub.w	r8, r6, r7
 800a2c4:	608b      	str	r3, [r1, #8]
 800a2c6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ca:	dd9c      	ble.n	800a206 <__sflush_r+0x1a>
 800a2cc:	6a21      	ldr	r1, [r4, #32]
 800a2ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	463a      	mov	r2, r7
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b0      	blx	r6
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	dc06      	bgt.n	800a2ea <__sflush_r+0xfe>
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	e78e      	b.n	800a208 <__sflush_r+0x1c>
 800a2ea:	4407      	add	r7, r0
 800a2ec:	eba8 0800 	sub.w	r8, r8, r0
 800a2f0:	e7e9      	b.n	800a2c6 <__sflush_r+0xda>
 800a2f2:	bf00      	nop
 800a2f4:	20400001 	.word	0x20400001

0800a2f8 <_fflush_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	690b      	ldr	r3, [r1, #16]
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	b913      	cbnz	r3, 800a308 <_fflush_r+0x10>
 800a302:	2500      	movs	r5, #0
 800a304:	4628      	mov	r0, r5
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	b118      	cbz	r0, 800a312 <_fflush_r+0x1a>
 800a30a:	6983      	ldr	r3, [r0, #24]
 800a30c:	b90b      	cbnz	r3, 800a312 <_fflush_r+0x1a>
 800a30e:	f000 f887 	bl	800a420 <__sinit>
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <_fflush_r+0x6c>)
 800a314:	429c      	cmp	r4, r3
 800a316:	d11b      	bne.n	800a350 <_fflush_r+0x58>
 800a318:	686c      	ldr	r4, [r5, #4]
 800a31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0ef      	beq.n	800a302 <_fflush_r+0xa>
 800a322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a324:	07d0      	lsls	r0, r2, #31
 800a326:	d404      	bmi.n	800a332 <_fflush_r+0x3a>
 800a328:	0599      	lsls	r1, r3, #22
 800a32a:	d402      	bmi.n	800a332 <_fflush_r+0x3a>
 800a32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32e:	f000 f915 	bl	800a55c <__retarget_lock_acquire_recursive>
 800a332:	4628      	mov	r0, r5
 800a334:	4621      	mov	r1, r4
 800a336:	f7ff ff59 	bl	800a1ec <__sflush_r>
 800a33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a33c:	07da      	lsls	r2, r3, #31
 800a33e:	4605      	mov	r5, r0
 800a340:	d4e0      	bmi.n	800a304 <_fflush_r+0xc>
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	059b      	lsls	r3, r3, #22
 800a346:	d4dd      	bmi.n	800a304 <_fflush_r+0xc>
 800a348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a34a:	f000 f908 	bl	800a55e <__retarget_lock_release_recursive>
 800a34e:	e7d9      	b.n	800a304 <_fflush_r+0xc>
 800a350:	4b05      	ldr	r3, [pc, #20]	; (800a368 <_fflush_r+0x70>)
 800a352:	429c      	cmp	r4, r3
 800a354:	d101      	bne.n	800a35a <_fflush_r+0x62>
 800a356:	68ac      	ldr	r4, [r5, #8]
 800a358:	e7df      	b.n	800a31a <_fflush_r+0x22>
 800a35a:	4b04      	ldr	r3, [pc, #16]	; (800a36c <_fflush_r+0x74>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	bf08      	it	eq
 800a360:	68ec      	ldreq	r4, [r5, #12]
 800a362:	e7da      	b.n	800a31a <_fflush_r+0x22>
 800a364:	0800acc4 	.word	0x0800acc4
 800a368:	0800ace4 	.word	0x0800ace4
 800a36c:	0800aca4 	.word	0x0800aca4

0800a370 <std>:
 800a370:	2300      	movs	r3, #0
 800a372:	b510      	push	{r4, lr}
 800a374:	4604      	mov	r4, r0
 800a376:	e9c0 3300 	strd	r3, r3, [r0]
 800a37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37e:	6083      	str	r3, [r0, #8]
 800a380:	8181      	strh	r1, [r0, #12]
 800a382:	6643      	str	r3, [r0, #100]	; 0x64
 800a384:	81c2      	strh	r2, [r0, #14]
 800a386:	6183      	str	r3, [r0, #24]
 800a388:	4619      	mov	r1, r3
 800a38a:	2208      	movs	r2, #8
 800a38c:	305c      	adds	r0, #92	; 0x5c
 800a38e:	f7fd fb95 	bl	8007abc <memset>
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <std+0x38>)
 800a394:	6263      	str	r3, [r4, #36]	; 0x24
 800a396:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <std+0x3c>)
 800a398:	62a3      	str	r3, [r4, #40]	; 0x28
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <std+0x40>)
 800a39c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <std+0x44>)
 800a3a0:	6224      	str	r4, [r4, #32]
 800a3a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800a6c1 	.word	0x0800a6c1
 800a3ac:	0800a6e3 	.word	0x0800a6e3
 800a3b0:	0800a71b 	.word	0x0800a71b
 800a3b4:	0800a73f 	.word	0x0800a73f

0800a3b8 <_cleanup_r>:
 800a3b8:	4901      	ldr	r1, [pc, #4]	; (800a3c0 <_cleanup_r+0x8>)
 800a3ba:	f000 b8af 	b.w	800a51c <_fwalk_reent>
 800a3be:	bf00      	nop
 800a3c0:	0800a2f9 	.word	0x0800a2f9

0800a3c4 <__sfmoreglue>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	1e4a      	subs	r2, r1, #1
 800a3c8:	2568      	movs	r5, #104	; 0x68
 800a3ca:	4355      	muls	r5, r2
 800a3cc:	460e      	mov	r6, r1
 800a3ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3d2:	f7ff fa87 	bl	80098e4 <_malloc_r>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	b140      	cbz	r0, 800a3ec <__sfmoreglue+0x28>
 800a3da:	2100      	movs	r1, #0
 800a3dc:	e9c0 1600 	strd	r1, r6, [r0]
 800a3e0:	300c      	adds	r0, #12
 800a3e2:	60a0      	str	r0, [r4, #8]
 800a3e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3e8:	f7fd fb68 	bl	8007abc <memset>
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}

0800a3f0 <__sfp_lock_acquire>:
 800a3f0:	4801      	ldr	r0, [pc, #4]	; (800a3f8 <__sfp_lock_acquire+0x8>)
 800a3f2:	f000 b8b3 	b.w	800a55c <__retarget_lock_acquire_recursive>
 800a3f6:	bf00      	nop
 800a3f8:	2000093c 	.word	0x2000093c

0800a3fc <__sfp_lock_release>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	; (800a404 <__sfp_lock_release+0x8>)
 800a3fe:	f000 b8ae 	b.w	800a55e <__retarget_lock_release_recursive>
 800a402:	bf00      	nop
 800a404:	2000093c 	.word	0x2000093c

0800a408 <__sinit_lock_acquire>:
 800a408:	4801      	ldr	r0, [pc, #4]	; (800a410 <__sinit_lock_acquire+0x8>)
 800a40a:	f000 b8a7 	b.w	800a55c <__retarget_lock_acquire_recursive>
 800a40e:	bf00      	nop
 800a410:	20000937 	.word	0x20000937

0800a414 <__sinit_lock_release>:
 800a414:	4801      	ldr	r0, [pc, #4]	; (800a41c <__sinit_lock_release+0x8>)
 800a416:	f000 b8a2 	b.w	800a55e <__retarget_lock_release_recursive>
 800a41a:	bf00      	nop
 800a41c:	20000937 	.word	0x20000937

0800a420 <__sinit>:
 800a420:	b510      	push	{r4, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	f7ff fff0 	bl	800a408 <__sinit_lock_acquire>
 800a428:	69a3      	ldr	r3, [r4, #24]
 800a42a:	b11b      	cbz	r3, 800a434 <__sinit+0x14>
 800a42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a430:	f7ff bff0 	b.w	800a414 <__sinit_lock_release>
 800a434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a438:	6523      	str	r3, [r4, #80]	; 0x50
 800a43a:	4b13      	ldr	r3, [pc, #76]	; (800a488 <__sinit+0x68>)
 800a43c:	4a13      	ldr	r2, [pc, #76]	; (800a48c <__sinit+0x6c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	62a2      	str	r2, [r4, #40]	; 0x28
 800a442:	42a3      	cmp	r3, r4
 800a444:	bf04      	itt	eq
 800a446:	2301      	moveq	r3, #1
 800a448:	61a3      	streq	r3, [r4, #24]
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 f820 	bl	800a490 <__sfp>
 800a450:	6060      	str	r0, [r4, #4]
 800a452:	4620      	mov	r0, r4
 800a454:	f000 f81c 	bl	800a490 <__sfp>
 800a458:	60a0      	str	r0, [r4, #8]
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 f818 	bl	800a490 <__sfp>
 800a460:	2200      	movs	r2, #0
 800a462:	60e0      	str	r0, [r4, #12]
 800a464:	2104      	movs	r1, #4
 800a466:	6860      	ldr	r0, [r4, #4]
 800a468:	f7ff ff82 	bl	800a370 <std>
 800a46c:	68a0      	ldr	r0, [r4, #8]
 800a46e:	2201      	movs	r2, #1
 800a470:	2109      	movs	r1, #9
 800a472:	f7ff ff7d 	bl	800a370 <std>
 800a476:	68e0      	ldr	r0, [r4, #12]
 800a478:	2202      	movs	r2, #2
 800a47a:	2112      	movs	r1, #18
 800a47c:	f7ff ff78 	bl	800a370 <std>
 800a480:	2301      	movs	r3, #1
 800a482:	61a3      	str	r3, [r4, #24]
 800a484:	e7d2      	b.n	800a42c <__sinit+0xc>
 800a486:	bf00      	nop
 800a488:	0800a91c 	.word	0x0800a91c
 800a48c:	0800a3b9 	.word	0x0800a3b9

0800a490 <__sfp>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	4607      	mov	r7, r0
 800a494:	f7ff ffac 	bl	800a3f0 <__sfp_lock_acquire>
 800a498:	4b1e      	ldr	r3, [pc, #120]	; (800a514 <__sfp+0x84>)
 800a49a:	681e      	ldr	r6, [r3, #0]
 800a49c:	69b3      	ldr	r3, [r6, #24]
 800a49e:	b913      	cbnz	r3, 800a4a6 <__sfp+0x16>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7ff ffbd 	bl	800a420 <__sinit>
 800a4a6:	3648      	adds	r6, #72	; 0x48
 800a4a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	d503      	bpl.n	800a4b8 <__sfp+0x28>
 800a4b0:	6833      	ldr	r3, [r6, #0]
 800a4b2:	b30b      	cbz	r3, 800a4f8 <__sfp+0x68>
 800a4b4:	6836      	ldr	r6, [r6, #0]
 800a4b6:	e7f7      	b.n	800a4a8 <__sfp+0x18>
 800a4b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4bc:	b9d5      	cbnz	r5, 800a4f4 <__sfp+0x64>
 800a4be:	4b16      	ldr	r3, [pc, #88]	; (800a518 <__sfp+0x88>)
 800a4c0:	60e3      	str	r3, [r4, #12]
 800a4c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4c6:	6665      	str	r5, [r4, #100]	; 0x64
 800a4c8:	f000 f847 	bl	800a55a <__retarget_lock_init_recursive>
 800a4cc:	f7ff ff96 	bl	800a3fc <__sfp_lock_release>
 800a4d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4d8:	6025      	str	r5, [r4, #0]
 800a4da:	61a5      	str	r5, [r4, #24]
 800a4dc:	2208      	movs	r2, #8
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4e4:	f7fd faea 	bl	8007abc <memset>
 800a4e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	3468      	adds	r4, #104	; 0x68
 800a4f6:	e7d9      	b.n	800a4ac <__sfp+0x1c>
 800a4f8:	2104      	movs	r1, #4
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	f7ff ff62 	bl	800a3c4 <__sfmoreglue>
 800a500:	4604      	mov	r4, r0
 800a502:	6030      	str	r0, [r6, #0]
 800a504:	2800      	cmp	r0, #0
 800a506:	d1d5      	bne.n	800a4b4 <__sfp+0x24>
 800a508:	f7ff ff78 	bl	800a3fc <__sfp_lock_release>
 800a50c:	230c      	movs	r3, #12
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	e7ee      	b.n	800a4f0 <__sfp+0x60>
 800a512:	bf00      	nop
 800a514:	0800a91c 	.word	0x0800a91c
 800a518:	ffff0001 	.word	0xffff0001

0800a51c <_fwalk_reent>:
 800a51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a520:	4606      	mov	r6, r0
 800a522:	4688      	mov	r8, r1
 800a524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a528:	2700      	movs	r7, #0
 800a52a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a52e:	f1b9 0901 	subs.w	r9, r9, #1
 800a532:	d505      	bpl.n	800a540 <_fwalk_reent+0x24>
 800a534:	6824      	ldr	r4, [r4, #0]
 800a536:	2c00      	cmp	r4, #0
 800a538:	d1f7      	bne.n	800a52a <_fwalk_reent+0xe>
 800a53a:	4638      	mov	r0, r7
 800a53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a540:	89ab      	ldrh	r3, [r5, #12]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d907      	bls.n	800a556 <_fwalk_reent+0x3a>
 800a546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a54a:	3301      	adds	r3, #1
 800a54c:	d003      	beq.n	800a556 <_fwalk_reent+0x3a>
 800a54e:	4629      	mov	r1, r5
 800a550:	4630      	mov	r0, r6
 800a552:	47c0      	blx	r8
 800a554:	4307      	orrs	r7, r0
 800a556:	3568      	adds	r5, #104	; 0x68
 800a558:	e7e9      	b.n	800a52e <_fwalk_reent+0x12>

0800a55a <__retarget_lock_init_recursive>:
 800a55a:	4770      	bx	lr

0800a55c <__retarget_lock_acquire_recursive>:
 800a55c:	4770      	bx	lr

0800a55e <__retarget_lock_release_recursive>:
 800a55e:	4770      	bx	lr

0800a560 <__swhatbuf_r>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	460e      	mov	r6, r1
 800a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a568:	2900      	cmp	r1, #0
 800a56a:	b096      	sub	sp, #88	; 0x58
 800a56c:	4614      	mov	r4, r2
 800a56e:	461d      	mov	r5, r3
 800a570:	da07      	bge.n	800a582 <__swhatbuf_r+0x22>
 800a572:	2300      	movs	r3, #0
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	89b3      	ldrh	r3, [r6, #12]
 800a578:	061a      	lsls	r2, r3, #24
 800a57a:	d410      	bmi.n	800a59e <__swhatbuf_r+0x3e>
 800a57c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a580:	e00e      	b.n	800a5a0 <__swhatbuf_r+0x40>
 800a582:	466a      	mov	r2, sp
 800a584:	f000 f902 	bl	800a78c <_fstat_r>
 800a588:	2800      	cmp	r0, #0
 800a58a:	dbf2      	blt.n	800a572 <__swhatbuf_r+0x12>
 800a58c:	9a01      	ldr	r2, [sp, #4]
 800a58e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a596:	425a      	negs	r2, r3
 800a598:	415a      	adcs	r2, r3
 800a59a:	602a      	str	r2, [r5, #0]
 800a59c:	e7ee      	b.n	800a57c <__swhatbuf_r+0x1c>
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	6023      	str	r3, [r4, #0]
 800a5a4:	b016      	add	sp, #88	; 0x58
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}

0800a5a8 <__smakebuf_r>:
 800a5a8:	898b      	ldrh	r3, [r1, #12]
 800a5aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5ac:	079d      	lsls	r5, r3, #30
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	d507      	bpl.n	800a5c4 <__smakebuf_r+0x1c>
 800a5b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	2301      	movs	r3, #1
 800a5be:	6163      	str	r3, [r4, #20]
 800a5c0:	b002      	add	sp, #8
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	ab01      	add	r3, sp, #4
 800a5c6:	466a      	mov	r2, sp
 800a5c8:	f7ff ffca 	bl	800a560 <__swhatbuf_r>
 800a5cc:	9900      	ldr	r1, [sp, #0]
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff f987 	bl	80098e4 <_malloc_r>
 800a5d6:	b948      	cbnz	r0, 800a5ec <__smakebuf_r+0x44>
 800a5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5dc:	059a      	lsls	r2, r3, #22
 800a5de:	d4ef      	bmi.n	800a5c0 <__smakebuf_r+0x18>
 800a5e0:	f023 0303 	bic.w	r3, r3, #3
 800a5e4:	f043 0302 	orr.w	r3, r3, #2
 800a5e8:	81a3      	strh	r3, [r4, #12]
 800a5ea:	e7e3      	b.n	800a5b4 <__smakebuf_r+0xc>
 800a5ec:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <__smakebuf_r+0x7c>)
 800a5ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	6020      	str	r0, [r4, #0]
 800a5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f8:	81a3      	strh	r3, [r4, #12]
 800a5fa:	9b00      	ldr	r3, [sp, #0]
 800a5fc:	6163      	str	r3, [r4, #20]
 800a5fe:	9b01      	ldr	r3, [sp, #4]
 800a600:	6120      	str	r0, [r4, #16]
 800a602:	b15b      	cbz	r3, 800a61c <__smakebuf_r+0x74>
 800a604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a608:	4630      	mov	r0, r6
 800a60a:	f000 f8d1 	bl	800a7b0 <_isatty_r>
 800a60e:	b128      	cbz	r0, 800a61c <__smakebuf_r+0x74>
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	f023 0303 	bic.w	r3, r3, #3
 800a616:	f043 0301 	orr.w	r3, r3, #1
 800a61a:	81a3      	strh	r3, [r4, #12]
 800a61c:	89a0      	ldrh	r0, [r4, #12]
 800a61e:	4305      	orrs	r5, r0
 800a620:	81a5      	strh	r5, [r4, #12]
 800a622:	e7cd      	b.n	800a5c0 <__smakebuf_r+0x18>
 800a624:	0800a3b9 	.word	0x0800a3b9

0800a628 <_malloc_usable_size_r>:
 800a628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a62c:	1f18      	subs	r0, r3, #4
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bfbc      	itt	lt
 800a632:	580b      	ldrlt	r3, [r1, r0]
 800a634:	18c0      	addlt	r0, r0, r3
 800a636:	4770      	bx	lr

0800a638 <_raise_r>:
 800a638:	291f      	cmp	r1, #31
 800a63a:	b538      	push	{r3, r4, r5, lr}
 800a63c:	4604      	mov	r4, r0
 800a63e:	460d      	mov	r5, r1
 800a640:	d904      	bls.n	800a64c <_raise_r+0x14>
 800a642:	2316      	movs	r3, #22
 800a644:	6003      	str	r3, [r0, #0]
 800a646:	f04f 30ff 	mov.w	r0, #4294967295
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a64e:	b112      	cbz	r2, 800a656 <_raise_r+0x1e>
 800a650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a654:	b94b      	cbnz	r3, 800a66a <_raise_r+0x32>
 800a656:	4620      	mov	r0, r4
 800a658:	f000 f830 	bl	800a6bc <_getpid_r>
 800a65c:	462a      	mov	r2, r5
 800a65e:	4601      	mov	r1, r0
 800a660:	4620      	mov	r0, r4
 800a662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a666:	f000 b817 	b.w	800a698 <_kill_r>
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d00a      	beq.n	800a684 <_raise_r+0x4c>
 800a66e:	1c59      	adds	r1, r3, #1
 800a670:	d103      	bne.n	800a67a <_raise_r+0x42>
 800a672:	2316      	movs	r3, #22
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	2001      	movs	r0, #1
 800a678:	e7e7      	b.n	800a64a <_raise_r+0x12>
 800a67a:	2400      	movs	r4, #0
 800a67c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a680:	4628      	mov	r0, r5
 800a682:	4798      	blx	r3
 800a684:	2000      	movs	r0, #0
 800a686:	e7e0      	b.n	800a64a <_raise_r+0x12>

0800a688 <raise>:
 800a688:	4b02      	ldr	r3, [pc, #8]	; (800a694 <raise+0xc>)
 800a68a:	4601      	mov	r1, r0
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	f7ff bfd3 	b.w	800a638 <_raise_r>
 800a692:	bf00      	nop
 800a694:	20000024 	.word	0x20000024

0800a698 <_kill_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d07      	ldr	r5, [pc, #28]	; (800a6b8 <_kill_r+0x20>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	602b      	str	r3, [r5, #0]
 800a6a6:	f7f7 fd8f 	bl	80021c8 <_kill>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	d102      	bne.n	800a6b4 <_kill_r+0x1c>
 800a6ae:	682b      	ldr	r3, [r5, #0]
 800a6b0:	b103      	cbz	r3, 800a6b4 <_kill_r+0x1c>
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	bd38      	pop	{r3, r4, r5, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20000930 	.word	0x20000930

0800a6bc <_getpid_r>:
 800a6bc:	f7f7 bd7c 	b.w	80021b8 <_getpid>

0800a6c0 <__sread>:
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c8:	f000 f894 	bl	800a7f4 <_read_r>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	bfab      	itete	ge
 800a6d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a6d4:	181b      	addge	r3, r3, r0
 800a6d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6da:	bfac      	ite	ge
 800a6dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6de:	81a3      	strhlt	r3, [r4, #12]
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <__swrite>:
 800a6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e6:	461f      	mov	r7, r3
 800a6e8:	898b      	ldrh	r3, [r1, #12]
 800a6ea:	05db      	lsls	r3, r3, #23
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	d505      	bpl.n	800a700 <__swrite+0x1e>
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f000 f868 	bl	800a7d0 <_lseek_r>
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	4632      	mov	r2, r6
 800a70e:	463b      	mov	r3, r7
 800a710:	4628      	mov	r0, r5
 800a712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	f000 b817 	b.w	800a748 <_write_r>

0800a71a <__sseek>:
 800a71a:	b510      	push	{r4, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a722:	f000 f855 	bl	800a7d0 <_lseek_r>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	bf15      	itete	ne
 800a72c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a72e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a736:	81a3      	strheq	r3, [r4, #12]
 800a738:	bf18      	it	ne
 800a73a:	81a3      	strhne	r3, [r4, #12]
 800a73c:	bd10      	pop	{r4, pc}

0800a73e <__sclose>:
 800a73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a742:	f000 b813 	b.w	800a76c <_close_r>
	...

0800a748 <_write_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d07      	ldr	r5, [pc, #28]	; (800a768 <_write_r+0x20>)
 800a74c:	4604      	mov	r4, r0
 800a74e:	4608      	mov	r0, r1
 800a750:	4611      	mov	r1, r2
 800a752:	2200      	movs	r2, #0
 800a754:	602a      	str	r2, [r5, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	f7f7 fd6d 	bl	8002236 <_write>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_write_r+0x1e>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_write_r+0x1e>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20000930 	.word	0x20000930

0800a76c <_close_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4d06      	ldr	r5, [pc, #24]	; (800a788 <_close_r+0x1c>)
 800a770:	2300      	movs	r3, #0
 800a772:	4604      	mov	r4, r0
 800a774:	4608      	mov	r0, r1
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	f7f7 fd79 	bl	800226e <_close>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_close_r+0x1a>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_close_r+0x1a>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	20000930 	.word	0x20000930

0800a78c <_fstat_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d07      	ldr	r5, [pc, #28]	; (800a7ac <_fstat_r+0x20>)
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	4611      	mov	r1, r2
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	f7f7 fd74 	bl	8002286 <_fstat>
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	d102      	bne.n	800a7a8 <_fstat_r+0x1c>
 800a7a2:	682b      	ldr	r3, [r5, #0]
 800a7a4:	b103      	cbz	r3, 800a7a8 <_fstat_r+0x1c>
 800a7a6:	6023      	str	r3, [r4, #0]
 800a7a8:	bd38      	pop	{r3, r4, r5, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20000930 	.word	0x20000930

0800a7b0 <_isatty_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d06      	ldr	r5, [pc, #24]	; (800a7cc <_isatty_r+0x1c>)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	602b      	str	r3, [r5, #0]
 800a7bc:	f7f7 fd73 	bl	80022a6 <_isatty>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_isatty_r+0x1a>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_isatty_r+0x1a>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	20000930 	.word	0x20000930

0800a7d0 <_lseek_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d07      	ldr	r5, [pc, #28]	; (800a7f0 <_lseek_r+0x20>)
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	4611      	mov	r1, r2
 800a7da:	2200      	movs	r2, #0
 800a7dc:	602a      	str	r2, [r5, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f7f7 fd6c 	bl	80022bc <_lseek>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	d102      	bne.n	800a7ee <_lseek_r+0x1e>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	b103      	cbz	r3, 800a7ee <_lseek_r+0x1e>
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	bd38      	pop	{r3, r4, r5, pc}
 800a7f0:	20000930 	.word	0x20000930

0800a7f4 <_read_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4d07      	ldr	r5, [pc, #28]	; (800a814 <_read_r+0x20>)
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	4608      	mov	r0, r1
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	2200      	movs	r2, #0
 800a800:	602a      	str	r2, [r5, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f7f7 fcfa 	bl	80021fc <_read>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_read_r+0x1e>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_read_r+0x1e>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20000930 	.word	0x20000930

0800a818 <_init>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr

0800a824 <_fini>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr
